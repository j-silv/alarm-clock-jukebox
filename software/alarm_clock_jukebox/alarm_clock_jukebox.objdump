
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005b14 memsz 0x00005b14 flags r-x
    LOAD off    0x00006b34 vaddr 0x00015b34 paddr 0x000175d0 align 2**12
         filesz 0x00001a9c memsz 0x00001a9c flags rw-
    LOAD off    0x0000906c vaddr 0x0001906c paddr 0x0001906c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000058a0  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00015ae4  00015ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a9c  00015b34  000175d0  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0001906c  0001906c  0000906c  2**2
                  ALLOC, SMALL_DATA
  6 .MEMOIRE_ONCHIP 00000000  000191c0  000191c0  000085d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  000085f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000166a6  00000000  00000000  00009028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006079  00000000  00000000  0001f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000697c  00000000  00000000  00025747  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001590  00000000  00000000  0002c0c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002805  00000000  00000000  0002d654  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002fe59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000348a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000348c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000374e6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000374e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000374f3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000374f4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000374f5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000374f9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000374fd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00037501  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003750c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00037517  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00037522  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0003752d  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0003758e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00079ce4  00000000  00000000  0003cf28  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00015ae4 l    d  .rodata	00000000 .rodata
00015b34 l    d  .rwdata	00000000 .rwdata
0001906c l    d  .bss	00000000 .bss
000191c0 l    d  .MEMOIRE_ONCHIP	00000000 .MEMOIRE_ONCHIP
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0001027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000108b4 l     F .text	00000008 __fp_unlock
000108c8 l     F .text	0000019c __sinit.part.1
00010a64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015b64 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0001335c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013468 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013494 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00013580 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013660 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001374c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013920 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000175c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00013b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013ca0 l     F .text	00000034 alt_dev_reg
00016538 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013f94 l     F .text	0000020c altera_avalon_jtag_uart_irq
000141a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000147d8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014a18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014e8c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014fcc l     F .text	0000003c alt_get_errno
00015008 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00019094 g     O .bss	00000004 alt_instruction_exception_handler
00013308 g     F .text	00000054 _isatty_r
0001385c g     F .text	0000007c alt_main
00010748 g     F .text	000000c0 _puts_r
000190c0 g     O .bss	00000100 alt_irq
00013030 g     F .text	00000060 _lseek_r
000175d0 g       *ABS*	00000000 __flash_rwdata_start
000191c0 g       *ABS*	00000000 __alt_heap_start
000125e4 g     F .text	0000005c __sseek
00010c04 g     F .text	00000010 __sinit
00010a6c g     F .text	00000068 __sfmoreglue
000138fc g     F .text	00000024 __malloc_unlock
00011cd0 g     F .text	0000015c memmove
00010bec g     F .text	00000018 _cleanup
000153c4 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000132ac g     F .text	0000005c _fstat_r
00019078 g     O .bss	00000004 errno
00012560 g     F .text	00000008 __seofread
00019080 g     O .bss	00000004 alt_argv
0001f598 g       *ABS*	00000000 _gp
000163b8 g     O .rwdata	00000180 alt_fd_list
000153e8 g     F .text	00000090 alt_find_dev
00011b88 g     F .text	00000148 memcpy
000108bc g     F .text	0000000c _cleanup_r
00014f50 g     F .text	0000007c alt_io_redirect
00015ae4 g       *ABS*	00000000 __DTOR_END__
00010808 g     F .text	00000014 puts
000156b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014398 g     F .text	0000021c altera_avalon_jtag_uart_read
0001068c g     F .text	00000064 .hidden __udivsi3
000135bc g     F .text	000000a4 isatty
00015624 g     F .text	00000090 alt_icache_flush
00019074 g     O .bss	00000004 __malloc_top_pad
00010c54 g     F .text	000004bc __sfvwrite_r
000124b8 g     F .text	00000054 _sbrk_r
0001324c g     F .text	00000060 _read_r
000175b8 g     O .rwdata	00000004 alt_max_fd
00012850 g     F .text	000000f0 _fclose_r
00012bcc g     F .text	00000030 fflush
00019070 g     O .bss	00000004 __malloc_max_sbrked_mem
00013788 g     F .text	000000d4 lseek
00017598 g     O .rwdata	00000004 _global_impure_ptr
00011f54 g     F .text	00000564 _realloc_r
000191c0 g       *ABS*	00000000 __bss_end
00014d9c g     F .text	000000f0 alt_iic_isr_register
000152bc g     F .text	00000108 alt_tick
00010c24 g     F .text	00000018 __fp_lock_all
00014d50 g     F .text	0000004c alt_ic_irq_enabled
00015220 g     F .text	0000009c alt_alarm_stop
00019088 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00016390 g     O .rwdata	00000028 alt_dev_null
00015b34 g     O .rwdata	00000030 SEG_TABLE
000149f8 g     F .text	00000020 alt_dcache_flush_all
000175d0 g       *ABS*	00000000 __ram_rwdata_end
000175b0 g     O .rwdata	00000008 alt_dev_list
00013ba8 g     F .text	000000f8 write
00015b34 g       *ABS*	00000000 __ram_rodata_end
000134d0 g     F .text	000000b0 fstat
000106f0 g     F .text	00000058 .hidden __umodsi3
000191c0 g       *ABS*	00000000 end
00013ed4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00015ae4 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00014850 g     F .text	0000007c alt_avalon_timer_sc_init
000145b4 g     F .text	00000224 altera_avalon_jtag_uart_write
00010c14 g     F .text	00000004 __sfp_lock_acquire
00011aa4 g     F .text	000000e4 memchr
00012d20 g     F .text	00000310 _free_r
00015930 g     F .text	00000180 __call_exitprocs
000175a0 g     O .rwdata	00000004 __malloc_sbrk_base
00010244 g     F .text	0000003c _start
0001908c g     O .bss	00000004 _alt_tick_rate
00019090 g     O .bss	00000004 _alt_nticks
0001395c g     F .text	000000fc read
00013d0c g     F .text	00000064 alt_sys_init
00015818 g     F .text	00000118 __register_exitproc
00014240 g     F .text	00000068 altera_avalon_jtag_uart_close
00015b34 g       *ABS*	00000000 __ram_rwdata_start
00015ae4 g       *ABS*	00000000 __ram_rodata_start
00019098 g     O .bss	00000028 __malloc_current_mallinfo
00013d70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015580 g     F .text	000000a4 alt_get_fd
000127fc g     F .text	00000054 _close_r
0001579c g     F .text	0000007c memcmp
00013e30 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000191c0 g       *ABS*	00000000 __alt_stack_base
00013e80 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000126a8 g     F .text	00000154 __swsetup_r
00010ad4 g     F .text	00000118 __sfp
00015f88 g     O .rwdata	00000408 __malloc_av_
00010c20 g     F .text	00000004 __sinit_lock_release
0001250c g     F .text	00000054 __sread
00015478 g     F .text	00000108 alt_find_file
00014a54 g     F .text	000000a4 alt_dev_llist_insert
000138d8 g     F .text	00000024 __malloc_lock
00013abc g     F .text	000000b0 sbrk
00012b70 g     F .text	0000005c _fflush_r
0001906c g       *ABS*	00000000 __bss_start
00011e2c g     F .text	00000128 memset
00010280 g     F .text	00000314 main
00019084 g     O .bss	00000004 alt_envp
0001906c g     O .bss	00000004 __malloc_max_total_mem
00013dd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00012640 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00012940 g     F .text	00000014 fclose
00011298 g     F .text	0000080c _malloc_r
000175bc g     O .rwdata	00000004 alt_errno
00011110 g     F .text	000000c4 _fwalk
00010594 g     F .text	00000084 .hidden __divsi3
00012bfc g     F .text	00000124 _malloc_trim_r
00015ae4 g       *ABS*	00000000 __CTOR_END__
00015ae4 g       *ABS*	00000000 __flash_rodata_start
00015ae4 g       *ABS*	00000000 __DTOR_LIST__
00013cd4 g     F .text	00000038 alt_irq_init
00013a58 g     F .text	00000064 alt_release_fd
00015750 g     F .text	00000014 atexit
00012648 g     F .text	00000060 _write_r
00010000 g       *ABS*	00000000 __alt_mem_MEMOIRE_ONCHIP
0001759c g     O .rwdata	00000004 _impure_ptr
0001907c g     O .bss	00000004 alt_argc
00012954 g     F .text	0000021c __sflush_r
00014b58 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010c3c g     F .text	00000018 __fp_unlock_all
000175a8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014bec g     F .text	00000050 alt_ic_isr_register
000175d0 g       *ABS*	00000000 _edata
000191c0 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
000142a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014cc4 g     F .text	0000008c alt_ic_irq_disable
00012568 g     F .text	0000007c __swrite
000175a4 g     O .rwdata	00000004 __malloc_trim_threshold
00015764 g     F .text	00000038 exit
000111d4 g     F .text	000000c4 _fwalk_reent
00010618 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010c18 g     F .text	00000004 __sfp_lock_release
00015ab0 g     F .text	00000034 _exit
000148cc g     F .text	0000012c alt_alarm_start
00013090 g     F .text	000001bc __smakebuf_r
0001081c g     F .text	00000098 strlen
000150cc g     F .text	00000154 open
00014bb8 g     F .text	00000034 alt_icache_flush_all
000175c4 g     O .rwdata	00000004 alt_priority_mask
00014c3c g     F .text	00000088 alt_ic_irq_enable
000175c8 g     O .rwdata	00000008 alt_alarm_list
00014af8 g     F .text	00000060 _do_ctors
00013398 g     F .text	000000d0 close
000136c8 g     F .text	00000084 alt_load
00010c1c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff0a6c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a43004 	addi	r2,r2,-28480
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a43004 	addi	r2,r2,-28480
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff0b94>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff0b88>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a6bf17 	ldw	r2,-25860(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a6bf17 	ldw	r2,-25860(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10244:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1024c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10250:	d6bd6614 	ori	gp,gp,62872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10258:	10a41b14 	ori	r2,r2,36972

    movhi r3, %hi(__bss_end)
   1025c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10260:	18e47014 	ori	r3,r3,37312

    beq r2, r3, 1f
   10264:	10c00326 	beq	r2,r3,10274 <_start+0x30>

0:
    stw zero, (r2)
   10268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10270:	10fffd36 	bltu	r2,r3,10268 <_gp+0xffff0cd0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10274:	00136c80 	call	136c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10278:	001385c0 	call	1385c <alt_main>

0001027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1027c:	003fff06 	br	1027c <_gp+0xffff0ce4>

00010280 <main>:
#include "main.h"

int main(void) {
   10280:	deffeb04 	addi	sp,sp,-84
   10284:	dfc01415 	stw	ra,80(sp)
   10288:	df001315 	stw	fp,76(sp)
   1028c:	df001304 	addi	fp,sp,76

  int SW_value; 		 // KEY_value;
  int press = 0;    // tactile button value
   10290:	e03ff215 	stw	zero,-56(fp)

  int HEX_bits = 0x0; // initial pattern for HEX displays
   10294:	e03ff315 	stw	zero,-52(fp)
  int LED_bits = 0x0; // initial pattern for LED lights
   10298:	e03ff415 	stw	zero,-48(fp)

  // operand1 (op1) sont les 5 bits LSBs des switches
  // operand2 (op2) sont les 5 bits MSBs des switches
  int op1, op2 = 0x0;
   1029c:	e03ff515 	stw	zero,-44(fp)

  // nous n'avons pas besoin d'un op2 mask car on va decaler
  // a droite pour isoler ces bits MSBs
  int op1_mask = 0b0000011111;
   102a0:	008007c4 	movi	r2,31
   102a4:	e0bff615 	stw	r2,-40(fp)

  // valeurs qu'on affiche sur notre dev kit
  // si signe = 1, alors le 4ieme hex affiche negatif, sinon
  // il n'est pas allume
  int signe, val_absolu, reste = 0;
   102a8:	e03fef15 	stw	zero,-68(fp)

  // on a besoin d'une valeur temp. pour determiner 
  // le signe du resultat (mult, div, sub) et aussi pour 
  // determiner le reste
  int val_temp = 0; 
   102ac:	e03ff715 	stw	zero,-36(fp)

  // position [2] correspond a le MSB de l'afficheur HEX
  int resultat_bcd[3] = {0x0,0x0,0x0};
   102b0:	e03ffa15 	stw	zero,-24(fp)
   102b4:	e03ffb15 	stw	zero,-20(fp)
   102b8:	e03ffc15 	stw	zero,-16(fp)
  int resultat_LEDseg[3] = {0x0,0x0,0x0};
   102bc:	e03ffd15 	stw	zero,-12(fp)
   102c0:	e03ffe15 	stw	zero,-8(fp)
   102c4:	e03fff15 	stw	zero,-4(fp)
  int LEDseg_buffer = 0x0;
   102c8:	e03ff015 	stw	zero,-64(fp)

  // variable de comptage
  int i = 0;
   102cc:	e03ff115 	stw	zero,-60(fp)

  printf("Hello from Nios II!\n");
   102d0:	01000074 	movhi	r4,1
   102d4:	2116b904 	addi	r4,r4,23268
   102d8:	00108080 	call	10808 <puts>
  //return 0;

  while(1) {

    // clear buffer chaque fois dans la boucle
    LEDseg_buffer = 0x0;
   102dc:	e03ff015 	stw	zero,-64(fp)

    // read the SW slider switch values
    SW_value = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
   102e0:	008000b4 	movhi	r2,2
   102e4:	10842804 	addi	r2,r2,4256
   102e8:	10800037 	ldwio	r2,0(r2)
   102ec:	e0bff815 	stw	r2,-32(fp)

    // separer le resultat dans 2 operands
    op1 = (SW_value & op1_mask);
   102f0:	e0fff817 	ldw	r3,-32(fp)
   102f4:	e0bff617 	ldw	r2,-40(fp)
   102f8:	1884703a 	and	r2,r3,r2
   102fc:	e0bff915 	stw	r2,-28(fp)
    op2 = (SW_value >> 5);
   10300:	e0bff817 	ldw	r2,-32(fp)
   10304:	1005d17a 	srai	r2,r2,5
   10308:	e0bff515 	stw	r2,-44(fp)
    // le temps qu'on appuie sur un des bouton poussoirs, il va tout de suite
    // penser que les 2 boutons sont a 0 (clear edge_cap mets automatiquement
    // les bits a 0, et vu que si on lache pas le bouton il y aura pas de nouveau donnes
    // sur le bouton edge reg, on sera bloque a ADD!
    // on veut plutot juste lire les donnes sur le bouton!
    press = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
   1030c:	008000b4 	movhi	r2,2
   10310:	10842804 	addi	r2,r2,4256
   10314:	10800037 	ldwio	r2,0(r2)
   10318:	e0bff215 	stw	r2,-56(fp)

    switch(press) {
   1031c:	e0bff217 	ldw	r2,-56(fp)
   10320:	10c00060 	cmpeqi	r3,r2,1
   10324:	1800101e 	bne	r3,zero,10368 <main+0xe8>
   10328:	10c00088 	cmpgei	r3,r2,2
   1032c:	1800021e 	bne	r3,zero,10338 <main+0xb8>
   10330:	10000626 	beq	r2,zero,1034c <main+0xcc>
   10334:	00003706 	br	10414 <main+0x194>
   10338:	10c000a0 	cmpeqi	r3,r2,2
   1033c:	18001a1e 	bne	r3,zero,103a8 <main+0x128>
   10340:	108000e0 	cmpeqi	r2,r2,3
   10344:	1000231e 	bne	r2,zero,103d4 <main+0x154>
   10348:	00003206 	br	10414 <main+0x194>

        // ce n'etait pas specifie si on utilise du binaire en complement a 2, donc
        // pour cette excercice je vais dire que les operands ne le sont pas et qu'ils sont juste
        // positifs... par consequent une addition sera toujours positifs
        // nous n'aurons jamais les chiffres negatifs
        val_absolu = op1 + op2;
   1034c:	e0fff917 	ldw	r3,-28(fp)
   10350:	e0bff517 	ldw	r2,-44(fp)
   10354:	1885883a 	add	r2,r3,r2
   10358:	e0bfee15 	stw	r2,-72(fp)
        signe = 0;
   1035c:	e03fed15 	stw	zero,-76(fp)
        // vu que les operands peuvent pas etre plus que 31 chacun,
        // ce n'est pas possible de depasser 999 pour le resultat
        reste = 0;
   10360:	e03fef15 	stw	zero,-68(fp)

        break;
   10364:	00002e06 	br	10420 <main+0x1a0>

      case SUB :
        val_temp = op1 - op2;
   10368:	e0fff917 	ldw	r3,-28(fp)
   1036c:	e0bff517 	ldw	r2,-44(fp)
   10370:	1885c83a 	sub	r2,r3,r2
   10374:	e0bff715 	stw	r2,-36(fp)
        if (val_temp < 0 ) {
   10378:	e0bff717 	ldw	r2,-36(fp)
   1037c:	1000030e 	bge	r2,zero,1038c <main+0x10c>
          signe = 1;
   10380:	00800044 	movi	r2,1
   10384:	e0bfed15 	stw	r2,-76(fp)
   10388:	00000106 	br	10390 <main+0x110>
        }
        else {
          signe = 0;
   1038c:	e03fed15 	stw	zero,-76(fp)
        }
        val_absolu = abs(val_temp);
   10390:	e0bff717 	ldw	r2,-36(fp)
   10394:	1000010e 	bge	r2,zero,1039c <main+0x11c>
   10398:	0085c83a 	sub	r2,zero,r2
   1039c:	e0bfee15 	stw	r2,-72(fp)
        // pas possible de depasser la limite permissible par les 2 operands
        reste = 0;
   103a0:	e03fef15 	stw	zero,-68(fp)
        break;
   103a4:	00001e06 	br	10420 <main+0x1a0>

      case DIV :
        val_absolu = op1/op2;
   103a8:	e17ff517 	ldw	r5,-44(fp)
   103ac:	e13ff917 	ldw	r4,-28(fp)
   103b0:	00105940 	call	10594 <__divsi3>
   103b4:	e0bfee15 	stw	r2,-72(fp)
        reste = op1 % op2; // modulu operator
   103b8:	e0bff917 	ldw	r2,-28(fp)
   103bc:	e17ff517 	ldw	r5,-44(fp)
   103c0:	1009883a 	mov	r4,r2
   103c4:	00106180 	call	10618 <__modsi3>
   103c8:	e0bfef15 	stw	r2,-68(fp)
        //printf("val_temp = %d\nreste = %d\n", val_absolu,reste);
        signe = 0;
   103cc:	e03fed15 	stw	zero,-76(fp)
        break;
   103d0:	00001306 	br	10420 <main+0x1a0>

      case MULT :
        val_temp = op1*op2;
   103d4:	e0fff917 	ldw	r3,-28(fp)
   103d8:	e0bff517 	ldw	r2,-44(fp)
   103dc:	1885383a 	mul	r2,r3,r2
   103e0:	e0bff715 	stw	r2,-36(fp)
        if (val_temp < 0 ) {
   103e4:	e0bff717 	ldw	r2,-36(fp)
   103e8:	1000030e 	bge	r2,zero,103f8 <main+0x178>
          signe = 1;
   103ec:	00800044 	movi	r2,1
   103f0:	e0bfed15 	stw	r2,-76(fp)
   103f4:	00000106 	br	103fc <main+0x17c>
        }
        else {
          signe = 0;
   103f8:	e03fed15 	stw	zero,-76(fp)
        }
        val_absolu = abs(val_temp);
   103fc:	e0bff717 	ldw	r2,-36(fp)
   10400:	1000010e 	bge	r2,zero,10408 <main+0x188>
   10404:	0085c83a 	sub	r2,zero,r2
   10408:	e0bfee15 	stw	r2,-72(fp)
        // pas possible de depasser la limite permissible par les 2 operands
        reste = 0;
   1040c:	e03fef15 	stw	zero,-68(fp)
        break;
   10410:	00000306 	br	10420 <main+0x1a0>

      default :
        val_absolu = 0;
   10414:	e03fee15 	stw	zero,-72(fp)
        signe = 0;
   10418:	e03fed15 	stw	zero,-76(fp)
        reste = 0;
   1041c:	e03fef15 	stw	zero,-68(fp)
    }

    // conversion dec a BCD (on commence avec le MSB)
    resultat_bcd[2] = val_absolu/100;
   10420:	e0bfee17 	ldw	r2,-72(fp)
   10424:	01401904 	movi	r5,100
   10428:	1009883a 	mov	r4,r2
   1042c:	00105940 	call	10594 <__divsi3>
   10430:	e0bffc15 	stw	r2,-16(fp)
    resultat_bcd[1] = (val_absolu - resultat_bcd[2]*100)/10;
   10434:	e0bffc17 	ldw	r2,-16(fp)
   10438:	10ffe724 	muli	r3,r2,-100
   1043c:	e0bfee17 	ldw	r2,-72(fp)
   10440:	1885883a 	add	r2,r3,r2
   10444:	01400284 	movi	r5,10
   10448:	1009883a 	mov	r4,r2
   1044c:	00105940 	call	10594 <__divsi3>
   10450:	e0bffb15 	stw	r2,-20(fp)
    resultat_bcd[0] = (val_absolu - (resultat_bcd[2]*100 + resultat_bcd[1]*10))/1;
   10454:	e0bffc17 	ldw	r2,-16(fp)
   10458:	10c01924 	muli	r3,r2,100
   1045c:	e0bffb17 	ldw	r2,-20(fp)
   10460:	108002a4 	muli	r2,r2,10
   10464:	1885883a 	add	r2,r3,r2
   10468:	e0ffee17 	ldw	r3,-72(fp)
   1046c:	1885c83a 	sub	r2,r3,r2
   10470:	e0bffa15 	stw	r2,-24(fp)
    bcd[0] = (512 - (5*100 + 1*10))/1 = 2
    */

    // conversion BCD a LED seg et construction du buffer
    // shift par 8 bits chaque fois pour cibler chaque chiffre de l'afficheur hex
    for (i=0; i < 3; i++) {
   10474:	e03ff115 	stw	zero,-60(fp)
   10478:	00002406 	br	1050c <main+0x28c>
      // resultat_bcd[i] correspond bien a une position du SEG_TABLE et cette
      // position est la valeur BCD!
      resultat_LEDseg[i] = SEG_TABLE[(resultat_bcd[i])];
   1047c:	e0bff117 	ldw	r2,-60(fp)
   10480:	1085883a 	add	r2,r2,r2
   10484:	1085883a 	add	r2,r2,r2
   10488:	e0ffed04 	addi	r3,fp,-76
   1048c:	1885883a 	add	r2,r3,r2
   10490:	10800d04 	addi	r2,r2,52
   10494:	10c00017 	ldw	r3,0(r2)
   10498:	00800074 	movhi	r2,1
   1049c:	1096cd04 	addi	r2,r2,23348
   104a0:	18c7883a 	add	r3,r3,r3
   104a4:	18c7883a 	add	r3,r3,r3
   104a8:	10c5883a 	add	r2,r2,r3
   104ac:	10c00017 	ldw	r3,0(r2)
   104b0:	e0bff117 	ldw	r2,-60(fp)
   104b4:	1085883a 	add	r2,r2,r2
   104b8:	1085883a 	add	r2,r2,r2
   104bc:	e13fed04 	addi	r4,fp,-76
   104c0:	2085883a 	add	r2,r4,r2
   104c4:	10801004 	addi	r2,r2,64
   104c8:	10c00015 	stw	r3,0(r2)
      LEDseg_buffer |= (resultat_LEDseg[i] << 8*i);
   104cc:	e0bff117 	ldw	r2,-60(fp)
   104d0:	1085883a 	add	r2,r2,r2
   104d4:	1085883a 	add	r2,r2,r2
   104d8:	e0ffed04 	addi	r3,fp,-76
   104dc:	1885883a 	add	r2,r3,r2
   104e0:	10801004 	addi	r2,r2,64
   104e4:	10c00017 	ldw	r3,0(r2)
   104e8:	e0bff117 	ldw	r2,-60(fp)
   104ec:	100490fa 	slli	r2,r2,3
   104f0:	1884983a 	sll	r2,r3,r2
   104f4:	e0fff017 	ldw	r3,-64(fp)
   104f8:	1884b03a 	or	r2,r3,r2
   104fc:	e0bff015 	stw	r2,-64(fp)
    bcd[0] = (512 - (5*100 + 1*10))/1 = 2
    */

    // conversion BCD a LED seg et construction du buffer
    // shift par 8 bits chaque fois pour cibler chaque chiffre de l'afficheur hex
    for (i=0; i < 3; i++) {
   10500:	e0bff117 	ldw	r2,-60(fp)
   10504:	10800044 	addi	r2,r2,1
   10508:	e0bff115 	stw	r2,-60(fp)
   1050c:	e0bff117 	ldw	r2,-60(fp)
   10510:	108000d0 	cmplti	r2,r2,3
   10514:	103fd91e 	bne	r2,zero,1047c <_gp+0xffff0ee4>
      LEDseg_buffer |= (resultat_LEDseg[i] << 8*i);
    }

    // si l'operation mathematique en haut a donne un signe negatif (signe == 1)
    // alors nous mettons le chiffre approprie des afficheurs hex a un signe moins
    if (signe == 1) {
   10518:	e0bfed17 	ldw	r2,-76(fp)
   1051c:	10800058 	cmpnei	r2,r2,1
   10520:	1000081e 	bne	r2,zero,10544 <main+0x2c4>
      LEDseg_buffer |= (SEG_TABLE[11] << 3*8);
   10524:	00800074 	movhi	r2,1
   10528:	1096cd04 	addi	r2,r2,23348
   1052c:	10800b17 	ldw	r2,44(r2)
   10530:	1004963a 	slli	r2,r2,24
   10534:	e0fff017 	ldw	r3,-64(fp)
   10538:	1884b03a 	or	r2,r3,r2
   1053c:	e0bff015 	stw	r2,-64(fp)
   10540:	00000706 	br	10560 <main+0x2e0>
    }

    // sinon le chiffre va etre etteint
    else {
      LEDseg_buffer |= (SEG_TABLE[10] << 3*8);
   10544:	00800074 	movhi	r2,1
   10548:	1096cd04 	addi	r2,r2,23348
   1054c:	10800a17 	ldw	r2,40(r2)
   10550:	1004963a 	slli	r2,r2,24
   10554:	e0fff017 	ldw	r3,-64(fp)
   10558:	1884b03a 	or	r2,r3,r2
   1055c:	e0bff015 	stw	r2,-64(fp)
    }

    // LEDseg_buffer est le resultat final (LED seg encoded)
    HEX_bits = LEDseg_buffer;
   10560:	e0bff017 	ldw	r2,-64(fp)
   10564:	e0bff315 	stw	r2,-52(fp)

    // nous pouvons directemment charger le banc de LEDs avec le resultat
    LED_bits = reste;
   10568:	e0bfef17 	ldw	r2,-68(fp)
   1056c:	e0bff415 	stw	r2,-48(fp)

    // display pattern on HEX3 ... HEX0
    IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, HEX_bits);
   10570:	008000b4 	movhi	r2,2
   10574:	10841c04 	addi	r2,r2,4208
   10578:	e0fff317 	ldw	r3,-52(fp)
   1057c:	10c00035 	stwio	r3,0(r2)
    // display pattern on LEDs
    IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, LED_bits);
   10580:	008000b4 	movhi	r2,2
   10584:	10842404 	addi	r2,r2,4240
   10588:	e0fff417 	ldw	r3,-48(fp)
   1058c:	10c00035 	stwio	r3,0(r2)

  }  
   10590:	003f5206 	br	102dc <_gp+0xffff0d44>

00010594 <__divsi3>:
   10594:	20001b16 	blt	r4,zero,10604 <__divsi3+0x70>
   10598:	000f883a 	mov	r7,zero
   1059c:	28001616 	blt	r5,zero,105f8 <__divsi3+0x64>
   105a0:	200d883a 	mov	r6,r4
   105a4:	29001a2e 	bgeu	r5,r4,10610 <__divsi3+0x7c>
   105a8:	00800804 	movi	r2,32
   105ac:	00c00044 	movi	r3,1
   105b0:	00000106 	br	105b8 <__divsi3+0x24>
   105b4:	10000d26 	beq	r2,zero,105ec <__divsi3+0x58>
   105b8:	294b883a 	add	r5,r5,r5
   105bc:	10bfffc4 	addi	r2,r2,-1
   105c0:	18c7883a 	add	r3,r3,r3
   105c4:	293ffb36 	bltu	r5,r4,105b4 <_gp+0xffff101c>
   105c8:	0005883a 	mov	r2,zero
   105cc:	18000726 	beq	r3,zero,105ec <__divsi3+0x58>
   105d0:	0005883a 	mov	r2,zero
   105d4:	31400236 	bltu	r6,r5,105e0 <__divsi3+0x4c>
   105d8:	314dc83a 	sub	r6,r6,r5
   105dc:	10c4b03a 	or	r2,r2,r3
   105e0:	1806d07a 	srli	r3,r3,1
   105e4:	280ad07a 	srli	r5,r5,1
   105e8:	183ffa1e 	bne	r3,zero,105d4 <_gp+0xffff103c>
   105ec:	38000126 	beq	r7,zero,105f4 <__divsi3+0x60>
   105f0:	0085c83a 	sub	r2,zero,r2
   105f4:	f800283a 	ret
   105f8:	014bc83a 	sub	r5,zero,r5
   105fc:	39c0005c 	xori	r7,r7,1
   10600:	003fe706 	br	105a0 <_gp+0xffff1008>
   10604:	0109c83a 	sub	r4,zero,r4
   10608:	01c00044 	movi	r7,1
   1060c:	003fe306 	br	1059c <_gp+0xffff1004>
   10610:	00c00044 	movi	r3,1
   10614:	003fee06 	br	105d0 <_gp+0xffff1038>

00010618 <__modsi3>:
   10618:	20001716 	blt	r4,zero,10678 <__modsi3+0x60>
   1061c:	000f883a 	mov	r7,zero
   10620:	2005883a 	mov	r2,r4
   10624:	28001216 	blt	r5,zero,10670 <__modsi3+0x58>
   10628:	2900162e 	bgeu	r5,r4,10684 <__modsi3+0x6c>
   1062c:	01800804 	movi	r6,32
   10630:	00c00044 	movi	r3,1
   10634:	00000106 	br	1063c <__modsi3+0x24>
   10638:	30000a26 	beq	r6,zero,10664 <__modsi3+0x4c>
   1063c:	294b883a 	add	r5,r5,r5
   10640:	31bfffc4 	addi	r6,r6,-1
   10644:	18c7883a 	add	r3,r3,r3
   10648:	293ffb36 	bltu	r5,r4,10638 <_gp+0xffff10a0>
   1064c:	18000526 	beq	r3,zero,10664 <__modsi3+0x4c>
   10650:	1806d07a 	srli	r3,r3,1
   10654:	11400136 	bltu	r2,r5,1065c <__modsi3+0x44>
   10658:	1145c83a 	sub	r2,r2,r5
   1065c:	280ad07a 	srli	r5,r5,1
   10660:	183ffb1e 	bne	r3,zero,10650 <_gp+0xffff10b8>
   10664:	38000126 	beq	r7,zero,1066c <__modsi3+0x54>
   10668:	0085c83a 	sub	r2,zero,r2
   1066c:	f800283a 	ret
   10670:	014bc83a 	sub	r5,zero,r5
   10674:	003fec06 	br	10628 <_gp+0xffff1090>
   10678:	0109c83a 	sub	r4,zero,r4
   1067c:	01c00044 	movi	r7,1
   10680:	003fe706 	br	10620 <_gp+0xffff1088>
   10684:	00c00044 	movi	r3,1
   10688:	003ff106 	br	10650 <_gp+0xffff10b8>

0001068c <__udivsi3>:
   1068c:	200d883a 	mov	r6,r4
   10690:	2900152e 	bgeu	r5,r4,106e8 <__udivsi3+0x5c>
   10694:	28001416 	blt	r5,zero,106e8 <__udivsi3+0x5c>
   10698:	00800804 	movi	r2,32
   1069c:	00c00044 	movi	r3,1
   106a0:	00000206 	br	106ac <__udivsi3+0x20>
   106a4:	10000e26 	beq	r2,zero,106e0 <__udivsi3+0x54>
   106a8:	28000516 	blt	r5,zero,106c0 <__udivsi3+0x34>
   106ac:	294b883a 	add	r5,r5,r5
   106b0:	10bfffc4 	addi	r2,r2,-1
   106b4:	18c7883a 	add	r3,r3,r3
   106b8:	293ffa36 	bltu	r5,r4,106a4 <_gp+0xffff110c>
   106bc:	18000826 	beq	r3,zero,106e0 <__udivsi3+0x54>
   106c0:	0005883a 	mov	r2,zero
   106c4:	31400236 	bltu	r6,r5,106d0 <__udivsi3+0x44>
   106c8:	314dc83a 	sub	r6,r6,r5
   106cc:	10c4b03a 	or	r2,r2,r3
   106d0:	1806d07a 	srli	r3,r3,1
   106d4:	280ad07a 	srli	r5,r5,1
   106d8:	183ffa1e 	bne	r3,zero,106c4 <_gp+0xffff112c>
   106dc:	f800283a 	ret
   106e0:	0005883a 	mov	r2,zero
   106e4:	f800283a 	ret
   106e8:	00c00044 	movi	r3,1
   106ec:	003ff406 	br	106c0 <_gp+0xffff1128>

000106f0 <__umodsi3>:
   106f0:	2005883a 	mov	r2,r4
   106f4:	2900122e 	bgeu	r5,r4,10740 <__umodsi3+0x50>
   106f8:	28001116 	blt	r5,zero,10740 <__umodsi3+0x50>
   106fc:	01800804 	movi	r6,32
   10700:	00c00044 	movi	r3,1
   10704:	00000206 	br	10710 <__umodsi3+0x20>
   10708:	30000c26 	beq	r6,zero,1073c <__umodsi3+0x4c>
   1070c:	28000516 	blt	r5,zero,10724 <__umodsi3+0x34>
   10710:	294b883a 	add	r5,r5,r5
   10714:	31bfffc4 	addi	r6,r6,-1
   10718:	18c7883a 	add	r3,r3,r3
   1071c:	293ffa36 	bltu	r5,r4,10708 <_gp+0xffff1170>
   10720:	18000626 	beq	r3,zero,1073c <__umodsi3+0x4c>
   10724:	1806d07a 	srli	r3,r3,1
   10728:	11400136 	bltu	r2,r5,10730 <__umodsi3+0x40>
   1072c:	1145c83a 	sub	r2,r2,r5
   10730:	280ad07a 	srli	r5,r5,1
   10734:	183ffb1e 	bne	r3,zero,10724 <_gp+0xffff118c>
   10738:	f800283a 	ret
   1073c:	f800283a 	ret
   10740:	00c00044 	movi	r3,1
   10744:	003ff706 	br	10724 <_gp+0xffff118c>

00010748 <_puts_r>:
   10748:	defff604 	addi	sp,sp,-40
   1074c:	dc000715 	stw	r16,28(sp)
   10750:	2021883a 	mov	r16,r4
   10754:	2809883a 	mov	r4,r5
   10758:	dc400815 	stw	r17,32(sp)
   1075c:	dfc00915 	stw	ra,36(sp)
   10760:	2823883a 	mov	r17,r5
   10764:	001081c0 	call	1081c <strlen>
   10768:	10c00044 	addi	r3,r2,1
   1076c:	d8800115 	stw	r2,4(sp)
   10770:	00800074 	movhi	r2,1
   10774:	1096be04 	addi	r2,r2,23288
   10778:	d8800215 	stw	r2,8(sp)
   1077c:	00800044 	movi	r2,1
   10780:	d8800315 	stw	r2,12(sp)
   10784:	00800084 	movi	r2,2
   10788:	dc400015 	stw	r17,0(sp)
   1078c:	d8c00615 	stw	r3,24(sp)
   10790:	dec00415 	stw	sp,16(sp)
   10794:	d8800515 	stw	r2,20(sp)
   10798:	80000226 	beq	r16,zero,107a4 <_puts_r+0x5c>
   1079c:	80800e17 	ldw	r2,56(r16)
   107a0:	10001426 	beq	r2,zero,107f4 <_puts_r+0xac>
   107a4:	81400217 	ldw	r5,8(r16)
   107a8:	2880030b 	ldhu	r2,12(r5)
   107ac:	10c8000c 	andi	r3,r2,8192
   107b0:	1800061e 	bne	r3,zero,107cc <_puts_r+0x84>
   107b4:	29001917 	ldw	r4,100(r5)
   107b8:	00f7ffc4 	movi	r3,-8193
   107bc:	10880014 	ori	r2,r2,8192
   107c0:	20c6703a 	and	r3,r4,r3
   107c4:	2880030d 	sth	r2,12(r5)
   107c8:	28c01915 	stw	r3,100(r5)
   107cc:	d9800404 	addi	r6,sp,16
   107d0:	8009883a 	mov	r4,r16
   107d4:	0010c540 	call	10c54 <__sfvwrite_r>
   107d8:	1000091e 	bne	r2,zero,10800 <_puts_r+0xb8>
   107dc:	00800284 	movi	r2,10
   107e0:	dfc00917 	ldw	ra,36(sp)
   107e4:	dc400817 	ldw	r17,32(sp)
   107e8:	dc000717 	ldw	r16,28(sp)
   107ec:	dec00a04 	addi	sp,sp,40
   107f0:	f800283a 	ret
   107f4:	8009883a 	mov	r4,r16
   107f8:	0010c040 	call	10c04 <__sinit>
   107fc:	003fe906 	br	107a4 <_gp+0xffff120c>
   10800:	00bfffc4 	movi	r2,-1
   10804:	003ff606 	br	107e0 <_gp+0xffff1248>

00010808 <puts>:
   10808:	00800074 	movhi	r2,1
   1080c:	109d6704 	addi	r2,r2,30108
   10810:	200b883a 	mov	r5,r4
   10814:	11000017 	ldw	r4,0(r2)
   10818:	00107481 	jmpi	10748 <_puts_r>

0001081c <strlen>:
   1081c:	208000cc 	andi	r2,r4,3
   10820:	10002026 	beq	r2,zero,108a4 <strlen+0x88>
   10824:	20800007 	ldb	r2,0(r4)
   10828:	10002026 	beq	r2,zero,108ac <strlen+0x90>
   1082c:	2005883a 	mov	r2,r4
   10830:	00000206 	br	1083c <strlen+0x20>
   10834:	10c00007 	ldb	r3,0(r2)
   10838:	18001826 	beq	r3,zero,1089c <strlen+0x80>
   1083c:	10800044 	addi	r2,r2,1
   10840:	10c000cc 	andi	r3,r2,3
   10844:	183ffb1e 	bne	r3,zero,10834 <_gp+0xffff129c>
   10848:	10c00017 	ldw	r3,0(r2)
   1084c:	01ffbff4 	movhi	r7,65279
   10850:	39ffbfc4 	addi	r7,r7,-257
   10854:	00ca303a 	nor	r5,zero,r3
   10858:	01a02074 	movhi	r6,32897
   1085c:	19c7883a 	add	r3,r3,r7
   10860:	31a02004 	addi	r6,r6,-32640
   10864:	1946703a 	and	r3,r3,r5
   10868:	1986703a 	and	r3,r3,r6
   1086c:	1800091e 	bne	r3,zero,10894 <strlen+0x78>
   10870:	10800104 	addi	r2,r2,4
   10874:	10c00017 	ldw	r3,0(r2)
   10878:	19cb883a 	add	r5,r3,r7
   1087c:	00c6303a 	nor	r3,zero,r3
   10880:	28c6703a 	and	r3,r5,r3
   10884:	1986703a 	and	r3,r3,r6
   10888:	183ff926 	beq	r3,zero,10870 <_gp+0xffff12d8>
   1088c:	00000106 	br	10894 <strlen+0x78>
   10890:	10800044 	addi	r2,r2,1
   10894:	10c00007 	ldb	r3,0(r2)
   10898:	183ffd1e 	bne	r3,zero,10890 <_gp+0xffff12f8>
   1089c:	1105c83a 	sub	r2,r2,r4
   108a0:	f800283a 	ret
   108a4:	2005883a 	mov	r2,r4
   108a8:	003fe706 	br	10848 <_gp+0xffff12b0>
   108ac:	0005883a 	mov	r2,zero
   108b0:	f800283a 	ret

000108b4 <__fp_unlock>:
   108b4:	0005883a 	mov	r2,zero
   108b8:	f800283a 	ret

000108bc <_cleanup_r>:
   108bc:	01400074 	movhi	r5,1
   108c0:	294a1404 	addi	r5,r5,10320
   108c4:	00111d41 	jmpi	111d4 <_fwalk_reent>

000108c8 <__sinit.part.1>:
   108c8:	defff704 	addi	sp,sp,-36
   108cc:	00c00074 	movhi	r3,1
   108d0:	dfc00815 	stw	ra,32(sp)
   108d4:	ddc00715 	stw	r23,28(sp)
   108d8:	dd800615 	stw	r22,24(sp)
   108dc:	dd400515 	stw	r21,20(sp)
   108e0:	dd000415 	stw	r20,16(sp)
   108e4:	dcc00315 	stw	r19,12(sp)
   108e8:	dc800215 	stw	r18,8(sp)
   108ec:	dc400115 	stw	r17,4(sp)
   108f0:	dc000015 	stw	r16,0(sp)
   108f4:	18c22f04 	addi	r3,r3,2236
   108f8:	24000117 	ldw	r16,4(r4)
   108fc:	20c00f15 	stw	r3,60(r4)
   10900:	2080bb04 	addi	r2,r4,748
   10904:	00c000c4 	movi	r3,3
   10908:	20c0b915 	stw	r3,740(r4)
   1090c:	2080ba15 	stw	r2,744(r4)
   10910:	2000b815 	stw	zero,736(r4)
   10914:	05c00204 	movi	r23,8
   10918:	00800104 	movi	r2,4
   1091c:	2025883a 	mov	r18,r4
   10920:	b80d883a 	mov	r6,r23
   10924:	81001704 	addi	r4,r16,92
   10928:	000b883a 	mov	r5,zero
   1092c:	80000015 	stw	zero,0(r16)
   10930:	80000115 	stw	zero,4(r16)
   10934:	80000215 	stw	zero,8(r16)
   10938:	8080030d 	sth	r2,12(r16)
   1093c:	80001915 	stw	zero,100(r16)
   10940:	8000038d 	sth	zero,14(r16)
   10944:	80000415 	stw	zero,16(r16)
   10948:	80000515 	stw	zero,20(r16)
   1094c:	80000615 	stw	zero,24(r16)
   10950:	0011e2c0 	call	11e2c <memset>
   10954:	05800074 	movhi	r22,1
   10958:	94400217 	ldw	r17,8(r18)
   1095c:	05400074 	movhi	r21,1
   10960:	05000074 	movhi	r20,1
   10964:	04c00074 	movhi	r19,1
   10968:	b5894304 	addi	r22,r22,9484
   1096c:	ad495a04 	addi	r21,r21,9576
   10970:	a5097904 	addi	r20,r20,9700
   10974:	9cc99004 	addi	r19,r19,9792
   10978:	85800815 	stw	r22,32(r16)
   1097c:	85400915 	stw	r21,36(r16)
   10980:	85000a15 	stw	r20,40(r16)
   10984:	84c00b15 	stw	r19,44(r16)
   10988:	84000715 	stw	r16,28(r16)
   1098c:	00800284 	movi	r2,10
   10990:	8880030d 	sth	r2,12(r17)
   10994:	00800044 	movi	r2,1
   10998:	b80d883a 	mov	r6,r23
   1099c:	89001704 	addi	r4,r17,92
   109a0:	000b883a 	mov	r5,zero
   109a4:	88000015 	stw	zero,0(r17)
   109a8:	88000115 	stw	zero,4(r17)
   109ac:	88000215 	stw	zero,8(r17)
   109b0:	88001915 	stw	zero,100(r17)
   109b4:	8880038d 	sth	r2,14(r17)
   109b8:	88000415 	stw	zero,16(r17)
   109bc:	88000515 	stw	zero,20(r17)
   109c0:	88000615 	stw	zero,24(r17)
   109c4:	0011e2c0 	call	11e2c <memset>
   109c8:	94000317 	ldw	r16,12(r18)
   109cc:	00800484 	movi	r2,18
   109d0:	8c400715 	stw	r17,28(r17)
   109d4:	8d800815 	stw	r22,32(r17)
   109d8:	8d400915 	stw	r21,36(r17)
   109dc:	8d000a15 	stw	r20,40(r17)
   109e0:	8cc00b15 	stw	r19,44(r17)
   109e4:	8080030d 	sth	r2,12(r16)
   109e8:	00800084 	movi	r2,2
   109ec:	80000015 	stw	zero,0(r16)
   109f0:	80000115 	stw	zero,4(r16)
   109f4:	80000215 	stw	zero,8(r16)
   109f8:	80001915 	stw	zero,100(r16)
   109fc:	8080038d 	sth	r2,14(r16)
   10a00:	80000415 	stw	zero,16(r16)
   10a04:	80000515 	stw	zero,20(r16)
   10a08:	80000615 	stw	zero,24(r16)
   10a0c:	b80d883a 	mov	r6,r23
   10a10:	000b883a 	mov	r5,zero
   10a14:	81001704 	addi	r4,r16,92
   10a18:	0011e2c0 	call	11e2c <memset>
   10a1c:	00800044 	movi	r2,1
   10a20:	84000715 	stw	r16,28(r16)
   10a24:	85800815 	stw	r22,32(r16)
   10a28:	85400915 	stw	r21,36(r16)
   10a2c:	85000a15 	stw	r20,40(r16)
   10a30:	84c00b15 	stw	r19,44(r16)
   10a34:	90800e15 	stw	r2,56(r18)
   10a38:	dfc00817 	ldw	ra,32(sp)
   10a3c:	ddc00717 	ldw	r23,28(sp)
   10a40:	dd800617 	ldw	r22,24(sp)
   10a44:	dd400517 	ldw	r21,20(sp)
   10a48:	dd000417 	ldw	r20,16(sp)
   10a4c:	dcc00317 	ldw	r19,12(sp)
   10a50:	dc800217 	ldw	r18,8(sp)
   10a54:	dc400117 	ldw	r17,4(sp)
   10a58:	dc000017 	ldw	r16,0(sp)
   10a5c:	dec00904 	addi	sp,sp,36
   10a60:	f800283a 	ret

00010a64 <__fp_lock>:
   10a64:	0005883a 	mov	r2,zero
   10a68:	f800283a 	ret

00010a6c <__sfmoreglue>:
   10a6c:	defffc04 	addi	sp,sp,-16
   10a70:	dc400115 	stw	r17,4(sp)
   10a74:	2c7fffc4 	addi	r17,r5,-1
   10a78:	8c401a24 	muli	r17,r17,104
   10a7c:	dc800215 	stw	r18,8(sp)
   10a80:	2825883a 	mov	r18,r5
   10a84:	89401d04 	addi	r5,r17,116
   10a88:	dc000015 	stw	r16,0(sp)
   10a8c:	dfc00315 	stw	ra,12(sp)
   10a90:	00112980 	call	11298 <_malloc_r>
   10a94:	1021883a 	mov	r16,r2
   10a98:	10000726 	beq	r2,zero,10ab8 <__sfmoreglue+0x4c>
   10a9c:	11000304 	addi	r4,r2,12
   10aa0:	10000015 	stw	zero,0(r2)
   10aa4:	14800115 	stw	r18,4(r2)
   10aa8:	11000215 	stw	r4,8(r2)
   10aac:	89801a04 	addi	r6,r17,104
   10ab0:	000b883a 	mov	r5,zero
   10ab4:	0011e2c0 	call	11e2c <memset>
   10ab8:	8005883a 	mov	r2,r16
   10abc:	dfc00317 	ldw	ra,12(sp)
   10ac0:	dc800217 	ldw	r18,8(sp)
   10ac4:	dc400117 	ldw	r17,4(sp)
   10ac8:	dc000017 	ldw	r16,0(sp)
   10acc:	dec00404 	addi	sp,sp,16
   10ad0:	f800283a 	ret

00010ad4 <__sfp>:
   10ad4:	defffb04 	addi	sp,sp,-20
   10ad8:	dc000015 	stw	r16,0(sp)
   10adc:	04000074 	movhi	r16,1
   10ae0:	841d6604 	addi	r16,r16,30104
   10ae4:	dcc00315 	stw	r19,12(sp)
   10ae8:	2027883a 	mov	r19,r4
   10aec:	81000017 	ldw	r4,0(r16)
   10af0:	dfc00415 	stw	ra,16(sp)
   10af4:	dc800215 	stw	r18,8(sp)
   10af8:	20800e17 	ldw	r2,56(r4)
   10afc:	dc400115 	stw	r17,4(sp)
   10b00:	1000021e 	bne	r2,zero,10b0c <__sfp+0x38>
   10b04:	00108c80 	call	108c8 <__sinit.part.1>
   10b08:	81000017 	ldw	r4,0(r16)
   10b0c:	2480b804 	addi	r18,r4,736
   10b10:	047fffc4 	movi	r17,-1
   10b14:	91000117 	ldw	r4,4(r18)
   10b18:	94000217 	ldw	r16,8(r18)
   10b1c:	213fffc4 	addi	r4,r4,-1
   10b20:	20000a16 	blt	r4,zero,10b4c <__sfp+0x78>
   10b24:	8080030f 	ldh	r2,12(r16)
   10b28:	10000c26 	beq	r2,zero,10b5c <__sfp+0x88>
   10b2c:	80c01d04 	addi	r3,r16,116
   10b30:	00000206 	br	10b3c <__sfp+0x68>
   10b34:	18bfe60f 	ldh	r2,-104(r3)
   10b38:	10000826 	beq	r2,zero,10b5c <__sfp+0x88>
   10b3c:	213fffc4 	addi	r4,r4,-1
   10b40:	1c3ffd04 	addi	r16,r3,-12
   10b44:	18c01a04 	addi	r3,r3,104
   10b48:	247ffa1e 	bne	r4,r17,10b34 <_gp+0xffff159c>
   10b4c:	90800017 	ldw	r2,0(r18)
   10b50:	10001d26 	beq	r2,zero,10bc8 <__sfp+0xf4>
   10b54:	1025883a 	mov	r18,r2
   10b58:	003fee06 	br	10b14 <_gp+0xffff157c>
   10b5c:	00bfffc4 	movi	r2,-1
   10b60:	8080038d 	sth	r2,14(r16)
   10b64:	00800044 	movi	r2,1
   10b68:	8080030d 	sth	r2,12(r16)
   10b6c:	80001915 	stw	zero,100(r16)
   10b70:	80000015 	stw	zero,0(r16)
   10b74:	80000215 	stw	zero,8(r16)
   10b78:	80000115 	stw	zero,4(r16)
   10b7c:	80000415 	stw	zero,16(r16)
   10b80:	80000515 	stw	zero,20(r16)
   10b84:	80000615 	stw	zero,24(r16)
   10b88:	01800204 	movi	r6,8
   10b8c:	000b883a 	mov	r5,zero
   10b90:	81001704 	addi	r4,r16,92
   10b94:	0011e2c0 	call	11e2c <memset>
   10b98:	8005883a 	mov	r2,r16
   10b9c:	80000c15 	stw	zero,48(r16)
   10ba0:	80000d15 	stw	zero,52(r16)
   10ba4:	80001115 	stw	zero,68(r16)
   10ba8:	80001215 	stw	zero,72(r16)
   10bac:	dfc00417 	ldw	ra,16(sp)
   10bb0:	dcc00317 	ldw	r19,12(sp)
   10bb4:	dc800217 	ldw	r18,8(sp)
   10bb8:	dc400117 	ldw	r17,4(sp)
   10bbc:	dc000017 	ldw	r16,0(sp)
   10bc0:	dec00504 	addi	sp,sp,20
   10bc4:	f800283a 	ret
   10bc8:	01400104 	movi	r5,4
   10bcc:	9809883a 	mov	r4,r19
   10bd0:	0010a6c0 	call	10a6c <__sfmoreglue>
   10bd4:	90800015 	stw	r2,0(r18)
   10bd8:	103fde1e 	bne	r2,zero,10b54 <_gp+0xffff15bc>
   10bdc:	00800304 	movi	r2,12
   10be0:	98800015 	stw	r2,0(r19)
   10be4:	0005883a 	mov	r2,zero
   10be8:	003ff006 	br	10bac <_gp+0xffff1614>

00010bec <_cleanup>:
   10bec:	00800074 	movhi	r2,1
   10bf0:	109d6604 	addi	r2,r2,30104
   10bf4:	11000017 	ldw	r4,0(r2)
   10bf8:	01400074 	movhi	r5,1
   10bfc:	294a1404 	addi	r5,r5,10320
   10c00:	00111d41 	jmpi	111d4 <_fwalk_reent>

00010c04 <__sinit>:
   10c04:	20800e17 	ldw	r2,56(r4)
   10c08:	10000126 	beq	r2,zero,10c10 <__sinit+0xc>
   10c0c:	f800283a 	ret
   10c10:	00108c81 	jmpi	108c8 <__sinit.part.1>

00010c14 <__sfp_lock_acquire>:
   10c14:	f800283a 	ret

00010c18 <__sfp_lock_release>:
   10c18:	f800283a 	ret

00010c1c <__sinit_lock_acquire>:
   10c1c:	f800283a 	ret

00010c20 <__sinit_lock_release>:
   10c20:	f800283a 	ret

00010c24 <__fp_lock_all>:
   10c24:	00800074 	movhi	r2,1
   10c28:	109d6704 	addi	r2,r2,30108
   10c2c:	11000017 	ldw	r4,0(r2)
   10c30:	01400074 	movhi	r5,1
   10c34:	29429904 	addi	r5,r5,2660
   10c38:	00111101 	jmpi	11110 <_fwalk>

00010c3c <__fp_unlock_all>:
   10c3c:	00800074 	movhi	r2,1
   10c40:	109d6704 	addi	r2,r2,30108
   10c44:	11000017 	ldw	r4,0(r2)
   10c48:	01400074 	movhi	r5,1
   10c4c:	29422d04 	addi	r5,r5,2228
   10c50:	00111101 	jmpi	11110 <_fwalk>

00010c54 <__sfvwrite_r>:
   10c54:	30800217 	ldw	r2,8(r6)
   10c58:	10006726 	beq	r2,zero,10df8 <__sfvwrite_r+0x1a4>
   10c5c:	28c0030b 	ldhu	r3,12(r5)
   10c60:	defff404 	addi	sp,sp,-48
   10c64:	dd400715 	stw	r21,28(sp)
   10c68:	dd000615 	stw	r20,24(sp)
   10c6c:	dc000215 	stw	r16,8(sp)
   10c70:	dfc00b15 	stw	ra,44(sp)
   10c74:	df000a15 	stw	fp,40(sp)
   10c78:	ddc00915 	stw	r23,36(sp)
   10c7c:	dd800815 	stw	r22,32(sp)
   10c80:	dcc00515 	stw	r19,20(sp)
   10c84:	dc800415 	stw	r18,16(sp)
   10c88:	dc400315 	stw	r17,12(sp)
   10c8c:	1880020c 	andi	r2,r3,8
   10c90:	2821883a 	mov	r16,r5
   10c94:	202b883a 	mov	r21,r4
   10c98:	3029883a 	mov	r20,r6
   10c9c:	10002726 	beq	r2,zero,10d3c <__sfvwrite_r+0xe8>
   10ca0:	28800417 	ldw	r2,16(r5)
   10ca4:	10002526 	beq	r2,zero,10d3c <__sfvwrite_r+0xe8>
   10ca8:	1880008c 	andi	r2,r3,2
   10cac:	a4400017 	ldw	r17,0(r20)
   10cb0:	10002a26 	beq	r2,zero,10d5c <__sfvwrite_r+0x108>
   10cb4:	05a00034 	movhi	r22,32768
   10cb8:	0027883a 	mov	r19,zero
   10cbc:	0025883a 	mov	r18,zero
   10cc0:	b5bf0004 	addi	r22,r22,-1024
   10cc4:	980d883a 	mov	r6,r19
   10cc8:	a809883a 	mov	r4,r21
   10ccc:	90004626 	beq	r18,zero,10de8 <__sfvwrite_r+0x194>
   10cd0:	900f883a 	mov	r7,r18
   10cd4:	b480022e 	bgeu	r22,r18,10ce0 <__sfvwrite_r+0x8c>
   10cd8:	01e00034 	movhi	r7,32768
   10cdc:	39ff0004 	addi	r7,r7,-1024
   10ce0:	80800917 	ldw	r2,36(r16)
   10ce4:	81400717 	ldw	r5,28(r16)
   10ce8:	103ee83a 	callr	r2
   10cec:	0080570e 	bge	zero,r2,10e4c <__sfvwrite_r+0x1f8>
   10cf0:	a0c00217 	ldw	r3,8(r20)
   10cf4:	98a7883a 	add	r19,r19,r2
   10cf8:	90a5c83a 	sub	r18,r18,r2
   10cfc:	1885c83a 	sub	r2,r3,r2
   10d00:	a0800215 	stw	r2,8(r20)
   10d04:	103fef1e 	bne	r2,zero,10cc4 <_gp+0xffff172c>
   10d08:	0005883a 	mov	r2,zero
   10d0c:	dfc00b17 	ldw	ra,44(sp)
   10d10:	df000a17 	ldw	fp,40(sp)
   10d14:	ddc00917 	ldw	r23,36(sp)
   10d18:	dd800817 	ldw	r22,32(sp)
   10d1c:	dd400717 	ldw	r21,28(sp)
   10d20:	dd000617 	ldw	r20,24(sp)
   10d24:	dcc00517 	ldw	r19,20(sp)
   10d28:	dc800417 	ldw	r18,16(sp)
   10d2c:	dc400317 	ldw	r17,12(sp)
   10d30:	dc000217 	ldw	r16,8(sp)
   10d34:	dec00c04 	addi	sp,sp,48
   10d38:	f800283a 	ret
   10d3c:	800b883a 	mov	r5,r16
   10d40:	a809883a 	mov	r4,r21
   10d44:	00126a80 	call	126a8 <__swsetup_r>
   10d48:	1000eb1e 	bne	r2,zero,110f8 <__sfvwrite_r+0x4a4>
   10d4c:	80c0030b 	ldhu	r3,12(r16)
   10d50:	a4400017 	ldw	r17,0(r20)
   10d54:	1880008c 	andi	r2,r3,2
   10d58:	103fd61e 	bne	r2,zero,10cb4 <_gp+0xffff171c>
   10d5c:	1880004c 	andi	r2,r3,1
   10d60:	10003f1e 	bne	r2,zero,10e60 <__sfvwrite_r+0x20c>
   10d64:	0039883a 	mov	fp,zero
   10d68:	0025883a 	mov	r18,zero
   10d6c:	90001a26 	beq	r18,zero,10dd8 <__sfvwrite_r+0x184>
   10d70:	1880800c 	andi	r2,r3,512
   10d74:	84c00217 	ldw	r19,8(r16)
   10d78:	10002126 	beq	r2,zero,10e00 <__sfvwrite_r+0x1ac>
   10d7c:	982f883a 	mov	r23,r19
   10d80:	94c09336 	bltu	r18,r19,10fd0 <__sfvwrite_r+0x37c>
   10d84:	1881200c 	andi	r2,r3,1152
   10d88:	10009e1e 	bne	r2,zero,11004 <__sfvwrite_r+0x3b0>
   10d8c:	81000017 	ldw	r4,0(r16)
   10d90:	b80d883a 	mov	r6,r23
   10d94:	e00b883a 	mov	r5,fp
   10d98:	0011cd00 	call	11cd0 <memmove>
   10d9c:	80c00217 	ldw	r3,8(r16)
   10da0:	81000017 	ldw	r4,0(r16)
   10da4:	9005883a 	mov	r2,r18
   10da8:	1ce7c83a 	sub	r19,r3,r19
   10dac:	25cf883a 	add	r7,r4,r23
   10db0:	84c00215 	stw	r19,8(r16)
   10db4:	81c00015 	stw	r7,0(r16)
   10db8:	a0c00217 	ldw	r3,8(r20)
   10dbc:	e0b9883a 	add	fp,fp,r2
   10dc0:	90a5c83a 	sub	r18,r18,r2
   10dc4:	18a7c83a 	sub	r19,r3,r2
   10dc8:	a4c00215 	stw	r19,8(r20)
   10dcc:	983fce26 	beq	r19,zero,10d08 <_gp+0xffff1770>
   10dd0:	80c0030b 	ldhu	r3,12(r16)
   10dd4:	903fe61e 	bne	r18,zero,10d70 <_gp+0xffff17d8>
   10dd8:	8f000017 	ldw	fp,0(r17)
   10ddc:	8c800117 	ldw	r18,4(r17)
   10de0:	8c400204 	addi	r17,r17,8
   10de4:	003fe106 	br	10d6c <_gp+0xffff17d4>
   10de8:	8cc00017 	ldw	r19,0(r17)
   10dec:	8c800117 	ldw	r18,4(r17)
   10df0:	8c400204 	addi	r17,r17,8
   10df4:	003fb306 	br	10cc4 <_gp+0xffff172c>
   10df8:	0005883a 	mov	r2,zero
   10dfc:	f800283a 	ret
   10e00:	81000017 	ldw	r4,0(r16)
   10e04:	80800417 	ldw	r2,16(r16)
   10e08:	11005736 	bltu	r2,r4,10f68 <__sfvwrite_r+0x314>
   10e0c:	85c00517 	ldw	r23,20(r16)
   10e10:	95c05536 	bltu	r18,r23,10f68 <__sfvwrite_r+0x314>
   10e14:	00a00034 	movhi	r2,32768
   10e18:	10bfffc4 	addi	r2,r2,-1
   10e1c:	9009883a 	mov	r4,r18
   10e20:	1480012e 	bgeu	r2,r18,10e28 <__sfvwrite_r+0x1d4>
   10e24:	1009883a 	mov	r4,r2
   10e28:	b80b883a 	mov	r5,r23
   10e2c:	00105940 	call	10594 <__divsi3>
   10e30:	15cf383a 	mul	r7,r2,r23
   10e34:	81400717 	ldw	r5,28(r16)
   10e38:	80800917 	ldw	r2,36(r16)
   10e3c:	e00d883a 	mov	r6,fp
   10e40:	a809883a 	mov	r4,r21
   10e44:	103ee83a 	callr	r2
   10e48:	00bfdb16 	blt	zero,r2,10db8 <_gp+0xffff1820>
   10e4c:	8080030b 	ldhu	r2,12(r16)
   10e50:	10801014 	ori	r2,r2,64
   10e54:	8080030d 	sth	r2,12(r16)
   10e58:	00bfffc4 	movi	r2,-1
   10e5c:	003fab06 	br	10d0c <_gp+0xffff1774>
   10e60:	0027883a 	mov	r19,zero
   10e64:	0011883a 	mov	r8,zero
   10e68:	0039883a 	mov	fp,zero
   10e6c:	0025883a 	mov	r18,zero
   10e70:	90001f26 	beq	r18,zero,10ef0 <__sfvwrite_r+0x29c>
   10e74:	40005a26 	beq	r8,zero,10fe0 <__sfvwrite_r+0x38c>
   10e78:	982d883a 	mov	r22,r19
   10e7c:	94c0012e 	bgeu	r18,r19,10e84 <__sfvwrite_r+0x230>
   10e80:	902d883a 	mov	r22,r18
   10e84:	81000017 	ldw	r4,0(r16)
   10e88:	80800417 	ldw	r2,16(r16)
   10e8c:	b02f883a 	mov	r23,r22
   10e90:	81c00517 	ldw	r7,20(r16)
   10e94:	1100032e 	bgeu	r2,r4,10ea4 <__sfvwrite_r+0x250>
   10e98:	80c00217 	ldw	r3,8(r16)
   10e9c:	38c7883a 	add	r3,r7,r3
   10ea0:	1d801816 	blt	r3,r22,10f04 <__sfvwrite_r+0x2b0>
   10ea4:	b1c03e16 	blt	r22,r7,10fa0 <__sfvwrite_r+0x34c>
   10ea8:	80800917 	ldw	r2,36(r16)
   10eac:	81400717 	ldw	r5,28(r16)
   10eb0:	e00d883a 	mov	r6,fp
   10eb4:	da000115 	stw	r8,4(sp)
   10eb8:	a809883a 	mov	r4,r21
   10ebc:	103ee83a 	callr	r2
   10ec0:	102f883a 	mov	r23,r2
   10ec4:	da000117 	ldw	r8,4(sp)
   10ec8:	00bfe00e 	bge	zero,r2,10e4c <_gp+0xffff18b4>
   10ecc:	9de7c83a 	sub	r19,r19,r23
   10ed0:	98001f26 	beq	r19,zero,10f50 <__sfvwrite_r+0x2fc>
   10ed4:	a0800217 	ldw	r2,8(r20)
   10ed8:	e5f9883a 	add	fp,fp,r23
   10edc:	95e5c83a 	sub	r18,r18,r23
   10ee0:	15efc83a 	sub	r23,r2,r23
   10ee4:	a5c00215 	stw	r23,8(r20)
   10ee8:	b83f8726 	beq	r23,zero,10d08 <_gp+0xffff1770>
   10eec:	903fe11e 	bne	r18,zero,10e74 <_gp+0xffff18dc>
   10ef0:	8f000017 	ldw	fp,0(r17)
   10ef4:	8c800117 	ldw	r18,4(r17)
   10ef8:	0011883a 	mov	r8,zero
   10efc:	8c400204 	addi	r17,r17,8
   10f00:	003fdb06 	br	10e70 <_gp+0xffff18d8>
   10f04:	180d883a 	mov	r6,r3
   10f08:	e00b883a 	mov	r5,fp
   10f0c:	da000115 	stw	r8,4(sp)
   10f10:	d8c00015 	stw	r3,0(sp)
   10f14:	0011cd00 	call	11cd0 <memmove>
   10f18:	d8c00017 	ldw	r3,0(sp)
   10f1c:	80800017 	ldw	r2,0(r16)
   10f20:	800b883a 	mov	r5,r16
   10f24:	a809883a 	mov	r4,r21
   10f28:	10c5883a 	add	r2,r2,r3
   10f2c:	80800015 	stw	r2,0(r16)
   10f30:	d8c00015 	stw	r3,0(sp)
   10f34:	0012b700 	call	12b70 <_fflush_r>
   10f38:	d8c00017 	ldw	r3,0(sp)
   10f3c:	da000117 	ldw	r8,4(sp)
   10f40:	103fc21e 	bne	r2,zero,10e4c <_gp+0xffff18b4>
   10f44:	182f883a 	mov	r23,r3
   10f48:	9de7c83a 	sub	r19,r19,r23
   10f4c:	983fe11e 	bne	r19,zero,10ed4 <_gp+0xffff193c>
   10f50:	800b883a 	mov	r5,r16
   10f54:	a809883a 	mov	r4,r21
   10f58:	0012b700 	call	12b70 <_fflush_r>
   10f5c:	103fbb1e 	bne	r2,zero,10e4c <_gp+0xffff18b4>
   10f60:	0011883a 	mov	r8,zero
   10f64:	003fdb06 	br	10ed4 <_gp+0xffff193c>
   10f68:	94c0012e 	bgeu	r18,r19,10f70 <__sfvwrite_r+0x31c>
   10f6c:	9027883a 	mov	r19,r18
   10f70:	980d883a 	mov	r6,r19
   10f74:	e00b883a 	mov	r5,fp
   10f78:	0011cd00 	call	11cd0 <memmove>
   10f7c:	80800217 	ldw	r2,8(r16)
   10f80:	80c00017 	ldw	r3,0(r16)
   10f84:	14c5c83a 	sub	r2,r2,r19
   10f88:	1cc7883a 	add	r3,r3,r19
   10f8c:	80800215 	stw	r2,8(r16)
   10f90:	80c00015 	stw	r3,0(r16)
   10f94:	10004326 	beq	r2,zero,110a4 <__sfvwrite_r+0x450>
   10f98:	9805883a 	mov	r2,r19
   10f9c:	003f8606 	br	10db8 <_gp+0xffff1820>
   10fa0:	b00d883a 	mov	r6,r22
   10fa4:	e00b883a 	mov	r5,fp
   10fa8:	da000115 	stw	r8,4(sp)
   10fac:	0011cd00 	call	11cd0 <memmove>
   10fb0:	80800217 	ldw	r2,8(r16)
   10fb4:	80c00017 	ldw	r3,0(r16)
   10fb8:	da000117 	ldw	r8,4(sp)
   10fbc:	1585c83a 	sub	r2,r2,r22
   10fc0:	1dad883a 	add	r22,r3,r22
   10fc4:	80800215 	stw	r2,8(r16)
   10fc8:	85800015 	stw	r22,0(r16)
   10fcc:	003fbf06 	br	10ecc <_gp+0xffff1934>
   10fd0:	81000017 	ldw	r4,0(r16)
   10fd4:	9027883a 	mov	r19,r18
   10fd8:	902f883a 	mov	r23,r18
   10fdc:	003f6c06 	br	10d90 <_gp+0xffff17f8>
   10fe0:	900d883a 	mov	r6,r18
   10fe4:	01400284 	movi	r5,10
   10fe8:	e009883a 	mov	r4,fp
   10fec:	0011aa40 	call	11aa4 <memchr>
   10ff0:	10003e26 	beq	r2,zero,110ec <__sfvwrite_r+0x498>
   10ff4:	10800044 	addi	r2,r2,1
   10ff8:	1727c83a 	sub	r19,r2,fp
   10ffc:	02000044 	movi	r8,1
   11000:	003f9d06 	br	10e78 <_gp+0xffff18e0>
   11004:	80800517 	ldw	r2,20(r16)
   11008:	81400417 	ldw	r5,16(r16)
   1100c:	81c00017 	ldw	r7,0(r16)
   11010:	10a7883a 	add	r19,r2,r2
   11014:	9885883a 	add	r2,r19,r2
   11018:	1026d7fa 	srli	r19,r2,31
   1101c:	396dc83a 	sub	r22,r7,r5
   11020:	b1000044 	addi	r4,r22,1
   11024:	9885883a 	add	r2,r19,r2
   11028:	1027d07a 	srai	r19,r2,1
   1102c:	2485883a 	add	r2,r4,r18
   11030:	980d883a 	mov	r6,r19
   11034:	9880022e 	bgeu	r19,r2,11040 <__sfvwrite_r+0x3ec>
   11038:	1027883a 	mov	r19,r2
   1103c:	100d883a 	mov	r6,r2
   11040:	18c1000c 	andi	r3,r3,1024
   11044:	18001c26 	beq	r3,zero,110b8 <__sfvwrite_r+0x464>
   11048:	300b883a 	mov	r5,r6
   1104c:	a809883a 	mov	r4,r21
   11050:	00112980 	call	11298 <_malloc_r>
   11054:	102f883a 	mov	r23,r2
   11058:	10002926 	beq	r2,zero,11100 <__sfvwrite_r+0x4ac>
   1105c:	81400417 	ldw	r5,16(r16)
   11060:	b00d883a 	mov	r6,r22
   11064:	1009883a 	mov	r4,r2
   11068:	0011b880 	call	11b88 <memcpy>
   1106c:	8080030b 	ldhu	r2,12(r16)
   11070:	00fedfc4 	movi	r3,-1153
   11074:	10c4703a 	and	r2,r2,r3
   11078:	10802014 	ori	r2,r2,128
   1107c:	8080030d 	sth	r2,12(r16)
   11080:	bd89883a 	add	r4,r23,r22
   11084:	9d8fc83a 	sub	r7,r19,r22
   11088:	85c00415 	stw	r23,16(r16)
   1108c:	84c00515 	stw	r19,20(r16)
   11090:	81000015 	stw	r4,0(r16)
   11094:	9027883a 	mov	r19,r18
   11098:	81c00215 	stw	r7,8(r16)
   1109c:	902f883a 	mov	r23,r18
   110a0:	003f3b06 	br	10d90 <_gp+0xffff17f8>
   110a4:	800b883a 	mov	r5,r16
   110a8:	a809883a 	mov	r4,r21
   110ac:	0012b700 	call	12b70 <_fflush_r>
   110b0:	103fb926 	beq	r2,zero,10f98 <_gp+0xffff1a00>
   110b4:	003f6506 	br	10e4c <_gp+0xffff18b4>
   110b8:	a809883a 	mov	r4,r21
   110bc:	0011f540 	call	11f54 <_realloc_r>
   110c0:	102f883a 	mov	r23,r2
   110c4:	103fee1e 	bne	r2,zero,11080 <_gp+0xffff1ae8>
   110c8:	81400417 	ldw	r5,16(r16)
   110cc:	a809883a 	mov	r4,r21
   110d0:	0012d200 	call	12d20 <_free_r>
   110d4:	8080030b 	ldhu	r2,12(r16)
   110d8:	00ffdfc4 	movi	r3,-129
   110dc:	1884703a 	and	r2,r3,r2
   110e0:	00c00304 	movi	r3,12
   110e4:	a8c00015 	stw	r3,0(r21)
   110e8:	003f5906 	br	10e50 <_gp+0xffff18b8>
   110ec:	94c00044 	addi	r19,r18,1
   110f0:	02000044 	movi	r8,1
   110f4:	003f6006 	br	10e78 <_gp+0xffff18e0>
   110f8:	00bfffc4 	movi	r2,-1
   110fc:	003f0306 	br	10d0c <_gp+0xffff1774>
   11100:	00800304 	movi	r2,12
   11104:	a8800015 	stw	r2,0(r21)
   11108:	8080030b 	ldhu	r2,12(r16)
   1110c:	003f5006 	br	10e50 <_gp+0xffff18b8>

00011110 <_fwalk>:
   11110:	defff704 	addi	sp,sp,-36
   11114:	dd000415 	stw	r20,16(sp)
   11118:	dfc00815 	stw	ra,32(sp)
   1111c:	ddc00715 	stw	r23,28(sp)
   11120:	dd800615 	stw	r22,24(sp)
   11124:	dd400515 	stw	r21,20(sp)
   11128:	dcc00315 	stw	r19,12(sp)
   1112c:	dc800215 	stw	r18,8(sp)
   11130:	dc400115 	stw	r17,4(sp)
   11134:	dc000015 	stw	r16,0(sp)
   11138:	2500b804 	addi	r20,r4,736
   1113c:	a0002326 	beq	r20,zero,111cc <_fwalk+0xbc>
   11140:	282b883a 	mov	r21,r5
   11144:	002f883a 	mov	r23,zero
   11148:	05800044 	movi	r22,1
   1114c:	04ffffc4 	movi	r19,-1
   11150:	a4400117 	ldw	r17,4(r20)
   11154:	a4800217 	ldw	r18,8(r20)
   11158:	8c7fffc4 	addi	r17,r17,-1
   1115c:	88000d16 	blt	r17,zero,11194 <_fwalk+0x84>
   11160:	94000304 	addi	r16,r18,12
   11164:	94800384 	addi	r18,r18,14
   11168:	8080000b 	ldhu	r2,0(r16)
   1116c:	8c7fffc4 	addi	r17,r17,-1
   11170:	813ffd04 	addi	r4,r16,-12
   11174:	b080042e 	bgeu	r22,r2,11188 <_fwalk+0x78>
   11178:	9080000f 	ldh	r2,0(r18)
   1117c:	14c00226 	beq	r2,r19,11188 <_fwalk+0x78>
   11180:	a83ee83a 	callr	r21
   11184:	b8aeb03a 	or	r23,r23,r2
   11188:	84001a04 	addi	r16,r16,104
   1118c:	94801a04 	addi	r18,r18,104
   11190:	8cfff51e 	bne	r17,r19,11168 <_gp+0xffff1bd0>
   11194:	a5000017 	ldw	r20,0(r20)
   11198:	a03fed1e 	bne	r20,zero,11150 <_gp+0xffff1bb8>
   1119c:	b805883a 	mov	r2,r23
   111a0:	dfc00817 	ldw	ra,32(sp)
   111a4:	ddc00717 	ldw	r23,28(sp)
   111a8:	dd800617 	ldw	r22,24(sp)
   111ac:	dd400517 	ldw	r21,20(sp)
   111b0:	dd000417 	ldw	r20,16(sp)
   111b4:	dcc00317 	ldw	r19,12(sp)
   111b8:	dc800217 	ldw	r18,8(sp)
   111bc:	dc400117 	ldw	r17,4(sp)
   111c0:	dc000017 	ldw	r16,0(sp)
   111c4:	dec00904 	addi	sp,sp,36
   111c8:	f800283a 	ret
   111cc:	002f883a 	mov	r23,zero
   111d0:	003ff206 	br	1119c <_gp+0xffff1c04>

000111d4 <_fwalk_reent>:
   111d4:	defff704 	addi	sp,sp,-36
   111d8:	dd000415 	stw	r20,16(sp)
   111dc:	dfc00815 	stw	ra,32(sp)
   111e0:	ddc00715 	stw	r23,28(sp)
   111e4:	dd800615 	stw	r22,24(sp)
   111e8:	dd400515 	stw	r21,20(sp)
   111ec:	dcc00315 	stw	r19,12(sp)
   111f0:	dc800215 	stw	r18,8(sp)
   111f4:	dc400115 	stw	r17,4(sp)
   111f8:	dc000015 	stw	r16,0(sp)
   111fc:	2500b804 	addi	r20,r4,736
   11200:	a0002326 	beq	r20,zero,11290 <_fwalk_reent+0xbc>
   11204:	282b883a 	mov	r21,r5
   11208:	2027883a 	mov	r19,r4
   1120c:	002f883a 	mov	r23,zero
   11210:	05800044 	movi	r22,1
   11214:	04bfffc4 	movi	r18,-1
   11218:	a4400117 	ldw	r17,4(r20)
   1121c:	a4000217 	ldw	r16,8(r20)
   11220:	8c7fffc4 	addi	r17,r17,-1
   11224:	88000c16 	blt	r17,zero,11258 <_fwalk_reent+0x84>
   11228:	84000304 	addi	r16,r16,12
   1122c:	8080000b 	ldhu	r2,0(r16)
   11230:	8c7fffc4 	addi	r17,r17,-1
   11234:	817ffd04 	addi	r5,r16,-12
   11238:	b080052e 	bgeu	r22,r2,11250 <_fwalk_reent+0x7c>
   1123c:	8080008f 	ldh	r2,2(r16)
   11240:	9809883a 	mov	r4,r19
   11244:	14800226 	beq	r2,r18,11250 <_fwalk_reent+0x7c>
   11248:	a83ee83a 	callr	r21
   1124c:	b8aeb03a 	or	r23,r23,r2
   11250:	84001a04 	addi	r16,r16,104
   11254:	8cbff51e 	bne	r17,r18,1122c <_gp+0xffff1c94>
   11258:	a5000017 	ldw	r20,0(r20)
   1125c:	a03fee1e 	bne	r20,zero,11218 <_gp+0xffff1c80>
   11260:	b805883a 	mov	r2,r23
   11264:	dfc00817 	ldw	ra,32(sp)
   11268:	ddc00717 	ldw	r23,28(sp)
   1126c:	dd800617 	ldw	r22,24(sp)
   11270:	dd400517 	ldw	r21,20(sp)
   11274:	dd000417 	ldw	r20,16(sp)
   11278:	dcc00317 	ldw	r19,12(sp)
   1127c:	dc800217 	ldw	r18,8(sp)
   11280:	dc400117 	ldw	r17,4(sp)
   11284:	dc000017 	ldw	r16,0(sp)
   11288:	dec00904 	addi	sp,sp,36
   1128c:	f800283a 	ret
   11290:	002f883a 	mov	r23,zero
   11294:	003ff206 	br	11260 <_gp+0xffff1cc8>

00011298 <_malloc_r>:
   11298:	defff504 	addi	sp,sp,-44
   1129c:	dc800315 	stw	r18,12(sp)
   112a0:	dfc00a15 	stw	ra,40(sp)
   112a4:	df000915 	stw	fp,36(sp)
   112a8:	ddc00815 	stw	r23,32(sp)
   112ac:	dd800715 	stw	r22,28(sp)
   112b0:	dd400615 	stw	r21,24(sp)
   112b4:	dd000515 	stw	r20,20(sp)
   112b8:	dcc00415 	stw	r19,16(sp)
   112bc:	dc400215 	stw	r17,8(sp)
   112c0:	dc000115 	stw	r16,4(sp)
   112c4:	288002c4 	addi	r2,r5,11
   112c8:	00c00584 	movi	r3,22
   112cc:	2025883a 	mov	r18,r4
   112d0:	18807f2e 	bgeu	r3,r2,114d0 <_malloc_r+0x238>
   112d4:	047ffe04 	movi	r17,-8
   112d8:	1462703a 	and	r17,r2,r17
   112dc:	8800a316 	blt	r17,zero,1156c <_malloc_r+0x2d4>
   112e0:	8940a236 	bltu	r17,r5,1156c <_malloc_r+0x2d4>
   112e4:	00138d80 	call	138d8 <__malloc_lock>
   112e8:	00807dc4 	movi	r2,503
   112ec:	1441e92e 	bgeu	r2,r17,11a94 <_malloc_r+0x7fc>
   112f0:	8804d27a 	srli	r2,r17,9
   112f4:	1000a126 	beq	r2,zero,1157c <_malloc_r+0x2e4>
   112f8:	00c00104 	movi	r3,4
   112fc:	18811e36 	bltu	r3,r2,11778 <_malloc_r+0x4e0>
   11300:	8804d1ba 	srli	r2,r17,6
   11304:	12000e44 	addi	r8,r2,57
   11308:	11c00e04 	addi	r7,r2,56
   1130c:	4209883a 	add	r4,r8,r8
   11310:	04c00074 	movhi	r19,1
   11314:	2109883a 	add	r4,r4,r4
   11318:	9cd7e204 	addi	r19,r19,24456
   1131c:	2109883a 	add	r4,r4,r4
   11320:	9909883a 	add	r4,r19,r4
   11324:	24000117 	ldw	r16,4(r4)
   11328:	213ffe04 	addi	r4,r4,-8
   1132c:	24009726 	beq	r4,r16,1158c <_malloc_r+0x2f4>
   11330:	80800117 	ldw	r2,4(r16)
   11334:	01bfff04 	movi	r6,-4
   11338:	014003c4 	movi	r5,15
   1133c:	1184703a 	and	r2,r2,r6
   11340:	1447c83a 	sub	r3,r2,r17
   11344:	28c00716 	blt	r5,r3,11364 <_malloc_r+0xcc>
   11348:	1800920e 	bge	r3,zero,11594 <_malloc_r+0x2fc>
   1134c:	84000317 	ldw	r16,12(r16)
   11350:	24008e26 	beq	r4,r16,1158c <_malloc_r+0x2f4>
   11354:	80800117 	ldw	r2,4(r16)
   11358:	1184703a 	and	r2,r2,r6
   1135c:	1447c83a 	sub	r3,r2,r17
   11360:	28fff90e 	bge	r5,r3,11348 <_gp+0xffff1db0>
   11364:	3809883a 	mov	r4,r7
   11368:	01800074 	movhi	r6,1
   1136c:	9c000417 	ldw	r16,16(r19)
   11370:	3197e204 	addi	r6,r6,24456
   11374:	32000204 	addi	r8,r6,8
   11378:	82013426 	beq	r16,r8,1184c <_malloc_r+0x5b4>
   1137c:	80c00117 	ldw	r3,4(r16)
   11380:	00bfff04 	movi	r2,-4
   11384:	188e703a 	and	r7,r3,r2
   11388:	3c45c83a 	sub	r2,r7,r17
   1138c:	00c003c4 	movi	r3,15
   11390:	18811f16 	blt	r3,r2,11810 <_malloc_r+0x578>
   11394:	32000515 	stw	r8,20(r6)
   11398:	32000415 	stw	r8,16(r6)
   1139c:	10007f0e 	bge	r2,zero,1159c <_malloc_r+0x304>
   113a0:	00807fc4 	movi	r2,511
   113a4:	11c0fd36 	bltu	r2,r7,1179c <_malloc_r+0x504>
   113a8:	3806d0fa 	srli	r3,r7,3
   113ac:	01c00044 	movi	r7,1
   113b0:	30800117 	ldw	r2,4(r6)
   113b4:	19400044 	addi	r5,r3,1
   113b8:	294b883a 	add	r5,r5,r5
   113bc:	1807d0ba 	srai	r3,r3,2
   113c0:	294b883a 	add	r5,r5,r5
   113c4:	294b883a 	add	r5,r5,r5
   113c8:	298b883a 	add	r5,r5,r6
   113cc:	38c6983a 	sll	r3,r7,r3
   113d0:	29c00017 	ldw	r7,0(r5)
   113d4:	2a7ffe04 	addi	r9,r5,-8
   113d8:	1886b03a 	or	r3,r3,r2
   113dc:	82400315 	stw	r9,12(r16)
   113e0:	81c00215 	stw	r7,8(r16)
   113e4:	30c00115 	stw	r3,4(r6)
   113e8:	2c000015 	stw	r16,0(r5)
   113ec:	3c000315 	stw	r16,12(r7)
   113f0:	2005d0ba 	srai	r2,r4,2
   113f4:	01400044 	movi	r5,1
   113f8:	288a983a 	sll	r5,r5,r2
   113fc:	19406f36 	bltu	r3,r5,115bc <_malloc_r+0x324>
   11400:	28c4703a 	and	r2,r5,r3
   11404:	10000a1e 	bne	r2,zero,11430 <_malloc_r+0x198>
   11408:	00bfff04 	movi	r2,-4
   1140c:	294b883a 	add	r5,r5,r5
   11410:	2088703a 	and	r4,r4,r2
   11414:	28c4703a 	and	r2,r5,r3
   11418:	21000104 	addi	r4,r4,4
   1141c:	1000041e 	bne	r2,zero,11430 <_malloc_r+0x198>
   11420:	294b883a 	add	r5,r5,r5
   11424:	28c4703a 	and	r2,r5,r3
   11428:	21000104 	addi	r4,r4,4
   1142c:	103ffc26 	beq	r2,zero,11420 <_gp+0xffff1e88>
   11430:	02bfff04 	movi	r10,-4
   11434:	024003c4 	movi	r9,15
   11438:	21800044 	addi	r6,r4,1
   1143c:	318d883a 	add	r6,r6,r6
   11440:	318d883a 	add	r6,r6,r6
   11444:	318d883a 	add	r6,r6,r6
   11448:	998d883a 	add	r6,r19,r6
   1144c:	333ffe04 	addi	r12,r6,-8
   11450:	2017883a 	mov	r11,r4
   11454:	31800104 	addi	r6,r6,4
   11458:	34000017 	ldw	r16,0(r6)
   1145c:	31fffd04 	addi	r7,r6,-12
   11460:	81c0041e 	bne	r16,r7,11474 <_malloc_r+0x1dc>
   11464:	0000fb06 	br	11854 <_malloc_r+0x5bc>
   11468:	1801030e 	bge	r3,zero,11878 <_malloc_r+0x5e0>
   1146c:	84000317 	ldw	r16,12(r16)
   11470:	81c0f826 	beq	r16,r7,11854 <_malloc_r+0x5bc>
   11474:	80800117 	ldw	r2,4(r16)
   11478:	1284703a 	and	r2,r2,r10
   1147c:	1447c83a 	sub	r3,r2,r17
   11480:	48fff90e 	bge	r9,r3,11468 <_gp+0xffff1ed0>
   11484:	80800317 	ldw	r2,12(r16)
   11488:	81000217 	ldw	r4,8(r16)
   1148c:	89400054 	ori	r5,r17,1
   11490:	81400115 	stw	r5,4(r16)
   11494:	20800315 	stw	r2,12(r4)
   11498:	11000215 	stw	r4,8(r2)
   1149c:	8463883a 	add	r17,r16,r17
   114a0:	9c400515 	stw	r17,20(r19)
   114a4:	9c400415 	stw	r17,16(r19)
   114a8:	18800054 	ori	r2,r3,1
   114ac:	88800115 	stw	r2,4(r17)
   114b0:	8a000315 	stw	r8,12(r17)
   114b4:	8a000215 	stw	r8,8(r17)
   114b8:	88e3883a 	add	r17,r17,r3
   114bc:	88c00015 	stw	r3,0(r17)
   114c0:	9009883a 	mov	r4,r18
   114c4:	00138fc0 	call	138fc <__malloc_unlock>
   114c8:	80800204 	addi	r2,r16,8
   114cc:	00001b06 	br	1153c <_malloc_r+0x2a4>
   114d0:	04400404 	movi	r17,16
   114d4:	89402536 	bltu	r17,r5,1156c <_malloc_r+0x2d4>
   114d8:	00138d80 	call	138d8 <__malloc_lock>
   114dc:	00800184 	movi	r2,6
   114e0:	01000084 	movi	r4,2
   114e4:	04c00074 	movhi	r19,1
   114e8:	1085883a 	add	r2,r2,r2
   114ec:	9cd7e204 	addi	r19,r19,24456
   114f0:	1085883a 	add	r2,r2,r2
   114f4:	9885883a 	add	r2,r19,r2
   114f8:	14000117 	ldw	r16,4(r2)
   114fc:	10fffe04 	addi	r3,r2,-8
   11500:	80c0d926 	beq	r16,r3,11868 <_malloc_r+0x5d0>
   11504:	80c00117 	ldw	r3,4(r16)
   11508:	81000317 	ldw	r4,12(r16)
   1150c:	00bfff04 	movi	r2,-4
   11510:	1884703a 	and	r2,r3,r2
   11514:	81400217 	ldw	r5,8(r16)
   11518:	8085883a 	add	r2,r16,r2
   1151c:	10c00117 	ldw	r3,4(r2)
   11520:	29000315 	stw	r4,12(r5)
   11524:	21400215 	stw	r5,8(r4)
   11528:	18c00054 	ori	r3,r3,1
   1152c:	10c00115 	stw	r3,4(r2)
   11530:	9009883a 	mov	r4,r18
   11534:	00138fc0 	call	138fc <__malloc_unlock>
   11538:	80800204 	addi	r2,r16,8
   1153c:	dfc00a17 	ldw	ra,40(sp)
   11540:	df000917 	ldw	fp,36(sp)
   11544:	ddc00817 	ldw	r23,32(sp)
   11548:	dd800717 	ldw	r22,28(sp)
   1154c:	dd400617 	ldw	r21,24(sp)
   11550:	dd000517 	ldw	r20,20(sp)
   11554:	dcc00417 	ldw	r19,16(sp)
   11558:	dc800317 	ldw	r18,12(sp)
   1155c:	dc400217 	ldw	r17,8(sp)
   11560:	dc000117 	ldw	r16,4(sp)
   11564:	dec00b04 	addi	sp,sp,44
   11568:	f800283a 	ret
   1156c:	00800304 	movi	r2,12
   11570:	90800015 	stw	r2,0(r18)
   11574:	0005883a 	mov	r2,zero
   11578:	003ff006 	br	1153c <_gp+0xffff1fa4>
   1157c:	01002004 	movi	r4,128
   11580:	02001004 	movi	r8,64
   11584:	01c00fc4 	movi	r7,63
   11588:	003f6106 	br	11310 <_gp+0xffff1d78>
   1158c:	4009883a 	mov	r4,r8
   11590:	003f7506 	br	11368 <_gp+0xffff1dd0>
   11594:	81000317 	ldw	r4,12(r16)
   11598:	003fde06 	br	11514 <_gp+0xffff1f7c>
   1159c:	81c5883a 	add	r2,r16,r7
   115a0:	11400117 	ldw	r5,4(r2)
   115a4:	9009883a 	mov	r4,r18
   115a8:	29400054 	ori	r5,r5,1
   115ac:	11400115 	stw	r5,4(r2)
   115b0:	00138fc0 	call	138fc <__malloc_unlock>
   115b4:	80800204 	addi	r2,r16,8
   115b8:	003fe006 	br	1153c <_gp+0xffff1fa4>
   115bc:	9c000217 	ldw	r16,8(r19)
   115c0:	00bfff04 	movi	r2,-4
   115c4:	85800117 	ldw	r22,4(r16)
   115c8:	b0ac703a 	and	r22,r22,r2
   115cc:	b4400336 	bltu	r22,r17,115dc <_malloc_r+0x344>
   115d0:	b445c83a 	sub	r2,r22,r17
   115d4:	00c003c4 	movi	r3,15
   115d8:	18805d16 	blt	r3,r2,11750 <_malloc_r+0x4b8>
   115dc:	05c00074 	movhi	r23,1
   115e0:	008000b4 	movhi	r2,2
   115e4:	10a41d04 	addi	r2,r2,-28556
   115e8:	bddd6804 	addi	r23,r23,30112
   115ec:	15400017 	ldw	r21,0(r2)
   115f0:	b8c00017 	ldw	r3,0(r23)
   115f4:	00bfffc4 	movi	r2,-1
   115f8:	858d883a 	add	r6,r16,r22
   115fc:	8d6b883a 	add	r21,r17,r21
   11600:	1880ea26 	beq	r3,r2,119ac <_malloc_r+0x714>
   11604:	ad4403c4 	addi	r21,r21,4111
   11608:	00bc0004 	movi	r2,-4096
   1160c:	a8aa703a 	and	r21,r21,r2
   11610:	a80b883a 	mov	r5,r21
   11614:	9009883a 	mov	r4,r18
   11618:	d9800015 	stw	r6,0(sp)
   1161c:	00124b80 	call	124b8 <_sbrk_r>
   11620:	1029883a 	mov	r20,r2
   11624:	00bfffc4 	movi	r2,-1
   11628:	d9800017 	ldw	r6,0(sp)
   1162c:	a080e826 	beq	r20,r2,119d0 <_malloc_r+0x738>
   11630:	a180a636 	bltu	r20,r6,118cc <_malloc_r+0x634>
   11634:	070000b4 	movhi	fp,2
   11638:	e7242604 	addi	fp,fp,-28520
   1163c:	e0800017 	ldw	r2,0(fp)
   11640:	a887883a 	add	r3,r21,r2
   11644:	e0c00015 	stw	r3,0(fp)
   11648:	3500e626 	beq	r6,r20,119e4 <_malloc_r+0x74c>
   1164c:	b9000017 	ldw	r4,0(r23)
   11650:	00bfffc4 	movi	r2,-1
   11654:	2080ee26 	beq	r4,r2,11a10 <_malloc_r+0x778>
   11658:	a185c83a 	sub	r2,r20,r6
   1165c:	10c5883a 	add	r2,r2,r3
   11660:	e0800015 	stw	r2,0(fp)
   11664:	a0c001cc 	andi	r3,r20,7
   11668:	1800bc26 	beq	r3,zero,1195c <_malloc_r+0x6c4>
   1166c:	a0e9c83a 	sub	r20,r20,r3
   11670:	00840204 	movi	r2,4104
   11674:	a5000204 	addi	r20,r20,8
   11678:	10c7c83a 	sub	r3,r2,r3
   1167c:	a545883a 	add	r2,r20,r21
   11680:	1083ffcc 	andi	r2,r2,4095
   11684:	18abc83a 	sub	r21,r3,r2
   11688:	a80b883a 	mov	r5,r21
   1168c:	9009883a 	mov	r4,r18
   11690:	00124b80 	call	124b8 <_sbrk_r>
   11694:	00ffffc4 	movi	r3,-1
   11698:	10c0e126 	beq	r2,r3,11a20 <_malloc_r+0x788>
   1169c:	1505c83a 	sub	r2,r2,r20
   116a0:	1545883a 	add	r2,r2,r21
   116a4:	10800054 	ori	r2,r2,1
   116a8:	e0c00017 	ldw	r3,0(fp)
   116ac:	9d000215 	stw	r20,8(r19)
   116b0:	a0800115 	stw	r2,4(r20)
   116b4:	a8c7883a 	add	r3,r21,r3
   116b8:	e0c00015 	stw	r3,0(fp)
   116bc:	84c00e26 	beq	r16,r19,116f8 <_malloc_r+0x460>
   116c0:	018003c4 	movi	r6,15
   116c4:	3580a72e 	bgeu	r6,r22,11964 <_malloc_r+0x6cc>
   116c8:	81400117 	ldw	r5,4(r16)
   116cc:	013ffe04 	movi	r4,-8
   116d0:	b0bffd04 	addi	r2,r22,-12
   116d4:	1104703a 	and	r2,r2,r4
   116d8:	2900004c 	andi	r4,r5,1
   116dc:	2088b03a 	or	r4,r4,r2
   116e0:	81000115 	stw	r4,4(r16)
   116e4:	01400144 	movi	r5,5
   116e8:	8089883a 	add	r4,r16,r2
   116ec:	21400115 	stw	r5,4(r4)
   116f0:	21400215 	stw	r5,8(r4)
   116f4:	3080cd36 	bltu	r6,r2,11a2c <_malloc_r+0x794>
   116f8:	008000b4 	movhi	r2,2
   116fc:	10a41c04 	addi	r2,r2,-28560
   11700:	11000017 	ldw	r4,0(r2)
   11704:	20c0012e 	bgeu	r4,r3,1170c <_malloc_r+0x474>
   11708:	10c00015 	stw	r3,0(r2)
   1170c:	008000b4 	movhi	r2,2
   11710:	10a41b04 	addi	r2,r2,-28564
   11714:	11000017 	ldw	r4,0(r2)
   11718:	9c000217 	ldw	r16,8(r19)
   1171c:	20c0012e 	bgeu	r4,r3,11724 <_malloc_r+0x48c>
   11720:	10c00015 	stw	r3,0(r2)
   11724:	80c00117 	ldw	r3,4(r16)
   11728:	00bfff04 	movi	r2,-4
   1172c:	1886703a 	and	r3,r3,r2
   11730:	1c45c83a 	sub	r2,r3,r17
   11734:	1c400236 	bltu	r3,r17,11740 <_malloc_r+0x4a8>
   11738:	00c003c4 	movi	r3,15
   1173c:	18800416 	blt	r3,r2,11750 <_malloc_r+0x4b8>
   11740:	9009883a 	mov	r4,r18
   11744:	00138fc0 	call	138fc <__malloc_unlock>
   11748:	0005883a 	mov	r2,zero
   1174c:	003f7b06 	br	1153c <_gp+0xffff1fa4>
   11750:	88c00054 	ori	r3,r17,1
   11754:	80c00115 	stw	r3,4(r16)
   11758:	8463883a 	add	r17,r16,r17
   1175c:	10800054 	ori	r2,r2,1
   11760:	9c400215 	stw	r17,8(r19)
   11764:	88800115 	stw	r2,4(r17)
   11768:	9009883a 	mov	r4,r18
   1176c:	00138fc0 	call	138fc <__malloc_unlock>
   11770:	80800204 	addi	r2,r16,8
   11774:	003f7106 	br	1153c <_gp+0xffff1fa4>
   11778:	00c00504 	movi	r3,20
   1177c:	18804a2e 	bgeu	r3,r2,118a8 <_malloc_r+0x610>
   11780:	00c01504 	movi	r3,84
   11784:	18806e36 	bltu	r3,r2,11940 <_malloc_r+0x6a8>
   11788:	8804d33a 	srli	r2,r17,12
   1178c:	12001bc4 	addi	r8,r2,111
   11790:	11c01b84 	addi	r7,r2,110
   11794:	4209883a 	add	r4,r8,r8
   11798:	003edd06 	br	11310 <_gp+0xffff1d78>
   1179c:	3804d27a 	srli	r2,r7,9
   117a0:	00c00104 	movi	r3,4
   117a4:	1880442e 	bgeu	r3,r2,118b8 <_malloc_r+0x620>
   117a8:	00c00504 	movi	r3,20
   117ac:	18808136 	bltu	r3,r2,119b4 <_malloc_r+0x71c>
   117b0:	11401704 	addi	r5,r2,92
   117b4:	10c016c4 	addi	r3,r2,91
   117b8:	294b883a 	add	r5,r5,r5
   117bc:	294b883a 	add	r5,r5,r5
   117c0:	294b883a 	add	r5,r5,r5
   117c4:	994b883a 	add	r5,r19,r5
   117c8:	28800017 	ldw	r2,0(r5)
   117cc:	01800074 	movhi	r6,1
   117d0:	297ffe04 	addi	r5,r5,-8
   117d4:	3197e204 	addi	r6,r6,24456
   117d8:	28806526 	beq	r5,r2,11970 <_malloc_r+0x6d8>
   117dc:	01bfff04 	movi	r6,-4
   117e0:	10c00117 	ldw	r3,4(r2)
   117e4:	1986703a 	and	r3,r3,r6
   117e8:	38c0022e 	bgeu	r7,r3,117f4 <_malloc_r+0x55c>
   117ec:	10800217 	ldw	r2,8(r2)
   117f0:	28bffb1e 	bne	r5,r2,117e0 <_gp+0xffff2248>
   117f4:	11400317 	ldw	r5,12(r2)
   117f8:	98c00117 	ldw	r3,4(r19)
   117fc:	81400315 	stw	r5,12(r16)
   11800:	80800215 	stw	r2,8(r16)
   11804:	2c000215 	stw	r16,8(r5)
   11808:	14000315 	stw	r16,12(r2)
   1180c:	003ef806 	br	113f0 <_gp+0xffff1e58>
   11810:	88c00054 	ori	r3,r17,1
   11814:	80c00115 	stw	r3,4(r16)
   11818:	8463883a 	add	r17,r16,r17
   1181c:	34400515 	stw	r17,20(r6)
   11820:	34400415 	stw	r17,16(r6)
   11824:	10c00054 	ori	r3,r2,1
   11828:	8a000315 	stw	r8,12(r17)
   1182c:	8a000215 	stw	r8,8(r17)
   11830:	88c00115 	stw	r3,4(r17)
   11834:	88a3883a 	add	r17,r17,r2
   11838:	88800015 	stw	r2,0(r17)
   1183c:	9009883a 	mov	r4,r18
   11840:	00138fc0 	call	138fc <__malloc_unlock>
   11844:	80800204 	addi	r2,r16,8
   11848:	003f3c06 	br	1153c <_gp+0xffff1fa4>
   1184c:	30c00117 	ldw	r3,4(r6)
   11850:	003ee706 	br	113f0 <_gp+0xffff1e58>
   11854:	5ac00044 	addi	r11,r11,1
   11858:	588000cc 	andi	r2,r11,3
   1185c:	31800204 	addi	r6,r6,8
   11860:	103efd1e 	bne	r2,zero,11458 <_gp+0xffff1ec0>
   11864:	00002406 	br	118f8 <_malloc_r+0x660>
   11868:	14000317 	ldw	r16,12(r2)
   1186c:	143f251e 	bne	r2,r16,11504 <_gp+0xffff1f6c>
   11870:	21000084 	addi	r4,r4,2
   11874:	003ebc06 	br	11368 <_gp+0xffff1dd0>
   11878:	8085883a 	add	r2,r16,r2
   1187c:	10c00117 	ldw	r3,4(r2)
   11880:	81000317 	ldw	r4,12(r16)
   11884:	81400217 	ldw	r5,8(r16)
   11888:	18c00054 	ori	r3,r3,1
   1188c:	10c00115 	stw	r3,4(r2)
   11890:	29000315 	stw	r4,12(r5)
   11894:	21400215 	stw	r5,8(r4)
   11898:	9009883a 	mov	r4,r18
   1189c:	00138fc0 	call	138fc <__malloc_unlock>
   118a0:	80800204 	addi	r2,r16,8
   118a4:	003f2506 	br	1153c <_gp+0xffff1fa4>
   118a8:	12001704 	addi	r8,r2,92
   118ac:	11c016c4 	addi	r7,r2,91
   118b0:	4209883a 	add	r4,r8,r8
   118b4:	003e9606 	br	11310 <_gp+0xffff1d78>
   118b8:	3804d1ba 	srli	r2,r7,6
   118bc:	11400e44 	addi	r5,r2,57
   118c0:	10c00e04 	addi	r3,r2,56
   118c4:	294b883a 	add	r5,r5,r5
   118c8:	003fbc06 	br	117bc <_gp+0xffff2224>
   118cc:	84ff5926 	beq	r16,r19,11634 <_gp+0xffff209c>
   118d0:	00800074 	movhi	r2,1
   118d4:	1097e204 	addi	r2,r2,24456
   118d8:	14000217 	ldw	r16,8(r2)
   118dc:	00bfff04 	movi	r2,-4
   118e0:	80c00117 	ldw	r3,4(r16)
   118e4:	1886703a 	and	r3,r3,r2
   118e8:	003f9106 	br	11730 <_gp+0xffff2198>
   118ec:	60800217 	ldw	r2,8(r12)
   118f0:	213fffc4 	addi	r4,r4,-1
   118f4:	1300651e 	bne	r2,r12,11a8c <_malloc_r+0x7f4>
   118f8:	208000cc 	andi	r2,r4,3
   118fc:	633ffe04 	addi	r12,r12,-8
   11900:	103ffa1e 	bne	r2,zero,118ec <_gp+0xffff2354>
   11904:	98800117 	ldw	r2,4(r19)
   11908:	0146303a 	nor	r3,zero,r5
   1190c:	1884703a 	and	r2,r3,r2
   11910:	98800115 	stw	r2,4(r19)
   11914:	294b883a 	add	r5,r5,r5
   11918:	117f2836 	bltu	r2,r5,115bc <_gp+0xffff2024>
   1191c:	283f2726 	beq	r5,zero,115bc <_gp+0xffff2024>
   11920:	2886703a 	and	r3,r5,r2
   11924:	5809883a 	mov	r4,r11
   11928:	183ec31e 	bne	r3,zero,11438 <_gp+0xffff1ea0>
   1192c:	294b883a 	add	r5,r5,r5
   11930:	2886703a 	and	r3,r5,r2
   11934:	21000104 	addi	r4,r4,4
   11938:	183ffc26 	beq	r3,zero,1192c <_gp+0xffff2394>
   1193c:	003ebe06 	br	11438 <_gp+0xffff1ea0>
   11940:	00c05504 	movi	r3,340
   11944:	18801236 	bltu	r3,r2,11990 <_malloc_r+0x6f8>
   11948:	8804d3fa 	srli	r2,r17,15
   1194c:	12001e04 	addi	r8,r2,120
   11950:	11c01dc4 	addi	r7,r2,119
   11954:	4209883a 	add	r4,r8,r8
   11958:	003e6d06 	br	11310 <_gp+0xffff1d78>
   1195c:	00c40004 	movi	r3,4096
   11960:	003f4606 	br	1167c <_gp+0xffff20e4>
   11964:	00800044 	movi	r2,1
   11968:	a0800115 	stw	r2,4(r20)
   1196c:	003f7406 	br	11740 <_gp+0xffff21a8>
   11970:	1805d0ba 	srai	r2,r3,2
   11974:	01c00044 	movi	r7,1
   11978:	30c00117 	ldw	r3,4(r6)
   1197c:	388e983a 	sll	r7,r7,r2
   11980:	2805883a 	mov	r2,r5
   11984:	38c6b03a 	or	r3,r7,r3
   11988:	30c00115 	stw	r3,4(r6)
   1198c:	003f9b06 	br	117fc <_gp+0xffff2264>
   11990:	00c15504 	movi	r3,1364
   11994:	18801a36 	bltu	r3,r2,11a00 <_malloc_r+0x768>
   11998:	8804d4ba 	srli	r2,r17,18
   1199c:	12001f44 	addi	r8,r2,125
   119a0:	11c01f04 	addi	r7,r2,124
   119a4:	4209883a 	add	r4,r8,r8
   119a8:	003e5906 	br	11310 <_gp+0xffff1d78>
   119ac:	ad400404 	addi	r21,r21,16
   119b0:	003f1706 	br	11610 <_gp+0xffff2078>
   119b4:	00c01504 	movi	r3,84
   119b8:	18802336 	bltu	r3,r2,11a48 <_malloc_r+0x7b0>
   119bc:	3804d33a 	srli	r2,r7,12
   119c0:	11401bc4 	addi	r5,r2,111
   119c4:	10c01b84 	addi	r3,r2,110
   119c8:	294b883a 	add	r5,r5,r5
   119cc:	003f7b06 	br	117bc <_gp+0xffff2224>
   119d0:	9c000217 	ldw	r16,8(r19)
   119d4:	00bfff04 	movi	r2,-4
   119d8:	80c00117 	ldw	r3,4(r16)
   119dc:	1886703a 	and	r3,r3,r2
   119e0:	003f5306 	br	11730 <_gp+0xffff2198>
   119e4:	3083ffcc 	andi	r2,r6,4095
   119e8:	103f181e 	bne	r2,zero,1164c <_gp+0xffff20b4>
   119ec:	99000217 	ldw	r4,8(r19)
   119f0:	b545883a 	add	r2,r22,r21
   119f4:	10800054 	ori	r2,r2,1
   119f8:	20800115 	stw	r2,4(r4)
   119fc:	003f3e06 	br	116f8 <_gp+0xffff2160>
   11a00:	01003f84 	movi	r4,254
   11a04:	02001fc4 	movi	r8,127
   11a08:	01c01f84 	movi	r7,126
   11a0c:	003e4006 	br	11310 <_gp+0xffff1d78>
   11a10:	00800074 	movhi	r2,1
   11a14:	109d6804 	addi	r2,r2,30112
   11a18:	15000015 	stw	r20,0(r2)
   11a1c:	003f1106 	br	11664 <_gp+0xffff20cc>
   11a20:	00800044 	movi	r2,1
   11a24:	002b883a 	mov	r21,zero
   11a28:	003f1f06 	br	116a8 <_gp+0xffff2110>
   11a2c:	81400204 	addi	r5,r16,8
   11a30:	9009883a 	mov	r4,r18
   11a34:	0012d200 	call	12d20 <_free_r>
   11a38:	008000b4 	movhi	r2,2
   11a3c:	10a42604 	addi	r2,r2,-28520
   11a40:	10c00017 	ldw	r3,0(r2)
   11a44:	003f2c06 	br	116f8 <_gp+0xffff2160>
   11a48:	00c05504 	movi	r3,340
   11a4c:	18800536 	bltu	r3,r2,11a64 <_malloc_r+0x7cc>
   11a50:	3804d3fa 	srli	r2,r7,15
   11a54:	11401e04 	addi	r5,r2,120
   11a58:	10c01dc4 	addi	r3,r2,119
   11a5c:	294b883a 	add	r5,r5,r5
   11a60:	003f5606 	br	117bc <_gp+0xffff2224>
   11a64:	00c15504 	movi	r3,1364
   11a68:	18800536 	bltu	r3,r2,11a80 <_malloc_r+0x7e8>
   11a6c:	3804d4ba 	srli	r2,r7,18
   11a70:	11401f44 	addi	r5,r2,125
   11a74:	10c01f04 	addi	r3,r2,124
   11a78:	294b883a 	add	r5,r5,r5
   11a7c:	003f4f06 	br	117bc <_gp+0xffff2224>
   11a80:	01403f84 	movi	r5,254
   11a84:	00c01f84 	movi	r3,126
   11a88:	003f4c06 	br	117bc <_gp+0xffff2224>
   11a8c:	98800117 	ldw	r2,4(r19)
   11a90:	003fa006 	br	11914 <_gp+0xffff237c>
   11a94:	8808d0fa 	srli	r4,r17,3
   11a98:	20800044 	addi	r2,r4,1
   11a9c:	1085883a 	add	r2,r2,r2
   11aa0:	003e9006 	br	114e4 <_gp+0xffff1f4c>

00011aa4 <memchr>:
   11aa4:	208000cc 	andi	r2,r4,3
   11aa8:	280f883a 	mov	r7,r5
   11aac:	10003426 	beq	r2,zero,11b80 <memchr+0xdc>
   11ab0:	30bfffc4 	addi	r2,r6,-1
   11ab4:	30001a26 	beq	r6,zero,11b20 <memchr+0x7c>
   11ab8:	20c00003 	ldbu	r3,0(r4)
   11abc:	29803fcc 	andi	r6,r5,255
   11ac0:	30c0051e 	bne	r6,r3,11ad8 <memchr+0x34>
   11ac4:	00001806 	br	11b28 <memchr+0x84>
   11ac8:	10001526 	beq	r2,zero,11b20 <memchr+0x7c>
   11acc:	20c00003 	ldbu	r3,0(r4)
   11ad0:	10bfffc4 	addi	r2,r2,-1
   11ad4:	30c01426 	beq	r6,r3,11b28 <memchr+0x84>
   11ad8:	21000044 	addi	r4,r4,1
   11adc:	20c000cc 	andi	r3,r4,3
   11ae0:	183ff91e 	bne	r3,zero,11ac8 <_gp+0xffff2530>
   11ae4:	020000c4 	movi	r8,3
   11ae8:	40801136 	bltu	r8,r2,11b30 <memchr+0x8c>
   11aec:	10000c26 	beq	r2,zero,11b20 <memchr+0x7c>
   11af0:	20c00003 	ldbu	r3,0(r4)
   11af4:	29403fcc 	andi	r5,r5,255
   11af8:	28c00b26 	beq	r5,r3,11b28 <memchr+0x84>
   11afc:	20c00044 	addi	r3,r4,1
   11b00:	39803fcc 	andi	r6,r7,255
   11b04:	2089883a 	add	r4,r4,r2
   11b08:	00000306 	br	11b18 <memchr+0x74>
   11b0c:	18c00044 	addi	r3,r3,1
   11b10:	197fffc3 	ldbu	r5,-1(r3)
   11b14:	31400526 	beq	r6,r5,11b2c <memchr+0x88>
   11b18:	1805883a 	mov	r2,r3
   11b1c:	20fffb1e 	bne	r4,r3,11b0c <_gp+0xffff2574>
   11b20:	0005883a 	mov	r2,zero
   11b24:	f800283a 	ret
   11b28:	2005883a 	mov	r2,r4
   11b2c:	f800283a 	ret
   11b30:	28c03fcc 	andi	r3,r5,255
   11b34:	1812923a 	slli	r9,r3,8
   11b38:	02ffbff4 	movhi	r11,65279
   11b3c:	02a02074 	movhi	r10,32897
   11b40:	48d2b03a 	or	r9,r9,r3
   11b44:	4806943a 	slli	r3,r9,16
   11b48:	5affbfc4 	addi	r11,r11,-257
   11b4c:	52a02004 	addi	r10,r10,-32640
   11b50:	48d2b03a 	or	r9,r9,r3
   11b54:	20c00017 	ldw	r3,0(r4)
   11b58:	48c6f03a 	xor	r3,r9,r3
   11b5c:	1acd883a 	add	r6,r3,r11
   11b60:	00c6303a 	nor	r3,zero,r3
   11b64:	30c6703a 	and	r3,r6,r3
   11b68:	1a86703a 	and	r3,r3,r10
   11b6c:	183fe01e 	bne	r3,zero,11af0 <_gp+0xffff2558>
   11b70:	10bfff04 	addi	r2,r2,-4
   11b74:	21000104 	addi	r4,r4,4
   11b78:	40bff636 	bltu	r8,r2,11b54 <_gp+0xffff25bc>
   11b7c:	003fdb06 	br	11aec <_gp+0xffff2554>
   11b80:	3005883a 	mov	r2,r6
   11b84:	003fd706 	br	11ae4 <_gp+0xffff254c>

00011b88 <memcpy>:
   11b88:	defffd04 	addi	sp,sp,-12
   11b8c:	dfc00215 	stw	ra,8(sp)
   11b90:	dc400115 	stw	r17,4(sp)
   11b94:	dc000015 	stw	r16,0(sp)
   11b98:	00c003c4 	movi	r3,15
   11b9c:	2005883a 	mov	r2,r4
   11ba0:	1980452e 	bgeu	r3,r6,11cb8 <memcpy+0x130>
   11ba4:	2906b03a 	or	r3,r5,r4
   11ba8:	18c000cc 	andi	r3,r3,3
   11bac:	1800441e 	bne	r3,zero,11cc0 <memcpy+0x138>
   11bb0:	347ffc04 	addi	r17,r6,-16
   11bb4:	8822d13a 	srli	r17,r17,4
   11bb8:	28c00104 	addi	r3,r5,4
   11bbc:	23400104 	addi	r13,r4,4
   11bc0:	8820913a 	slli	r16,r17,4
   11bc4:	2b000204 	addi	r12,r5,8
   11bc8:	22c00204 	addi	r11,r4,8
   11bcc:	84000504 	addi	r16,r16,20
   11bd0:	2a800304 	addi	r10,r5,12
   11bd4:	22400304 	addi	r9,r4,12
   11bd8:	2c21883a 	add	r16,r5,r16
   11bdc:	2811883a 	mov	r8,r5
   11be0:	200f883a 	mov	r7,r4
   11be4:	41000017 	ldw	r4,0(r8)
   11be8:	1fc00017 	ldw	ra,0(r3)
   11bec:	63c00017 	ldw	r15,0(r12)
   11bf0:	39000015 	stw	r4,0(r7)
   11bf4:	53800017 	ldw	r14,0(r10)
   11bf8:	6fc00015 	stw	ra,0(r13)
   11bfc:	5bc00015 	stw	r15,0(r11)
   11c00:	4b800015 	stw	r14,0(r9)
   11c04:	18c00404 	addi	r3,r3,16
   11c08:	39c00404 	addi	r7,r7,16
   11c0c:	42000404 	addi	r8,r8,16
   11c10:	6b400404 	addi	r13,r13,16
   11c14:	63000404 	addi	r12,r12,16
   11c18:	5ac00404 	addi	r11,r11,16
   11c1c:	52800404 	addi	r10,r10,16
   11c20:	4a400404 	addi	r9,r9,16
   11c24:	1c3fef1e 	bne	r3,r16,11be4 <_gp+0xffff264c>
   11c28:	89c00044 	addi	r7,r17,1
   11c2c:	380e913a 	slli	r7,r7,4
   11c30:	310003cc 	andi	r4,r6,15
   11c34:	02c000c4 	movi	r11,3
   11c38:	11c7883a 	add	r3,r2,r7
   11c3c:	29cb883a 	add	r5,r5,r7
   11c40:	5900212e 	bgeu	r11,r4,11cc8 <memcpy+0x140>
   11c44:	1813883a 	mov	r9,r3
   11c48:	2811883a 	mov	r8,r5
   11c4c:	200f883a 	mov	r7,r4
   11c50:	42800017 	ldw	r10,0(r8)
   11c54:	4a400104 	addi	r9,r9,4
   11c58:	39ffff04 	addi	r7,r7,-4
   11c5c:	4abfff15 	stw	r10,-4(r9)
   11c60:	42000104 	addi	r8,r8,4
   11c64:	59fffa36 	bltu	r11,r7,11c50 <_gp+0xffff26b8>
   11c68:	213fff04 	addi	r4,r4,-4
   11c6c:	2008d0ba 	srli	r4,r4,2
   11c70:	318000cc 	andi	r6,r6,3
   11c74:	21000044 	addi	r4,r4,1
   11c78:	2109883a 	add	r4,r4,r4
   11c7c:	2109883a 	add	r4,r4,r4
   11c80:	1907883a 	add	r3,r3,r4
   11c84:	290b883a 	add	r5,r5,r4
   11c88:	30000626 	beq	r6,zero,11ca4 <memcpy+0x11c>
   11c8c:	198d883a 	add	r6,r3,r6
   11c90:	29c00003 	ldbu	r7,0(r5)
   11c94:	18c00044 	addi	r3,r3,1
   11c98:	29400044 	addi	r5,r5,1
   11c9c:	19ffffc5 	stb	r7,-1(r3)
   11ca0:	19bffb1e 	bne	r3,r6,11c90 <_gp+0xffff26f8>
   11ca4:	dfc00217 	ldw	ra,8(sp)
   11ca8:	dc400117 	ldw	r17,4(sp)
   11cac:	dc000017 	ldw	r16,0(sp)
   11cb0:	dec00304 	addi	sp,sp,12
   11cb4:	f800283a 	ret
   11cb8:	2007883a 	mov	r3,r4
   11cbc:	003ff206 	br	11c88 <_gp+0xffff26f0>
   11cc0:	2007883a 	mov	r3,r4
   11cc4:	003ff106 	br	11c8c <_gp+0xffff26f4>
   11cc8:	200d883a 	mov	r6,r4
   11ccc:	003fee06 	br	11c88 <_gp+0xffff26f0>

00011cd0 <memmove>:
   11cd0:	2005883a 	mov	r2,r4
   11cd4:	29000b2e 	bgeu	r5,r4,11d04 <memmove+0x34>
   11cd8:	298f883a 	add	r7,r5,r6
   11cdc:	21c0092e 	bgeu	r4,r7,11d04 <memmove+0x34>
   11ce0:	2187883a 	add	r3,r4,r6
   11ce4:	198bc83a 	sub	r5,r3,r6
   11ce8:	30004826 	beq	r6,zero,11e0c <memmove+0x13c>
   11cec:	39ffffc4 	addi	r7,r7,-1
   11cf0:	39000003 	ldbu	r4,0(r7)
   11cf4:	18ffffc4 	addi	r3,r3,-1
   11cf8:	19000005 	stb	r4,0(r3)
   11cfc:	28fffb1e 	bne	r5,r3,11cec <_gp+0xffff2754>
   11d00:	f800283a 	ret
   11d04:	00c003c4 	movi	r3,15
   11d08:	1980412e 	bgeu	r3,r6,11e10 <memmove+0x140>
   11d0c:	2886b03a 	or	r3,r5,r2
   11d10:	18c000cc 	andi	r3,r3,3
   11d14:	1800401e 	bne	r3,zero,11e18 <memmove+0x148>
   11d18:	33fffc04 	addi	r15,r6,-16
   11d1c:	781ed13a 	srli	r15,r15,4
   11d20:	28c00104 	addi	r3,r5,4
   11d24:	13400104 	addi	r13,r2,4
   11d28:	781c913a 	slli	r14,r15,4
   11d2c:	2b000204 	addi	r12,r5,8
   11d30:	12c00204 	addi	r11,r2,8
   11d34:	73800504 	addi	r14,r14,20
   11d38:	2a800304 	addi	r10,r5,12
   11d3c:	12400304 	addi	r9,r2,12
   11d40:	2b9d883a 	add	r14,r5,r14
   11d44:	2811883a 	mov	r8,r5
   11d48:	100f883a 	mov	r7,r2
   11d4c:	41000017 	ldw	r4,0(r8)
   11d50:	39c00404 	addi	r7,r7,16
   11d54:	18c00404 	addi	r3,r3,16
   11d58:	393ffc15 	stw	r4,-16(r7)
   11d5c:	193ffc17 	ldw	r4,-16(r3)
   11d60:	6b400404 	addi	r13,r13,16
   11d64:	5ac00404 	addi	r11,r11,16
   11d68:	693ffc15 	stw	r4,-16(r13)
   11d6c:	61000017 	ldw	r4,0(r12)
   11d70:	4a400404 	addi	r9,r9,16
   11d74:	42000404 	addi	r8,r8,16
   11d78:	593ffc15 	stw	r4,-16(r11)
   11d7c:	51000017 	ldw	r4,0(r10)
   11d80:	63000404 	addi	r12,r12,16
   11d84:	52800404 	addi	r10,r10,16
   11d88:	493ffc15 	stw	r4,-16(r9)
   11d8c:	1bbfef1e 	bne	r3,r14,11d4c <_gp+0xffff27b4>
   11d90:	79000044 	addi	r4,r15,1
   11d94:	2008913a 	slli	r4,r4,4
   11d98:	328003cc 	andi	r10,r6,15
   11d9c:	02c000c4 	movi	r11,3
   11da0:	1107883a 	add	r3,r2,r4
   11da4:	290b883a 	add	r5,r5,r4
   11da8:	5a801e2e 	bgeu	r11,r10,11e24 <memmove+0x154>
   11dac:	1813883a 	mov	r9,r3
   11db0:	2811883a 	mov	r8,r5
   11db4:	500f883a 	mov	r7,r10
   11db8:	41000017 	ldw	r4,0(r8)
   11dbc:	4a400104 	addi	r9,r9,4
   11dc0:	39ffff04 	addi	r7,r7,-4
   11dc4:	493fff15 	stw	r4,-4(r9)
   11dc8:	42000104 	addi	r8,r8,4
   11dcc:	59fffa36 	bltu	r11,r7,11db8 <_gp+0xffff2820>
   11dd0:	513fff04 	addi	r4,r10,-4
   11dd4:	2008d0ba 	srli	r4,r4,2
   11dd8:	318000cc 	andi	r6,r6,3
   11ddc:	21000044 	addi	r4,r4,1
   11de0:	2109883a 	add	r4,r4,r4
   11de4:	2109883a 	add	r4,r4,r4
   11de8:	1907883a 	add	r3,r3,r4
   11dec:	290b883a 	add	r5,r5,r4
   11df0:	30000b26 	beq	r6,zero,11e20 <memmove+0x150>
   11df4:	198d883a 	add	r6,r3,r6
   11df8:	29c00003 	ldbu	r7,0(r5)
   11dfc:	18c00044 	addi	r3,r3,1
   11e00:	29400044 	addi	r5,r5,1
   11e04:	19ffffc5 	stb	r7,-1(r3)
   11e08:	19bffb1e 	bne	r3,r6,11df8 <_gp+0xffff2860>
   11e0c:	f800283a 	ret
   11e10:	1007883a 	mov	r3,r2
   11e14:	003ff606 	br	11df0 <_gp+0xffff2858>
   11e18:	1007883a 	mov	r3,r2
   11e1c:	003ff506 	br	11df4 <_gp+0xffff285c>
   11e20:	f800283a 	ret
   11e24:	500d883a 	mov	r6,r10
   11e28:	003ff106 	br	11df0 <_gp+0xffff2858>

00011e2c <memset>:
   11e2c:	20c000cc 	andi	r3,r4,3
   11e30:	2005883a 	mov	r2,r4
   11e34:	18004426 	beq	r3,zero,11f48 <memset+0x11c>
   11e38:	31ffffc4 	addi	r7,r6,-1
   11e3c:	30004026 	beq	r6,zero,11f40 <memset+0x114>
   11e40:	2813883a 	mov	r9,r5
   11e44:	200d883a 	mov	r6,r4
   11e48:	2007883a 	mov	r3,r4
   11e4c:	00000406 	br	11e60 <memset+0x34>
   11e50:	3a3fffc4 	addi	r8,r7,-1
   11e54:	31800044 	addi	r6,r6,1
   11e58:	38003926 	beq	r7,zero,11f40 <memset+0x114>
   11e5c:	400f883a 	mov	r7,r8
   11e60:	18c00044 	addi	r3,r3,1
   11e64:	32400005 	stb	r9,0(r6)
   11e68:	1a0000cc 	andi	r8,r3,3
   11e6c:	403ff81e 	bne	r8,zero,11e50 <_gp+0xffff28b8>
   11e70:	010000c4 	movi	r4,3
   11e74:	21c02d2e 	bgeu	r4,r7,11f2c <memset+0x100>
   11e78:	29003fcc 	andi	r4,r5,255
   11e7c:	200c923a 	slli	r6,r4,8
   11e80:	3108b03a 	or	r4,r6,r4
   11e84:	200c943a 	slli	r6,r4,16
   11e88:	218cb03a 	or	r6,r4,r6
   11e8c:	010003c4 	movi	r4,15
   11e90:	21c0182e 	bgeu	r4,r7,11ef4 <memset+0xc8>
   11e94:	3b3ffc04 	addi	r12,r7,-16
   11e98:	6018d13a 	srli	r12,r12,4
   11e9c:	1a000104 	addi	r8,r3,4
   11ea0:	1ac00204 	addi	r11,r3,8
   11ea4:	6008913a 	slli	r4,r12,4
   11ea8:	1a800304 	addi	r10,r3,12
   11eac:	1813883a 	mov	r9,r3
   11eb0:	21000504 	addi	r4,r4,20
   11eb4:	1909883a 	add	r4,r3,r4
   11eb8:	49800015 	stw	r6,0(r9)
   11ebc:	41800015 	stw	r6,0(r8)
   11ec0:	59800015 	stw	r6,0(r11)
   11ec4:	51800015 	stw	r6,0(r10)
   11ec8:	42000404 	addi	r8,r8,16
   11ecc:	4a400404 	addi	r9,r9,16
   11ed0:	5ac00404 	addi	r11,r11,16
   11ed4:	52800404 	addi	r10,r10,16
   11ed8:	413ff71e 	bne	r8,r4,11eb8 <_gp+0xffff2920>
   11edc:	63000044 	addi	r12,r12,1
   11ee0:	6018913a 	slli	r12,r12,4
   11ee4:	39c003cc 	andi	r7,r7,15
   11ee8:	010000c4 	movi	r4,3
   11eec:	1b07883a 	add	r3,r3,r12
   11ef0:	21c00e2e 	bgeu	r4,r7,11f2c <memset+0x100>
   11ef4:	1813883a 	mov	r9,r3
   11ef8:	3811883a 	mov	r8,r7
   11efc:	010000c4 	movi	r4,3
   11f00:	49800015 	stw	r6,0(r9)
   11f04:	423fff04 	addi	r8,r8,-4
   11f08:	4a400104 	addi	r9,r9,4
   11f0c:	223ffc36 	bltu	r4,r8,11f00 <_gp+0xffff2968>
   11f10:	393fff04 	addi	r4,r7,-4
   11f14:	2008d0ba 	srli	r4,r4,2
   11f18:	39c000cc 	andi	r7,r7,3
   11f1c:	21000044 	addi	r4,r4,1
   11f20:	2109883a 	add	r4,r4,r4
   11f24:	2109883a 	add	r4,r4,r4
   11f28:	1907883a 	add	r3,r3,r4
   11f2c:	38000526 	beq	r7,zero,11f44 <memset+0x118>
   11f30:	19cf883a 	add	r7,r3,r7
   11f34:	19400005 	stb	r5,0(r3)
   11f38:	18c00044 	addi	r3,r3,1
   11f3c:	38fffd1e 	bne	r7,r3,11f34 <_gp+0xffff299c>
   11f40:	f800283a 	ret
   11f44:	f800283a 	ret
   11f48:	2007883a 	mov	r3,r4
   11f4c:	300f883a 	mov	r7,r6
   11f50:	003fc706 	br	11e70 <_gp+0xffff28d8>

00011f54 <_realloc_r>:
   11f54:	defff604 	addi	sp,sp,-40
   11f58:	dc800215 	stw	r18,8(sp)
   11f5c:	dfc00915 	stw	ra,36(sp)
   11f60:	df000815 	stw	fp,32(sp)
   11f64:	ddc00715 	stw	r23,28(sp)
   11f68:	dd800615 	stw	r22,24(sp)
   11f6c:	dd400515 	stw	r21,20(sp)
   11f70:	dd000415 	stw	r20,16(sp)
   11f74:	dcc00315 	stw	r19,12(sp)
   11f78:	dc400115 	stw	r17,4(sp)
   11f7c:	dc000015 	stw	r16,0(sp)
   11f80:	3025883a 	mov	r18,r6
   11f84:	2800b726 	beq	r5,zero,12264 <_realloc_r+0x310>
   11f88:	282b883a 	mov	r21,r5
   11f8c:	2029883a 	mov	r20,r4
   11f90:	00138d80 	call	138d8 <__malloc_lock>
   11f94:	a8bfff17 	ldw	r2,-4(r21)
   11f98:	043fff04 	movi	r16,-4
   11f9c:	90c002c4 	addi	r3,r18,11
   11fa0:	01000584 	movi	r4,22
   11fa4:	acfffe04 	addi	r19,r21,-8
   11fa8:	1420703a 	and	r16,r2,r16
   11fac:	20c0332e 	bgeu	r4,r3,1207c <_realloc_r+0x128>
   11fb0:	047ffe04 	movi	r17,-8
   11fb4:	1c62703a 	and	r17,r3,r17
   11fb8:	8807883a 	mov	r3,r17
   11fbc:	88005816 	blt	r17,zero,12120 <_realloc_r+0x1cc>
   11fc0:	8c805736 	bltu	r17,r18,12120 <_realloc_r+0x1cc>
   11fc4:	80c0300e 	bge	r16,r3,12088 <_realloc_r+0x134>
   11fc8:	07000074 	movhi	fp,1
   11fcc:	e717e204 	addi	fp,fp,24456
   11fd0:	e1c00217 	ldw	r7,8(fp)
   11fd4:	9c09883a 	add	r4,r19,r16
   11fd8:	22000117 	ldw	r8,4(r4)
   11fdc:	21c06326 	beq	r4,r7,1216c <_realloc_r+0x218>
   11fe0:	017fff84 	movi	r5,-2
   11fe4:	414a703a 	and	r5,r8,r5
   11fe8:	214b883a 	add	r5,r4,r5
   11fec:	29800117 	ldw	r6,4(r5)
   11ff0:	3180004c 	andi	r6,r6,1
   11ff4:	30003f26 	beq	r6,zero,120f4 <_realloc_r+0x1a0>
   11ff8:	1080004c 	andi	r2,r2,1
   11ffc:	10008326 	beq	r2,zero,1220c <_realloc_r+0x2b8>
   12000:	900b883a 	mov	r5,r18
   12004:	a009883a 	mov	r4,r20
   12008:	00112980 	call	11298 <_malloc_r>
   1200c:	1025883a 	mov	r18,r2
   12010:	10011e26 	beq	r2,zero,1248c <_realloc_r+0x538>
   12014:	a93fff17 	ldw	r4,-4(r21)
   12018:	10fffe04 	addi	r3,r2,-8
   1201c:	00bfff84 	movi	r2,-2
   12020:	2084703a 	and	r2,r4,r2
   12024:	9885883a 	add	r2,r19,r2
   12028:	1880ee26 	beq	r3,r2,123e4 <_realloc_r+0x490>
   1202c:	81bfff04 	addi	r6,r16,-4
   12030:	00800904 	movi	r2,36
   12034:	1180b836 	bltu	r2,r6,12318 <_realloc_r+0x3c4>
   12038:	00c004c4 	movi	r3,19
   1203c:	19809636 	bltu	r3,r6,12298 <_realloc_r+0x344>
   12040:	9005883a 	mov	r2,r18
   12044:	a807883a 	mov	r3,r21
   12048:	19000017 	ldw	r4,0(r3)
   1204c:	11000015 	stw	r4,0(r2)
   12050:	19000117 	ldw	r4,4(r3)
   12054:	11000115 	stw	r4,4(r2)
   12058:	18c00217 	ldw	r3,8(r3)
   1205c:	10c00215 	stw	r3,8(r2)
   12060:	a80b883a 	mov	r5,r21
   12064:	a009883a 	mov	r4,r20
   12068:	0012d200 	call	12d20 <_free_r>
   1206c:	a009883a 	mov	r4,r20
   12070:	00138fc0 	call	138fc <__malloc_unlock>
   12074:	9005883a 	mov	r2,r18
   12078:	00001206 	br	120c4 <_realloc_r+0x170>
   1207c:	00c00404 	movi	r3,16
   12080:	1823883a 	mov	r17,r3
   12084:	003fce06 	br	11fc0 <_gp+0xffff2a28>
   12088:	a825883a 	mov	r18,r21
   1208c:	8445c83a 	sub	r2,r16,r17
   12090:	00c003c4 	movi	r3,15
   12094:	18802636 	bltu	r3,r2,12130 <_realloc_r+0x1dc>
   12098:	99800117 	ldw	r6,4(r19)
   1209c:	9c07883a 	add	r3,r19,r16
   120a0:	3180004c 	andi	r6,r6,1
   120a4:	3420b03a 	or	r16,r6,r16
   120a8:	9c000115 	stw	r16,4(r19)
   120ac:	18800117 	ldw	r2,4(r3)
   120b0:	10800054 	ori	r2,r2,1
   120b4:	18800115 	stw	r2,4(r3)
   120b8:	a009883a 	mov	r4,r20
   120bc:	00138fc0 	call	138fc <__malloc_unlock>
   120c0:	9005883a 	mov	r2,r18
   120c4:	dfc00917 	ldw	ra,36(sp)
   120c8:	df000817 	ldw	fp,32(sp)
   120cc:	ddc00717 	ldw	r23,28(sp)
   120d0:	dd800617 	ldw	r22,24(sp)
   120d4:	dd400517 	ldw	r21,20(sp)
   120d8:	dd000417 	ldw	r20,16(sp)
   120dc:	dcc00317 	ldw	r19,12(sp)
   120e0:	dc800217 	ldw	r18,8(sp)
   120e4:	dc400117 	ldw	r17,4(sp)
   120e8:	dc000017 	ldw	r16,0(sp)
   120ec:	dec00a04 	addi	sp,sp,40
   120f0:	f800283a 	ret
   120f4:	017fff04 	movi	r5,-4
   120f8:	414a703a 	and	r5,r8,r5
   120fc:	814d883a 	add	r6,r16,r5
   12100:	30c01f16 	blt	r6,r3,12180 <_realloc_r+0x22c>
   12104:	20800317 	ldw	r2,12(r4)
   12108:	20c00217 	ldw	r3,8(r4)
   1210c:	a825883a 	mov	r18,r21
   12110:	3021883a 	mov	r16,r6
   12114:	18800315 	stw	r2,12(r3)
   12118:	10c00215 	stw	r3,8(r2)
   1211c:	003fdb06 	br	1208c <_gp+0xffff2af4>
   12120:	00800304 	movi	r2,12
   12124:	a0800015 	stw	r2,0(r20)
   12128:	0005883a 	mov	r2,zero
   1212c:	003fe506 	br	120c4 <_gp+0xffff2b2c>
   12130:	98c00117 	ldw	r3,4(r19)
   12134:	9c4b883a 	add	r5,r19,r17
   12138:	11000054 	ori	r4,r2,1
   1213c:	18c0004c 	andi	r3,r3,1
   12140:	1c62b03a 	or	r17,r3,r17
   12144:	9c400115 	stw	r17,4(r19)
   12148:	29000115 	stw	r4,4(r5)
   1214c:	2885883a 	add	r2,r5,r2
   12150:	10c00117 	ldw	r3,4(r2)
   12154:	29400204 	addi	r5,r5,8
   12158:	a009883a 	mov	r4,r20
   1215c:	18c00054 	ori	r3,r3,1
   12160:	10c00115 	stw	r3,4(r2)
   12164:	0012d200 	call	12d20 <_free_r>
   12168:	003fd306 	br	120b8 <_gp+0xffff2b20>
   1216c:	017fff04 	movi	r5,-4
   12170:	414a703a 	and	r5,r8,r5
   12174:	89800404 	addi	r6,r17,16
   12178:	8151883a 	add	r8,r16,r5
   1217c:	4180590e 	bge	r8,r6,122e4 <_realloc_r+0x390>
   12180:	1080004c 	andi	r2,r2,1
   12184:	103f9e1e 	bne	r2,zero,12000 <_gp+0xffff2a68>
   12188:	adbffe17 	ldw	r22,-8(r21)
   1218c:	00bfff04 	movi	r2,-4
   12190:	9dadc83a 	sub	r22,r19,r22
   12194:	b1800117 	ldw	r6,4(r22)
   12198:	3084703a 	and	r2,r6,r2
   1219c:	20002026 	beq	r4,zero,12220 <_realloc_r+0x2cc>
   121a0:	80af883a 	add	r23,r16,r2
   121a4:	b96f883a 	add	r23,r23,r5
   121a8:	21c05f26 	beq	r4,r7,12328 <_realloc_r+0x3d4>
   121ac:	b8c01c16 	blt	r23,r3,12220 <_realloc_r+0x2cc>
   121b0:	20800317 	ldw	r2,12(r4)
   121b4:	20c00217 	ldw	r3,8(r4)
   121b8:	81bfff04 	addi	r6,r16,-4
   121bc:	01000904 	movi	r4,36
   121c0:	18800315 	stw	r2,12(r3)
   121c4:	10c00215 	stw	r3,8(r2)
   121c8:	b0c00217 	ldw	r3,8(r22)
   121cc:	b0800317 	ldw	r2,12(r22)
   121d0:	b4800204 	addi	r18,r22,8
   121d4:	18800315 	stw	r2,12(r3)
   121d8:	10c00215 	stw	r3,8(r2)
   121dc:	21801b36 	bltu	r4,r6,1224c <_realloc_r+0x2f8>
   121e0:	008004c4 	movi	r2,19
   121e4:	1180352e 	bgeu	r2,r6,122bc <_realloc_r+0x368>
   121e8:	a8800017 	ldw	r2,0(r21)
   121ec:	b0800215 	stw	r2,8(r22)
   121f0:	a8800117 	ldw	r2,4(r21)
   121f4:	b0800315 	stw	r2,12(r22)
   121f8:	008006c4 	movi	r2,27
   121fc:	11807f36 	bltu	r2,r6,123fc <_realloc_r+0x4a8>
   12200:	b0800404 	addi	r2,r22,16
   12204:	ad400204 	addi	r21,r21,8
   12208:	00002d06 	br	122c0 <_realloc_r+0x36c>
   1220c:	adbffe17 	ldw	r22,-8(r21)
   12210:	00bfff04 	movi	r2,-4
   12214:	9dadc83a 	sub	r22,r19,r22
   12218:	b1000117 	ldw	r4,4(r22)
   1221c:	2084703a 	and	r2,r4,r2
   12220:	b03f7726 	beq	r22,zero,12000 <_gp+0xffff2a68>
   12224:	80af883a 	add	r23,r16,r2
   12228:	b8ff7516 	blt	r23,r3,12000 <_gp+0xffff2a68>
   1222c:	b0800317 	ldw	r2,12(r22)
   12230:	b0c00217 	ldw	r3,8(r22)
   12234:	81bfff04 	addi	r6,r16,-4
   12238:	01000904 	movi	r4,36
   1223c:	18800315 	stw	r2,12(r3)
   12240:	10c00215 	stw	r3,8(r2)
   12244:	b4800204 	addi	r18,r22,8
   12248:	21bfe52e 	bgeu	r4,r6,121e0 <_gp+0xffff2c48>
   1224c:	a80b883a 	mov	r5,r21
   12250:	9009883a 	mov	r4,r18
   12254:	0011cd00 	call	11cd0 <memmove>
   12258:	b821883a 	mov	r16,r23
   1225c:	b027883a 	mov	r19,r22
   12260:	003f8a06 	br	1208c <_gp+0xffff2af4>
   12264:	300b883a 	mov	r5,r6
   12268:	dfc00917 	ldw	ra,36(sp)
   1226c:	df000817 	ldw	fp,32(sp)
   12270:	ddc00717 	ldw	r23,28(sp)
   12274:	dd800617 	ldw	r22,24(sp)
   12278:	dd400517 	ldw	r21,20(sp)
   1227c:	dd000417 	ldw	r20,16(sp)
   12280:	dcc00317 	ldw	r19,12(sp)
   12284:	dc800217 	ldw	r18,8(sp)
   12288:	dc400117 	ldw	r17,4(sp)
   1228c:	dc000017 	ldw	r16,0(sp)
   12290:	dec00a04 	addi	sp,sp,40
   12294:	00112981 	jmpi	11298 <_malloc_r>
   12298:	a8c00017 	ldw	r3,0(r21)
   1229c:	90c00015 	stw	r3,0(r18)
   122a0:	a8c00117 	ldw	r3,4(r21)
   122a4:	90c00115 	stw	r3,4(r18)
   122a8:	00c006c4 	movi	r3,27
   122ac:	19804536 	bltu	r3,r6,123c4 <_realloc_r+0x470>
   122b0:	90800204 	addi	r2,r18,8
   122b4:	a8c00204 	addi	r3,r21,8
   122b8:	003f6306 	br	12048 <_gp+0xffff2ab0>
   122bc:	9005883a 	mov	r2,r18
   122c0:	a8c00017 	ldw	r3,0(r21)
   122c4:	b821883a 	mov	r16,r23
   122c8:	b027883a 	mov	r19,r22
   122cc:	10c00015 	stw	r3,0(r2)
   122d0:	a8c00117 	ldw	r3,4(r21)
   122d4:	10c00115 	stw	r3,4(r2)
   122d8:	a8c00217 	ldw	r3,8(r21)
   122dc:	10c00215 	stw	r3,8(r2)
   122e0:	003f6a06 	br	1208c <_gp+0xffff2af4>
   122e4:	9c67883a 	add	r19,r19,r17
   122e8:	4445c83a 	sub	r2,r8,r17
   122ec:	e4c00215 	stw	r19,8(fp)
   122f0:	10800054 	ori	r2,r2,1
   122f4:	98800115 	stw	r2,4(r19)
   122f8:	a8bfff17 	ldw	r2,-4(r21)
   122fc:	a009883a 	mov	r4,r20
   12300:	1080004c 	andi	r2,r2,1
   12304:	1462b03a 	or	r17,r2,r17
   12308:	ac7fff15 	stw	r17,-4(r21)
   1230c:	00138fc0 	call	138fc <__malloc_unlock>
   12310:	a805883a 	mov	r2,r21
   12314:	003f6b06 	br	120c4 <_gp+0xffff2b2c>
   12318:	a80b883a 	mov	r5,r21
   1231c:	9009883a 	mov	r4,r18
   12320:	0011cd00 	call	11cd0 <memmove>
   12324:	003f4e06 	br	12060 <_gp+0xffff2ac8>
   12328:	89000404 	addi	r4,r17,16
   1232c:	b93fbc16 	blt	r23,r4,12220 <_gp+0xffff2c88>
   12330:	b0800317 	ldw	r2,12(r22)
   12334:	b0c00217 	ldw	r3,8(r22)
   12338:	81bfff04 	addi	r6,r16,-4
   1233c:	01000904 	movi	r4,36
   12340:	18800315 	stw	r2,12(r3)
   12344:	10c00215 	stw	r3,8(r2)
   12348:	b4800204 	addi	r18,r22,8
   1234c:	21804336 	bltu	r4,r6,1245c <_realloc_r+0x508>
   12350:	008004c4 	movi	r2,19
   12354:	11803f2e 	bgeu	r2,r6,12454 <_realloc_r+0x500>
   12358:	a8800017 	ldw	r2,0(r21)
   1235c:	b0800215 	stw	r2,8(r22)
   12360:	a8800117 	ldw	r2,4(r21)
   12364:	b0800315 	stw	r2,12(r22)
   12368:	008006c4 	movi	r2,27
   1236c:	11803f36 	bltu	r2,r6,1246c <_realloc_r+0x518>
   12370:	b0800404 	addi	r2,r22,16
   12374:	ad400204 	addi	r21,r21,8
   12378:	a8c00017 	ldw	r3,0(r21)
   1237c:	10c00015 	stw	r3,0(r2)
   12380:	a8c00117 	ldw	r3,4(r21)
   12384:	10c00115 	stw	r3,4(r2)
   12388:	a8c00217 	ldw	r3,8(r21)
   1238c:	10c00215 	stw	r3,8(r2)
   12390:	b447883a 	add	r3,r22,r17
   12394:	bc45c83a 	sub	r2,r23,r17
   12398:	e0c00215 	stw	r3,8(fp)
   1239c:	10800054 	ori	r2,r2,1
   123a0:	18800115 	stw	r2,4(r3)
   123a4:	b0800117 	ldw	r2,4(r22)
   123a8:	a009883a 	mov	r4,r20
   123ac:	1080004c 	andi	r2,r2,1
   123b0:	1462b03a 	or	r17,r2,r17
   123b4:	b4400115 	stw	r17,4(r22)
   123b8:	00138fc0 	call	138fc <__malloc_unlock>
   123bc:	9005883a 	mov	r2,r18
   123c0:	003f4006 	br	120c4 <_gp+0xffff2b2c>
   123c4:	a8c00217 	ldw	r3,8(r21)
   123c8:	90c00215 	stw	r3,8(r18)
   123cc:	a8c00317 	ldw	r3,12(r21)
   123d0:	90c00315 	stw	r3,12(r18)
   123d4:	30801126 	beq	r6,r2,1241c <_realloc_r+0x4c8>
   123d8:	90800404 	addi	r2,r18,16
   123dc:	a8c00404 	addi	r3,r21,16
   123e0:	003f1906 	br	12048 <_gp+0xffff2ab0>
   123e4:	90ffff17 	ldw	r3,-4(r18)
   123e8:	00bfff04 	movi	r2,-4
   123ec:	a825883a 	mov	r18,r21
   123f0:	1884703a 	and	r2,r3,r2
   123f4:	80a1883a 	add	r16,r16,r2
   123f8:	003f2406 	br	1208c <_gp+0xffff2af4>
   123fc:	a8800217 	ldw	r2,8(r21)
   12400:	b0800415 	stw	r2,16(r22)
   12404:	a8800317 	ldw	r2,12(r21)
   12408:	b0800515 	stw	r2,20(r22)
   1240c:	31000a26 	beq	r6,r4,12438 <_realloc_r+0x4e4>
   12410:	b0800604 	addi	r2,r22,24
   12414:	ad400404 	addi	r21,r21,16
   12418:	003fa906 	br	122c0 <_gp+0xffff2d28>
   1241c:	a9000417 	ldw	r4,16(r21)
   12420:	90800604 	addi	r2,r18,24
   12424:	a8c00604 	addi	r3,r21,24
   12428:	91000415 	stw	r4,16(r18)
   1242c:	a9000517 	ldw	r4,20(r21)
   12430:	91000515 	stw	r4,20(r18)
   12434:	003f0406 	br	12048 <_gp+0xffff2ab0>
   12438:	a8c00417 	ldw	r3,16(r21)
   1243c:	ad400604 	addi	r21,r21,24
   12440:	b0800804 	addi	r2,r22,32
   12444:	b0c00615 	stw	r3,24(r22)
   12448:	a8ffff17 	ldw	r3,-4(r21)
   1244c:	b0c00715 	stw	r3,28(r22)
   12450:	003f9b06 	br	122c0 <_gp+0xffff2d28>
   12454:	9005883a 	mov	r2,r18
   12458:	003fc706 	br	12378 <_gp+0xffff2de0>
   1245c:	a80b883a 	mov	r5,r21
   12460:	9009883a 	mov	r4,r18
   12464:	0011cd00 	call	11cd0 <memmove>
   12468:	003fc906 	br	12390 <_gp+0xffff2df8>
   1246c:	a8800217 	ldw	r2,8(r21)
   12470:	b0800415 	stw	r2,16(r22)
   12474:	a8800317 	ldw	r2,12(r21)
   12478:	b0800515 	stw	r2,20(r22)
   1247c:	31000726 	beq	r6,r4,1249c <_realloc_r+0x548>
   12480:	b0800604 	addi	r2,r22,24
   12484:	ad400404 	addi	r21,r21,16
   12488:	003fbb06 	br	12378 <_gp+0xffff2de0>
   1248c:	a009883a 	mov	r4,r20
   12490:	00138fc0 	call	138fc <__malloc_unlock>
   12494:	0005883a 	mov	r2,zero
   12498:	003f0a06 	br	120c4 <_gp+0xffff2b2c>
   1249c:	a8c00417 	ldw	r3,16(r21)
   124a0:	ad400604 	addi	r21,r21,24
   124a4:	b0800804 	addi	r2,r22,32
   124a8:	b0c00615 	stw	r3,24(r22)
   124ac:	a8ffff17 	ldw	r3,-4(r21)
   124b0:	b0c00715 	stw	r3,28(r22)
   124b4:	003fb006 	br	12378 <_gp+0xffff2de0>

000124b8 <_sbrk_r>:
   124b8:	defffd04 	addi	sp,sp,-12
   124bc:	dc000015 	stw	r16,0(sp)
   124c0:	040000b4 	movhi	r16,2
   124c4:	dc400115 	stw	r17,4(sp)
   124c8:	84241e04 	addi	r16,r16,-28552
   124cc:	2023883a 	mov	r17,r4
   124d0:	2809883a 	mov	r4,r5
   124d4:	dfc00215 	stw	ra,8(sp)
   124d8:	80000015 	stw	zero,0(r16)
   124dc:	0013abc0 	call	13abc <sbrk>
   124e0:	00ffffc4 	movi	r3,-1
   124e4:	10c00526 	beq	r2,r3,124fc <_sbrk_r+0x44>
   124e8:	dfc00217 	ldw	ra,8(sp)
   124ec:	dc400117 	ldw	r17,4(sp)
   124f0:	dc000017 	ldw	r16,0(sp)
   124f4:	dec00304 	addi	sp,sp,12
   124f8:	f800283a 	ret
   124fc:	80c00017 	ldw	r3,0(r16)
   12500:	183ff926 	beq	r3,zero,124e8 <_gp+0xffff2f50>
   12504:	88c00015 	stw	r3,0(r17)
   12508:	003ff706 	br	124e8 <_gp+0xffff2f50>

0001250c <__sread>:
   1250c:	defffe04 	addi	sp,sp,-8
   12510:	dc000015 	stw	r16,0(sp)
   12514:	2821883a 	mov	r16,r5
   12518:	2940038f 	ldh	r5,14(r5)
   1251c:	dfc00115 	stw	ra,4(sp)
   12520:	001324c0 	call	1324c <_read_r>
   12524:	10000716 	blt	r2,zero,12544 <__sread+0x38>
   12528:	80c01417 	ldw	r3,80(r16)
   1252c:	1887883a 	add	r3,r3,r2
   12530:	80c01415 	stw	r3,80(r16)
   12534:	dfc00117 	ldw	ra,4(sp)
   12538:	dc000017 	ldw	r16,0(sp)
   1253c:	dec00204 	addi	sp,sp,8
   12540:	f800283a 	ret
   12544:	80c0030b 	ldhu	r3,12(r16)
   12548:	18fbffcc 	andi	r3,r3,61439
   1254c:	80c0030d 	sth	r3,12(r16)
   12550:	dfc00117 	ldw	ra,4(sp)
   12554:	dc000017 	ldw	r16,0(sp)
   12558:	dec00204 	addi	sp,sp,8
   1255c:	f800283a 	ret

00012560 <__seofread>:
   12560:	0005883a 	mov	r2,zero
   12564:	f800283a 	ret

00012568 <__swrite>:
   12568:	2880030b 	ldhu	r2,12(r5)
   1256c:	defffb04 	addi	sp,sp,-20
   12570:	dcc00315 	stw	r19,12(sp)
   12574:	dc800215 	stw	r18,8(sp)
   12578:	dc400115 	stw	r17,4(sp)
   1257c:	dc000015 	stw	r16,0(sp)
   12580:	dfc00415 	stw	ra,16(sp)
   12584:	10c0400c 	andi	r3,r2,256
   12588:	2821883a 	mov	r16,r5
   1258c:	2023883a 	mov	r17,r4
   12590:	3025883a 	mov	r18,r6
   12594:	3827883a 	mov	r19,r7
   12598:	18000526 	beq	r3,zero,125b0 <__swrite+0x48>
   1259c:	2940038f 	ldh	r5,14(r5)
   125a0:	01c00084 	movi	r7,2
   125a4:	000d883a 	mov	r6,zero
   125a8:	00130300 	call	13030 <_lseek_r>
   125ac:	8080030b 	ldhu	r2,12(r16)
   125b0:	8140038f 	ldh	r5,14(r16)
   125b4:	10bbffcc 	andi	r2,r2,61439
   125b8:	980f883a 	mov	r7,r19
   125bc:	900d883a 	mov	r6,r18
   125c0:	8809883a 	mov	r4,r17
   125c4:	8080030d 	sth	r2,12(r16)
   125c8:	dfc00417 	ldw	ra,16(sp)
   125cc:	dcc00317 	ldw	r19,12(sp)
   125d0:	dc800217 	ldw	r18,8(sp)
   125d4:	dc400117 	ldw	r17,4(sp)
   125d8:	dc000017 	ldw	r16,0(sp)
   125dc:	dec00504 	addi	sp,sp,20
   125e0:	00126481 	jmpi	12648 <_write_r>

000125e4 <__sseek>:
   125e4:	defffe04 	addi	sp,sp,-8
   125e8:	dc000015 	stw	r16,0(sp)
   125ec:	2821883a 	mov	r16,r5
   125f0:	2940038f 	ldh	r5,14(r5)
   125f4:	dfc00115 	stw	ra,4(sp)
   125f8:	00130300 	call	13030 <_lseek_r>
   125fc:	00ffffc4 	movi	r3,-1
   12600:	10c00826 	beq	r2,r3,12624 <__sseek+0x40>
   12604:	80c0030b 	ldhu	r3,12(r16)
   12608:	80801415 	stw	r2,80(r16)
   1260c:	18c40014 	ori	r3,r3,4096
   12610:	80c0030d 	sth	r3,12(r16)
   12614:	dfc00117 	ldw	ra,4(sp)
   12618:	dc000017 	ldw	r16,0(sp)
   1261c:	dec00204 	addi	sp,sp,8
   12620:	f800283a 	ret
   12624:	80c0030b 	ldhu	r3,12(r16)
   12628:	18fbffcc 	andi	r3,r3,61439
   1262c:	80c0030d 	sth	r3,12(r16)
   12630:	dfc00117 	ldw	ra,4(sp)
   12634:	dc000017 	ldw	r16,0(sp)
   12638:	dec00204 	addi	sp,sp,8
   1263c:	f800283a 	ret

00012640 <__sclose>:
   12640:	2940038f 	ldh	r5,14(r5)
   12644:	00127fc1 	jmpi	127fc <_close_r>

00012648 <_write_r>:
   12648:	defffd04 	addi	sp,sp,-12
   1264c:	2805883a 	mov	r2,r5
   12650:	dc000015 	stw	r16,0(sp)
   12654:	040000b4 	movhi	r16,2
   12658:	dc400115 	stw	r17,4(sp)
   1265c:	300b883a 	mov	r5,r6
   12660:	84241e04 	addi	r16,r16,-28552
   12664:	2023883a 	mov	r17,r4
   12668:	380d883a 	mov	r6,r7
   1266c:	1009883a 	mov	r4,r2
   12670:	dfc00215 	stw	ra,8(sp)
   12674:	80000015 	stw	zero,0(r16)
   12678:	0013ba80 	call	13ba8 <write>
   1267c:	00ffffc4 	movi	r3,-1
   12680:	10c00526 	beq	r2,r3,12698 <_write_r+0x50>
   12684:	dfc00217 	ldw	ra,8(sp)
   12688:	dc400117 	ldw	r17,4(sp)
   1268c:	dc000017 	ldw	r16,0(sp)
   12690:	dec00304 	addi	sp,sp,12
   12694:	f800283a 	ret
   12698:	80c00017 	ldw	r3,0(r16)
   1269c:	183ff926 	beq	r3,zero,12684 <_gp+0xffff30ec>
   126a0:	88c00015 	stw	r3,0(r17)
   126a4:	003ff706 	br	12684 <_gp+0xffff30ec>

000126a8 <__swsetup_r>:
   126a8:	00800074 	movhi	r2,1
   126ac:	defffd04 	addi	sp,sp,-12
   126b0:	109d6704 	addi	r2,r2,30108
   126b4:	dc400115 	stw	r17,4(sp)
   126b8:	2023883a 	mov	r17,r4
   126bc:	11000017 	ldw	r4,0(r2)
   126c0:	dc000015 	stw	r16,0(sp)
   126c4:	dfc00215 	stw	ra,8(sp)
   126c8:	2821883a 	mov	r16,r5
   126cc:	20000226 	beq	r4,zero,126d8 <__swsetup_r+0x30>
   126d0:	20800e17 	ldw	r2,56(r4)
   126d4:	10003126 	beq	r2,zero,1279c <__swsetup_r+0xf4>
   126d8:	8080030b 	ldhu	r2,12(r16)
   126dc:	10c0020c 	andi	r3,r2,8
   126e0:	1009883a 	mov	r4,r2
   126e4:	18000f26 	beq	r3,zero,12724 <__swsetup_r+0x7c>
   126e8:	80c00417 	ldw	r3,16(r16)
   126ec:	18001526 	beq	r3,zero,12744 <__swsetup_r+0x9c>
   126f0:	1100004c 	andi	r4,r2,1
   126f4:	20001c1e 	bne	r4,zero,12768 <__swsetup_r+0xc0>
   126f8:	1080008c 	andi	r2,r2,2
   126fc:	1000291e 	bne	r2,zero,127a4 <__swsetup_r+0xfc>
   12700:	80800517 	ldw	r2,20(r16)
   12704:	80800215 	stw	r2,8(r16)
   12708:	18001c26 	beq	r3,zero,1277c <__swsetup_r+0xd4>
   1270c:	0005883a 	mov	r2,zero
   12710:	dfc00217 	ldw	ra,8(sp)
   12714:	dc400117 	ldw	r17,4(sp)
   12718:	dc000017 	ldw	r16,0(sp)
   1271c:	dec00304 	addi	sp,sp,12
   12720:	f800283a 	ret
   12724:	2080040c 	andi	r2,r4,16
   12728:	10002e26 	beq	r2,zero,127e4 <__swsetup_r+0x13c>
   1272c:	2080010c 	andi	r2,r4,4
   12730:	10001e1e 	bne	r2,zero,127ac <__swsetup_r+0x104>
   12734:	80c00417 	ldw	r3,16(r16)
   12738:	20800214 	ori	r2,r4,8
   1273c:	8080030d 	sth	r2,12(r16)
   12740:	183feb1e 	bne	r3,zero,126f0 <_gp+0xffff3158>
   12744:	1100a00c 	andi	r4,r2,640
   12748:	01408004 	movi	r5,512
   1274c:	217fe826 	beq	r4,r5,126f0 <_gp+0xffff3158>
   12750:	800b883a 	mov	r5,r16
   12754:	8809883a 	mov	r4,r17
   12758:	00130900 	call	13090 <__smakebuf_r>
   1275c:	8080030b 	ldhu	r2,12(r16)
   12760:	80c00417 	ldw	r3,16(r16)
   12764:	003fe206 	br	126f0 <_gp+0xffff3158>
   12768:	80800517 	ldw	r2,20(r16)
   1276c:	80000215 	stw	zero,8(r16)
   12770:	0085c83a 	sub	r2,zero,r2
   12774:	80800615 	stw	r2,24(r16)
   12778:	183fe41e 	bne	r3,zero,1270c <_gp+0xffff3174>
   1277c:	80c0030b 	ldhu	r3,12(r16)
   12780:	0005883a 	mov	r2,zero
   12784:	1900200c 	andi	r4,r3,128
   12788:	203fe126 	beq	r4,zero,12710 <_gp+0xffff3178>
   1278c:	18c01014 	ori	r3,r3,64
   12790:	80c0030d 	sth	r3,12(r16)
   12794:	00bfffc4 	movi	r2,-1
   12798:	003fdd06 	br	12710 <_gp+0xffff3178>
   1279c:	0010c040 	call	10c04 <__sinit>
   127a0:	003fcd06 	br	126d8 <_gp+0xffff3140>
   127a4:	0005883a 	mov	r2,zero
   127a8:	003fd606 	br	12704 <_gp+0xffff316c>
   127ac:	81400c17 	ldw	r5,48(r16)
   127b0:	28000626 	beq	r5,zero,127cc <__swsetup_r+0x124>
   127b4:	80801004 	addi	r2,r16,64
   127b8:	28800326 	beq	r5,r2,127c8 <__swsetup_r+0x120>
   127bc:	8809883a 	mov	r4,r17
   127c0:	0012d200 	call	12d20 <_free_r>
   127c4:	8100030b 	ldhu	r4,12(r16)
   127c8:	80000c15 	stw	zero,48(r16)
   127cc:	80c00417 	ldw	r3,16(r16)
   127d0:	00bff6c4 	movi	r2,-37
   127d4:	1108703a 	and	r4,r2,r4
   127d8:	80000115 	stw	zero,4(r16)
   127dc:	80c00015 	stw	r3,0(r16)
   127e0:	003fd506 	br	12738 <_gp+0xffff31a0>
   127e4:	00800244 	movi	r2,9
   127e8:	88800015 	stw	r2,0(r17)
   127ec:	20801014 	ori	r2,r4,64
   127f0:	8080030d 	sth	r2,12(r16)
   127f4:	00bfffc4 	movi	r2,-1
   127f8:	003fc506 	br	12710 <_gp+0xffff3178>

000127fc <_close_r>:
   127fc:	defffd04 	addi	sp,sp,-12
   12800:	dc000015 	stw	r16,0(sp)
   12804:	040000b4 	movhi	r16,2
   12808:	dc400115 	stw	r17,4(sp)
   1280c:	84241e04 	addi	r16,r16,-28552
   12810:	2023883a 	mov	r17,r4
   12814:	2809883a 	mov	r4,r5
   12818:	dfc00215 	stw	ra,8(sp)
   1281c:	80000015 	stw	zero,0(r16)
   12820:	00133980 	call	13398 <close>
   12824:	00ffffc4 	movi	r3,-1
   12828:	10c00526 	beq	r2,r3,12840 <_close_r+0x44>
   1282c:	dfc00217 	ldw	ra,8(sp)
   12830:	dc400117 	ldw	r17,4(sp)
   12834:	dc000017 	ldw	r16,0(sp)
   12838:	dec00304 	addi	sp,sp,12
   1283c:	f800283a 	ret
   12840:	80c00017 	ldw	r3,0(r16)
   12844:	183ff926 	beq	r3,zero,1282c <_gp+0xffff3294>
   12848:	88c00015 	stw	r3,0(r17)
   1284c:	003ff706 	br	1282c <_gp+0xffff3294>

00012850 <_fclose_r>:
   12850:	28003926 	beq	r5,zero,12938 <_fclose_r+0xe8>
   12854:	defffc04 	addi	sp,sp,-16
   12858:	dc400115 	stw	r17,4(sp)
   1285c:	dc000015 	stw	r16,0(sp)
   12860:	dfc00315 	stw	ra,12(sp)
   12864:	dc800215 	stw	r18,8(sp)
   12868:	2023883a 	mov	r17,r4
   1286c:	2821883a 	mov	r16,r5
   12870:	20000226 	beq	r4,zero,1287c <_fclose_r+0x2c>
   12874:	20800e17 	ldw	r2,56(r4)
   12878:	10002726 	beq	r2,zero,12918 <_fclose_r+0xc8>
   1287c:	8080030f 	ldh	r2,12(r16)
   12880:	1000071e 	bne	r2,zero,128a0 <_fclose_r+0x50>
   12884:	0005883a 	mov	r2,zero
   12888:	dfc00317 	ldw	ra,12(sp)
   1288c:	dc800217 	ldw	r18,8(sp)
   12890:	dc400117 	ldw	r17,4(sp)
   12894:	dc000017 	ldw	r16,0(sp)
   12898:	dec00404 	addi	sp,sp,16
   1289c:	f800283a 	ret
   128a0:	800b883a 	mov	r5,r16
   128a4:	8809883a 	mov	r4,r17
   128a8:	00129540 	call	12954 <__sflush_r>
   128ac:	1025883a 	mov	r18,r2
   128b0:	80800b17 	ldw	r2,44(r16)
   128b4:	10000426 	beq	r2,zero,128c8 <_fclose_r+0x78>
   128b8:	81400717 	ldw	r5,28(r16)
   128bc:	8809883a 	mov	r4,r17
   128c0:	103ee83a 	callr	r2
   128c4:	10001616 	blt	r2,zero,12920 <_fclose_r+0xd0>
   128c8:	8080030b 	ldhu	r2,12(r16)
   128cc:	1080200c 	andi	r2,r2,128
   128d0:	1000151e 	bne	r2,zero,12928 <_fclose_r+0xd8>
   128d4:	81400c17 	ldw	r5,48(r16)
   128d8:	28000526 	beq	r5,zero,128f0 <_fclose_r+0xa0>
   128dc:	80801004 	addi	r2,r16,64
   128e0:	28800226 	beq	r5,r2,128ec <_fclose_r+0x9c>
   128e4:	8809883a 	mov	r4,r17
   128e8:	0012d200 	call	12d20 <_free_r>
   128ec:	80000c15 	stw	zero,48(r16)
   128f0:	81401117 	ldw	r5,68(r16)
   128f4:	28000326 	beq	r5,zero,12904 <_fclose_r+0xb4>
   128f8:	8809883a 	mov	r4,r17
   128fc:	0012d200 	call	12d20 <_free_r>
   12900:	80001115 	stw	zero,68(r16)
   12904:	0010c140 	call	10c14 <__sfp_lock_acquire>
   12908:	8000030d 	sth	zero,12(r16)
   1290c:	0010c180 	call	10c18 <__sfp_lock_release>
   12910:	9005883a 	mov	r2,r18
   12914:	003fdc06 	br	12888 <_gp+0xffff32f0>
   12918:	0010c040 	call	10c04 <__sinit>
   1291c:	003fd706 	br	1287c <_gp+0xffff32e4>
   12920:	04bfffc4 	movi	r18,-1
   12924:	003fe806 	br	128c8 <_gp+0xffff3330>
   12928:	81400417 	ldw	r5,16(r16)
   1292c:	8809883a 	mov	r4,r17
   12930:	0012d200 	call	12d20 <_free_r>
   12934:	003fe706 	br	128d4 <_gp+0xffff333c>
   12938:	0005883a 	mov	r2,zero
   1293c:	f800283a 	ret

00012940 <fclose>:
   12940:	00800074 	movhi	r2,1
   12944:	109d6704 	addi	r2,r2,30108
   12948:	200b883a 	mov	r5,r4
   1294c:	11000017 	ldw	r4,0(r2)
   12950:	00128501 	jmpi	12850 <_fclose_r>

00012954 <__sflush_r>:
   12954:	2880030b 	ldhu	r2,12(r5)
   12958:	defffb04 	addi	sp,sp,-20
   1295c:	dcc00315 	stw	r19,12(sp)
   12960:	dc400115 	stw	r17,4(sp)
   12964:	dfc00415 	stw	ra,16(sp)
   12968:	dc800215 	stw	r18,8(sp)
   1296c:	dc000015 	stw	r16,0(sp)
   12970:	10c0020c 	andi	r3,r2,8
   12974:	2823883a 	mov	r17,r5
   12978:	2027883a 	mov	r19,r4
   1297c:	1800311e 	bne	r3,zero,12a44 <__sflush_r+0xf0>
   12980:	28c00117 	ldw	r3,4(r5)
   12984:	10820014 	ori	r2,r2,2048
   12988:	2880030d 	sth	r2,12(r5)
   1298c:	00c04b0e 	bge	zero,r3,12abc <__sflush_r+0x168>
   12990:	8a000a17 	ldw	r8,40(r17)
   12994:	40002326 	beq	r8,zero,12a24 <__sflush_r+0xd0>
   12998:	9c000017 	ldw	r16,0(r19)
   1299c:	10c4000c 	andi	r3,r2,4096
   129a0:	98000015 	stw	zero,0(r19)
   129a4:	18004826 	beq	r3,zero,12ac8 <__sflush_r+0x174>
   129a8:	89801417 	ldw	r6,80(r17)
   129ac:	10c0010c 	andi	r3,r2,4
   129b0:	18000626 	beq	r3,zero,129cc <__sflush_r+0x78>
   129b4:	88c00117 	ldw	r3,4(r17)
   129b8:	88800c17 	ldw	r2,48(r17)
   129bc:	30cdc83a 	sub	r6,r6,r3
   129c0:	10000226 	beq	r2,zero,129cc <__sflush_r+0x78>
   129c4:	88800f17 	ldw	r2,60(r17)
   129c8:	308dc83a 	sub	r6,r6,r2
   129cc:	89400717 	ldw	r5,28(r17)
   129d0:	000f883a 	mov	r7,zero
   129d4:	9809883a 	mov	r4,r19
   129d8:	403ee83a 	callr	r8
   129dc:	00ffffc4 	movi	r3,-1
   129e0:	10c04426 	beq	r2,r3,12af4 <__sflush_r+0x1a0>
   129e4:	88c0030b 	ldhu	r3,12(r17)
   129e8:	89000417 	ldw	r4,16(r17)
   129ec:	88000115 	stw	zero,4(r17)
   129f0:	197dffcc 	andi	r5,r3,63487
   129f4:	8940030d 	sth	r5,12(r17)
   129f8:	89000015 	stw	r4,0(r17)
   129fc:	18c4000c 	andi	r3,r3,4096
   12a00:	18002c1e 	bne	r3,zero,12ab4 <__sflush_r+0x160>
   12a04:	89400c17 	ldw	r5,48(r17)
   12a08:	9c000015 	stw	r16,0(r19)
   12a0c:	28000526 	beq	r5,zero,12a24 <__sflush_r+0xd0>
   12a10:	88801004 	addi	r2,r17,64
   12a14:	28800226 	beq	r5,r2,12a20 <__sflush_r+0xcc>
   12a18:	9809883a 	mov	r4,r19
   12a1c:	0012d200 	call	12d20 <_free_r>
   12a20:	88000c15 	stw	zero,48(r17)
   12a24:	0005883a 	mov	r2,zero
   12a28:	dfc00417 	ldw	ra,16(sp)
   12a2c:	dcc00317 	ldw	r19,12(sp)
   12a30:	dc800217 	ldw	r18,8(sp)
   12a34:	dc400117 	ldw	r17,4(sp)
   12a38:	dc000017 	ldw	r16,0(sp)
   12a3c:	dec00504 	addi	sp,sp,20
   12a40:	f800283a 	ret
   12a44:	2c800417 	ldw	r18,16(r5)
   12a48:	903ff626 	beq	r18,zero,12a24 <_gp+0xffff348c>
   12a4c:	2c000017 	ldw	r16,0(r5)
   12a50:	108000cc 	andi	r2,r2,3
   12a54:	2c800015 	stw	r18,0(r5)
   12a58:	84a1c83a 	sub	r16,r16,r18
   12a5c:	1000131e 	bne	r2,zero,12aac <__sflush_r+0x158>
   12a60:	28800517 	ldw	r2,20(r5)
   12a64:	88800215 	stw	r2,8(r17)
   12a68:	04000316 	blt	zero,r16,12a78 <__sflush_r+0x124>
   12a6c:	003fed06 	br	12a24 <_gp+0xffff348c>
   12a70:	90a5883a 	add	r18,r18,r2
   12a74:	043feb0e 	bge	zero,r16,12a24 <_gp+0xffff348c>
   12a78:	88800917 	ldw	r2,36(r17)
   12a7c:	89400717 	ldw	r5,28(r17)
   12a80:	800f883a 	mov	r7,r16
   12a84:	900d883a 	mov	r6,r18
   12a88:	9809883a 	mov	r4,r19
   12a8c:	103ee83a 	callr	r2
   12a90:	80a1c83a 	sub	r16,r16,r2
   12a94:	00bff616 	blt	zero,r2,12a70 <_gp+0xffff34d8>
   12a98:	88c0030b 	ldhu	r3,12(r17)
   12a9c:	00bfffc4 	movi	r2,-1
   12aa0:	18c01014 	ori	r3,r3,64
   12aa4:	88c0030d 	sth	r3,12(r17)
   12aa8:	003fdf06 	br	12a28 <_gp+0xffff3490>
   12aac:	0005883a 	mov	r2,zero
   12ab0:	003fec06 	br	12a64 <_gp+0xffff34cc>
   12ab4:	88801415 	stw	r2,80(r17)
   12ab8:	003fd206 	br	12a04 <_gp+0xffff346c>
   12abc:	28c00f17 	ldw	r3,60(r5)
   12ac0:	00ffb316 	blt	zero,r3,12990 <_gp+0xffff33f8>
   12ac4:	003fd706 	br	12a24 <_gp+0xffff348c>
   12ac8:	89400717 	ldw	r5,28(r17)
   12acc:	000d883a 	mov	r6,zero
   12ad0:	01c00044 	movi	r7,1
   12ad4:	9809883a 	mov	r4,r19
   12ad8:	403ee83a 	callr	r8
   12adc:	100d883a 	mov	r6,r2
   12ae0:	00bfffc4 	movi	r2,-1
   12ae4:	30801426 	beq	r6,r2,12b38 <__sflush_r+0x1e4>
   12ae8:	8880030b 	ldhu	r2,12(r17)
   12aec:	8a000a17 	ldw	r8,40(r17)
   12af0:	003fae06 	br	129ac <_gp+0xffff3414>
   12af4:	98c00017 	ldw	r3,0(r19)
   12af8:	183fba26 	beq	r3,zero,129e4 <_gp+0xffff344c>
   12afc:	01000744 	movi	r4,29
   12b00:	19000626 	beq	r3,r4,12b1c <__sflush_r+0x1c8>
   12b04:	01000584 	movi	r4,22
   12b08:	19000426 	beq	r3,r4,12b1c <__sflush_r+0x1c8>
   12b0c:	88c0030b 	ldhu	r3,12(r17)
   12b10:	18c01014 	ori	r3,r3,64
   12b14:	88c0030d 	sth	r3,12(r17)
   12b18:	003fc306 	br	12a28 <_gp+0xffff3490>
   12b1c:	8880030b 	ldhu	r2,12(r17)
   12b20:	88c00417 	ldw	r3,16(r17)
   12b24:	88000115 	stw	zero,4(r17)
   12b28:	10bdffcc 	andi	r2,r2,63487
   12b2c:	8880030d 	sth	r2,12(r17)
   12b30:	88c00015 	stw	r3,0(r17)
   12b34:	003fb306 	br	12a04 <_gp+0xffff346c>
   12b38:	98800017 	ldw	r2,0(r19)
   12b3c:	103fea26 	beq	r2,zero,12ae8 <_gp+0xffff3550>
   12b40:	00c00744 	movi	r3,29
   12b44:	10c00226 	beq	r2,r3,12b50 <__sflush_r+0x1fc>
   12b48:	00c00584 	movi	r3,22
   12b4c:	10c0031e 	bne	r2,r3,12b5c <__sflush_r+0x208>
   12b50:	9c000015 	stw	r16,0(r19)
   12b54:	0005883a 	mov	r2,zero
   12b58:	003fb306 	br	12a28 <_gp+0xffff3490>
   12b5c:	88c0030b 	ldhu	r3,12(r17)
   12b60:	3005883a 	mov	r2,r6
   12b64:	18c01014 	ori	r3,r3,64
   12b68:	88c0030d 	sth	r3,12(r17)
   12b6c:	003fae06 	br	12a28 <_gp+0xffff3490>

00012b70 <_fflush_r>:
   12b70:	defffd04 	addi	sp,sp,-12
   12b74:	dc000115 	stw	r16,4(sp)
   12b78:	dfc00215 	stw	ra,8(sp)
   12b7c:	2021883a 	mov	r16,r4
   12b80:	20000226 	beq	r4,zero,12b8c <_fflush_r+0x1c>
   12b84:	20800e17 	ldw	r2,56(r4)
   12b88:	10000c26 	beq	r2,zero,12bbc <_fflush_r+0x4c>
   12b8c:	2880030f 	ldh	r2,12(r5)
   12b90:	1000051e 	bne	r2,zero,12ba8 <_fflush_r+0x38>
   12b94:	0005883a 	mov	r2,zero
   12b98:	dfc00217 	ldw	ra,8(sp)
   12b9c:	dc000117 	ldw	r16,4(sp)
   12ba0:	dec00304 	addi	sp,sp,12
   12ba4:	f800283a 	ret
   12ba8:	8009883a 	mov	r4,r16
   12bac:	dfc00217 	ldw	ra,8(sp)
   12bb0:	dc000117 	ldw	r16,4(sp)
   12bb4:	dec00304 	addi	sp,sp,12
   12bb8:	00129541 	jmpi	12954 <__sflush_r>
   12bbc:	d9400015 	stw	r5,0(sp)
   12bc0:	0010c040 	call	10c04 <__sinit>
   12bc4:	d9400017 	ldw	r5,0(sp)
   12bc8:	003ff006 	br	12b8c <_gp+0xffff35f4>

00012bcc <fflush>:
   12bcc:	20000526 	beq	r4,zero,12be4 <fflush+0x18>
   12bd0:	00800074 	movhi	r2,1
   12bd4:	109d6704 	addi	r2,r2,30108
   12bd8:	200b883a 	mov	r5,r4
   12bdc:	11000017 	ldw	r4,0(r2)
   12be0:	0012b701 	jmpi	12b70 <_fflush_r>
   12be4:	00800074 	movhi	r2,1
   12be8:	109d6604 	addi	r2,r2,30104
   12bec:	11000017 	ldw	r4,0(r2)
   12bf0:	01400074 	movhi	r5,1
   12bf4:	294adc04 	addi	r5,r5,11120
   12bf8:	00111d41 	jmpi	111d4 <_fwalk_reent>

00012bfc <_malloc_trim_r>:
   12bfc:	defffb04 	addi	sp,sp,-20
   12c00:	dcc00315 	stw	r19,12(sp)
   12c04:	04c00074 	movhi	r19,1
   12c08:	dc800215 	stw	r18,8(sp)
   12c0c:	dc400115 	stw	r17,4(sp)
   12c10:	dc000015 	stw	r16,0(sp)
   12c14:	dfc00415 	stw	ra,16(sp)
   12c18:	2821883a 	mov	r16,r5
   12c1c:	9cd7e204 	addi	r19,r19,24456
   12c20:	2025883a 	mov	r18,r4
   12c24:	00138d80 	call	138d8 <__malloc_lock>
   12c28:	98800217 	ldw	r2,8(r19)
   12c2c:	14400117 	ldw	r17,4(r2)
   12c30:	00bfff04 	movi	r2,-4
   12c34:	88a2703a 	and	r17,r17,r2
   12c38:	8c21c83a 	sub	r16,r17,r16
   12c3c:	8403fbc4 	addi	r16,r16,4079
   12c40:	8020d33a 	srli	r16,r16,12
   12c44:	0083ffc4 	movi	r2,4095
   12c48:	843fffc4 	addi	r16,r16,-1
   12c4c:	8020933a 	slli	r16,r16,12
   12c50:	1400060e 	bge	r2,r16,12c6c <_malloc_trim_r+0x70>
   12c54:	000b883a 	mov	r5,zero
   12c58:	9009883a 	mov	r4,r18
   12c5c:	00124b80 	call	124b8 <_sbrk_r>
   12c60:	98c00217 	ldw	r3,8(r19)
   12c64:	1c47883a 	add	r3,r3,r17
   12c68:	10c00a26 	beq	r2,r3,12c94 <_malloc_trim_r+0x98>
   12c6c:	9009883a 	mov	r4,r18
   12c70:	00138fc0 	call	138fc <__malloc_unlock>
   12c74:	0005883a 	mov	r2,zero
   12c78:	dfc00417 	ldw	ra,16(sp)
   12c7c:	dcc00317 	ldw	r19,12(sp)
   12c80:	dc800217 	ldw	r18,8(sp)
   12c84:	dc400117 	ldw	r17,4(sp)
   12c88:	dc000017 	ldw	r16,0(sp)
   12c8c:	dec00504 	addi	sp,sp,20
   12c90:	f800283a 	ret
   12c94:	040bc83a 	sub	r5,zero,r16
   12c98:	9009883a 	mov	r4,r18
   12c9c:	00124b80 	call	124b8 <_sbrk_r>
   12ca0:	00ffffc4 	movi	r3,-1
   12ca4:	10c00d26 	beq	r2,r3,12cdc <_malloc_trim_r+0xe0>
   12ca8:	00c000b4 	movhi	r3,2
   12cac:	18e42604 	addi	r3,r3,-28520
   12cb0:	18800017 	ldw	r2,0(r3)
   12cb4:	99000217 	ldw	r4,8(r19)
   12cb8:	8c23c83a 	sub	r17,r17,r16
   12cbc:	8c400054 	ori	r17,r17,1
   12cc0:	1421c83a 	sub	r16,r2,r16
   12cc4:	24400115 	stw	r17,4(r4)
   12cc8:	9009883a 	mov	r4,r18
   12ccc:	1c000015 	stw	r16,0(r3)
   12cd0:	00138fc0 	call	138fc <__malloc_unlock>
   12cd4:	00800044 	movi	r2,1
   12cd8:	003fe706 	br	12c78 <_gp+0xffff36e0>
   12cdc:	000b883a 	mov	r5,zero
   12ce0:	9009883a 	mov	r4,r18
   12ce4:	00124b80 	call	124b8 <_sbrk_r>
   12ce8:	99000217 	ldw	r4,8(r19)
   12cec:	014003c4 	movi	r5,15
   12cf0:	1107c83a 	sub	r3,r2,r4
   12cf4:	28ffdd0e 	bge	r5,r3,12c6c <_gp+0xffff36d4>
   12cf8:	01400074 	movhi	r5,1
   12cfc:	295d6804 	addi	r5,r5,30112
   12d00:	29400017 	ldw	r5,0(r5)
   12d04:	18c00054 	ori	r3,r3,1
   12d08:	20c00115 	stw	r3,4(r4)
   12d0c:	00c000b4 	movhi	r3,2
   12d10:	1145c83a 	sub	r2,r2,r5
   12d14:	18e42604 	addi	r3,r3,-28520
   12d18:	18800015 	stw	r2,0(r3)
   12d1c:	003fd306 	br	12c6c <_gp+0xffff36d4>

00012d20 <_free_r>:
   12d20:	28004126 	beq	r5,zero,12e28 <_free_r+0x108>
   12d24:	defffd04 	addi	sp,sp,-12
   12d28:	dc400115 	stw	r17,4(sp)
   12d2c:	dc000015 	stw	r16,0(sp)
   12d30:	2023883a 	mov	r17,r4
   12d34:	2821883a 	mov	r16,r5
   12d38:	dfc00215 	stw	ra,8(sp)
   12d3c:	00138d80 	call	138d8 <__malloc_lock>
   12d40:	81ffff17 	ldw	r7,-4(r16)
   12d44:	00bfff84 	movi	r2,-2
   12d48:	01000074 	movhi	r4,1
   12d4c:	81bffe04 	addi	r6,r16,-8
   12d50:	3884703a 	and	r2,r7,r2
   12d54:	2117e204 	addi	r4,r4,24456
   12d58:	308b883a 	add	r5,r6,r2
   12d5c:	2a400117 	ldw	r9,4(r5)
   12d60:	22000217 	ldw	r8,8(r4)
   12d64:	00ffff04 	movi	r3,-4
   12d68:	48c6703a 	and	r3,r9,r3
   12d6c:	2a005726 	beq	r5,r8,12ecc <_free_r+0x1ac>
   12d70:	28c00115 	stw	r3,4(r5)
   12d74:	39c0004c 	andi	r7,r7,1
   12d78:	3800091e 	bne	r7,zero,12da0 <_free_r+0x80>
   12d7c:	823ffe17 	ldw	r8,-8(r16)
   12d80:	22400204 	addi	r9,r4,8
   12d84:	320dc83a 	sub	r6,r6,r8
   12d88:	31c00217 	ldw	r7,8(r6)
   12d8c:	1205883a 	add	r2,r2,r8
   12d90:	3a406526 	beq	r7,r9,12f28 <_free_r+0x208>
   12d94:	32000317 	ldw	r8,12(r6)
   12d98:	3a000315 	stw	r8,12(r7)
   12d9c:	41c00215 	stw	r7,8(r8)
   12da0:	28cf883a 	add	r7,r5,r3
   12da4:	39c00117 	ldw	r7,4(r7)
   12da8:	39c0004c 	andi	r7,r7,1
   12dac:	38003a26 	beq	r7,zero,12e98 <_free_r+0x178>
   12db0:	10c00054 	ori	r3,r2,1
   12db4:	30c00115 	stw	r3,4(r6)
   12db8:	3087883a 	add	r3,r6,r2
   12dbc:	18800015 	stw	r2,0(r3)
   12dc0:	00c07fc4 	movi	r3,511
   12dc4:	18801936 	bltu	r3,r2,12e2c <_free_r+0x10c>
   12dc8:	1004d0fa 	srli	r2,r2,3
   12dcc:	01c00044 	movi	r7,1
   12dd0:	21400117 	ldw	r5,4(r4)
   12dd4:	10c00044 	addi	r3,r2,1
   12dd8:	18c7883a 	add	r3,r3,r3
   12ddc:	1005d0ba 	srai	r2,r2,2
   12de0:	18c7883a 	add	r3,r3,r3
   12de4:	18c7883a 	add	r3,r3,r3
   12de8:	1907883a 	add	r3,r3,r4
   12dec:	3884983a 	sll	r2,r7,r2
   12df0:	19c00017 	ldw	r7,0(r3)
   12df4:	1a3ffe04 	addi	r8,r3,-8
   12df8:	1144b03a 	or	r2,r2,r5
   12dfc:	32000315 	stw	r8,12(r6)
   12e00:	31c00215 	stw	r7,8(r6)
   12e04:	20800115 	stw	r2,4(r4)
   12e08:	19800015 	stw	r6,0(r3)
   12e0c:	39800315 	stw	r6,12(r7)
   12e10:	8809883a 	mov	r4,r17
   12e14:	dfc00217 	ldw	ra,8(sp)
   12e18:	dc400117 	ldw	r17,4(sp)
   12e1c:	dc000017 	ldw	r16,0(sp)
   12e20:	dec00304 	addi	sp,sp,12
   12e24:	00138fc1 	jmpi	138fc <__malloc_unlock>
   12e28:	f800283a 	ret
   12e2c:	100ad27a 	srli	r5,r2,9
   12e30:	00c00104 	movi	r3,4
   12e34:	19404a36 	bltu	r3,r5,12f60 <_free_r+0x240>
   12e38:	100ad1ba 	srli	r5,r2,6
   12e3c:	28c00e44 	addi	r3,r5,57
   12e40:	18c7883a 	add	r3,r3,r3
   12e44:	29400e04 	addi	r5,r5,56
   12e48:	18c7883a 	add	r3,r3,r3
   12e4c:	18c7883a 	add	r3,r3,r3
   12e50:	1909883a 	add	r4,r3,r4
   12e54:	20c00017 	ldw	r3,0(r4)
   12e58:	01c00074 	movhi	r7,1
   12e5c:	213ffe04 	addi	r4,r4,-8
   12e60:	39d7e204 	addi	r7,r7,24456
   12e64:	20c04426 	beq	r4,r3,12f78 <_free_r+0x258>
   12e68:	01ffff04 	movi	r7,-4
   12e6c:	19400117 	ldw	r5,4(r3)
   12e70:	29ca703a 	and	r5,r5,r7
   12e74:	1140022e 	bgeu	r2,r5,12e80 <_free_r+0x160>
   12e78:	18c00217 	ldw	r3,8(r3)
   12e7c:	20fffb1e 	bne	r4,r3,12e6c <_gp+0xffff38d4>
   12e80:	19000317 	ldw	r4,12(r3)
   12e84:	31000315 	stw	r4,12(r6)
   12e88:	30c00215 	stw	r3,8(r6)
   12e8c:	21800215 	stw	r6,8(r4)
   12e90:	19800315 	stw	r6,12(r3)
   12e94:	003fde06 	br	12e10 <_gp+0xffff3878>
   12e98:	29c00217 	ldw	r7,8(r5)
   12e9c:	10c5883a 	add	r2,r2,r3
   12ea0:	00c00074 	movhi	r3,1
   12ea4:	18d7e404 	addi	r3,r3,24464
   12ea8:	38c03b26 	beq	r7,r3,12f98 <_free_r+0x278>
   12eac:	2a000317 	ldw	r8,12(r5)
   12eb0:	11400054 	ori	r5,r2,1
   12eb4:	3087883a 	add	r3,r6,r2
   12eb8:	3a000315 	stw	r8,12(r7)
   12ebc:	41c00215 	stw	r7,8(r8)
   12ec0:	31400115 	stw	r5,4(r6)
   12ec4:	18800015 	stw	r2,0(r3)
   12ec8:	003fbd06 	br	12dc0 <_gp+0xffff3828>
   12ecc:	39c0004c 	andi	r7,r7,1
   12ed0:	10c5883a 	add	r2,r2,r3
   12ed4:	3800071e 	bne	r7,zero,12ef4 <_free_r+0x1d4>
   12ed8:	81fffe17 	ldw	r7,-8(r16)
   12edc:	31cdc83a 	sub	r6,r6,r7
   12ee0:	30c00317 	ldw	r3,12(r6)
   12ee4:	31400217 	ldw	r5,8(r6)
   12ee8:	11c5883a 	add	r2,r2,r7
   12eec:	28c00315 	stw	r3,12(r5)
   12ef0:	19400215 	stw	r5,8(r3)
   12ef4:	10c00054 	ori	r3,r2,1
   12ef8:	30c00115 	stw	r3,4(r6)
   12efc:	00c00074 	movhi	r3,1
   12f00:	18dd6904 	addi	r3,r3,30116
   12f04:	18c00017 	ldw	r3,0(r3)
   12f08:	21800215 	stw	r6,8(r4)
   12f0c:	10ffc036 	bltu	r2,r3,12e10 <_gp+0xffff3878>
   12f10:	008000b4 	movhi	r2,2
   12f14:	10a41d04 	addi	r2,r2,-28556
   12f18:	11400017 	ldw	r5,0(r2)
   12f1c:	8809883a 	mov	r4,r17
   12f20:	0012bfc0 	call	12bfc <_malloc_trim_r>
   12f24:	003fba06 	br	12e10 <_gp+0xffff3878>
   12f28:	28c9883a 	add	r4,r5,r3
   12f2c:	21000117 	ldw	r4,4(r4)
   12f30:	2100004c 	andi	r4,r4,1
   12f34:	2000391e 	bne	r4,zero,1301c <_free_r+0x2fc>
   12f38:	29c00217 	ldw	r7,8(r5)
   12f3c:	29000317 	ldw	r4,12(r5)
   12f40:	1885883a 	add	r2,r3,r2
   12f44:	10c00054 	ori	r3,r2,1
   12f48:	39000315 	stw	r4,12(r7)
   12f4c:	21c00215 	stw	r7,8(r4)
   12f50:	30c00115 	stw	r3,4(r6)
   12f54:	308d883a 	add	r6,r6,r2
   12f58:	30800015 	stw	r2,0(r6)
   12f5c:	003fac06 	br	12e10 <_gp+0xffff3878>
   12f60:	00c00504 	movi	r3,20
   12f64:	19401536 	bltu	r3,r5,12fbc <_free_r+0x29c>
   12f68:	28c01704 	addi	r3,r5,92
   12f6c:	18c7883a 	add	r3,r3,r3
   12f70:	294016c4 	addi	r5,r5,91
   12f74:	003fb406 	br	12e48 <_gp+0xffff38b0>
   12f78:	280bd0ba 	srai	r5,r5,2
   12f7c:	00c00044 	movi	r3,1
   12f80:	38800117 	ldw	r2,4(r7)
   12f84:	194a983a 	sll	r5,r3,r5
   12f88:	2007883a 	mov	r3,r4
   12f8c:	2884b03a 	or	r2,r5,r2
   12f90:	38800115 	stw	r2,4(r7)
   12f94:	003fbb06 	br	12e84 <_gp+0xffff38ec>
   12f98:	21800515 	stw	r6,20(r4)
   12f9c:	21800415 	stw	r6,16(r4)
   12fa0:	10c00054 	ori	r3,r2,1
   12fa4:	31c00315 	stw	r7,12(r6)
   12fa8:	31c00215 	stw	r7,8(r6)
   12fac:	30c00115 	stw	r3,4(r6)
   12fb0:	308d883a 	add	r6,r6,r2
   12fb4:	30800015 	stw	r2,0(r6)
   12fb8:	003f9506 	br	12e10 <_gp+0xffff3878>
   12fbc:	00c01504 	movi	r3,84
   12fc0:	19400536 	bltu	r3,r5,12fd8 <_free_r+0x2b8>
   12fc4:	100ad33a 	srli	r5,r2,12
   12fc8:	28c01bc4 	addi	r3,r5,111
   12fcc:	18c7883a 	add	r3,r3,r3
   12fd0:	29401b84 	addi	r5,r5,110
   12fd4:	003f9c06 	br	12e48 <_gp+0xffff38b0>
   12fd8:	00c05504 	movi	r3,340
   12fdc:	19400536 	bltu	r3,r5,12ff4 <_free_r+0x2d4>
   12fe0:	100ad3fa 	srli	r5,r2,15
   12fe4:	28c01e04 	addi	r3,r5,120
   12fe8:	18c7883a 	add	r3,r3,r3
   12fec:	29401dc4 	addi	r5,r5,119
   12ff0:	003f9506 	br	12e48 <_gp+0xffff38b0>
   12ff4:	00c15504 	movi	r3,1364
   12ff8:	19400536 	bltu	r3,r5,13010 <_free_r+0x2f0>
   12ffc:	100ad4ba 	srli	r5,r2,18
   13000:	28c01f44 	addi	r3,r5,125
   13004:	18c7883a 	add	r3,r3,r3
   13008:	29401f04 	addi	r5,r5,124
   1300c:	003f8e06 	br	12e48 <_gp+0xffff38b0>
   13010:	00c03f84 	movi	r3,254
   13014:	01401f84 	movi	r5,126
   13018:	003f8b06 	br	12e48 <_gp+0xffff38b0>
   1301c:	10c00054 	ori	r3,r2,1
   13020:	30c00115 	stw	r3,4(r6)
   13024:	308d883a 	add	r6,r6,r2
   13028:	30800015 	stw	r2,0(r6)
   1302c:	003f7806 	br	12e10 <_gp+0xffff3878>

00013030 <_lseek_r>:
   13030:	defffd04 	addi	sp,sp,-12
   13034:	2805883a 	mov	r2,r5
   13038:	dc000015 	stw	r16,0(sp)
   1303c:	040000b4 	movhi	r16,2
   13040:	dc400115 	stw	r17,4(sp)
   13044:	300b883a 	mov	r5,r6
   13048:	84241e04 	addi	r16,r16,-28552
   1304c:	2023883a 	mov	r17,r4
   13050:	380d883a 	mov	r6,r7
   13054:	1009883a 	mov	r4,r2
   13058:	dfc00215 	stw	ra,8(sp)
   1305c:	80000015 	stw	zero,0(r16)
   13060:	00137880 	call	13788 <lseek>
   13064:	00ffffc4 	movi	r3,-1
   13068:	10c00526 	beq	r2,r3,13080 <_lseek_r+0x50>
   1306c:	dfc00217 	ldw	ra,8(sp)
   13070:	dc400117 	ldw	r17,4(sp)
   13074:	dc000017 	ldw	r16,0(sp)
   13078:	dec00304 	addi	sp,sp,12
   1307c:	f800283a 	ret
   13080:	80c00017 	ldw	r3,0(r16)
   13084:	183ff926 	beq	r3,zero,1306c <_gp+0xffff3ad4>
   13088:	88c00015 	stw	r3,0(r17)
   1308c:	003ff706 	br	1306c <_gp+0xffff3ad4>

00013090 <__smakebuf_r>:
   13090:	2880030b 	ldhu	r2,12(r5)
   13094:	10c0008c 	andi	r3,r2,2
   13098:	1800411e 	bne	r3,zero,131a0 <__smakebuf_r+0x110>
   1309c:	deffec04 	addi	sp,sp,-80
   130a0:	dc000f15 	stw	r16,60(sp)
   130a4:	2821883a 	mov	r16,r5
   130a8:	2940038f 	ldh	r5,14(r5)
   130ac:	dc401015 	stw	r17,64(sp)
   130b0:	dfc01315 	stw	ra,76(sp)
   130b4:	dcc01215 	stw	r19,72(sp)
   130b8:	dc801115 	stw	r18,68(sp)
   130bc:	2023883a 	mov	r17,r4
   130c0:	28001c16 	blt	r5,zero,13134 <__smakebuf_r+0xa4>
   130c4:	d80d883a 	mov	r6,sp
   130c8:	00132ac0 	call	132ac <_fstat_r>
   130cc:	10001816 	blt	r2,zero,13130 <__smakebuf_r+0xa0>
   130d0:	d8800117 	ldw	r2,4(sp)
   130d4:	00e00014 	movui	r3,32768
   130d8:	10bc000c 	andi	r2,r2,61440
   130dc:	14c80020 	cmpeqi	r19,r2,8192
   130e0:	10c03726 	beq	r2,r3,131c0 <__smakebuf_r+0x130>
   130e4:	80c0030b 	ldhu	r3,12(r16)
   130e8:	18c20014 	ori	r3,r3,2048
   130ec:	80c0030d 	sth	r3,12(r16)
   130f0:	00c80004 	movi	r3,8192
   130f4:	10c0521e 	bne	r2,r3,13240 <__smakebuf_r+0x1b0>
   130f8:	8140038f 	ldh	r5,14(r16)
   130fc:	8809883a 	mov	r4,r17
   13100:	00133080 	call	13308 <_isatty_r>
   13104:	10004c26 	beq	r2,zero,13238 <__smakebuf_r+0x1a8>
   13108:	8080030b 	ldhu	r2,12(r16)
   1310c:	80c010c4 	addi	r3,r16,67
   13110:	80c00015 	stw	r3,0(r16)
   13114:	10800054 	ori	r2,r2,1
   13118:	8080030d 	sth	r2,12(r16)
   1311c:	00800044 	movi	r2,1
   13120:	80c00415 	stw	r3,16(r16)
   13124:	80800515 	stw	r2,20(r16)
   13128:	04810004 	movi	r18,1024
   1312c:	00000706 	br	1314c <__smakebuf_r+0xbc>
   13130:	8080030b 	ldhu	r2,12(r16)
   13134:	10c0200c 	andi	r3,r2,128
   13138:	18001f1e 	bne	r3,zero,131b8 <__smakebuf_r+0x128>
   1313c:	04810004 	movi	r18,1024
   13140:	10820014 	ori	r2,r2,2048
   13144:	8080030d 	sth	r2,12(r16)
   13148:	0027883a 	mov	r19,zero
   1314c:	900b883a 	mov	r5,r18
   13150:	8809883a 	mov	r4,r17
   13154:	00112980 	call	11298 <_malloc_r>
   13158:	10002c26 	beq	r2,zero,1320c <__smakebuf_r+0x17c>
   1315c:	80c0030b 	ldhu	r3,12(r16)
   13160:	01000074 	movhi	r4,1
   13164:	21022f04 	addi	r4,r4,2236
   13168:	89000f15 	stw	r4,60(r17)
   1316c:	18c02014 	ori	r3,r3,128
   13170:	80c0030d 	sth	r3,12(r16)
   13174:	80800015 	stw	r2,0(r16)
   13178:	80800415 	stw	r2,16(r16)
   1317c:	84800515 	stw	r18,20(r16)
   13180:	98001a1e 	bne	r19,zero,131ec <__smakebuf_r+0x15c>
   13184:	dfc01317 	ldw	ra,76(sp)
   13188:	dcc01217 	ldw	r19,72(sp)
   1318c:	dc801117 	ldw	r18,68(sp)
   13190:	dc401017 	ldw	r17,64(sp)
   13194:	dc000f17 	ldw	r16,60(sp)
   13198:	dec01404 	addi	sp,sp,80
   1319c:	f800283a 	ret
   131a0:	288010c4 	addi	r2,r5,67
   131a4:	28800015 	stw	r2,0(r5)
   131a8:	28800415 	stw	r2,16(r5)
   131ac:	00800044 	movi	r2,1
   131b0:	28800515 	stw	r2,20(r5)
   131b4:	f800283a 	ret
   131b8:	04801004 	movi	r18,64
   131bc:	003fe006 	br	13140 <_gp+0xffff3ba8>
   131c0:	81000a17 	ldw	r4,40(r16)
   131c4:	00c00074 	movhi	r3,1
   131c8:	18c97904 	addi	r3,r3,9700
   131cc:	20ffc51e 	bne	r4,r3,130e4 <_gp+0xffff3b4c>
   131d0:	8080030b 	ldhu	r2,12(r16)
   131d4:	04810004 	movi	r18,1024
   131d8:	84801315 	stw	r18,76(r16)
   131dc:	1484b03a 	or	r2,r2,r18
   131e0:	8080030d 	sth	r2,12(r16)
   131e4:	0027883a 	mov	r19,zero
   131e8:	003fd806 	br	1314c <_gp+0xffff3bb4>
   131ec:	8140038f 	ldh	r5,14(r16)
   131f0:	8809883a 	mov	r4,r17
   131f4:	00133080 	call	13308 <_isatty_r>
   131f8:	103fe226 	beq	r2,zero,13184 <_gp+0xffff3bec>
   131fc:	8080030b 	ldhu	r2,12(r16)
   13200:	10800054 	ori	r2,r2,1
   13204:	8080030d 	sth	r2,12(r16)
   13208:	003fde06 	br	13184 <_gp+0xffff3bec>
   1320c:	8080030b 	ldhu	r2,12(r16)
   13210:	10c0800c 	andi	r3,r2,512
   13214:	183fdb1e 	bne	r3,zero,13184 <_gp+0xffff3bec>
   13218:	10800094 	ori	r2,r2,2
   1321c:	80c010c4 	addi	r3,r16,67
   13220:	8080030d 	sth	r2,12(r16)
   13224:	00800044 	movi	r2,1
   13228:	80c00015 	stw	r3,0(r16)
   1322c:	80c00415 	stw	r3,16(r16)
   13230:	80800515 	stw	r2,20(r16)
   13234:	003fd306 	br	13184 <_gp+0xffff3bec>
   13238:	04810004 	movi	r18,1024
   1323c:	003fc306 	br	1314c <_gp+0xffff3bb4>
   13240:	0027883a 	mov	r19,zero
   13244:	04810004 	movi	r18,1024
   13248:	003fc006 	br	1314c <_gp+0xffff3bb4>

0001324c <_read_r>:
   1324c:	defffd04 	addi	sp,sp,-12
   13250:	2805883a 	mov	r2,r5
   13254:	dc000015 	stw	r16,0(sp)
   13258:	040000b4 	movhi	r16,2
   1325c:	dc400115 	stw	r17,4(sp)
   13260:	300b883a 	mov	r5,r6
   13264:	84241e04 	addi	r16,r16,-28552
   13268:	2023883a 	mov	r17,r4
   1326c:	380d883a 	mov	r6,r7
   13270:	1009883a 	mov	r4,r2
   13274:	dfc00215 	stw	ra,8(sp)
   13278:	80000015 	stw	zero,0(r16)
   1327c:	001395c0 	call	1395c <read>
   13280:	00ffffc4 	movi	r3,-1
   13284:	10c00526 	beq	r2,r3,1329c <_read_r+0x50>
   13288:	dfc00217 	ldw	ra,8(sp)
   1328c:	dc400117 	ldw	r17,4(sp)
   13290:	dc000017 	ldw	r16,0(sp)
   13294:	dec00304 	addi	sp,sp,12
   13298:	f800283a 	ret
   1329c:	80c00017 	ldw	r3,0(r16)
   132a0:	183ff926 	beq	r3,zero,13288 <_gp+0xffff3cf0>
   132a4:	88c00015 	stw	r3,0(r17)
   132a8:	003ff706 	br	13288 <_gp+0xffff3cf0>

000132ac <_fstat_r>:
   132ac:	defffd04 	addi	sp,sp,-12
   132b0:	2805883a 	mov	r2,r5
   132b4:	dc000015 	stw	r16,0(sp)
   132b8:	040000b4 	movhi	r16,2
   132bc:	dc400115 	stw	r17,4(sp)
   132c0:	84241e04 	addi	r16,r16,-28552
   132c4:	2023883a 	mov	r17,r4
   132c8:	300b883a 	mov	r5,r6
   132cc:	1009883a 	mov	r4,r2
   132d0:	dfc00215 	stw	ra,8(sp)
   132d4:	80000015 	stw	zero,0(r16)
   132d8:	00134d00 	call	134d0 <fstat>
   132dc:	00ffffc4 	movi	r3,-1
   132e0:	10c00526 	beq	r2,r3,132f8 <_fstat_r+0x4c>
   132e4:	dfc00217 	ldw	ra,8(sp)
   132e8:	dc400117 	ldw	r17,4(sp)
   132ec:	dc000017 	ldw	r16,0(sp)
   132f0:	dec00304 	addi	sp,sp,12
   132f4:	f800283a 	ret
   132f8:	80c00017 	ldw	r3,0(r16)
   132fc:	183ff926 	beq	r3,zero,132e4 <_gp+0xffff3d4c>
   13300:	88c00015 	stw	r3,0(r17)
   13304:	003ff706 	br	132e4 <_gp+0xffff3d4c>

00013308 <_isatty_r>:
   13308:	defffd04 	addi	sp,sp,-12
   1330c:	dc000015 	stw	r16,0(sp)
   13310:	040000b4 	movhi	r16,2
   13314:	dc400115 	stw	r17,4(sp)
   13318:	84241e04 	addi	r16,r16,-28552
   1331c:	2023883a 	mov	r17,r4
   13320:	2809883a 	mov	r4,r5
   13324:	dfc00215 	stw	ra,8(sp)
   13328:	80000015 	stw	zero,0(r16)
   1332c:	00135bc0 	call	135bc <isatty>
   13330:	00ffffc4 	movi	r3,-1
   13334:	10c00526 	beq	r2,r3,1334c <_isatty_r+0x44>
   13338:	dfc00217 	ldw	ra,8(sp)
   1333c:	dc400117 	ldw	r17,4(sp)
   13340:	dc000017 	ldw	r16,0(sp)
   13344:	dec00304 	addi	sp,sp,12
   13348:	f800283a 	ret
   1334c:	80c00017 	ldw	r3,0(r16)
   13350:	183ff926 	beq	r3,zero,13338 <_gp+0xffff3da0>
   13354:	88c00015 	stw	r3,0(r17)
   13358:	003ff706 	br	13338 <_gp+0xffff3da0>

0001335c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1335c:	defffe04 	addi	sp,sp,-8
   13360:	dfc00115 	stw	ra,4(sp)
   13364:	df000015 	stw	fp,0(sp)
   13368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1336c:	d0a00917 	ldw	r2,-32732(gp)
   13370:	10000326 	beq	r2,zero,13380 <alt_get_errno+0x24>
   13374:	d0a00917 	ldw	r2,-32732(gp)
   13378:	103ee83a 	callr	r2
   1337c:	00000106 	br	13384 <alt_get_errno+0x28>
   13380:	d0a6b804 	addi	r2,gp,-25888
}
   13384:	e037883a 	mov	sp,fp
   13388:	dfc00117 	ldw	ra,4(sp)
   1338c:	df000017 	ldw	fp,0(sp)
   13390:	dec00204 	addi	sp,sp,8
   13394:	f800283a 	ret

00013398 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13398:	defffb04 	addi	sp,sp,-20
   1339c:	dfc00415 	stw	ra,16(sp)
   133a0:	df000315 	stw	fp,12(sp)
   133a4:	df000304 	addi	fp,sp,12
   133a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	10000616 	blt	r2,zero,133cc <close+0x34>
   133b4:	e0bfff17 	ldw	r2,-4(fp)
   133b8:	10c00324 	muli	r3,r2,12
   133bc:	00800074 	movhi	r2,1
   133c0:	1098ee04 	addi	r2,r2,25528
   133c4:	1885883a 	add	r2,r3,r2
   133c8:	00000106 	br	133d0 <close+0x38>
   133cc:	0005883a 	mov	r2,zero
   133d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   133d4:	e0bffd17 	ldw	r2,-12(fp)
   133d8:	10001926 	beq	r2,zero,13440 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   133dc:	e0bffd17 	ldw	r2,-12(fp)
   133e0:	10800017 	ldw	r2,0(r2)
   133e4:	10800417 	ldw	r2,16(r2)
   133e8:	10000626 	beq	r2,zero,13404 <close+0x6c>
   133ec:	e0bffd17 	ldw	r2,-12(fp)
   133f0:	10800017 	ldw	r2,0(r2)
   133f4:	10800417 	ldw	r2,16(r2)
   133f8:	e13ffd17 	ldw	r4,-12(fp)
   133fc:	103ee83a 	callr	r2
   13400:	00000106 	br	13408 <close+0x70>
   13404:	0005883a 	mov	r2,zero
   13408:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1340c:	e13fff17 	ldw	r4,-4(fp)
   13410:	0013a580 	call	13a58 <alt_release_fd>
    if (rval < 0)
   13414:	e0bffe17 	ldw	r2,-8(fp)
   13418:	1000070e 	bge	r2,zero,13438 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1341c:	001335c0 	call	1335c <alt_get_errno>
   13420:	1007883a 	mov	r3,r2
   13424:	e0bffe17 	ldw	r2,-8(fp)
   13428:	0085c83a 	sub	r2,zero,r2
   1342c:	18800015 	stw	r2,0(r3)
      return -1;
   13430:	00bfffc4 	movi	r2,-1
   13434:	00000706 	br	13454 <close+0xbc>
    }
    return 0;
   13438:	0005883a 	mov	r2,zero
   1343c:	00000506 	br	13454 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13440:	001335c0 	call	1335c <alt_get_errno>
   13444:	1007883a 	mov	r3,r2
   13448:	00801444 	movi	r2,81
   1344c:	18800015 	stw	r2,0(r3)
    return -1;
   13450:	00bfffc4 	movi	r2,-1
  }
}
   13454:	e037883a 	mov	sp,fp
   13458:	dfc00117 	ldw	ra,4(sp)
   1345c:	df000017 	ldw	fp,0(sp)
   13460:	dec00204 	addi	sp,sp,8
   13464:	f800283a 	ret

00013468 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13468:	defffc04 	addi	sp,sp,-16
   1346c:	df000315 	stw	fp,12(sp)
   13470:	df000304 	addi	fp,sp,12
   13474:	e13ffd15 	stw	r4,-12(fp)
   13478:	e17ffe15 	stw	r5,-8(fp)
   1347c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13480:	e0bfff17 	ldw	r2,-4(fp)
}
   13484:	e037883a 	mov	sp,fp
   13488:	df000017 	ldw	fp,0(sp)
   1348c:	dec00104 	addi	sp,sp,4
   13490:	f800283a 	ret

00013494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13494:	defffe04 	addi	sp,sp,-8
   13498:	dfc00115 	stw	ra,4(sp)
   1349c:	df000015 	stw	fp,0(sp)
   134a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   134a4:	d0a00917 	ldw	r2,-32732(gp)
   134a8:	10000326 	beq	r2,zero,134b8 <alt_get_errno+0x24>
   134ac:	d0a00917 	ldw	r2,-32732(gp)
   134b0:	103ee83a 	callr	r2
   134b4:	00000106 	br	134bc <alt_get_errno+0x28>
   134b8:	d0a6b804 	addi	r2,gp,-25888
}
   134bc:	e037883a 	mov	sp,fp
   134c0:	dfc00117 	ldw	ra,4(sp)
   134c4:	df000017 	ldw	fp,0(sp)
   134c8:	dec00204 	addi	sp,sp,8
   134cc:	f800283a 	ret

000134d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   134d0:	defffb04 	addi	sp,sp,-20
   134d4:	dfc00415 	stw	ra,16(sp)
   134d8:	df000315 	stw	fp,12(sp)
   134dc:	df000304 	addi	fp,sp,12
   134e0:	e13ffe15 	stw	r4,-8(fp)
   134e4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   134e8:	e0bffe17 	ldw	r2,-8(fp)
   134ec:	10000616 	blt	r2,zero,13508 <fstat+0x38>
   134f0:	e0bffe17 	ldw	r2,-8(fp)
   134f4:	10c00324 	muli	r3,r2,12
   134f8:	00800074 	movhi	r2,1
   134fc:	1098ee04 	addi	r2,r2,25528
   13500:	1885883a 	add	r2,r3,r2
   13504:	00000106 	br	1350c <fstat+0x3c>
   13508:	0005883a 	mov	r2,zero
   1350c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   13510:	e0bffd17 	ldw	r2,-12(fp)
   13514:	10001026 	beq	r2,zero,13558 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	10800017 	ldw	r2,0(r2)
   13520:	10800817 	ldw	r2,32(r2)
   13524:	10000726 	beq	r2,zero,13544 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   13528:	e0bffd17 	ldw	r2,-12(fp)
   1352c:	10800017 	ldw	r2,0(r2)
   13530:	10800817 	ldw	r2,32(r2)
   13534:	e17fff17 	ldw	r5,-4(fp)
   13538:	e13ffd17 	ldw	r4,-12(fp)
   1353c:	103ee83a 	callr	r2
   13540:	00000a06 	br	1356c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   13544:	e0bfff17 	ldw	r2,-4(fp)
   13548:	00c80004 	movi	r3,8192
   1354c:	10c00115 	stw	r3,4(r2)
      return 0;
   13550:	0005883a 	mov	r2,zero
   13554:	00000506 	br	1356c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13558:	00134940 	call	13494 <alt_get_errno>
   1355c:	1007883a 	mov	r3,r2
   13560:	00801444 	movi	r2,81
   13564:	18800015 	stw	r2,0(r3)
    return -1;
   13568:	00bfffc4 	movi	r2,-1
  }
}
   1356c:	e037883a 	mov	sp,fp
   13570:	dfc00117 	ldw	ra,4(sp)
   13574:	df000017 	ldw	fp,0(sp)
   13578:	dec00204 	addi	sp,sp,8
   1357c:	f800283a 	ret

00013580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13580:	defffe04 	addi	sp,sp,-8
   13584:	dfc00115 	stw	ra,4(sp)
   13588:	df000015 	stw	fp,0(sp)
   1358c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13590:	d0a00917 	ldw	r2,-32732(gp)
   13594:	10000326 	beq	r2,zero,135a4 <alt_get_errno+0x24>
   13598:	d0a00917 	ldw	r2,-32732(gp)
   1359c:	103ee83a 	callr	r2
   135a0:	00000106 	br	135a8 <alt_get_errno+0x28>
   135a4:	d0a6b804 	addi	r2,gp,-25888
}
   135a8:	e037883a 	mov	sp,fp
   135ac:	dfc00117 	ldw	ra,4(sp)
   135b0:	df000017 	ldw	fp,0(sp)
   135b4:	dec00204 	addi	sp,sp,8
   135b8:	f800283a 	ret

000135bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   135bc:	deffed04 	addi	sp,sp,-76
   135c0:	dfc01215 	stw	ra,72(sp)
   135c4:	df001115 	stw	fp,68(sp)
   135c8:	df001104 	addi	fp,sp,68
   135cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   135d0:	e0bfff17 	ldw	r2,-4(fp)
   135d4:	10000616 	blt	r2,zero,135f0 <isatty+0x34>
   135d8:	e0bfff17 	ldw	r2,-4(fp)
   135dc:	10c00324 	muli	r3,r2,12
   135e0:	00800074 	movhi	r2,1
   135e4:	1098ee04 	addi	r2,r2,25528
   135e8:	1885883a 	add	r2,r3,r2
   135ec:	00000106 	br	135f4 <isatty+0x38>
   135f0:	0005883a 	mov	r2,zero
   135f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   135f8:	e0bfef17 	ldw	r2,-68(fp)
   135fc:	10000e26 	beq	r2,zero,13638 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13600:	e0bfef17 	ldw	r2,-68(fp)
   13604:	10800017 	ldw	r2,0(r2)
   13608:	10800817 	ldw	r2,32(r2)
   1360c:	1000021e 	bne	r2,zero,13618 <isatty+0x5c>
    {
      return 1;
   13610:	00800044 	movi	r2,1
   13614:	00000d06 	br	1364c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13618:	e0bff004 	addi	r2,fp,-64
   1361c:	100b883a 	mov	r5,r2
   13620:	e13fff17 	ldw	r4,-4(fp)
   13624:	00134d00 	call	134d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13628:	e0bff117 	ldw	r2,-60(fp)
   1362c:	10880020 	cmpeqi	r2,r2,8192
   13630:	10803fcc 	andi	r2,r2,255
   13634:	00000506 	br	1364c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13638:	00135800 	call	13580 <alt_get_errno>
   1363c:	1007883a 	mov	r3,r2
   13640:	00801444 	movi	r2,81
   13644:	18800015 	stw	r2,0(r3)
    return 0;
   13648:	0005883a 	mov	r2,zero
  }
}
   1364c:	e037883a 	mov	sp,fp
   13650:	dfc00117 	ldw	ra,4(sp)
   13654:	df000017 	ldw	fp,0(sp)
   13658:	dec00204 	addi	sp,sp,8
   1365c:	f800283a 	ret

00013660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13660:	defffc04 	addi	sp,sp,-16
   13664:	df000315 	stw	fp,12(sp)
   13668:	df000304 	addi	fp,sp,12
   1366c:	e13ffd15 	stw	r4,-12(fp)
   13670:	e17ffe15 	stw	r5,-8(fp)
   13674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13678:	e0fffe17 	ldw	r3,-8(fp)
   1367c:	e0bffd17 	ldw	r2,-12(fp)
   13680:	18800c26 	beq	r3,r2,136b4 <alt_load_section+0x54>
  {
    while( to != end )
   13684:	00000806 	br	136a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13688:	e0bffe17 	ldw	r2,-8(fp)
   1368c:	10c00104 	addi	r3,r2,4
   13690:	e0fffe15 	stw	r3,-8(fp)
   13694:	e0fffd17 	ldw	r3,-12(fp)
   13698:	19000104 	addi	r4,r3,4
   1369c:	e13ffd15 	stw	r4,-12(fp)
   136a0:	18c00017 	ldw	r3,0(r3)
   136a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   136a8:	e0fffe17 	ldw	r3,-8(fp)
   136ac:	e0bfff17 	ldw	r2,-4(fp)
   136b0:	18bff51e 	bne	r3,r2,13688 <_gp+0xffff40f0>
    {
      *to++ = *from++;
    }
  }
}
   136b4:	0001883a 	nop
   136b8:	e037883a 	mov	sp,fp
   136bc:	df000017 	ldw	fp,0(sp)
   136c0:	dec00104 	addi	sp,sp,4
   136c4:	f800283a 	ret

000136c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   136c8:	defffe04 	addi	sp,sp,-8
   136cc:	dfc00115 	stw	ra,4(sp)
   136d0:	df000015 	stw	fp,0(sp)
   136d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   136d8:	01800074 	movhi	r6,1
   136dc:	319d7404 	addi	r6,r6,30160
   136e0:	01400074 	movhi	r5,1
   136e4:	2956cd04 	addi	r5,r5,23348
   136e8:	01000074 	movhi	r4,1
   136ec:	211d7404 	addi	r4,r4,30160
   136f0:	00136600 	call	13660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   136f4:	01800074 	movhi	r6,1
   136f8:	31809104 	addi	r6,r6,580
   136fc:	01400074 	movhi	r5,1
   13700:	29400804 	addi	r5,r5,32
   13704:	01000074 	movhi	r4,1
   13708:	21000804 	addi	r4,r4,32
   1370c:	00136600 	call	13660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13710:	01800074 	movhi	r6,1
   13714:	3196cd04 	addi	r6,r6,23348
   13718:	01400074 	movhi	r5,1
   1371c:	2956b904 	addi	r5,r5,23268
   13720:	01000074 	movhi	r4,1
   13724:	2116b904 	addi	r4,r4,23268
   13728:	00136600 	call	13660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1372c:	00149f80 	call	149f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13730:	0014bb80 	call	14bb8 <alt_icache_flush_all>
}
   13734:	0001883a 	nop
   13738:	e037883a 	mov	sp,fp
   1373c:	dfc00117 	ldw	ra,4(sp)
   13740:	df000017 	ldw	fp,0(sp)
   13744:	dec00204 	addi	sp,sp,8
   13748:	f800283a 	ret

0001374c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1374c:	defffe04 	addi	sp,sp,-8
   13750:	dfc00115 	stw	ra,4(sp)
   13754:	df000015 	stw	fp,0(sp)
   13758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1375c:	d0a00917 	ldw	r2,-32732(gp)
   13760:	10000326 	beq	r2,zero,13770 <alt_get_errno+0x24>
   13764:	d0a00917 	ldw	r2,-32732(gp)
   13768:	103ee83a 	callr	r2
   1376c:	00000106 	br	13774 <alt_get_errno+0x28>
   13770:	d0a6b804 	addi	r2,gp,-25888
}
   13774:	e037883a 	mov	sp,fp
   13778:	dfc00117 	ldw	ra,4(sp)
   1377c:	df000017 	ldw	fp,0(sp)
   13780:	dec00204 	addi	sp,sp,8
   13784:	f800283a 	ret

00013788 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13788:	defff904 	addi	sp,sp,-28
   1378c:	dfc00615 	stw	ra,24(sp)
   13790:	df000515 	stw	fp,20(sp)
   13794:	df000504 	addi	fp,sp,20
   13798:	e13ffd15 	stw	r4,-12(fp)
   1379c:	e17ffe15 	stw	r5,-8(fp)
   137a0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   137a4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   137a8:	e0bffd17 	ldw	r2,-12(fp)
   137ac:	10000616 	blt	r2,zero,137c8 <lseek+0x40>
   137b0:	e0bffd17 	ldw	r2,-12(fp)
   137b4:	10c00324 	muli	r3,r2,12
   137b8:	00800074 	movhi	r2,1
   137bc:	1098ee04 	addi	r2,r2,25528
   137c0:	1885883a 	add	r2,r3,r2
   137c4:	00000106 	br	137cc <lseek+0x44>
   137c8:	0005883a 	mov	r2,zero
   137cc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   137d0:	e0bffc17 	ldw	r2,-16(fp)
   137d4:	10001026 	beq	r2,zero,13818 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   137d8:	e0bffc17 	ldw	r2,-16(fp)
   137dc:	10800017 	ldw	r2,0(r2)
   137e0:	10800717 	ldw	r2,28(r2)
   137e4:	10000926 	beq	r2,zero,1380c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   137e8:	e0bffc17 	ldw	r2,-16(fp)
   137ec:	10800017 	ldw	r2,0(r2)
   137f0:	10800717 	ldw	r2,28(r2)
   137f4:	e1bfff17 	ldw	r6,-4(fp)
   137f8:	e17ffe17 	ldw	r5,-8(fp)
   137fc:	e13ffc17 	ldw	r4,-16(fp)
   13800:	103ee83a 	callr	r2
   13804:	e0bffb15 	stw	r2,-20(fp)
   13808:	00000506 	br	13820 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1380c:	00bfde84 	movi	r2,-134
   13810:	e0bffb15 	stw	r2,-20(fp)
   13814:	00000206 	br	13820 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   13818:	00bfebc4 	movi	r2,-81
   1381c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13820:	e0bffb17 	ldw	r2,-20(fp)
   13824:	1000070e 	bge	r2,zero,13844 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13828:	001374c0 	call	1374c <alt_get_errno>
   1382c:	1007883a 	mov	r3,r2
   13830:	e0bffb17 	ldw	r2,-20(fp)
   13834:	0085c83a 	sub	r2,zero,r2
   13838:	18800015 	stw	r2,0(r3)
    rc = -1;
   1383c:	00bfffc4 	movi	r2,-1
   13840:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13844:	e0bffb17 	ldw	r2,-20(fp)
}
   13848:	e037883a 	mov	sp,fp
   1384c:	dfc00117 	ldw	ra,4(sp)
   13850:	df000017 	ldw	fp,0(sp)
   13854:	dec00204 	addi	sp,sp,8
   13858:	f800283a 	ret

0001385c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1385c:	defffd04 	addi	sp,sp,-12
   13860:	dfc00215 	stw	ra,8(sp)
   13864:	df000115 	stw	fp,4(sp)
   13868:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1386c:	0009883a 	mov	r4,zero
   13870:	0013cd40 	call	13cd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13874:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13878:	0013d0c0 	call	13d0c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1387c:	01800074 	movhi	r6,1
   13880:	3196c304 	addi	r6,r6,23308
   13884:	01400074 	movhi	r5,1
   13888:	2956c304 	addi	r5,r5,23308
   1388c:	01000074 	movhi	r4,1
   13890:	2116c304 	addi	r4,r4,23308
   13894:	0014f500 	call	14f50 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13898:	0014af80 	call	14af8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1389c:	01000074 	movhi	r4,1
   138a0:	2112d604 	addi	r4,r4,19288
   138a4:	00157500 	call	15750 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   138a8:	d0a6b917 	ldw	r2,-25884(gp)
   138ac:	d0e6ba17 	ldw	r3,-25880(gp)
   138b0:	d126bb17 	ldw	r4,-25876(gp)
   138b4:	200d883a 	mov	r6,r4
   138b8:	180b883a 	mov	r5,r3
   138bc:	1009883a 	mov	r4,r2
   138c0:	00102800 	call	10280 <main>
   138c4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   138c8:	01000044 	movi	r4,1
   138cc:	00133980 	call	13398 <close>
  exit (result);
   138d0:	e13fff17 	ldw	r4,-4(fp)
   138d4:	00157640 	call	15764 <exit>

000138d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   138d8:	defffe04 	addi	sp,sp,-8
   138dc:	df000115 	stw	fp,4(sp)
   138e0:	df000104 	addi	fp,sp,4
   138e4:	e13fff15 	stw	r4,-4(fp)
}
   138e8:	0001883a 	nop
   138ec:	e037883a 	mov	sp,fp
   138f0:	df000017 	ldw	fp,0(sp)
   138f4:	dec00104 	addi	sp,sp,4
   138f8:	f800283a 	ret

000138fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   138fc:	defffe04 	addi	sp,sp,-8
   13900:	df000115 	stw	fp,4(sp)
   13904:	df000104 	addi	fp,sp,4
   13908:	e13fff15 	stw	r4,-4(fp)
}
   1390c:	0001883a 	nop
   13910:	e037883a 	mov	sp,fp
   13914:	df000017 	ldw	fp,0(sp)
   13918:	dec00104 	addi	sp,sp,4
   1391c:	f800283a 	ret

00013920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13920:	defffe04 	addi	sp,sp,-8
   13924:	dfc00115 	stw	ra,4(sp)
   13928:	df000015 	stw	fp,0(sp)
   1392c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13930:	d0a00917 	ldw	r2,-32732(gp)
   13934:	10000326 	beq	r2,zero,13944 <alt_get_errno+0x24>
   13938:	d0a00917 	ldw	r2,-32732(gp)
   1393c:	103ee83a 	callr	r2
   13940:	00000106 	br	13948 <alt_get_errno+0x28>
   13944:	d0a6b804 	addi	r2,gp,-25888
}
   13948:	e037883a 	mov	sp,fp
   1394c:	dfc00117 	ldw	ra,4(sp)
   13950:	df000017 	ldw	fp,0(sp)
   13954:	dec00204 	addi	sp,sp,8
   13958:	f800283a 	ret

0001395c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1395c:	defff904 	addi	sp,sp,-28
   13960:	dfc00615 	stw	ra,24(sp)
   13964:	df000515 	stw	fp,20(sp)
   13968:	df000504 	addi	fp,sp,20
   1396c:	e13ffd15 	stw	r4,-12(fp)
   13970:	e17ffe15 	stw	r5,-8(fp)
   13974:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13978:	e0bffd17 	ldw	r2,-12(fp)
   1397c:	10000616 	blt	r2,zero,13998 <read+0x3c>
   13980:	e0bffd17 	ldw	r2,-12(fp)
   13984:	10c00324 	muli	r3,r2,12
   13988:	00800074 	movhi	r2,1
   1398c:	1098ee04 	addi	r2,r2,25528
   13990:	1885883a 	add	r2,r3,r2
   13994:	00000106 	br	1399c <read+0x40>
   13998:	0005883a 	mov	r2,zero
   1399c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   139a0:	e0bffb17 	ldw	r2,-20(fp)
   139a4:	10002226 	beq	r2,zero,13a30 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   139a8:	e0bffb17 	ldw	r2,-20(fp)
   139ac:	10800217 	ldw	r2,8(r2)
   139b0:	108000cc 	andi	r2,r2,3
   139b4:	10800060 	cmpeqi	r2,r2,1
   139b8:	1000181e 	bne	r2,zero,13a1c <read+0xc0>
        (fd->dev->read))
   139bc:	e0bffb17 	ldw	r2,-20(fp)
   139c0:	10800017 	ldw	r2,0(r2)
   139c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   139c8:	10001426 	beq	r2,zero,13a1c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   139cc:	e0bffb17 	ldw	r2,-20(fp)
   139d0:	10800017 	ldw	r2,0(r2)
   139d4:	10800517 	ldw	r2,20(r2)
   139d8:	e0ffff17 	ldw	r3,-4(fp)
   139dc:	180d883a 	mov	r6,r3
   139e0:	e17ffe17 	ldw	r5,-8(fp)
   139e4:	e13ffb17 	ldw	r4,-20(fp)
   139e8:	103ee83a 	callr	r2
   139ec:	e0bffc15 	stw	r2,-16(fp)
   139f0:	e0bffc17 	ldw	r2,-16(fp)
   139f4:	1000070e 	bge	r2,zero,13a14 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   139f8:	00139200 	call	13920 <alt_get_errno>
   139fc:	1007883a 	mov	r3,r2
   13a00:	e0bffc17 	ldw	r2,-16(fp)
   13a04:	0085c83a 	sub	r2,zero,r2
   13a08:	18800015 	stw	r2,0(r3)
          return -1;
   13a0c:	00bfffc4 	movi	r2,-1
   13a10:	00000c06 	br	13a44 <read+0xe8>
        }
        return rval;
   13a14:	e0bffc17 	ldw	r2,-16(fp)
   13a18:	00000a06 	br	13a44 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13a1c:	00139200 	call	13920 <alt_get_errno>
   13a20:	1007883a 	mov	r3,r2
   13a24:	00800344 	movi	r2,13
   13a28:	18800015 	stw	r2,0(r3)
   13a2c:	00000406 	br	13a40 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13a30:	00139200 	call	13920 <alt_get_errno>
   13a34:	1007883a 	mov	r3,r2
   13a38:	00801444 	movi	r2,81
   13a3c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a40:	00bfffc4 	movi	r2,-1
}
   13a44:	e037883a 	mov	sp,fp
   13a48:	dfc00117 	ldw	ra,4(sp)
   13a4c:	df000017 	ldw	fp,0(sp)
   13a50:	dec00204 	addi	sp,sp,8
   13a54:	f800283a 	ret

00013a58 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13a58:	defffe04 	addi	sp,sp,-8
   13a5c:	df000115 	stw	fp,4(sp)
   13a60:	df000104 	addi	fp,sp,4
   13a64:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13a68:	e0bfff17 	ldw	r2,-4(fp)
   13a6c:	108000d0 	cmplti	r2,r2,3
   13a70:	10000d1e 	bne	r2,zero,13aa8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13a74:	00800074 	movhi	r2,1
   13a78:	1098ee04 	addi	r2,r2,25528
   13a7c:	e0ffff17 	ldw	r3,-4(fp)
   13a80:	18c00324 	muli	r3,r3,12
   13a84:	10c5883a 	add	r2,r2,r3
   13a88:	10800204 	addi	r2,r2,8
   13a8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13a90:	00800074 	movhi	r2,1
   13a94:	1098ee04 	addi	r2,r2,25528
   13a98:	e0ffff17 	ldw	r3,-4(fp)
   13a9c:	18c00324 	muli	r3,r3,12
   13aa0:	10c5883a 	add	r2,r2,r3
   13aa4:	10000015 	stw	zero,0(r2)
  }
}
   13aa8:	0001883a 	nop
   13aac:	e037883a 	mov	sp,fp
   13ab0:	df000017 	ldw	fp,0(sp)
   13ab4:	dec00104 	addi	sp,sp,4
   13ab8:	f800283a 	ret

00013abc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13abc:	defff904 	addi	sp,sp,-28
   13ac0:	df000615 	stw	fp,24(sp)
   13ac4:	df000604 	addi	fp,sp,24
   13ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13acc:	0005303a 	rdctl	r2,status
   13ad0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ad4:	e0fffe17 	ldw	r3,-8(fp)
   13ad8:	00bfff84 	movi	r2,-2
   13adc:	1884703a 	and	r2,r3,r2
   13ae0:	1001703a 	wrctl	status,r2
  
  return context;
   13ae4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13ae8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13aec:	d0a00a17 	ldw	r2,-32728(gp)
   13af0:	10c000c4 	addi	r3,r2,3
   13af4:	00bfff04 	movi	r2,-4
   13af8:	1884703a 	and	r2,r3,r2
   13afc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13b00:	d0e00a17 	ldw	r3,-32728(gp)
   13b04:	e0bfff17 	ldw	r2,-4(fp)
   13b08:	1887883a 	add	r3,r3,r2
   13b0c:	008000b4 	movhi	r2,2
   13b10:	10a80004 	addi	r2,r2,-24576
   13b14:	10c0062e 	bgeu	r2,r3,13b30 <sbrk+0x74>
   13b18:	e0bffb17 	ldw	r2,-20(fp)
   13b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b20:	e0bffa17 	ldw	r2,-24(fp)
   13b24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13b28:	00bfffc4 	movi	r2,-1
   13b2c:	00000b06 	br	13b5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   13b30:	d0a00a17 	ldw	r2,-32728(gp)
   13b34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   13b38:	d0e00a17 	ldw	r3,-32728(gp)
   13b3c:	e0bfff17 	ldw	r2,-4(fp)
   13b40:	1885883a 	add	r2,r3,r2
   13b44:	d0a00a15 	stw	r2,-32728(gp)
   13b48:	e0bffb17 	ldw	r2,-20(fp)
   13b4c:	e0bffc15 	stw	r2,-16(fp)
   13b50:	e0bffc17 	ldw	r2,-16(fp)
   13b54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13b58:	e0bffd17 	ldw	r2,-12(fp)
} 
   13b5c:	e037883a 	mov	sp,fp
   13b60:	df000017 	ldw	fp,0(sp)
   13b64:	dec00104 	addi	sp,sp,4
   13b68:	f800283a 	ret

00013b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13b6c:	defffe04 	addi	sp,sp,-8
   13b70:	dfc00115 	stw	ra,4(sp)
   13b74:	df000015 	stw	fp,0(sp)
   13b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13b7c:	d0a00917 	ldw	r2,-32732(gp)
   13b80:	10000326 	beq	r2,zero,13b90 <alt_get_errno+0x24>
   13b84:	d0a00917 	ldw	r2,-32732(gp)
   13b88:	103ee83a 	callr	r2
   13b8c:	00000106 	br	13b94 <alt_get_errno+0x28>
   13b90:	d0a6b804 	addi	r2,gp,-25888
}
   13b94:	e037883a 	mov	sp,fp
   13b98:	dfc00117 	ldw	ra,4(sp)
   13b9c:	df000017 	ldw	fp,0(sp)
   13ba0:	dec00204 	addi	sp,sp,8
   13ba4:	f800283a 	ret

00013ba8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13ba8:	defff904 	addi	sp,sp,-28
   13bac:	dfc00615 	stw	ra,24(sp)
   13bb0:	df000515 	stw	fp,20(sp)
   13bb4:	df000504 	addi	fp,sp,20
   13bb8:	e13ffd15 	stw	r4,-12(fp)
   13bbc:	e17ffe15 	stw	r5,-8(fp)
   13bc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13bc4:	e0bffd17 	ldw	r2,-12(fp)
   13bc8:	10000616 	blt	r2,zero,13be4 <write+0x3c>
   13bcc:	e0bffd17 	ldw	r2,-12(fp)
   13bd0:	10c00324 	muli	r3,r2,12
   13bd4:	00800074 	movhi	r2,1
   13bd8:	1098ee04 	addi	r2,r2,25528
   13bdc:	1885883a 	add	r2,r3,r2
   13be0:	00000106 	br	13be8 <write+0x40>
   13be4:	0005883a 	mov	r2,zero
   13be8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13bec:	e0bffb17 	ldw	r2,-20(fp)
   13bf0:	10002126 	beq	r2,zero,13c78 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13bf4:	e0bffb17 	ldw	r2,-20(fp)
   13bf8:	10800217 	ldw	r2,8(r2)
   13bfc:	108000cc 	andi	r2,r2,3
   13c00:	10001826 	beq	r2,zero,13c64 <write+0xbc>
   13c04:	e0bffb17 	ldw	r2,-20(fp)
   13c08:	10800017 	ldw	r2,0(r2)
   13c0c:	10800617 	ldw	r2,24(r2)
   13c10:	10001426 	beq	r2,zero,13c64 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13c14:	e0bffb17 	ldw	r2,-20(fp)
   13c18:	10800017 	ldw	r2,0(r2)
   13c1c:	10800617 	ldw	r2,24(r2)
   13c20:	e0ffff17 	ldw	r3,-4(fp)
   13c24:	180d883a 	mov	r6,r3
   13c28:	e17ffe17 	ldw	r5,-8(fp)
   13c2c:	e13ffb17 	ldw	r4,-20(fp)
   13c30:	103ee83a 	callr	r2
   13c34:	e0bffc15 	stw	r2,-16(fp)
   13c38:	e0bffc17 	ldw	r2,-16(fp)
   13c3c:	1000070e 	bge	r2,zero,13c5c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   13c40:	0013b6c0 	call	13b6c <alt_get_errno>
   13c44:	1007883a 	mov	r3,r2
   13c48:	e0bffc17 	ldw	r2,-16(fp)
   13c4c:	0085c83a 	sub	r2,zero,r2
   13c50:	18800015 	stw	r2,0(r3)
        return -1;
   13c54:	00bfffc4 	movi	r2,-1
   13c58:	00000c06 	br	13c8c <write+0xe4>
      }
      return rval;
   13c5c:	e0bffc17 	ldw	r2,-16(fp)
   13c60:	00000a06 	br	13c8c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13c64:	0013b6c0 	call	13b6c <alt_get_errno>
   13c68:	1007883a 	mov	r3,r2
   13c6c:	00800344 	movi	r2,13
   13c70:	18800015 	stw	r2,0(r3)
   13c74:	00000406 	br	13c88 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13c78:	0013b6c0 	call	13b6c <alt_get_errno>
   13c7c:	1007883a 	mov	r3,r2
   13c80:	00801444 	movi	r2,81
   13c84:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13c88:	00bfffc4 	movi	r2,-1
}
   13c8c:	e037883a 	mov	sp,fp
   13c90:	dfc00117 	ldw	ra,4(sp)
   13c94:	df000017 	ldw	fp,0(sp)
   13c98:	dec00204 	addi	sp,sp,8
   13c9c:	f800283a 	ret

00013ca0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13ca0:	defffd04 	addi	sp,sp,-12
   13ca4:	dfc00215 	stw	ra,8(sp)
   13ca8:	df000115 	stw	fp,4(sp)
   13cac:	df000104 	addi	fp,sp,4
   13cb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13cb4:	d1600604 	addi	r5,gp,-32744
   13cb8:	e13fff17 	ldw	r4,-4(fp)
   13cbc:	0014a540 	call	14a54 <alt_dev_llist_insert>
}
   13cc0:	e037883a 	mov	sp,fp
   13cc4:	dfc00117 	ldw	ra,4(sp)
   13cc8:	df000017 	ldw	fp,0(sp)
   13ccc:	dec00204 	addi	sp,sp,8
   13cd0:	f800283a 	ret

00013cd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13cd4:	defffd04 	addi	sp,sp,-12
   13cd8:	dfc00215 	stw	ra,8(sp)
   13cdc:	df000115 	stw	fp,4(sp)
   13ce0:	df000104 	addi	fp,sp,4
   13ce4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   13ce8:	00153c40 	call	153c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13cec:	00800044 	movi	r2,1
   13cf0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13cf4:	0001883a 	nop
   13cf8:	e037883a 	mov	sp,fp
   13cfc:	dfc00117 	ldw	ra,4(sp)
   13d00:	df000017 	ldw	fp,0(sp)
   13d04:	dec00204 	addi	sp,sp,8
   13d08:	f800283a 	ret

00013d0c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13d0c:	defffe04 	addi	sp,sp,-8
   13d10:	dfc00115 	stw	ra,4(sp)
   13d14:	df000015 	stw	fp,0(sp)
   13d18:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   13d1c:	01c0fa04 	movi	r7,1000
   13d20:	000d883a 	mov	r6,zero
   13d24:	000b883a 	mov	r5,zero
   13d28:	010000b4 	movhi	r4,2
   13d2c:	21040004 	addi	r4,r4,4096
   13d30:	00148500 	call	14850 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( UPDATE_SECOND, update_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13d34:	01800404 	movi	r6,16
   13d38:	000b883a 	mov	r5,zero
   13d3c:	01000074 	movhi	r4,1
   13d40:	21195804 	addi	r4,r4,25952
   13d44:	0013ed40 	call	13ed4 <altera_avalon_jtag_uart_init>
   13d48:	01000074 	movhi	r4,1
   13d4c:	21194e04 	addi	r4,r4,25912
   13d50:	0013ca00 	call	13ca0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   13d54:	0001883a 	nop
}
   13d58:	0001883a 	nop
   13d5c:	e037883a 	mov	sp,fp
   13d60:	dfc00117 	ldw	ra,4(sp)
   13d64:	df000017 	ldw	fp,0(sp)
   13d68:	dec00204 	addi	sp,sp,8
   13d6c:	f800283a 	ret

00013d70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13d70:	defffa04 	addi	sp,sp,-24
   13d74:	dfc00515 	stw	ra,20(sp)
   13d78:	df000415 	stw	fp,16(sp)
   13d7c:	df000404 	addi	fp,sp,16
   13d80:	e13ffd15 	stw	r4,-12(fp)
   13d84:	e17ffe15 	stw	r5,-8(fp)
   13d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13d8c:	e0bffd17 	ldw	r2,-12(fp)
   13d90:	10800017 	ldw	r2,0(r2)
   13d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13d98:	e0bffc17 	ldw	r2,-16(fp)
   13d9c:	10c00a04 	addi	r3,r2,40
   13da0:	e0bffd17 	ldw	r2,-12(fp)
   13da4:	10800217 	ldw	r2,8(r2)
   13da8:	100f883a 	mov	r7,r2
   13dac:	e1bfff17 	ldw	r6,-4(fp)
   13db0:	e17ffe17 	ldw	r5,-8(fp)
   13db4:	1809883a 	mov	r4,r3
   13db8:	00143980 	call	14398 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13dbc:	e037883a 	mov	sp,fp
   13dc0:	dfc00117 	ldw	ra,4(sp)
   13dc4:	df000017 	ldw	fp,0(sp)
   13dc8:	dec00204 	addi	sp,sp,8
   13dcc:	f800283a 	ret

00013dd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13dd0:	defffa04 	addi	sp,sp,-24
   13dd4:	dfc00515 	stw	ra,20(sp)
   13dd8:	df000415 	stw	fp,16(sp)
   13ddc:	df000404 	addi	fp,sp,16
   13de0:	e13ffd15 	stw	r4,-12(fp)
   13de4:	e17ffe15 	stw	r5,-8(fp)
   13de8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13dec:	e0bffd17 	ldw	r2,-12(fp)
   13df0:	10800017 	ldw	r2,0(r2)
   13df4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13df8:	e0bffc17 	ldw	r2,-16(fp)
   13dfc:	10c00a04 	addi	r3,r2,40
   13e00:	e0bffd17 	ldw	r2,-12(fp)
   13e04:	10800217 	ldw	r2,8(r2)
   13e08:	100f883a 	mov	r7,r2
   13e0c:	e1bfff17 	ldw	r6,-4(fp)
   13e10:	e17ffe17 	ldw	r5,-8(fp)
   13e14:	1809883a 	mov	r4,r3
   13e18:	00145b40 	call	145b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13e1c:	e037883a 	mov	sp,fp
   13e20:	dfc00117 	ldw	ra,4(sp)
   13e24:	df000017 	ldw	fp,0(sp)
   13e28:	dec00204 	addi	sp,sp,8
   13e2c:	f800283a 	ret

00013e30 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13e30:	defffc04 	addi	sp,sp,-16
   13e34:	dfc00315 	stw	ra,12(sp)
   13e38:	df000215 	stw	fp,8(sp)
   13e3c:	df000204 	addi	fp,sp,8
   13e40:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e44:	e0bfff17 	ldw	r2,-4(fp)
   13e48:	10800017 	ldw	r2,0(r2)
   13e4c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13e50:	e0bffe17 	ldw	r2,-8(fp)
   13e54:	10c00a04 	addi	r3,r2,40
   13e58:	e0bfff17 	ldw	r2,-4(fp)
   13e5c:	10800217 	ldw	r2,8(r2)
   13e60:	100b883a 	mov	r5,r2
   13e64:	1809883a 	mov	r4,r3
   13e68:	00142400 	call	14240 <altera_avalon_jtag_uart_close>
}
   13e6c:	e037883a 	mov	sp,fp
   13e70:	dfc00117 	ldw	ra,4(sp)
   13e74:	df000017 	ldw	fp,0(sp)
   13e78:	dec00204 	addi	sp,sp,8
   13e7c:	f800283a 	ret

00013e80 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13e80:	defffa04 	addi	sp,sp,-24
   13e84:	dfc00515 	stw	ra,20(sp)
   13e88:	df000415 	stw	fp,16(sp)
   13e8c:	df000404 	addi	fp,sp,16
   13e90:	e13ffd15 	stw	r4,-12(fp)
   13e94:	e17ffe15 	stw	r5,-8(fp)
   13e98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13e9c:	e0bffd17 	ldw	r2,-12(fp)
   13ea0:	10800017 	ldw	r2,0(r2)
   13ea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13ea8:	e0bffc17 	ldw	r2,-16(fp)
   13eac:	10800a04 	addi	r2,r2,40
   13eb0:	e1bfff17 	ldw	r6,-4(fp)
   13eb4:	e17ffe17 	ldw	r5,-8(fp)
   13eb8:	1009883a 	mov	r4,r2
   13ebc:	00142a80 	call	142a8 <altera_avalon_jtag_uart_ioctl>
}
   13ec0:	e037883a 	mov	sp,fp
   13ec4:	dfc00117 	ldw	ra,4(sp)
   13ec8:	df000017 	ldw	fp,0(sp)
   13ecc:	dec00204 	addi	sp,sp,8
   13ed0:	f800283a 	ret

00013ed4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13ed4:	defffa04 	addi	sp,sp,-24
   13ed8:	dfc00515 	stw	ra,20(sp)
   13edc:	df000415 	stw	fp,16(sp)
   13ee0:	df000404 	addi	fp,sp,16
   13ee4:	e13ffd15 	stw	r4,-12(fp)
   13ee8:	e17ffe15 	stw	r5,-8(fp)
   13eec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13ef0:	e0bffd17 	ldw	r2,-12(fp)
   13ef4:	00c00044 	movi	r3,1
   13ef8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13efc:	e0bffd17 	ldw	r2,-12(fp)
   13f00:	10800017 	ldw	r2,0(r2)
   13f04:	10800104 	addi	r2,r2,4
   13f08:	1007883a 	mov	r3,r2
   13f0c:	e0bffd17 	ldw	r2,-12(fp)
   13f10:	10800817 	ldw	r2,32(r2)
   13f14:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13f18:	e0bffe17 	ldw	r2,-8(fp)
   13f1c:	e0ffff17 	ldw	r3,-4(fp)
   13f20:	d8000015 	stw	zero,0(sp)
   13f24:	e1fffd17 	ldw	r7,-12(fp)
   13f28:	01800074 	movhi	r6,1
   13f2c:	318fe504 	addi	r6,r6,16276
   13f30:	180b883a 	mov	r5,r3
   13f34:	1009883a 	mov	r4,r2
   13f38:	0014bec0 	call	14bec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13f3c:	e0bffd17 	ldw	r2,-12(fp)
   13f40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13f44:	e0bffd17 	ldw	r2,-12(fp)
   13f48:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13f4c:	d0e6bd17 	ldw	r3,-25868(gp)
   13f50:	e1fffd17 	ldw	r7,-12(fp)
   13f54:	01800074 	movhi	r6,1
   13f58:	31906804 	addi	r6,r6,16800
   13f5c:	180b883a 	mov	r5,r3
   13f60:	1009883a 	mov	r4,r2
   13f64:	00148cc0 	call	148cc <alt_alarm_start>
   13f68:	1000040e 	bge	r2,zero,13f7c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13f6c:	e0fffd17 	ldw	r3,-12(fp)
   13f70:	00a00034 	movhi	r2,32768
   13f74:	10bfffc4 	addi	r2,r2,-1
   13f78:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13f7c:	0001883a 	nop
   13f80:	e037883a 	mov	sp,fp
   13f84:	dfc00117 	ldw	ra,4(sp)
   13f88:	df000017 	ldw	fp,0(sp)
   13f8c:	dec00204 	addi	sp,sp,8
   13f90:	f800283a 	ret

00013f94 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13f94:	defff804 	addi	sp,sp,-32
   13f98:	df000715 	stw	fp,28(sp)
   13f9c:	df000704 	addi	fp,sp,28
   13fa0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13fa4:	e0bfff17 	ldw	r2,-4(fp)
   13fa8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13fac:	e0bffb17 	ldw	r2,-20(fp)
   13fb0:	10800017 	ldw	r2,0(r2)
   13fb4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13fb8:	e0bffc17 	ldw	r2,-16(fp)
   13fbc:	10800104 	addi	r2,r2,4
   13fc0:	10800037 	ldwio	r2,0(r2)
   13fc4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13fc8:	e0bffd17 	ldw	r2,-12(fp)
   13fcc:	1080c00c 	andi	r2,r2,768
   13fd0:	10006d26 	beq	r2,zero,14188 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13fd4:	e0bffd17 	ldw	r2,-12(fp)
   13fd8:	1080400c 	andi	r2,r2,256
   13fdc:	10003526 	beq	r2,zero,140b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13fe0:	00800074 	movhi	r2,1
   13fe4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13fe8:	e0bffb17 	ldw	r2,-20(fp)
   13fec:	10800a17 	ldw	r2,40(r2)
   13ff0:	10800044 	addi	r2,r2,1
   13ff4:	1081ffcc 	andi	r2,r2,2047
   13ff8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13ffc:	e0bffb17 	ldw	r2,-20(fp)
   14000:	10c00b17 	ldw	r3,44(r2)
   14004:	e0bffe17 	ldw	r2,-8(fp)
   14008:	18801526 	beq	r3,r2,14060 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1400c:	e0bffc17 	ldw	r2,-16(fp)
   14010:	10800037 	ldwio	r2,0(r2)
   14014:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14018:	e0bff917 	ldw	r2,-28(fp)
   1401c:	10a0000c 	andi	r2,r2,32768
   14020:	10001126 	beq	r2,zero,14068 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14024:	e0bffb17 	ldw	r2,-20(fp)
   14028:	10800a17 	ldw	r2,40(r2)
   1402c:	e0fff917 	ldw	r3,-28(fp)
   14030:	1809883a 	mov	r4,r3
   14034:	e0fffb17 	ldw	r3,-20(fp)
   14038:	1885883a 	add	r2,r3,r2
   1403c:	10800e04 	addi	r2,r2,56
   14040:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14044:	e0bffb17 	ldw	r2,-20(fp)
   14048:	10800a17 	ldw	r2,40(r2)
   1404c:	10800044 	addi	r2,r2,1
   14050:	10c1ffcc 	andi	r3,r2,2047
   14054:	e0bffb17 	ldw	r2,-20(fp)
   14058:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1405c:	003fe206 	br	13fe8 <_gp+0xffff4a50>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   14060:	0001883a 	nop
   14064:	00000106 	br	1406c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   14068:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1406c:	e0bff917 	ldw	r2,-28(fp)
   14070:	10bfffec 	andhi	r2,r2,65535
   14074:	10000f26 	beq	r2,zero,140b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14078:	e0bffb17 	ldw	r2,-20(fp)
   1407c:	10c00817 	ldw	r3,32(r2)
   14080:	00bfff84 	movi	r2,-2
   14084:	1886703a 	and	r3,r3,r2
   14088:	e0bffb17 	ldw	r2,-20(fp)
   1408c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14090:	e0bffc17 	ldw	r2,-16(fp)
   14094:	10800104 	addi	r2,r2,4
   14098:	1007883a 	mov	r3,r2
   1409c:	e0bffb17 	ldw	r2,-20(fp)
   140a0:	10800817 	ldw	r2,32(r2)
   140a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   140a8:	e0bffc17 	ldw	r2,-16(fp)
   140ac:	10800104 	addi	r2,r2,4
   140b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   140b4:	e0bffd17 	ldw	r2,-12(fp)
   140b8:	1080800c 	andi	r2,r2,512
   140bc:	103fbe26 	beq	r2,zero,13fb8 <_gp+0xffff4a20>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   140c0:	e0bffd17 	ldw	r2,-12(fp)
   140c4:	1004d43a 	srli	r2,r2,16
   140c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   140cc:	00001406 	br	14120 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   140d0:	e0bffc17 	ldw	r2,-16(fp)
   140d4:	e0fffb17 	ldw	r3,-20(fp)
   140d8:	18c00d17 	ldw	r3,52(r3)
   140dc:	e13ffb17 	ldw	r4,-20(fp)
   140e0:	20c7883a 	add	r3,r4,r3
   140e4:	18c20e04 	addi	r3,r3,2104
   140e8:	18c00003 	ldbu	r3,0(r3)
   140ec:	18c03fcc 	andi	r3,r3,255
   140f0:	18c0201c 	xori	r3,r3,128
   140f4:	18ffe004 	addi	r3,r3,-128
   140f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   140fc:	e0bffb17 	ldw	r2,-20(fp)
   14100:	10800d17 	ldw	r2,52(r2)
   14104:	10800044 	addi	r2,r2,1
   14108:	10c1ffcc 	andi	r3,r2,2047
   1410c:	e0bffb17 	ldw	r2,-20(fp)
   14110:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14114:	e0bffa17 	ldw	r2,-24(fp)
   14118:	10bfffc4 	addi	r2,r2,-1
   1411c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14120:	e0bffa17 	ldw	r2,-24(fp)
   14124:	10000526 	beq	r2,zero,1413c <altera_avalon_jtag_uart_irq+0x1a8>
   14128:	e0bffb17 	ldw	r2,-20(fp)
   1412c:	10c00d17 	ldw	r3,52(r2)
   14130:	e0bffb17 	ldw	r2,-20(fp)
   14134:	10800c17 	ldw	r2,48(r2)
   14138:	18bfe51e 	bne	r3,r2,140d0 <_gp+0xffff4b38>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1413c:	e0bffa17 	ldw	r2,-24(fp)
   14140:	103f9d26 	beq	r2,zero,13fb8 <_gp+0xffff4a20>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14144:	e0bffb17 	ldw	r2,-20(fp)
   14148:	10c00817 	ldw	r3,32(r2)
   1414c:	00bfff44 	movi	r2,-3
   14150:	1886703a 	and	r3,r3,r2
   14154:	e0bffb17 	ldw	r2,-20(fp)
   14158:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1415c:	e0bffb17 	ldw	r2,-20(fp)
   14160:	10800017 	ldw	r2,0(r2)
   14164:	10800104 	addi	r2,r2,4
   14168:	1007883a 	mov	r3,r2
   1416c:	e0bffb17 	ldw	r2,-20(fp)
   14170:	10800817 	ldw	r2,32(r2)
   14174:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14178:	e0bffc17 	ldw	r2,-16(fp)
   1417c:	10800104 	addi	r2,r2,4
   14180:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14184:	003f8c06 	br	13fb8 <_gp+0xffff4a20>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14188:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1418c:	0001883a 	nop
   14190:	e037883a 	mov	sp,fp
   14194:	df000017 	ldw	fp,0(sp)
   14198:	dec00104 	addi	sp,sp,4
   1419c:	f800283a 	ret

000141a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   141a0:	defff804 	addi	sp,sp,-32
   141a4:	df000715 	stw	fp,28(sp)
   141a8:	df000704 	addi	fp,sp,28
   141ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   141b0:	e0bffb17 	ldw	r2,-20(fp)
   141b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   141b8:	e0bff917 	ldw	r2,-28(fp)
   141bc:	10800017 	ldw	r2,0(r2)
   141c0:	10800104 	addi	r2,r2,4
   141c4:	10800037 	ldwio	r2,0(r2)
   141c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   141cc:	e0bffa17 	ldw	r2,-24(fp)
   141d0:	1081000c 	andi	r2,r2,1024
   141d4:	10000b26 	beq	r2,zero,14204 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   141d8:	e0bff917 	ldw	r2,-28(fp)
   141dc:	10800017 	ldw	r2,0(r2)
   141e0:	10800104 	addi	r2,r2,4
   141e4:	1007883a 	mov	r3,r2
   141e8:	e0bff917 	ldw	r2,-28(fp)
   141ec:	10800817 	ldw	r2,32(r2)
   141f0:	10810014 	ori	r2,r2,1024
   141f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   141f8:	e0bff917 	ldw	r2,-28(fp)
   141fc:	10000915 	stw	zero,36(r2)
   14200:	00000a06 	br	1422c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14204:	e0bff917 	ldw	r2,-28(fp)
   14208:	10c00917 	ldw	r3,36(r2)
   1420c:	00a00034 	movhi	r2,32768
   14210:	10bfff04 	addi	r2,r2,-4
   14214:	10c00536 	bltu	r2,r3,1422c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14218:	e0bff917 	ldw	r2,-28(fp)
   1421c:	10800917 	ldw	r2,36(r2)
   14220:	10c00044 	addi	r3,r2,1
   14224:	e0bff917 	ldw	r2,-28(fp)
   14228:	10c00915 	stw	r3,36(r2)
   1422c:	d0a6bd17 	ldw	r2,-25868(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14230:	e037883a 	mov	sp,fp
   14234:	df000017 	ldw	fp,0(sp)
   14238:	dec00104 	addi	sp,sp,4
   1423c:	f800283a 	ret

00014240 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14240:	defffd04 	addi	sp,sp,-12
   14244:	df000215 	stw	fp,8(sp)
   14248:	df000204 	addi	fp,sp,8
   1424c:	e13ffe15 	stw	r4,-8(fp)
   14250:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14254:	00000506 	br	1426c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14258:	e0bfff17 	ldw	r2,-4(fp)
   1425c:	1090000c 	andi	r2,r2,16384
   14260:	10000226 	beq	r2,zero,1426c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14264:	00bffd44 	movi	r2,-11
   14268:	00000b06 	br	14298 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1426c:	e0bffe17 	ldw	r2,-8(fp)
   14270:	10c00d17 	ldw	r3,52(r2)
   14274:	e0bffe17 	ldw	r2,-8(fp)
   14278:	10800c17 	ldw	r2,48(r2)
   1427c:	18800526 	beq	r3,r2,14294 <altera_avalon_jtag_uart_close+0x54>
   14280:	e0bffe17 	ldw	r2,-8(fp)
   14284:	10c00917 	ldw	r3,36(r2)
   14288:	e0bffe17 	ldw	r2,-8(fp)
   1428c:	10800117 	ldw	r2,4(r2)
   14290:	18bff136 	bltu	r3,r2,14258 <_gp+0xffff4cc0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14294:	0005883a 	mov	r2,zero
}
   14298:	e037883a 	mov	sp,fp
   1429c:	df000017 	ldw	fp,0(sp)
   142a0:	dec00104 	addi	sp,sp,4
   142a4:	f800283a 	ret

000142a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   142a8:	defffa04 	addi	sp,sp,-24
   142ac:	df000515 	stw	fp,20(sp)
   142b0:	df000504 	addi	fp,sp,20
   142b4:	e13ffd15 	stw	r4,-12(fp)
   142b8:	e17ffe15 	stw	r5,-8(fp)
   142bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   142c0:	00bff9c4 	movi	r2,-25
   142c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   142c8:	e0bffe17 	ldw	r2,-8(fp)
   142cc:	10da8060 	cmpeqi	r3,r2,27137
   142d0:	1800031e 	bne	r3,zero,142e0 <altera_avalon_jtag_uart_ioctl+0x38>
   142d4:	109a80a0 	cmpeqi	r2,r2,27138
   142d8:	1000181e 	bne	r2,zero,1433c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   142dc:	00002906 	br	14384 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   142e0:	e0bffd17 	ldw	r2,-12(fp)
   142e4:	10c00117 	ldw	r3,4(r2)
   142e8:	00a00034 	movhi	r2,32768
   142ec:	10bfffc4 	addi	r2,r2,-1
   142f0:	18802126 	beq	r3,r2,14378 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   142f4:	e0bfff17 	ldw	r2,-4(fp)
   142f8:	10800017 	ldw	r2,0(r2)
   142fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14300:	e0bffc17 	ldw	r2,-16(fp)
   14304:	10800090 	cmplti	r2,r2,2
   14308:	1000061e 	bne	r2,zero,14324 <altera_avalon_jtag_uart_ioctl+0x7c>
   1430c:	e0fffc17 	ldw	r3,-16(fp)
   14310:	00a00034 	movhi	r2,32768
   14314:	10bfffc4 	addi	r2,r2,-1
   14318:	18800226 	beq	r3,r2,14324 <altera_avalon_jtag_uart_ioctl+0x7c>
   1431c:	e0bffc17 	ldw	r2,-16(fp)
   14320:	00000206 	br	1432c <altera_avalon_jtag_uart_ioctl+0x84>
   14324:	00a00034 	movhi	r2,32768
   14328:	10bfff84 	addi	r2,r2,-2
   1432c:	e0fffd17 	ldw	r3,-12(fp)
   14330:	18800115 	stw	r2,4(r3)
      rc = 0;
   14334:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14338:	00000f06 	br	14378 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10c00117 	ldw	r3,4(r2)
   14344:	00a00034 	movhi	r2,32768
   14348:	10bfffc4 	addi	r2,r2,-1
   1434c:	18800c26 	beq	r3,r2,14380 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14350:	e0bffd17 	ldw	r2,-12(fp)
   14354:	10c00917 	ldw	r3,36(r2)
   14358:	e0bffd17 	ldw	r2,-12(fp)
   1435c:	10800117 	ldw	r2,4(r2)
   14360:	1885803a 	cmpltu	r2,r3,r2
   14364:	10c03fcc 	andi	r3,r2,255
   14368:	e0bfff17 	ldw	r2,-4(fp)
   1436c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14370:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14374:	00000206 	br	14380 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14378:	0001883a 	nop
   1437c:	00000106 	br	14384 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14380:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14384:	e0bffb17 	ldw	r2,-20(fp)
}
   14388:	e037883a 	mov	sp,fp
   1438c:	df000017 	ldw	fp,0(sp)
   14390:	dec00104 	addi	sp,sp,4
   14394:	f800283a 	ret

00014398 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14398:	defff304 	addi	sp,sp,-52
   1439c:	dfc00c15 	stw	ra,48(sp)
   143a0:	df000b15 	stw	fp,44(sp)
   143a4:	df000b04 	addi	fp,sp,44
   143a8:	e13ffc15 	stw	r4,-16(fp)
   143ac:	e17ffd15 	stw	r5,-12(fp)
   143b0:	e1bffe15 	stw	r6,-8(fp)
   143b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   143b8:	e0bffd17 	ldw	r2,-12(fp)
   143bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   143c0:	00004706 	br	144e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   143c4:	e0bffc17 	ldw	r2,-16(fp)
   143c8:	10800a17 	ldw	r2,40(r2)
   143cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   143d0:	e0bffc17 	ldw	r2,-16(fp)
   143d4:	10800b17 	ldw	r2,44(r2)
   143d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   143dc:	e0fff717 	ldw	r3,-36(fp)
   143e0:	e0bff817 	ldw	r2,-32(fp)
   143e4:	18800536 	bltu	r3,r2,143fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   143e8:	e0fff717 	ldw	r3,-36(fp)
   143ec:	e0bff817 	ldw	r2,-32(fp)
   143f0:	1885c83a 	sub	r2,r3,r2
   143f4:	e0bff615 	stw	r2,-40(fp)
   143f8:	00000406 	br	1440c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   143fc:	00c20004 	movi	r3,2048
   14400:	e0bff817 	ldw	r2,-32(fp)
   14404:	1885c83a 	sub	r2,r3,r2
   14408:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1440c:	e0bff617 	ldw	r2,-40(fp)
   14410:	10001e26 	beq	r2,zero,1448c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14414:	e0fffe17 	ldw	r3,-8(fp)
   14418:	e0bff617 	ldw	r2,-40(fp)
   1441c:	1880022e 	bgeu	r3,r2,14428 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14420:	e0bffe17 	ldw	r2,-8(fp)
   14424:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14428:	e0bffc17 	ldw	r2,-16(fp)
   1442c:	10c00e04 	addi	r3,r2,56
   14430:	e0bff817 	ldw	r2,-32(fp)
   14434:	1885883a 	add	r2,r3,r2
   14438:	e1bff617 	ldw	r6,-40(fp)
   1443c:	100b883a 	mov	r5,r2
   14440:	e13ff517 	ldw	r4,-44(fp)
   14444:	0011b880 	call	11b88 <memcpy>
      ptr   += n;
   14448:	e0fff517 	ldw	r3,-44(fp)
   1444c:	e0bff617 	ldw	r2,-40(fp)
   14450:	1885883a 	add	r2,r3,r2
   14454:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14458:	e0fffe17 	ldw	r3,-8(fp)
   1445c:	e0bff617 	ldw	r2,-40(fp)
   14460:	1885c83a 	sub	r2,r3,r2
   14464:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14468:	e0fff817 	ldw	r3,-32(fp)
   1446c:	e0bff617 	ldw	r2,-40(fp)
   14470:	1885883a 	add	r2,r3,r2
   14474:	10c1ffcc 	andi	r3,r2,2047
   14478:	e0bffc17 	ldw	r2,-16(fp)
   1447c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14480:	e0bffe17 	ldw	r2,-8(fp)
   14484:	00bfcf16 	blt	zero,r2,143c4 <_gp+0xffff4e2c>
   14488:	00000106 	br	14490 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1448c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14490:	e0fff517 	ldw	r3,-44(fp)
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	1880141e 	bne	r3,r2,144ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1449c:	e0bfff17 	ldw	r2,-4(fp)
   144a0:	1090000c 	andi	r2,r2,16384
   144a4:	1000131e 	bne	r2,zero,144f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   144a8:	0001883a 	nop
   144ac:	e0bffc17 	ldw	r2,-16(fp)
   144b0:	10c00a17 	ldw	r3,40(r2)
   144b4:	e0bff717 	ldw	r2,-36(fp)
   144b8:	1880051e 	bne	r3,r2,144d0 <altera_avalon_jtag_uart_read+0x138>
   144bc:	e0bffc17 	ldw	r2,-16(fp)
   144c0:	10c00917 	ldw	r3,36(r2)
   144c4:	e0bffc17 	ldw	r2,-16(fp)
   144c8:	10800117 	ldw	r2,4(r2)
   144cc:	18bff736 	bltu	r3,r2,144ac <_gp+0xffff4f14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   144d0:	e0bffc17 	ldw	r2,-16(fp)
   144d4:	10c00a17 	ldw	r3,40(r2)
   144d8:	e0bff717 	ldw	r2,-36(fp)
   144dc:	18800726 	beq	r3,r2,144fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   144e0:	e0bffe17 	ldw	r2,-8(fp)
   144e4:	00bfb716 	blt	zero,r2,143c4 <_gp+0xffff4e2c>
   144e8:	00000506 	br	14500 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   144ec:	0001883a 	nop
   144f0:	00000306 	br	14500 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   144f4:	0001883a 	nop
   144f8:	00000106 	br	14500 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   144fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14500:	e0fff517 	ldw	r3,-44(fp)
   14504:	e0bffd17 	ldw	r2,-12(fp)
   14508:	18801826 	beq	r3,r2,1456c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1450c:	0005303a 	rdctl	r2,status
   14510:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14514:	e0fffb17 	ldw	r3,-20(fp)
   14518:	00bfff84 	movi	r2,-2
   1451c:	1884703a 	and	r2,r3,r2
   14520:	1001703a 	wrctl	status,r2
  
  return context;
   14524:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14528:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1452c:	e0bffc17 	ldw	r2,-16(fp)
   14530:	10800817 	ldw	r2,32(r2)
   14534:	10c00054 	ori	r3,r2,1
   14538:	e0bffc17 	ldw	r2,-16(fp)
   1453c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14540:	e0bffc17 	ldw	r2,-16(fp)
   14544:	10800017 	ldw	r2,0(r2)
   14548:	10800104 	addi	r2,r2,4
   1454c:	1007883a 	mov	r3,r2
   14550:	e0bffc17 	ldw	r2,-16(fp)
   14554:	10800817 	ldw	r2,32(r2)
   14558:	18800035 	stwio	r2,0(r3)
   1455c:	e0bffa17 	ldw	r2,-24(fp)
   14560:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14564:	e0bff917 	ldw	r2,-28(fp)
   14568:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1456c:	e0fff517 	ldw	r3,-44(fp)
   14570:	e0bffd17 	ldw	r2,-12(fp)
   14574:	18800426 	beq	r3,r2,14588 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14578:	e0fff517 	ldw	r3,-44(fp)
   1457c:	e0bffd17 	ldw	r2,-12(fp)
   14580:	1885c83a 	sub	r2,r3,r2
   14584:	00000606 	br	145a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14588:	e0bfff17 	ldw	r2,-4(fp)
   1458c:	1090000c 	andi	r2,r2,16384
   14590:	10000226 	beq	r2,zero,1459c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14594:	00bffd44 	movi	r2,-11
   14598:	00000106 	br	145a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1459c:	00bffec4 	movi	r2,-5
}
   145a0:	e037883a 	mov	sp,fp
   145a4:	dfc00117 	ldw	ra,4(sp)
   145a8:	df000017 	ldw	fp,0(sp)
   145ac:	dec00204 	addi	sp,sp,8
   145b0:	f800283a 	ret

000145b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   145b4:	defff304 	addi	sp,sp,-52
   145b8:	dfc00c15 	stw	ra,48(sp)
   145bc:	df000b15 	stw	fp,44(sp)
   145c0:	df000b04 	addi	fp,sp,44
   145c4:	e13ffc15 	stw	r4,-16(fp)
   145c8:	e17ffd15 	stw	r5,-12(fp)
   145cc:	e1bffe15 	stw	r6,-8(fp)
   145d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   145d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   145d8:	e0bffd17 	ldw	r2,-12(fp)
   145dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   145e0:	00003706 	br	146c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   145e4:	e0bffc17 	ldw	r2,-16(fp)
   145e8:	10800c17 	ldw	r2,48(r2)
   145ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   145f0:	e0bffc17 	ldw	r2,-16(fp)
   145f4:	10800d17 	ldw	r2,52(r2)
   145f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   145fc:	e0fff917 	ldw	r3,-28(fp)
   14600:	e0bff517 	ldw	r2,-44(fp)
   14604:	1880062e 	bgeu	r3,r2,14620 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14608:	e0fff517 	ldw	r3,-44(fp)
   1460c:	e0bff917 	ldw	r2,-28(fp)
   14610:	1885c83a 	sub	r2,r3,r2
   14614:	10bfffc4 	addi	r2,r2,-1
   14618:	e0bff615 	stw	r2,-40(fp)
   1461c:	00000b06 	br	1464c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14620:	e0bff517 	ldw	r2,-44(fp)
   14624:	10000526 	beq	r2,zero,1463c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14628:	00c20004 	movi	r3,2048
   1462c:	e0bff917 	ldw	r2,-28(fp)
   14630:	1885c83a 	sub	r2,r3,r2
   14634:	e0bff615 	stw	r2,-40(fp)
   14638:	00000406 	br	1464c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1463c:	00c1ffc4 	movi	r3,2047
   14640:	e0bff917 	ldw	r2,-28(fp)
   14644:	1885c83a 	sub	r2,r3,r2
   14648:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1464c:	e0bff617 	ldw	r2,-40(fp)
   14650:	10001e26 	beq	r2,zero,146cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14654:	e0fffe17 	ldw	r3,-8(fp)
   14658:	e0bff617 	ldw	r2,-40(fp)
   1465c:	1880022e 	bgeu	r3,r2,14668 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14660:	e0bffe17 	ldw	r2,-8(fp)
   14664:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14668:	e0bffc17 	ldw	r2,-16(fp)
   1466c:	10c20e04 	addi	r3,r2,2104
   14670:	e0bff917 	ldw	r2,-28(fp)
   14674:	1885883a 	add	r2,r3,r2
   14678:	e1bff617 	ldw	r6,-40(fp)
   1467c:	e17ffd17 	ldw	r5,-12(fp)
   14680:	1009883a 	mov	r4,r2
   14684:	0011b880 	call	11b88 <memcpy>
      ptr   += n;
   14688:	e0fffd17 	ldw	r3,-12(fp)
   1468c:	e0bff617 	ldw	r2,-40(fp)
   14690:	1885883a 	add	r2,r3,r2
   14694:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14698:	e0fffe17 	ldw	r3,-8(fp)
   1469c:	e0bff617 	ldw	r2,-40(fp)
   146a0:	1885c83a 	sub	r2,r3,r2
   146a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   146a8:	e0fff917 	ldw	r3,-28(fp)
   146ac:	e0bff617 	ldw	r2,-40(fp)
   146b0:	1885883a 	add	r2,r3,r2
   146b4:	10c1ffcc 	andi	r3,r2,2047
   146b8:	e0bffc17 	ldw	r2,-16(fp)
   146bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   146c0:	e0bffe17 	ldw	r2,-8(fp)
   146c4:	00bfc716 	blt	zero,r2,145e4 <_gp+0xffff504c>
   146c8:	00000106 	br	146d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   146cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146d0:	0005303a 	rdctl	r2,status
   146d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146d8:	e0fffb17 	ldw	r3,-20(fp)
   146dc:	00bfff84 	movi	r2,-2
   146e0:	1884703a 	and	r2,r3,r2
   146e4:	1001703a 	wrctl	status,r2
  
  return context;
   146e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   146ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   146f0:	e0bffc17 	ldw	r2,-16(fp)
   146f4:	10800817 	ldw	r2,32(r2)
   146f8:	10c00094 	ori	r3,r2,2
   146fc:	e0bffc17 	ldw	r2,-16(fp)
   14700:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14704:	e0bffc17 	ldw	r2,-16(fp)
   14708:	10800017 	ldw	r2,0(r2)
   1470c:	10800104 	addi	r2,r2,4
   14710:	1007883a 	mov	r3,r2
   14714:	e0bffc17 	ldw	r2,-16(fp)
   14718:	10800817 	ldw	r2,32(r2)
   1471c:	18800035 	stwio	r2,0(r3)
   14720:	e0bffa17 	ldw	r2,-24(fp)
   14724:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14728:	e0bff817 	ldw	r2,-32(fp)
   1472c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14730:	e0bffe17 	ldw	r2,-8(fp)
   14734:	0080100e 	bge	zero,r2,14778 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14738:	e0bfff17 	ldw	r2,-4(fp)
   1473c:	1090000c 	andi	r2,r2,16384
   14740:	1000101e 	bne	r2,zero,14784 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14744:	0001883a 	nop
   14748:	e0bffc17 	ldw	r2,-16(fp)
   1474c:	10c00d17 	ldw	r3,52(r2)
   14750:	e0bff517 	ldw	r2,-44(fp)
   14754:	1880051e 	bne	r3,r2,1476c <altera_avalon_jtag_uart_write+0x1b8>
   14758:	e0bffc17 	ldw	r2,-16(fp)
   1475c:	10c00917 	ldw	r3,36(r2)
   14760:	e0bffc17 	ldw	r2,-16(fp)
   14764:	10800117 	ldw	r2,4(r2)
   14768:	18bff736 	bltu	r3,r2,14748 <_gp+0xffff51b0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1476c:	e0bffc17 	ldw	r2,-16(fp)
   14770:	10800917 	ldw	r2,36(r2)
   14774:	1000051e 	bne	r2,zero,1478c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14778:	e0bffe17 	ldw	r2,-8(fp)
   1477c:	00bfd016 	blt	zero,r2,146c0 <_gp+0xffff5128>
   14780:	00000306 	br	14790 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14784:	0001883a 	nop
   14788:	00000106 	br	14790 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1478c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14790:	e0fffd17 	ldw	r3,-12(fp)
   14794:	e0bff717 	ldw	r2,-36(fp)
   14798:	18800426 	beq	r3,r2,147ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1479c:	e0fffd17 	ldw	r3,-12(fp)
   147a0:	e0bff717 	ldw	r2,-36(fp)
   147a4:	1885c83a 	sub	r2,r3,r2
   147a8:	00000606 	br	147c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   147ac:	e0bfff17 	ldw	r2,-4(fp)
   147b0:	1090000c 	andi	r2,r2,16384
   147b4:	10000226 	beq	r2,zero,147c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   147b8:	00bffd44 	movi	r2,-11
   147bc:	00000106 	br	147c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   147c0:	00bffec4 	movi	r2,-5
}
   147c4:	e037883a 	mov	sp,fp
   147c8:	dfc00117 	ldw	ra,4(sp)
   147cc:	df000017 	ldw	fp,0(sp)
   147d0:	dec00204 	addi	sp,sp,8
   147d4:	f800283a 	ret

000147d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   147d8:	defffa04 	addi	sp,sp,-24
   147dc:	dfc00515 	stw	ra,20(sp)
   147e0:	df000415 	stw	fp,16(sp)
   147e4:	df000404 	addi	fp,sp,16
   147e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   147ec:	0007883a 	mov	r3,zero
   147f0:	e0bfff17 	ldw	r2,-4(fp)
   147f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   147f8:	e0bfff17 	ldw	r2,-4(fp)
   147fc:	10800104 	addi	r2,r2,4
   14800:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14804:	0005303a 	rdctl	r2,status
   14808:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1480c:	e0fffd17 	ldw	r3,-12(fp)
   14810:	00bfff84 	movi	r2,-2
   14814:	1884703a 	and	r2,r3,r2
   14818:	1001703a 	wrctl	status,r2
  
  return context;
   1481c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14820:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14824:	00152bc0 	call	152bc <alt_tick>
   14828:	e0bffc17 	ldw	r2,-16(fp)
   1482c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14830:	e0bffe17 	ldw	r2,-8(fp)
   14834:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14838:	0001883a 	nop
   1483c:	e037883a 	mov	sp,fp
   14840:	dfc00117 	ldw	ra,4(sp)
   14844:	df000017 	ldw	fp,0(sp)
   14848:	dec00204 	addi	sp,sp,8
   1484c:	f800283a 	ret

00014850 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14850:	defff804 	addi	sp,sp,-32
   14854:	dfc00715 	stw	ra,28(sp)
   14858:	df000615 	stw	fp,24(sp)
   1485c:	df000604 	addi	fp,sp,24
   14860:	e13ffc15 	stw	r4,-16(fp)
   14864:	e17ffd15 	stw	r5,-12(fp)
   14868:	e1bffe15 	stw	r6,-8(fp)
   1486c:	e1ffff15 	stw	r7,-4(fp)
   14870:	e0bfff17 	ldw	r2,-4(fp)
   14874:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14878:	d0a6bd17 	ldw	r2,-25868(gp)
   1487c:	1000021e 	bne	r2,zero,14888 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   14880:	e0bffb17 	ldw	r2,-20(fp)
   14884:	d0a6bd15 	stw	r2,-25868(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14888:	e0bffc17 	ldw	r2,-16(fp)
   1488c:	10800104 	addi	r2,r2,4
   14890:	00c001c4 	movi	r3,7
   14894:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14898:	d8000015 	stw	zero,0(sp)
   1489c:	e1fffc17 	ldw	r7,-16(fp)
   148a0:	01800074 	movhi	r6,1
   148a4:	3191f604 	addi	r6,r6,18392
   148a8:	e17ffe17 	ldw	r5,-8(fp)
   148ac:	e13ffd17 	ldw	r4,-12(fp)
   148b0:	0014bec0 	call	14bec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   148b4:	0001883a 	nop
   148b8:	e037883a 	mov	sp,fp
   148bc:	dfc00117 	ldw	ra,4(sp)
   148c0:	df000017 	ldw	fp,0(sp)
   148c4:	dec00204 	addi	sp,sp,8
   148c8:	f800283a 	ret

000148cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   148cc:	defff504 	addi	sp,sp,-44
   148d0:	df000a15 	stw	fp,40(sp)
   148d4:	df000a04 	addi	fp,sp,40
   148d8:	e13ffc15 	stw	r4,-16(fp)
   148dc:	e17ffd15 	stw	r5,-12(fp)
   148e0:	e1bffe15 	stw	r6,-8(fp)
   148e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   148e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   148ec:	d0a6bd17 	ldw	r2,-25868(gp)
  
  if (alt_ticks_per_second ())
   148f0:	10003c26 	beq	r2,zero,149e4 <alt_alarm_start+0x118>
  {
    if (alarm)
   148f4:	e0bffc17 	ldw	r2,-16(fp)
   148f8:	10003826 	beq	r2,zero,149dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   148fc:	e0bffc17 	ldw	r2,-16(fp)
   14900:	e0fffe17 	ldw	r3,-8(fp)
   14904:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14908:	e0bffc17 	ldw	r2,-16(fp)
   1490c:	e0ffff17 	ldw	r3,-4(fp)
   14910:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14914:	0005303a 	rdctl	r2,status
   14918:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1491c:	e0fff917 	ldw	r3,-28(fp)
   14920:	00bfff84 	movi	r2,-2
   14924:	1884703a 	and	r2,r3,r2
   14928:	1001703a 	wrctl	status,r2
  
  return context;
   1492c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14930:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14934:	d0a6be17 	ldw	r2,-25864(gp)
      
      current_nticks = alt_nticks();
   14938:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1493c:	e0fffd17 	ldw	r3,-12(fp)
   14940:	e0bff617 	ldw	r2,-40(fp)
   14944:	1885883a 	add	r2,r3,r2
   14948:	10c00044 	addi	r3,r2,1
   1494c:	e0bffc17 	ldw	r2,-16(fp)
   14950:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14954:	e0bffc17 	ldw	r2,-16(fp)
   14958:	10c00217 	ldw	r3,8(r2)
   1495c:	e0bff617 	ldw	r2,-40(fp)
   14960:	1880042e 	bgeu	r3,r2,14974 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14964:	e0bffc17 	ldw	r2,-16(fp)
   14968:	00c00044 	movi	r3,1
   1496c:	10c00405 	stb	r3,16(r2)
   14970:	00000206 	br	1497c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14974:	e0bffc17 	ldw	r2,-16(fp)
   14978:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1497c:	e0bffc17 	ldw	r2,-16(fp)
   14980:	d0e00c04 	addi	r3,gp,-32720
   14984:	e0fffa15 	stw	r3,-24(fp)
   14988:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1498c:	e0bffb17 	ldw	r2,-20(fp)
   14990:	e0fffa17 	ldw	r3,-24(fp)
   14994:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14998:	e0bffa17 	ldw	r2,-24(fp)
   1499c:	10c00017 	ldw	r3,0(r2)
   149a0:	e0bffb17 	ldw	r2,-20(fp)
   149a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   149a8:	e0bffa17 	ldw	r2,-24(fp)
   149ac:	10800017 	ldw	r2,0(r2)
   149b0:	e0fffb17 	ldw	r3,-20(fp)
   149b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   149b8:	e0bffa17 	ldw	r2,-24(fp)
   149bc:	e0fffb17 	ldw	r3,-20(fp)
   149c0:	10c00015 	stw	r3,0(r2)
   149c4:	e0bff817 	ldw	r2,-32(fp)
   149c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149cc:	e0bff717 	ldw	r2,-36(fp)
   149d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   149d4:	0005883a 	mov	r2,zero
   149d8:	00000306 	br	149e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   149dc:	00bffa84 	movi	r2,-22
   149e0:	00000106 	br	149e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   149e4:	00bfde84 	movi	r2,-134
  }
}
   149e8:	e037883a 	mov	sp,fp
   149ec:	df000017 	ldw	fp,0(sp)
   149f0:	dec00104 	addi	sp,sp,4
   149f4:	f800283a 	ret

000149f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   149f8:	deffff04 	addi	sp,sp,-4
   149fc:	df000015 	stw	fp,0(sp)
   14a00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14a04:	0001883a 	nop
   14a08:	e037883a 	mov	sp,fp
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00104 	addi	sp,sp,4
   14a14:	f800283a 	ret

00014a18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14a18:	defffe04 	addi	sp,sp,-8
   14a1c:	dfc00115 	stw	ra,4(sp)
   14a20:	df000015 	stw	fp,0(sp)
   14a24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14a28:	d0a00917 	ldw	r2,-32732(gp)
   14a2c:	10000326 	beq	r2,zero,14a3c <alt_get_errno+0x24>
   14a30:	d0a00917 	ldw	r2,-32732(gp)
   14a34:	103ee83a 	callr	r2
   14a38:	00000106 	br	14a40 <alt_get_errno+0x28>
   14a3c:	d0a6b804 	addi	r2,gp,-25888
}
   14a40:	e037883a 	mov	sp,fp
   14a44:	dfc00117 	ldw	ra,4(sp)
   14a48:	df000017 	ldw	fp,0(sp)
   14a4c:	dec00204 	addi	sp,sp,8
   14a50:	f800283a 	ret

00014a54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14a54:	defffa04 	addi	sp,sp,-24
   14a58:	dfc00515 	stw	ra,20(sp)
   14a5c:	df000415 	stw	fp,16(sp)
   14a60:	df000404 	addi	fp,sp,16
   14a64:	e13ffe15 	stw	r4,-8(fp)
   14a68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14a6c:	e0bffe17 	ldw	r2,-8(fp)
   14a70:	10000326 	beq	r2,zero,14a80 <alt_dev_llist_insert+0x2c>
   14a74:	e0bffe17 	ldw	r2,-8(fp)
   14a78:	10800217 	ldw	r2,8(r2)
   14a7c:	1000061e 	bne	r2,zero,14a98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14a80:	0014a180 	call	14a18 <alt_get_errno>
   14a84:	1007883a 	mov	r3,r2
   14a88:	00800584 	movi	r2,22
   14a8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14a90:	00bffa84 	movi	r2,-22
   14a94:	00001306 	br	14ae4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14a98:	e0bffe17 	ldw	r2,-8(fp)
   14a9c:	e0ffff17 	ldw	r3,-4(fp)
   14aa0:	e0fffc15 	stw	r3,-16(fp)
   14aa4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14aa8:	e0bffd17 	ldw	r2,-12(fp)
   14aac:	e0fffc17 	ldw	r3,-16(fp)
   14ab0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	10c00017 	ldw	r3,0(r2)
   14abc:	e0bffd17 	ldw	r2,-12(fp)
   14ac0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14ac4:	e0bffc17 	ldw	r2,-16(fp)
   14ac8:	10800017 	ldw	r2,0(r2)
   14acc:	e0fffd17 	ldw	r3,-12(fp)
   14ad0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14ad4:	e0bffc17 	ldw	r2,-16(fp)
   14ad8:	e0fffd17 	ldw	r3,-12(fp)
   14adc:	10c00015 	stw	r3,0(r2)

  return 0;  
   14ae0:	0005883a 	mov	r2,zero
}
   14ae4:	e037883a 	mov	sp,fp
   14ae8:	dfc00117 	ldw	ra,4(sp)
   14aec:	df000017 	ldw	fp,0(sp)
   14af0:	dec00204 	addi	sp,sp,8
   14af4:	f800283a 	ret

00014af8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14af8:	defffd04 	addi	sp,sp,-12
   14afc:	dfc00215 	stw	ra,8(sp)
   14b00:	df000115 	stw	fp,4(sp)
   14b04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14b08:	00800074 	movhi	r2,1
   14b0c:	1096b804 	addi	r2,r2,23264
   14b10:	e0bfff15 	stw	r2,-4(fp)
   14b14:	00000606 	br	14b30 <_do_ctors+0x38>
        (*ctor) (); 
   14b18:	e0bfff17 	ldw	r2,-4(fp)
   14b1c:	10800017 	ldw	r2,0(r2)
   14b20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14b24:	e0bfff17 	ldw	r2,-4(fp)
   14b28:	10bfff04 	addi	r2,r2,-4
   14b2c:	e0bfff15 	stw	r2,-4(fp)
   14b30:	e0ffff17 	ldw	r3,-4(fp)
   14b34:	00800074 	movhi	r2,1
   14b38:	1096b904 	addi	r2,r2,23268
   14b3c:	18bff62e 	bgeu	r3,r2,14b18 <_gp+0xffff5580>
        (*ctor) (); 
}
   14b40:	0001883a 	nop
   14b44:	e037883a 	mov	sp,fp
   14b48:	dfc00117 	ldw	ra,4(sp)
   14b4c:	df000017 	ldw	fp,0(sp)
   14b50:	dec00204 	addi	sp,sp,8
   14b54:	f800283a 	ret

00014b58 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14b58:	defffd04 	addi	sp,sp,-12
   14b5c:	dfc00215 	stw	ra,8(sp)
   14b60:	df000115 	stw	fp,4(sp)
   14b64:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14b68:	00800074 	movhi	r2,1
   14b6c:	1096b804 	addi	r2,r2,23264
   14b70:	e0bfff15 	stw	r2,-4(fp)
   14b74:	00000606 	br	14b90 <_do_dtors+0x38>
        (*dtor) (); 
   14b78:	e0bfff17 	ldw	r2,-4(fp)
   14b7c:	10800017 	ldw	r2,0(r2)
   14b80:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14b84:	e0bfff17 	ldw	r2,-4(fp)
   14b88:	10bfff04 	addi	r2,r2,-4
   14b8c:	e0bfff15 	stw	r2,-4(fp)
   14b90:	e0ffff17 	ldw	r3,-4(fp)
   14b94:	00800074 	movhi	r2,1
   14b98:	1096b904 	addi	r2,r2,23268
   14b9c:	18bff62e 	bgeu	r3,r2,14b78 <_gp+0xffff55e0>
        (*dtor) (); 
}
   14ba0:	0001883a 	nop
   14ba4:	e037883a 	mov	sp,fp
   14ba8:	dfc00117 	ldw	ra,4(sp)
   14bac:	df000017 	ldw	fp,0(sp)
   14bb0:	dec00204 	addi	sp,sp,8
   14bb4:	f800283a 	ret

00014bb8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14bb8:	defffe04 	addi	sp,sp,-8
   14bbc:	dfc00115 	stw	ra,4(sp)
   14bc0:	df000015 	stw	fp,0(sp)
   14bc4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   14bc8:	01420004 	movi	r5,2048
   14bcc:	0009883a 	mov	r4,zero
   14bd0:	00156240 	call	15624 <alt_icache_flush>
#endif
}
   14bd4:	0001883a 	nop
   14bd8:	e037883a 	mov	sp,fp
   14bdc:	dfc00117 	ldw	ra,4(sp)
   14be0:	df000017 	ldw	fp,0(sp)
   14be4:	dec00204 	addi	sp,sp,8
   14be8:	f800283a 	ret

00014bec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14bec:	defff904 	addi	sp,sp,-28
   14bf0:	dfc00615 	stw	ra,24(sp)
   14bf4:	df000515 	stw	fp,20(sp)
   14bf8:	df000504 	addi	fp,sp,20
   14bfc:	e13ffc15 	stw	r4,-16(fp)
   14c00:	e17ffd15 	stw	r5,-12(fp)
   14c04:	e1bffe15 	stw	r6,-8(fp)
   14c08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14c0c:	e0800217 	ldw	r2,8(fp)
   14c10:	d8800015 	stw	r2,0(sp)
   14c14:	e1ffff17 	ldw	r7,-4(fp)
   14c18:	e1bffe17 	ldw	r6,-8(fp)
   14c1c:	e17ffd17 	ldw	r5,-12(fp)
   14c20:	e13ffc17 	ldw	r4,-16(fp)
   14c24:	0014d9c0 	call	14d9c <alt_iic_isr_register>
}  
   14c28:	e037883a 	mov	sp,fp
   14c2c:	dfc00117 	ldw	ra,4(sp)
   14c30:	df000017 	ldw	fp,0(sp)
   14c34:	dec00204 	addi	sp,sp,8
   14c38:	f800283a 	ret

00014c3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14c3c:	defff904 	addi	sp,sp,-28
   14c40:	df000615 	stw	fp,24(sp)
   14c44:	df000604 	addi	fp,sp,24
   14c48:	e13ffe15 	stw	r4,-8(fp)
   14c4c:	e17fff15 	stw	r5,-4(fp)
   14c50:	e0bfff17 	ldw	r2,-4(fp)
   14c54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c58:	0005303a 	rdctl	r2,status
   14c5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c60:	e0fffb17 	ldw	r3,-20(fp)
   14c64:	00bfff84 	movi	r2,-2
   14c68:	1884703a 	and	r2,r3,r2
   14c6c:	1001703a 	wrctl	status,r2
  
  return context;
   14c70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14c74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14c78:	00c00044 	movi	r3,1
   14c7c:	e0bffa17 	ldw	r2,-24(fp)
   14c80:	1884983a 	sll	r2,r3,r2
   14c84:	1007883a 	mov	r3,r2
   14c88:	d0a6bc17 	ldw	r2,-25872(gp)
   14c8c:	1884b03a 	or	r2,r3,r2
   14c90:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14c94:	d0a6bc17 	ldw	r2,-25872(gp)
   14c98:	100170fa 	wrctl	ienable,r2
   14c9c:	e0bffc17 	ldw	r2,-16(fp)
   14ca0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ca4:	e0bffd17 	ldw	r2,-12(fp)
   14ca8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14cac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14cb0:	0001883a 	nop
}
   14cb4:	e037883a 	mov	sp,fp
   14cb8:	df000017 	ldw	fp,0(sp)
   14cbc:	dec00104 	addi	sp,sp,4
   14cc0:	f800283a 	ret

00014cc4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14cc4:	defff904 	addi	sp,sp,-28
   14cc8:	df000615 	stw	fp,24(sp)
   14ccc:	df000604 	addi	fp,sp,24
   14cd0:	e13ffe15 	stw	r4,-8(fp)
   14cd4:	e17fff15 	stw	r5,-4(fp)
   14cd8:	e0bfff17 	ldw	r2,-4(fp)
   14cdc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ce0:	0005303a 	rdctl	r2,status
   14ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ce8:	e0fffb17 	ldw	r3,-20(fp)
   14cec:	00bfff84 	movi	r2,-2
   14cf0:	1884703a 	and	r2,r3,r2
   14cf4:	1001703a 	wrctl	status,r2
  
  return context;
   14cf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14cfc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14d00:	00c00044 	movi	r3,1
   14d04:	e0bffa17 	ldw	r2,-24(fp)
   14d08:	1884983a 	sll	r2,r3,r2
   14d0c:	0084303a 	nor	r2,zero,r2
   14d10:	1007883a 	mov	r3,r2
   14d14:	d0a6bc17 	ldw	r2,-25872(gp)
   14d18:	1884703a 	and	r2,r3,r2
   14d1c:	d0a6bc15 	stw	r2,-25872(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14d20:	d0a6bc17 	ldw	r2,-25872(gp)
   14d24:	100170fa 	wrctl	ienable,r2
   14d28:	e0bffc17 	ldw	r2,-16(fp)
   14d2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d30:	e0bffd17 	ldw	r2,-12(fp)
   14d34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14d38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14d3c:	0001883a 	nop
}
   14d40:	e037883a 	mov	sp,fp
   14d44:	df000017 	ldw	fp,0(sp)
   14d48:	dec00104 	addi	sp,sp,4
   14d4c:	f800283a 	ret

00014d50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14d50:	defffc04 	addi	sp,sp,-16
   14d54:	df000315 	stw	fp,12(sp)
   14d58:	df000304 	addi	fp,sp,12
   14d5c:	e13ffe15 	stw	r4,-8(fp)
   14d60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14d64:	000530fa 	rdctl	r2,ienable
   14d68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14d6c:	00c00044 	movi	r3,1
   14d70:	e0bfff17 	ldw	r2,-4(fp)
   14d74:	1884983a 	sll	r2,r3,r2
   14d78:	1007883a 	mov	r3,r2
   14d7c:	e0bffd17 	ldw	r2,-12(fp)
   14d80:	1884703a 	and	r2,r3,r2
   14d84:	1004c03a 	cmpne	r2,r2,zero
   14d88:	10803fcc 	andi	r2,r2,255
}
   14d8c:	e037883a 	mov	sp,fp
   14d90:	df000017 	ldw	fp,0(sp)
   14d94:	dec00104 	addi	sp,sp,4
   14d98:	f800283a 	ret

00014d9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14d9c:	defff504 	addi	sp,sp,-44
   14da0:	dfc00a15 	stw	ra,40(sp)
   14da4:	df000915 	stw	fp,36(sp)
   14da8:	df000904 	addi	fp,sp,36
   14dac:	e13ffc15 	stw	r4,-16(fp)
   14db0:	e17ffd15 	stw	r5,-12(fp)
   14db4:	e1bffe15 	stw	r6,-8(fp)
   14db8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14dbc:	00bffa84 	movi	r2,-22
   14dc0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14dc4:	e0bffd17 	ldw	r2,-12(fp)
   14dc8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14dcc:	e0bff817 	ldw	r2,-32(fp)
   14dd0:	10800808 	cmpgei	r2,r2,32
   14dd4:	1000271e 	bne	r2,zero,14e74 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dd8:	0005303a 	rdctl	r2,status
   14ddc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14de0:	e0fffb17 	ldw	r3,-20(fp)
   14de4:	00bfff84 	movi	r2,-2
   14de8:	1884703a 	and	r2,r3,r2
   14dec:	1001703a 	wrctl	status,r2
  
  return context;
   14df0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14df4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14df8:	008000b4 	movhi	r2,2
   14dfc:	10a43004 	addi	r2,r2,-28480
   14e00:	e0fff817 	ldw	r3,-32(fp)
   14e04:	180690fa 	slli	r3,r3,3
   14e08:	10c5883a 	add	r2,r2,r3
   14e0c:	e0fffe17 	ldw	r3,-8(fp)
   14e10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14e14:	008000b4 	movhi	r2,2
   14e18:	10a43004 	addi	r2,r2,-28480
   14e1c:	e0fff817 	ldw	r3,-32(fp)
   14e20:	180690fa 	slli	r3,r3,3
   14e24:	10c5883a 	add	r2,r2,r3
   14e28:	10800104 	addi	r2,r2,4
   14e2c:	e0ffff17 	ldw	r3,-4(fp)
   14e30:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14e34:	e0bffe17 	ldw	r2,-8(fp)
   14e38:	10000526 	beq	r2,zero,14e50 <alt_iic_isr_register+0xb4>
   14e3c:	e0bff817 	ldw	r2,-32(fp)
   14e40:	100b883a 	mov	r5,r2
   14e44:	e13ffc17 	ldw	r4,-16(fp)
   14e48:	0014c3c0 	call	14c3c <alt_ic_irq_enable>
   14e4c:	00000406 	br	14e60 <alt_iic_isr_register+0xc4>
   14e50:	e0bff817 	ldw	r2,-32(fp)
   14e54:	100b883a 	mov	r5,r2
   14e58:	e13ffc17 	ldw	r4,-16(fp)
   14e5c:	0014cc40 	call	14cc4 <alt_ic_irq_disable>
   14e60:	e0bff715 	stw	r2,-36(fp)
   14e64:	e0bffa17 	ldw	r2,-24(fp)
   14e68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e6c:	e0bff917 	ldw	r2,-28(fp)
   14e70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14e74:	e0bff717 	ldw	r2,-36(fp)
}
   14e78:	e037883a 	mov	sp,fp
   14e7c:	dfc00117 	ldw	ra,4(sp)
   14e80:	df000017 	ldw	fp,0(sp)
   14e84:	dec00204 	addi	sp,sp,8
   14e88:	f800283a 	ret

00014e8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14e8c:	defff904 	addi	sp,sp,-28
   14e90:	dfc00615 	stw	ra,24(sp)
   14e94:	df000515 	stw	fp,20(sp)
   14e98:	df000504 	addi	fp,sp,20
   14e9c:	e13ffc15 	stw	r4,-16(fp)
   14ea0:	e17ffd15 	stw	r5,-12(fp)
   14ea4:	e1bffe15 	stw	r6,-8(fp)
   14ea8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   14eac:	e1bfff17 	ldw	r6,-4(fp)
   14eb0:	e17ffe17 	ldw	r5,-8(fp)
   14eb4:	e13ffd17 	ldw	r4,-12(fp)
   14eb8:	00150cc0 	call	150cc <open>
   14ebc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   14ec0:	e0bffb17 	ldw	r2,-20(fp)
   14ec4:	10001c16 	blt	r2,zero,14f38 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   14ec8:	00800074 	movhi	r2,1
   14ecc:	1098ee04 	addi	r2,r2,25528
   14ed0:	e0fffb17 	ldw	r3,-20(fp)
   14ed4:	18c00324 	muli	r3,r3,12
   14ed8:	10c5883a 	add	r2,r2,r3
   14edc:	10c00017 	ldw	r3,0(r2)
   14ee0:	e0bffc17 	ldw	r2,-16(fp)
   14ee4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14ee8:	00800074 	movhi	r2,1
   14eec:	1098ee04 	addi	r2,r2,25528
   14ef0:	e0fffb17 	ldw	r3,-20(fp)
   14ef4:	18c00324 	muli	r3,r3,12
   14ef8:	10c5883a 	add	r2,r2,r3
   14efc:	10800104 	addi	r2,r2,4
   14f00:	10c00017 	ldw	r3,0(r2)
   14f04:	e0bffc17 	ldw	r2,-16(fp)
   14f08:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14f0c:	00800074 	movhi	r2,1
   14f10:	1098ee04 	addi	r2,r2,25528
   14f14:	e0fffb17 	ldw	r3,-20(fp)
   14f18:	18c00324 	muli	r3,r3,12
   14f1c:	10c5883a 	add	r2,r2,r3
   14f20:	10800204 	addi	r2,r2,8
   14f24:	10c00017 	ldw	r3,0(r2)
   14f28:	e0bffc17 	ldw	r2,-16(fp)
   14f2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14f30:	e13ffb17 	ldw	r4,-20(fp)
   14f34:	0013a580 	call	13a58 <alt_release_fd>
  }
} 
   14f38:	0001883a 	nop
   14f3c:	e037883a 	mov	sp,fp
   14f40:	dfc00117 	ldw	ra,4(sp)
   14f44:	df000017 	ldw	fp,0(sp)
   14f48:	dec00204 	addi	sp,sp,8
   14f4c:	f800283a 	ret

00014f50 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14f50:	defffb04 	addi	sp,sp,-20
   14f54:	dfc00415 	stw	ra,16(sp)
   14f58:	df000315 	stw	fp,12(sp)
   14f5c:	df000304 	addi	fp,sp,12
   14f60:	e13ffd15 	stw	r4,-12(fp)
   14f64:	e17ffe15 	stw	r5,-8(fp)
   14f68:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14f6c:	01c07fc4 	movi	r7,511
   14f70:	01800044 	movi	r6,1
   14f74:	e17ffd17 	ldw	r5,-12(fp)
   14f78:	01000074 	movhi	r4,1
   14f7c:	2118f104 	addi	r4,r4,25540
   14f80:	0014e8c0 	call	14e8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14f84:	01c07fc4 	movi	r7,511
   14f88:	000d883a 	mov	r6,zero
   14f8c:	e17ffe17 	ldw	r5,-8(fp)
   14f90:	01000074 	movhi	r4,1
   14f94:	2118ee04 	addi	r4,r4,25528
   14f98:	0014e8c0 	call	14e8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14f9c:	01c07fc4 	movi	r7,511
   14fa0:	01800044 	movi	r6,1
   14fa4:	e17fff17 	ldw	r5,-4(fp)
   14fa8:	01000074 	movhi	r4,1
   14fac:	2118f404 	addi	r4,r4,25552
   14fb0:	0014e8c0 	call	14e8c <alt_open_fd>
}  
   14fb4:	0001883a 	nop
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14fcc:	defffe04 	addi	sp,sp,-8
   14fd0:	dfc00115 	stw	ra,4(sp)
   14fd4:	df000015 	stw	fp,0(sp)
   14fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14fdc:	d0a00917 	ldw	r2,-32732(gp)
   14fe0:	10000326 	beq	r2,zero,14ff0 <alt_get_errno+0x24>
   14fe4:	d0a00917 	ldw	r2,-32732(gp)
   14fe8:	103ee83a 	callr	r2
   14fec:	00000106 	br	14ff4 <alt_get_errno+0x28>
   14ff0:	d0a6b804 	addi	r2,gp,-25888
}
   14ff4:	e037883a 	mov	sp,fp
   14ff8:	dfc00117 	ldw	ra,4(sp)
   14ffc:	df000017 	ldw	fp,0(sp)
   15000:	dec00204 	addi	sp,sp,8
   15004:	f800283a 	ret

00015008 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15008:	defffd04 	addi	sp,sp,-12
   1500c:	df000215 	stw	fp,8(sp)
   15010:	df000204 	addi	fp,sp,8
   15014:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15018:	e0bfff17 	ldw	r2,-4(fp)
   1501c:	10800217 	ldw	r2,8(r2)
   15020:	10d00034 	orhi	r3,r2,16384
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1502c:	e03ffe15 	stw	zero,-8(fp)
   15030:	00001d06 	br	150a8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15034:	00800074 	movhi	r2,1
   15038:	1098ee04 	addi	r2,r2,25528
   1503c:	e0fffe17 	ldw	r3,-8(fp)
   15040:	18c00324 	muli	r3,r3,12
   15044:	10c5883a 	add	r2,r2,r3
   15048:	10c00017 	ldw	r3,0(r2)
   1504c:	e0bfff17 	ldw	r2,-4(fp)
   15050:	10800017 	ldw	r2,0(r2)
   15054:	1880111e 	bne	r3,r2,1509c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15058:	00800074 	movhi	r2,1
   1505c:	1098ee04 	addi	r2,r2,25528
   15060:	e0fffe17 	ldw	r3,-8(fp)
   15064:	18c00324 	muli	r3,r3,12
   15068:	10c5883a 	add	r2,r2,r3
   1506c:	10800204 	addi	r2,r2,8
   15070:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15074:	1000090e 	bge	r2,zero,1509c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   15078:	e0bffe17 	ldw	r2,-8(fp)
   1507c:	10c00324 	muli	r3,r2,12
   15080:	00800074 	movhi	r2,1
   15084:	1098ee04 	addi	r2,r2,25528
   15088:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1508c:	e0bfff17 	ldw	r2,-4(fp)
   15090:	18800226 	beq	r3,r2,1509c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   15094:	00bffcc4 	movi	r2,-13
   15098:	00000806 	br	150bc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1509c:	e0bffe17 	ldw	r2,-8(fp)
   150a0:	10800044 	addi	r2,r2,1
   150a4:	e0bffe15 	stw	r2,-8(fp)
   150a8:	d0a00817 	ldw	r2,-32736(gp)
   150ac:	1007883a 	mov	r3,r2
   150b0:	e0bffe17 	ldw	r2,-8(fp)
   150b4:	18bfdf2e 	bgeu	r3,r2,15034 <_gp+0xffff5a9c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   150b8:	0005883a 	mov	r2,zero
}
   150bc:	e037883a 	mov	sp,fp
   150c0:	df000017 	ldw	fp,0(sp)
   150c4:	dec00104 	addi	sp,sp,4
   150c8:	f800283a 	ret

000150cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   150cc:	defff604 	addi	sp,sp,-40
   150d0:	dfc00915 	stw	ra,36(sp)
   150d4:	df000815 	stw	fp,32(sp)
   150d8:	df000804 	addi	fp,sp,32
   150dc:	e13ffd15 	stw	r4,-12(fp)
   150e0:	e17ffe15 	stw	r5,-8(fp)
   150e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   150e8:	00bfffc4 	movi	r2,-1
   150ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   150f0:	00bffb44 	movi	r2,-19
   150f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   150f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   150fc:	d1600604 	addi	r5,gp,-32744
   15100:	e13ffd17 	ldw	r4,-12(fp)
   15104:	00153e80 	call	153e8 <alt_find_dev>
   15108:	e0bff815 	stw	r2,-32(fp)
   1510c:	e0bff817 	ldw	r2,-32(fp)
   15110:	1000051e 	bne	r2,zero,15128 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15114:	e13ffd17 	ldw	r4,-12(fp)
   15118:	00154780 	call	15478 <alt_find_file>
   1511c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15120:	00800044 	movi	r2,1
   15124:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15128:	e0bff817 	ldw	r2,-32(fp)
   1512c:	10002926 	beq	r2,zero,151d4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15130:	e13ff817 	ldw	r4,-32(fp)
   15134:	00155800 	call	15580 <alt_get_fd>
   15138:	e0bff915 	stw	r2,-28(fp)
   1513c:	e0bff917 	ldw	r2,-28(fp)
   15140:	1000030e 	bge	r2,zero,15150 <open+0x84>
    {
      status = index;
   15144:	e0bff917 	ldw	r2,-28(fp)
   15148:	e0bffa15 	stw	r2,-24(fp)
   1514c:	00002306 	br	151dc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   15150:	e0bff917 	ldw	r2,-28(fp)
   15154:	10c00324 	muli	r3,r2,12
   15158:	00800074 	movhi	r2,1
   1515c:	1098ee04 	addi	r2,r2,25528
   15160:	1885883a 	add	r2,r3,r2
   15164:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15168:	e0fffe17 	ldw	r3,-8(fp)
   1516c:	00900034 	movhi	r2,16384
   15170:	10bfffc4 	addi	r2,r2,-1
   15174:	1886703a 	and	r3,r3,r2
   15178:	e0bffc17 	ldw	r2,-16(fp)
   1517c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15180:	e0bffb17 	ldw	r2,-20(fp)
   15184:	1000051e 	bne	r2,zero,1519c <open+0xd0>
   15188:	e13ffc17 	ldw	r4,-16(fp)
   1518c:	00150080 	call	15008 <alt_file_locked>
   15190:	e0bffa15 	stw	r2,-24(fp)
   15194:	e0bffa17 	ldw	r2,-24(fp)
   15198:	10001016 	blt	r2,zero,151dc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1519c:	e0bff817 	ldw	r2,-32(fp)
   151a0:	10800317 	ldw	r2,12(r2)
   151a4:	10000826 	beq	r2,zero,151c8 <open+0xfc>
   151a8:	e0bff817 	ldw	r2,-32(fp)
   151ac:	10800317 	ldw	r2,12(r2)
   151b0:	e1ffff17 	ldw	r7,-4(fp)
   151b4:	e1bffe17 	ldw	r6,-8(fp)
   151b8:	e17ffd17 	ldw	r5,-12(fp)
   151bc:	e13ffc17 	ldw	r4,-16(fp)
   151c0:	103ee83a 	callr	r2
   151c4:	00000106 	br	151cc <open+0x100>
   151c8:	0005883a 	mov	r2,zero
   151cc:	e0bffa15 	stw	r2,-24(fp)
   151d0:	00000206 	br	151dc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   151d4:	00bffb44 	movi	r2,-19
   151d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   151dc:	e0bffa17 	ldw	r2,-24(fp)
   151e0:	1000090e 	bge	r2,zero,15208 <open+0x13c>
  {
    alt_release_fd (index);  
   151e4:	e13ff917 	ldw	r4,-28(fp)
   151e8:	0013a580 	call	13a58 <alt_release_fd>
    ALT_ERRNO = -status;
   151ec:	0014fcc0 	call	14fcc <alt_get_errno>
   151f0:	1007883a 	mov	r3,r2
   151f4:	e0bffa17 	ldw	r2,-24(fp)
   151f8:	0085c83a 	sub	r2,zero,r2
   151fc:	18800015 	stw	r2,0(r3)
    return -1;
   15200:	00bfffc4 	movi	r2,-1
   15204:	00000106 	br	1520c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   15208:	e0bff917 	ldw	r2,-28(fp)
}
   1520c:	e037883a 	mov	sp,fp
   15210:	dfc00117 	ldw	ra,4(sp)
   15214:	df000017 	ldw	fp,0(sp)
   15218:	dec00204 	addi	sp,sp,8
   1521c:	f800283a 	ret

00015220 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15220:	defffa04 	addi	sp,sp,-24
   15224:	df000515 	stw	fp,20(sp)
   15228:	df000504 	addi	fp,sp,20
   1522c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15230:	0005303a 	rdctl	r2,status
   15234:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15238:	e0fffc17 	ldw	r3,-16(fp)
   1523c:	00bfff84 	movi	r2,-2
   15240:	1884703a 	and	r2,r3,r2
   15244:	1001703a 	wrctl	status,r2
  
  return context;
   15248:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1524c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   15250:	e0bfff17 	ldw	r2,-4(fp)
   15254:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	10800017 	ldw	r2,0(r2)
   15260:	e0fffd17 	ldw	r3,-12(fp)
   15264:	18c00117 	ldw	r3,4(r3)
   15268:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1526c:	e0bffd17 	ldw	r2,-12(fp)
   15270:	10800117 	ldw	r2,4(r2)
   15274:	e0fffd17 	ldw	r3,-12(fp)
   15278:	18c00017 	ldw	r3,0(r3)
   1527c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15280:	e0bffd17 	ldw	r2,-12(fp)
   15284:	e0fffd17 	ldw	r3,-12(fp)
   15288:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1528c:	e0bffd17 	ldw	r2,-12(fp)
   15290:	e0fffd17 	ldw	r3,-12(fp)
   15294:	10c00015 	stw	r3,0(r2)
   15298:	e0bffb17 	ldw	r2,-20(fp)
   1529c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a0:	e0bffe17 	ldw	r2,-8(fp)
   152a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   152a8:	0001883a 	nop
   152ac:	e037883a 	mov	sp,fp
   152b0:	df000017 	ldw	fp,0(sp)
   152b4:	dec00104 	addi	sp,sp,4
   152b8:	f800283a 	ret

000152bc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   152bc:	defffb04 	addi	sp,sp,-20
   152c0:	dfc00415 	stw	ra,16(sp)
   152c4:	df000315 	stw	fp,12(sp)
   152c8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   152cc:	d0a00c17 	ldw	r2,-32720(gp)
   152d0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   152d4:	d0a6be17 	ldw	r2,-25864(gp)
   152d8:	10800044 	addi	r2,r2,1
   152dc:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   152e0:	00002e06 	br	1539c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   152e4:	e0bffd17 	ldw	r2,-12(fp)
   152e8:	10800017 	ldw	r2,0(r2)
   152ec:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   152f0:	e0bffd17 	ldw	r2,-12(fp)
   152f4:	10800403 	ldbu	r2,16(r2)
   152f8:	10803fcc 	andi	r2,r2,255
   152fc:	10000426 	beq	r2,zero,15310 <alt_tick+0x54>
   15300:	d0a6be17 	ldw	r2,-25864(gp)
   15304:	1000021e 	bne	r2,zero,15310 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15308:	e0bffd17 	ldw	r2,-12(fp)
   1530c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15310:	e0bffd17 	ldw	r2,-12(fp)
   15314:	10800217 	ldw	r2,8(r2)
   15318:	d0e6be17 	ldw	r3,-25864(gp)
   1531c:	18801d36 	bltu	r3,r2,15394 <alt_tick+0xd8>
   15320:	e0bffd17 	ldw	r2,-12(fp)
   15324:	10800403 	ldbu	r2,16(r2)
   15328:	10803fcc 	andi	r2,r2,255
   1532c:	1000191e 	bne	r2,zero,15394 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15330:	e0bffd17 	ldw	r2,-12(fp)
   15334:	10800317 	ldw	r2,12(r2)
   15338:	e0fffd17 	ldw	r3,-12(fp)
   1533c:	18c00517 	ldw	r3,20(r3)
   15340:	1809883a 	mov	r4,r3
   15344:	103ee83a 	callr	r2
   15348:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1534c:	e0bfff17 	ldw	r2,-4(fp)
   15350:	1000031e 	bne	r2,zero,15360 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15354:	e13ffd17 	ldw	r4,-12(fp)
   15358:	00152200 	call	15220 <alt_alarm_stop>
   1535c:	00000d06 	br	15394 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15360:	e0bffd17 	ldw	r2,-12(fp)
   15364:	10c00217 	ldw	r3,8(r2)
   15368:	e0bfff17 	ldw	r2,-4(fp)
   1536c:	1887883a 	add	r3,r3,r2
   15370:	e0bffd17 	ldw	r2,-12(fp)
   15374:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15378:	e0bffd17 	ldw	r2,-12(fp)
   1537c:	10c00217 	ldw	r3,8(r2)
   15380:	d0a6be17 	ldw	r2,-25864(gp)
   15384:	1880032e 	bgeu	r3,r2,15394 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15388:	e0bffd17 	ldw	r2,-12(fp)
   1538c:	00c00044 	movi	r3,1
   15390:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15394:	e0bffe17 	ldw	r2,-8(fp)
   15398:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1539c:	e0fffd17 	ldw	r3,-12(fp)
   153a0:	d0a00c04 	addi	r2,gp,-32720
   153a4:	18bfcf1e 	bne	r3,r2,152e4 <_gp+0xffff5d4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   153a8:	0001883a 	nop
}
   153ac:	0001883a 	nop
   153b0:	e037883a 	mov	sp,fp
   153b4:	dfc00117 	ldw	ra,4(sp)
   153b8:	df000017 	ldw	fp,0(sp)
   153bc:	dec00204 	addi	sp,sp,8
   153c0:	f800283a 	ret

000153c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   153c4:	deffff04 	addi	sp,sp,-4
   153c8:	df000015 	stw	fp,0(sp)
   153cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   153d0:	000170fa 	wrctl	ienable,zero
}
   153d4:	0001883a 	nop
   153d8:	e037883a 	mov	sp,fp
   153dc:	df000017 	ldw	fp,0(sp)
   153e0:	dec00104 	addi	sp,sp,4
   153e4:	f800283a 	ret

000153e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   153e8:	defffa04 	addi	sp,sp,-24
   153ec:	dfc00515 	stw	ra,20(sp)
   153f0:	df000415 	stw	fp,16(sp)
   153f4:	df000404 	addi	fp,sp,16
   153f8:	e13ffe15 	stw	r4,-8(fp)
   153fc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15400:	e0bfff17 	ldw	r2,-4(fp)
   15404:	10800017 	ldw	r2,0(r2)
   15408:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1540c:	e13ffe17 	ldw	r4,-8(fp)
   15410:	001081c0 	call	1081c <strlen>
   15414:	10800044 	addi	r2,r2,1
   15418:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1541c:	00000d06 	br	15454 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15420:	e0bffc17 	ldw	r2,-16(fp)
   15424:	10800217 	ldw	r2,8(r2)
   15428:	e0fffd17 	ldw	r3,-12(fp)
   1542c:	180d883a 	mov	r6,r3
   15430:	e17ffe17 	ldw	r5,-8(fp)
   15434:	1009883a 	mov	r4,r2
   15438:	001579c0 	call	1579c <memcmp>
   1543c:	1000021e 	bne	r2,zero,15448 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15440:	e0bffc17 	ldw	r2,-16(fp)
   15444:	00000706 	br	15464 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15448:	e0bffc17 	ldw	r2,-16(fp)
   1544c:	10800017 	ldw	r2,0(r2)
   15450:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15454:	e0fffc17 	ldw	r3,-16(fp)
   15458:	e0bfff17 	ldw	r2,-4(fp)
   1545c:	18bff01e 	bne	r3,r2,15420 <_gp+0xffff5e88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15460:	0005883a 	mov	r2,zero
}
   15464:	e037883a 	mov	sp,fp
   15468:	dfc00117 	ldw	ra,4(sp)
   1546c:	df000017 	ldw	fp,0(sp)
   15470:	dec00204 	addi	sp,sp,8
   15474:	f800283a 	ret

00015478 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15478:	defffb04 	addi	sp,sp,-20
   1547c:	dfc00415 	stw	ra,16(sp)
   15480:	df000315 	stw	fp,12(sp)
   15484:	df000304 	addi	fp,sp,12
   15488:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1548c:	d0a00417 	ldw	r2,-32752(gp)
   15490:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15494:	00003106 	br	1555c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15498:	e0bffd17 	ldw	r2,-12(fp)
   1549c:	10800217 	ldw	r2,8(r2)
   154a0:	1009883a 	mov	r4,r2
   154a4:	001081c0 	call	1081c <strlen>
   154a8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   154ac:	e0bffd17 	ldw	r2,-12(fp)
   154b0:	10c00217 	ldw	r3,8(r2)
   154b4:	e0bffe17 	ldw	r2,-8(fp)
   154b8:	10bfffc4 	addi	r2,r2,-1
   154bc:	1885883a 	add	r2,r3,r2
   154c0:	10800003 	ldbu	r2,0(r2)
   154c4:	10803fcc 	andi	r2,r2,255
   154c8:	1080201c 	xori	r2,r2,128
   154cc:	10bfe004 	addi	r2,r2,-128
   154d0:	10800bd8 	cmpnei	r2,r2,47
   154d4:	1000031e 	bne	r2,zero,154e4 <alt_find_file+0x6c>
    {
      len -= 1;
   154d8:	e0bffe17 	ldw	r2,-8(fp)
   154dc:	10bfffc4 	addi	r2,r2,-1
   154e0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   154e4:	e0bffe17 	ldw	r2,-8(fp)
   154e8:	e0ffff17 	ldw	r3,-4(fp)
   154ec:	1885883a 	add	r2,r3,r2
   154f0:	10800003 	ldbu	r2,0(r2)
   154f4:	10803fcc 	andi	r2,r2,255
   154f8:	1080201c 	xori	r2,r2,128
   154fc:	10bfe004 	addi	r2,r2,-128
   15500:	10800be0 	cmpeqi	r2,r2,47
   15504:	1000081e 	bne	r2,zero,15528 <alt_find_file+0xb0>
   15508:	e0bffe17 	ldw	r2,-8(fp)
   1550c:	e0ffff17 	ldw	r3,-4(fp)
   15510:	1885883a 	add	r2,r3,r2
   15514:	10800003 	ldbu	r2,0(r2)
   15518:	10803fcc 	andi	r2,r2,255
   1551c:	1080201c 	xori	r2,r2,128
   15520:	10bfe004 	addi	r2,r2,-128
   15524:	10000a1e 	bne	r2,zero,15550 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15528:	e0bffd17 	ldw	r2,-12(fp)
   1552c:	10800217 	ldw	r2,8(r2)
   15530:	e0fffe17 	ldw	r3,-8(fp)
   15534:	180d883a 	mov	r6,r3
   15538:	e17fff17 	ldw	r5,-4(fp)
   1553c:	1009883a 	mov	r4,r2
   15540:	001579c0 	call	1579c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15544:	1000021e 	bne	r2,zero,15550 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15548:	e0bffd17 	ldw	r2,-12(fp)
   1554c:	00000706 	br	1556c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	10800017 	ldw	r2,0(r2)
   15558:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1555c:	e0fffd17 	ldw	r3,-12(fp)
   15560:	d0a00404 	addi	r2,gp,-32752
   15564:	18bfcc1e 	bne	r3,r2,15498 <_gp+0xffff5f00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   15568:	0005883a 	mov	r2,zero
}
   1556c:	e037883a 	mov	sp,fp
   15570:	dfc00117 	ldw	ra,4(sp)
   15574:	df000017 	ldw	fp,0(sp)
   15578:	dec00204 	addi	sp,sp,8
   1557c:	f800283a 	ret

00015580 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15580:	defffc04 	addi	sp,sp,-16
   15584:	df000315 	stw	fp,12(sp)
   15588:	df000304 	addi	fp,sp,12
   1558c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   15590:	00bffa04 	movi	r2,-24
   15594:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15598:	e03ffd15 	stw	zero,-12(fp)
   1559c:	00001906 	br	15604 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   155a0:	00800074 	movhi	r2,1
   155a4:	1098ee04 	addi	r2,r2,25528
   155a8:	e0fffd17 	ldw	r3,-12(fp)
   155ac:	18c00324 	muli	r3,r3,12
   155b0:	10c5883a 	add	r2,r2,r3
   155b4:	10800017 	ldw	r2,0(r2)
   155b8:	10000f1e 	bne	r2,zero,155f8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   155bc:	00800074 	movhi	r2,1
   155c0:	1098ee04 	addi	r2,r2,25528
   155c4:	e0fffd17 	ldw	r3,-12(fp)
   155c8:	18c00324 	muli	r3,r3,12
   155cc:	10c5883a 	add	r2,r2,r3
   155d0:	e0ffff17 	ldw	r3,-4(fp)
   155d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   155d8:	d0e00817 	ldw	r3,-32736(gp)
   155dc:	e0bffd17 	ldw	r2,-12(fp)
   155e0:	1880020e 	bge	r3,r2,155ec <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   155e4:	e0bffd17 	ldw	r2,-12(fp)
   155e8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   155ec:	e0bffd17 	ldw	r2,-12(fp)
   155f0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   155f4:	00000606 	br	15610 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   155f8:	e0bffd17 	ldw	r2,-12(fp)
   155fc:	10800044 	addi	r2,r2,1
   15600:	e0bffd15 	stw	r2,-12(fp)
   15604:	e0bffd17 	ldw	r2,-12(fp)
   15608:	10800810 	cmplti	r2,r2,32
   1560c:	103fe41e 	bne	r2,zero,155a0 <_gp+0xffff6008>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15610:	e0bffe17 	ldw	r2,-8(fp)
}
   15614:	e037883a 	mov	sp,fp
   15618:	df000017 	ldw	fp,0(sp)
   1561c:	dec00104 	addi	sp,sp,4
   15620:	f800283a 	ret

00015624 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15624:	defffb04 	addi	sp,sp,-20
   15628:	df000415 	stw	fp,16(sp)
   1562c:	df000404 	addi	fp,sp,16
   15630:	e13ffe15 	stw	r4,-8(fp)
   15634:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   15638:	e0bfff17 	ldw	r2,-4(fp)
   1563c:	10820070 	cmpltui	r2,r2,2049
   15640:	1000021e 	bne	r2,zero,1564c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15644:	00820004 	movi	r2,2048
   15648:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1564c:	e0fffe17 	ldw	r3,-8(fp)
   15650:	e0bfff17 	ldw	r2,-4(fp)
   15654:	1885883a 	add	r2,r3,r2
   15658:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1565c:	e0bffe17 	ldw	r2,-8(fp)
   15660:	e0bffc15 	stw	r2,-16(fp)
   15664:	00000506 	br	1567c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   15668:	e0bffc17 	ldw	r2,-16(fp)
   1566c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   15670:	e0bffc17 	ldw	r2,-16(fp)
   15674:	10800804 	addi	r2,r2,32
   15678:	e0bffc15 	stw	r2,-16(fp)
   1567c:	e0fffc17 	ldw	r3,-16(fp)
   15680:	e0bffd17 	ldw	r2,-12(fp)
   15684:	18bff836 	bltu	r3,r2,15668 <_gp+0xffff60d0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   15688:	e0bffe17 	ldw	r2,-8(fp)
   1568c:	108007cc 	andi	r2,r2,31
   15690:	10000226 	beq	r2,zero,1569c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   15694:	e0bffc17 	ldw	r2,-16(fp)
   15698:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1569c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   156a0:	0001883a 	nop
   156a4:	e037883a 	mov	sp,fp
   156a8:	df000017 	ldw	fp,0(sp)
   156ac:	dec00104 	addi	sp,sp,4
   156b0:	f800283a 	ret

000156b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   156b4:	defffe04 	addi	sp,sp,-8
   156b8:	df000115 	stw	fp,4(sp)
   156bc:	df000104 	addi	fp,sp,4
   156c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   156c4:	e0bfff17 	ldw	r2,-4(fp)
   156c8:	10bffe84 	addi	r2,r2,-6
   156cc:	10c00428 	cmpgeui	r3,r2,16
   156d0:	18001a1e 	bne	r3,zero,1573c <alt_exception_cause_generated_bad_addr+0x88>
   156d4:	100690ba 	slli	r3,r2,2
   156d8:	00800074 	movhi	r2,1
   156dc:	1095bb04 	addi	r2,r2,22252
   156e0:	1885883a 	add	r2,r3,r2
   156e4:	10800017 	ldw	r2,0(r2)
   156e8:	1000683a 	jmp	r2
   156ec:	0001572c 	andhi	zero,zero,1372
   156f0:	0001572c 	andhi	zero,zero,1372
   156f4:	0001573c 	xorhi	zero,zero,1372
   156f8:	0001573c 	xorhi	zero,zero,1372
   156fc:	0001573c 	xorhi	zero,zero,1372
   15700:	0001572c 	andhi	zero,zero,1372
   15704:	00015734 	movhi	zero,1372
   15708:	0001573c 	xorhi	zero,zero,1372
   1570c:	0001572c 	andhi	zero,zero,1372
   15710:	0001572c 	andhi	zero,zero,1372
   15714:	0001573c 	xorhi	zero,zero,1372
   15718:	0001572c 	andhi	zero,zero,1372
   1571c:	00015734 	movhi	zero,1372
   15720:	0001573c 	xorhi	zero,zero,1372
   15724:	0001573c 	xorhi	zero,zero,1372
   15728:	0001572c 	andhi	zero,zero,1372
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1572c:	00800044 	movi	r2,1
   15730:	00000306 	br	15740 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15734:	0005883a 	mov	r2,zero
   15738:	00000106 	br	15740 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1573c:	0005883a 	mov	r2,zero
  }
}
   15740:	e037883a 	mov	sp,fp
   15744:	df000017 	ldw	fp,0(sp)
   15748:	dec00104 	addi	sp,sp,4
   1574c:	f800283a 	ret

00015750 <atexit>:
   15750:	200b883a 	mov	r5,r4
   15754:	000f883a 	mov	r7,zero
   15758:	000d883a 	mov	r6,zero
   1575c:	0009883a 	mov	r4,zero
   15760:	00158181 	jmpi	15818 <__register_exitproc>

00015764 <exit>:
   15764:	defffe04 	addi	sp,sp,-8
   15768:	000b883a 	mov	r5,zero
   1576c:	dc000015 	stw	r16,0(sp)
   15770:	dfc00115 	stw	ra,4(sp)
   15774:	2021883a 	mov	r16,r4
   15778:	00159300 	call	15930 <__call_exitprocs>
   1577c:	00800074 	movhi	r2,1
   15780:	109d6604 	addi	r2,r2,30104
   15784:	11000017 	ldw	r4,0(r2)
   15788:	20800f17 	ldw	r2,60(r4)
   1578c:	10000126 	beq	r2,zero,15794 <exit+0x30>
   15790:	103ee83a 	callr	r2
   15794:	8009883a 	mov	r4,r16
   15798:	0015ab00 	call	15ab0 <_exit>

0001579c <memcmp>:
   1579c:	01c000c4 	movi	r7,3
   157a0:	3980192e 	bgeu	r7,r6,15808 <memcmp+0x6c>
   157a4:	2144b03a 	or	r2,r4,r5
   157a8:	11c4703a 	and	r2,r2,r7
   157ac:	10000f26 	beq	r2,zero,157ec <memcmp+0x50>
   157b0:	20800003 	ldbu	r2,0(r4)
   157b4:	28c00003 	ldbu	r3,0(r5)
   157b8:	10c0151e 	bne	r2,r3,15810 <memcmp+0x74>
   157bc:	31bfff84 	addi	r6,r6,-2
   157c0:	01ffffc4 	movi	r7,-1
   157c4:	00000406 	br	157d8 <memcmp+0x3c>
   157c8:	20800003 	ldbu	r2,0(r4)
   157cc:	28c00003 	ldbu	r3,0(r5)
   157d0:	31bfffc4 	addi	r6,r6,-1
   157d4:	10c00e1e 	bne	r2,r3,15810 <memcmp+0x74>
   157d8:	21000044 	addi	r4,r4,1
   157dc:	29400044 	addi	r5,r5,1
   157e0:	31fff91e 	bne	r6,r7,157c8 <_gp+0xffff6230>
   157e4:	0005883a 	mov	r2,zero
   157e8:	f800283a 	ret
   157ec:	20c00017 	ldw	r3,0(r4)
   157f0:	28800017 	ldw	r2,0(r5)
   157f4:	18bfee1e 	bne	r3,r2,157b0 <_gp+0xffff6218>
   157f8:	31bfff04 	addi	r6,r6,-4
   157fc:	21000104 	addi	r4,r4,4
   15800:	29400104 	addi	r5,r5,4
   15804:	39bff936 	bltu	r7,r6,157ec <_gp+0xffff6254>
   15808:	303fe91e 	bne	r6,zero,157b0 <_gp+0xffff6218>
   1580c:	003ff506 	br	157e4 <_gp+0xffff624c>
   15810:	10c5c83a 	sub	r2,r2,r3
   15814:	f800283a 	ret

00015818 <__register_exitproc>:
   15818:	defffa04 	addi	sp,sp,-24
   1581c:	dc000315 	stw	r16,12(sp)
   15820:	04000074 	movhi	r16,1
   15824:	841d6604 	addi	r16,r16,30104
   15828:	80c00017 	ldw	r3,0(r16)
   1582c:	dc400415 	stw	r17,16(sp)
   15830:	dfc00515 	stw	ra,20(sp)
   15834:	18805217 	ldw	r2,328(r3)
   15838:	2023883a 	mov	r17,r4
   1583c:	10003726 	beq	r2,zero,1591c <__register_exitproc+0x104>
   15840:	10c00117 	ldw	r3,4(r2)
   15844:	010007c4 	movi	r4,31
   15848:	20c00e16 	blt	r4,r3,15884 <__register_exitproc+0x6c>
   1584c:	1a000044 	addi	r8,r3,1
   15850:	8800221e 	bne	r17,zero,158dc <__register_exitproc+0xc4>
   15854:	18c00084 	addi	r3,r3,2
   15858:	18c7883a 	add	r3,r3,r3
   1585c:	18c7883a 	add	r3,r3,r3
   15860:	12000115 	stw	r8,4(r2)
   15864:	10c7883a 	add	r3,r2,r3
   15868:	19400015 	stw	r5,0(r3)
   1586c:	0005883a 	mov	r2,zero
   15870:	dfc00517 	ldw	ra,20(sp)
   15874:	dc400417 	ldw	r17,16(sp)
   15878:	dc000317 	ldw	r16,12(sp)
   1587c:	dec00604 	addi	sp,sp,24
   15880:	f800283a 	ret
   15884:	00800034 	movhi	r2,0
   15888:	10800004 	addi	r2,r2,0
   1588c:	10002626 	beq	r2,zero,15928 <__register_exitproc+0x110>
   15890:	01006404 	movi	r4,400
   15894:	d9400015 	stw	r5,0(sp)
   15898:	d9800115 	stw	r6,4(sp)
   1589c:	d9c00215 	stw	r7,8(sp)
   158a0:	00000000 	call	0 <__reset-0x10000>
   158a4:	d9400017 	ldw	r5,0(sp)
   158a8:	d9800117 	ldw	r6,4(sp)
   158ac:	d9c00217 	ldw	r7,8(sp)
   158b0:	10001d26 	beq	r2,zero,15928 <__register_exitproc+0x110>
   158b4:	81000017 	ldw	r4,0(r16)
   158b8:	10000115 	stw	zero,4(r2)
   158bc:	02000044 	movi	r8,1
   158c0:	22405217 	ldw	r9,328(r4)
   158c4:	0007883a 	mov	r3,zero
   158c8:	12400015 	stw	r9,0(r2)
   158cc:	20805215 	stw	r2,328(r4)
   158d0:	10006215 	stw	zero,392(r2)
   158d4:	10006315 	stw	zero,396(r2)
   158d8:	883fde26 	beq	r17,zero,15854 <_gp+0xffff62bc>
   158dc:	18c9883a 	add	r4,r3,r3
   158e0:	2109883a 	add	r4,r4,r4
   158e4:	1109883a 	add	r4,r2,r4
   158e8:	21802215 	stw	r6,136(r4)
   158ec:	01800044 	movi	r6,1
   158f0:	12406217 	ldw	r9,392(r2)
   158f4:	30cc983a 	sll	r6,r6,r3
   158f8:	4992b03a 	or	r9,r9,r6
   158fc:	12406215 	stw	r9,392(r2)
   15900:	21c04215 	stw	r7,264(r4)
   15904:	01000084 	movi	r4,2
   15908:	893fd21e 	bne	r17,r4,15854 <_gp+0xffff62bc>
   1590c:	11006317 	ldw	r4,396(r2)
   15910:	218cb03a 	or	r6,r4,r6
   15914:	11806315 	stw	r6,396(r2)
   15918:	003fce06 	br	15854 <_gp+0xffff62bc>
   1591c:	18805304 	addi	r2,r3,332
   15920:	18805215 	stw	r2,328(r3)
   15924:	003fc606 	br	15840 <_gp+0xffff62a8>
   15928:	00bfffc4 	movi	r2,-1
   1592c:	003fd006 	br	15870 <_gp+0xffff62d8>

00015930 <__call_exitprocs>:
   15930:	defff504 	addi	sp,sp,-44
   15934:	df000915 	stw	fp,36(sp)
   15938:	dd400615 	stw	r21,24(sp)
   1593c:	dc800315 	stw	r18,12(sp)
   15940:	dfc00a15 	stw	ra,40(sp)
   15944:	ddc00815 	stw	r23,32(sp)
   15948:	dd800715 	stw	r22,28(sp)
   1594c:	dd000515 	stw	r20,20(sp)
   15950:	dcc00415 	stw	r19,16(sp)
   15954:	dc400215 	stw	r17,8(sp)
   15958:	dc000115 	stw	r16,4(sp)
   1595c:	d9000015 	stw	r4,0(sp)
   15960:	2839883a 	mov	fp,r5
   15964:	04800044 	movi	r18,1
   15968:	057fffc4 	movi	r21,-1
   1596c:	00800074 	movhi	r2,1
   15970:	109d6604 	addi	r2,r2,30104
   15974:	12000017 	ldw	r8,0(r2)
   15978:	45005217 	ldw	r20,328(r8)
   1597c:	44c05204 	addi	r19,r8,328
   15980:	a0001c26 	beq	r20,zero,159f4 <__call_exitprocs+0xc4>
   15984:	a0800117 	ldw	r2,4(r20)
   15988:	15ffffc4 	addi	r23,r2,-1
   1598c:	b8000d16 	blt	r23,zero,159c4 <__call_exitprocs+0x94>
   15990:	14000044 	addi	r16,r2,1
   15994:	8421883a 	add	r16,r16,r16
   15998:	8421883a 	add	r16,r16,r16
   1599c:	84402004 	addi	r17,r16,128
   159a0:	a463883a 	add	r17,r20,r17
   159a4:	a421883a 	add	r16,r20,r16
   159a8:	e0001e26 	beq	fp,zero,15a24 <__call_exitprocs+0xf4>
   159ac:	80804017 	ldw	r2,256(r16)
   159b0:	e0801c26 	beq	fp,r2,15a24 <__call_exitprocs+0xf4>
   159b4:	bdffffc4 	addi	r23,r23,-1
   159b8:	843fff04 	addi	r16,r16,-4
   159bc:	8c7fff04 	addi	r17,r17,-4
   159c0:	bd7ff91e 	bne	r23,r21,159a8 <_gp+0xffff6410>
   159c4:	00800034 	movhi	r2,0
   159c8:	10800004 	addi	r2,r2,0
   159cc:	10000926 	beq	r2,zero,159f4 <__call_exitprocs+0xc4>
   159d0:	a0800117 	ldw	r2,4(r20)
   159d4:	1000301e 	bne	r2,zero,15a98 <__call_exitprocs+0x168>
   159d8:	a0800017 	ldw	r2,0(r20)
   159dc:	10003226 	beq	r2,zero,15aa8 <__call_exitprocs+0x178>
   159e0:	a009883a 	mov	r4,r20
   159e4:	98800015 	stw	r2,0(r19)
   159e8:	00000000 	call	0 <__reset-0x10000>
   159ec:	9d000017 	ldw	r20,0(r19)
   159f0:	a03fe41e 	bne	r20,zero,15984 <_gp+0xffff63ec>
   159f4:	dfc00a17 	ldw	ra,40(sp)
   159f8:	df000917 	ldw	fp,36(sp)
   159fc:	ddc00817 	ldw	r23,32(sp)
   15a00:	dd800717 	ldw	r22,28(sp)
   15a04:	dd400617 	ldw	r21,24(sp)
   15a08:	dd000517 	ldw	r20,20(sp)
   15a0c:	dcc00417 	ldw	r19,16(sp)
   15a10:	dc800317 	ldw	r18,12(sp)
   15a14:	dc400217 	ldw	r17,8(sp)
   15a18:	dc000117 	ldw	r16,4(sp)
   15a1c:	dec00b04 	addi	sp,sp,44
   15a20:	f800283a 	ret
   15a24:	a0800117 	ldw	r2,4(r20)
   15a28:	80c00017 	ldw	r3,0(r16)
   15a2c:	10bfffc4 	addi	r2,r2,-1
   15a30:	15c01426 	beq	r2,r23,15a84 <__call_exitprocs+0x154>
   15a34:	80000015 	stw	zero,0(r16)
   15a38:	183fde26 	beq	r3,zero,159b4 <_gp+0xffff641c>
   15a3c:	95c8983a 	sll	r4,r18,r23
   15a40:	a0806217 	ldw	r2,392(r20)
   15a44:	a5800117 	ldw	r22,4(r20)
   15a48:	2084703a 	and	r2,r4,r2
   15a4c:	10000b26 	beq	r2,zero,15a7c <__call_exitprocs+0x14c>
   15a50:	a0806317 	ldw	r2,396(r20)
   15a54:	2088703a 	and	r4,r4,r2
   15a58:	20000c1e 	bne	r4,zero,15a8c <__call_exitprocs+0x15c>
   15a5c:	89400017 	ldw	r5,0(r17)
   15a60:	d9000017 	ldw	r4,0(sp)
   15a64:	183ee83a 	callr	r3
   15a68:	a0800117 	ldw	r2,4(r20)
   15a6c:	15bfbf1e 	bne	r2,r22,1596c <_gp+0xffff63d4>
   15a70:	98800017 	ldw	r2,0(r19)
   15a74:	153fcf26 	beq	r2,r20,159b4 <_gp+0xffff641c>
   15a78:	003fbc06 	br	1596c <_gp+0xffff63d4>
   15a7c:	183ee83a 	callr	r3
   15a80:	003ff906 	br	15a68 <_gp+0xffff64d0>
   15a84:	a5c00115 	stw	r23,4(r20)
   15a88:	003feb06 	br	15a38 <_gp+0xffff64a0>
   15a8c:	89000017 	ldw	r4,0(r17)
   15a90:	183ee83a 	callr	r3
   15a94:	003ff406 	br	15a68 <_gp+0xffff64d0>
   15a98:	a0800017 	ldw	r2,0(r20)
   15a9c:	a027883a 	mov	r19,r20
   15aa0:	1029883a 	mov	r20,r2
   15aa4:	003fb606 	br	15980 <_gp+0xffff63e8>
   15aa8:	0005883a 	mov	r2,zero
   15aac:	003ffb06 	br	15a9c <_gp+0xffff6504>

00015ab0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15ab0:	defffd04 	addi	sp,sp,-12
   15ab4:	df000215 	stw	fp,8(sp)
   15ab8:	df000204 	addi	fp,sp,8
   15abc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15ac0:	0001883a 	nop
   15ac4:	e0bfff17 	ldw	r2,-4(fp)
   15ac8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15acc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15ad0:	10000226 	beq	r2,zero,15adc <_exit+0x2c>
    ALT_SIM_FAIL();
   15ad4:	002af070 	cmpltui	zero,zero,43969
   15ad8:	00000106 	br	15ae0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15adc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15ae0:	003fff06 	br	15ae0 <_gp+0xffff6548>
