
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000046c4 memsz 0x000046c4 flags r-x
    LOAD off    0x000056e4 vaddr 0x000446e4 paddr 0x000449d0 align 2**12
         filesz 0x000002ec memsz 0x000002ec flags rw-
    LOAD off    0x00005cbc vaddr 0x00044cbc paddr 0x00044cbc align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003f80  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000520  000441c4  000441c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002ec  000446e4  000449d0  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00044cbc  00044cbc  00005cbc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00044df0  00044df0  000059d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f8  00000000  00000000  000059f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000088f6  00000000  00000000  000060f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003072  00000000  00000000  0000e9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000039a6  00000000  00000000  00011a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001234  00000000  00000000  00015400  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020f1  00000000  00000000  00016634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  00018725  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00019a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  00019a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001beb6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0001beb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001bec3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001bec4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001bec5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001bec9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001becd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001bed1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001bedc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001bee7  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001bef2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0001befd  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0001bf5e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00091a74  00000000  00000000  000218f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
000441c4 l    d  .rodata	00000000 .rodata
000446e4 l    d  .rwdata	00000000 .rwdata
00044cbc l    d  .bss	00000000 .bss
00044df0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_pwm_routines.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 hello_altera_avalon_pwm.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
00044cc3 l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00042444 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000446e4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00042da0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00042ef8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004302c l     F .text	00000034 alt_dev_reg
000447c4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00043328 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0004341c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00043548 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00043574 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043724 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00043864 l     F .text	0000003c alt_get_errno
000438a0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00044ce4 g     O .bss	00000004 alt_instruction_exception_handler
00042e8c g     F .text	0000006c alt_main
00042394 g     F .text	00000080 _puts_r
00044cf0 g     O .bss	00000100 alt_irq
000449d0 g       *ABS*	00000000 __flash_rwdata_start
00042348 g     F .text	0000004c printf
000418ec g     F .text	00000084 getClockTime
00041b04 g     F .text	000000b0 upClockHour
000409dc g     F .text	00000048 buttonsRegisterISR
00041474 g     F .text	0000002c downVolume
00043cc0 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00044cd0 g     O .bss	00000004 errno
00044cdc g     O .bss	00000004 alt_argv
0004c998 g       *ABS*	00000000 _gp
000449a3 g     O .rwdata	00000001 time_format
00040ad4 g     F .text	00000030 alarmLEDon
00044818 g     O .rwdata	00000180 alt_fd_list
00043ce4 g     F .text	00000090 alt_find_dev
000437e8 g     F .text	0000007c alt_io_redirect
00042414 g     F .text	00000014 puts
00043688 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000431a8 g     F .text	000000ec altera_avalon_jtag_uart_read
0004230c g     F .text	0000003c _printf_r
00042250 g     F .text	00000064 .hidden __udivsi3
00043f20 g     F .text	00000090 alt_icache_flush
00044998 g     O .rwdata	00000001 volume
00040994 g     F .text	00000048 switchesRegisterISR
000449c0 g     O .rwdata	00000004 alt_max_fd
0004499a g     O .rwdata	00000006 unused_switches
000420ac g     F .text	000000ac downAlarmHour
000407ec g     F .text	00000044 check_return_code
00041c80 g     F .text	000000c8 downClockMinute
000449a4 g     O .rwdata	00000004 _global_impure_ptr
00041e28 g     F .text	00000084 getAlarmTime
00044df0 g       *ABS*	00000000 __bss_end
00042cb0 g     F .text	000000f0 alt_iic_isr_register
00043bb8 g     F .text	00000108 alt_tick
00040df4 g     F .text	0000024c switchesISR
00042c64 g     F .text	0000004c alt_ic_irq_enabled
00044cc9 g     O .bss	00000003 alarm
00043b1c g     F .text	0000009c alt_alarm_stop
00044cd4 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
000447f0 g     O .rwdata	00000028 alt_dev_null
00043528 g     F .text	00000020 alt_dcache_flush_all
00040c2c g     F .text	000001c8 timerSecondISR
000449d0 g       *ABS*	00000000 __ram_rwdata_end
00041eac g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
000449b8 g     O .rwdata	00000008 alt_dev_list
00042f34 g     F .text	000000f8 write
00041d48 g     F .text	000000ac downClockHour
000446e4 g       *ABS*	00000000 __ram_rodata_end
000441c4 g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00041970 g     F .text	000000cc upClockSecond
000422b4 g     F .text	00000058 .hidden __umodsi3
00040aa4 g     F .text	00000030 alarmLEDoff
00040b04 g     F .text	0000004c alarmLEDtoggle
00044df0 g       *ABS*	00000000 end
00044cbc g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00042004 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
000433a0 g     F .text	0000007c alt_avalon_timer_sc_init
00043294 g     F .text	00000094 altera_avalon_jtag_uart_write
000424b0 g     F .text	00000524 ___vfprintf_internal_r
00044000 g     F .text	00000190 __call_exitprocs
000414c0 g     F .text	0000002c upSong
00040244 g     F .text	0000003c _start
00044ce8 g     O .bss	00000004 _alt_tick_rate
00040280 g     F .text	00000064 altera_avalon_pwm_init
00044cec g     O .bss	00000004 _alt_nticks
00043098 g     F .text	00000050 alt_sys_init
000417d4 g     F .text	0000009c checkInvalidMode
000446e4 g       *ABS*	00000000 __ram_rwdata_start
000441c4 g       *ABS*	00000000 __ram_rodata_start
000449a0 g     O .rwdata	00000003 reset_clock_value
00040a24 g     F .text	00000040 switchesEnableInterrupt
00041448 g     F .text	0000002c upVolume
000430e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00043e7c g     F .text	000000a4 alt_get_fd
00043fd0 g     F .text	00000030 memcmp
00044df0 g       *ABS*	00000000 __alt_stack_base
00040830 g     F .text	000000ec print_error
00041870 g     F .text	00000044 isPowerOfTwoOrZero
00043d74 g     F .text	00000108 alt_find_file
000435b0 g     F .text	000000a4 alt_dev_llist_insert
000418b4 g     F .text	00000038 resetClockTime
000402e4 g     F .text	00000054 altera_avalon_pwm_enable
000429f0 g     F .text	000000b8 __sfvwrite_small_dev
00044cbc g       *ABS*	00000000 __bss_start
000414a0 g     F .text	00000020 getSong
00040b50 g     F .text	000000dc main
00044ce0 g     O .bss	00000004 alt_envp
00043148 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000403e0 g     F .text	00000080 resetDisplay
000449c4 g     O .rwdata	00000004 alt_errno
00042158 g     F .text	00000084 .hidden __divsi3
00041bb4 g     F .text	000000cc downClockSecond
000441c4 g       *ABS*	00000000 __flash_rodata_start
00040388 g     F .text	00000058 altera_avalon_pwm_change_duty_cycle
00043060 g     F .text	00000038 alt_irq_init
00043ab8 g     F .text	00000064 alt_release_fd
00044cc2 g     O .bss	00000001 song_index
00042aa8 g     F .text	00000058 _write_r
00041a3c g     F .text	000000c8 upClockMinute
000449a8 g     O .rwdata	00000004 _impure_ptr
00044cd8 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00040964 g     F .text	00000030 timerSecondEnableInterrupt
000449b0 g     O .rwdata	00000008 alt_fs_list
00041558 g     F .text	0000027c determineMode
00040338 g     F .text	00000050 altera_avalon_pwm_disable
00040020 g       *ABS*	00000000 __ram_exceptions_start
00042b00 g     F .text	00000050 alt_ic_isr_register
000449d0 g       *ABS*	00000000 _edata
00044df0 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
00040a64 g     F .text	00000040 buttonsEnableInterrupt
00042bd8 g     F .text	0000008c alt_ic_irq_disable
00043fb0 g     F .text	00000020 exit
000421dc g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004091c g     F .text	00000048 timerSecondRegisterISR
00041f54 g     F .text	000000b0 upAlarmHour
00041538 g     F .text	00000020 stopSong
00044190 g     F .text	00000034 _exit
000414ec g     F .text	0000002c downSong
00042428 g     F .text	0000001c strlen
00043964 g     F .text	00000154 open
00041518 g     F .text	00000020 playSong
00044ccc g     O .bss	00000003 clock
0004464c g     O .rodata	00000060 mode_lookup_table
00043654 g     F .text	00000034 alt_icache_flush_all
00041040 g     F .text	000003e8 buttonsISR
000449ac g     O .rwdata	00000004 alt_priority_mask
00042b50 g     F .text	00000088 alt_ic_irq_enable
000429d4 g     F .text	0000001c __vfprintf_internal
000449c8 g     O .rwdata	00000008 alt_alarm_list
00043458 g     F .text	000000d0 close
0004069c g     F .text	00000150 testPWM
00041428 g     F .text	00000020 getVolume
00041df4 g     F .text	00000034 resetAlarmTime
00042e08 g     F .text	00000084 alt_load
00040460 g     F .text	0000023c updateDisplay



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	10933c04 	addi	r2,r2,19696
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	10933c04 	addi	r2,r2,19696
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a0d317 	ldw	r2,-31924(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a0d317 	ldw	r2,-31924(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6b26614 	ori	gp,gp,51608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	10932f14 	ori	r2,r2,19644

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18d37c14 	ori	r3,r3,19952

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	0042e080 	call	42e08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	0042e8c0 	call	42e8c <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <altera_avalon_pwm_init>:

#include "altera_avalon_pwm_routines.h"


int altera_avalon_pwm_init(unsigned int address, unsigned int clock_divider, unsigned int duty_cycle)
{
   40280:	defffc04 	addi	sp,sp,-16
   40284:	df000315 	stw	fp,12(sp)
   40288:	df000304 	addi	fp,sp,12
   4028c:	e13ffd15 	stw	r4,-12(fp)
   40290:	e17ffe15 	stw	r5,-8(fp)
   40294:	e1bfff15 	stw	r6,-4(fp)
	if(duty_cycle > clock_divider)  //duty cycle reg must be less than or equal to clock divider
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	e0fffe17 	ldw	r3,-8(fp)
   402a0:	1880022e 	bgeu	r3,r2,402ac <altera_avalon_pwm_init+0x2c>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	00000a06 	br	402d4 <altera_avalon_pwm_init+0x54>
	}
	else
	{
		IOWR_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address, clock_divider - 1);
   402ac:	e0bffd17 	ldw	r2,-12(fp)
   402b0:	e0fffe17 	ldw	r3,-8(fp)
   402b4:	18ffffc4 	addi	r3,r3,-1
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800104 	addi	r2,r2,4
   402c4:	1007883a 	mov	r3,r2
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	18800035 	stwio	r2,0(r3)
	}
	 return ALTERA_AVALON_PWM_OK;
   402d0:	0005883a 	mov	r2,zero
}
   402d4:	e037883a 	mov	sp,fp
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00104 	addi	sp,sp,4
   402e0:	f800283a 	ret

000402e4 <altera_avalon_pwm_enable>:

int altera_avalon_pwm_enable(unsigned int address)
{
   402e4:	defffe04 	addi	sp,sp,-8
   402e8:	df000115 	stw	fp,4(sp)
   402ec:	df000104 	addi	fp,sp,4
   402f0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ALTERA_AVALON_PWM_ENABLE_MSK);
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	10800204 	addi	r2,r2,8
   402fc:	1007883a 	mov	r3,r2
   40300:	00800044 	movi	r2,1
   40304:	18800035 	stwio	r2,0(r3)
  
  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_ENABLED) //Confirm PWM is enabled
   40308:	e0bfff17 	ldw	r2,-4(fp)
   4030c:	10800204 	addi	r2,r2,8
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	10800060 	cmpeqi	r2,r2,1
   40318:	1000021e 	bne	r2,zero,40324 <altera_avalon_pwm_enable+0x40>
  {
  	return ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR;
   4031c:	00bfff84 	movi	r2,-2
   40320:	00000106 	br	40328 <altera_avalon_pwm_enable+0x44>
  }
  return ALTERA_AVALON_PWM_OK;
   40324:	0005883a 	mov	r2,zero
}
   40328:	e037883a 	mov	sp,fp
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00104 	addi	sp,sp,4
   40334:	f800283a 	ret

00040338 <altera_avalon_pwm_disable>:

int altera_avalon_pwm_disable(unsigned int address)
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
   40344:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ~ALTERA_AVALON_PWM_ENABLE_MSK);
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800204 	addi	r2,r2,8
   40350:	1007883a 	mov	r3,r2
   40354:	00bfff84 	movi	r2,-2
   40358:	18800035 	stwio	r2,0(r3)

  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_DISABLED)  //Confirm PWM is disabled 
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10800204 	addi	r2,r2,8
   40364:	10800037 	ldwio	r2,0(r2)
   40368:	10000226 	beq	r2,zero,40374 <altera_avalon_pwm_disable+0x3c>
  {
  	return ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR;
   4036c:	00bfff44 	movi	r2,-3
   40370:	00000106 	br	40378 <altera_avalon_pwm_disable+0x40>
  }
  return ALTERA_AVALON_PWM_OK;
   40374:	0005883a 	mov	r2,zero
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <altera_avalon_pwm_change_duty_cycle>:


int altera_avalon_pwm_change_duty_cycle(unsigned int address, unsigned int duty_cycle)
{
   40388:	defffd04 	addi	sp,sp,-12
   4038c:	df000215 	stw	fp,8(sp)
   40390:	df000204 	addi	fp,sp,8
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
	if(duty_cycle > IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address))  //duty cycle reg must be less than or equal to clock divider
   4039c:	e0bffe17 	ldw	r2,-8(fp)
   403a0:	10800037 	ldwio	r2,0(r2)
   403a4:	1007883a 	mov	r3,r2
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	1880022e 	bgeu	r3,r2,403b8 <altera_avalon_pwm_change_duty_cycle+0x30>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	00000606 	br	403d0 <altera_avalon_pwm_change_duty_cycle+0x48>
	}
	else
	{
    IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	10800104 	addi	r2,r2,4
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	18800035 	stwio	r2,0(r3)
	}
  return ALTERA_AVALON_PWM_OK;
   403cc:	0005883a 	mov	r2,zero
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00104 	addi	sp,sp,4
   403dc:	f800283a 	ret

000403e0 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   403e0:	deffff04 	addi	sp,sp,-4
   403e4:	df000015 	stw	fp,0(sp)
   403e8:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   403ec:	00c03004 	movi	r3,192
   403f0:	00800234 	movhi	r2,8
   403f4:	10841c04 	addi	r2,r2,4208
   403f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   403fc:	00c03004 	movi	r3,192
   40400:	00800234 	movhi	r2,8
   40404:	10844004 	addi	r2,r2,4352
   40408:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   4040c:	00c03004 	movi	r3,192
   40410:	00800234 	movhi	r2,8
   40414:	10842004 	addi	r2,r2,4224
   40418:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   4041c:	00c03004 	movi	r3,192
   40420:	00800234 	movhi	r2,8
   40424:	10843c04 	addi	r2,r2,4336
   40428:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   4042c:	00c03004 	movi	r3,192
   40430:	00800234 	movhi	r2,8
   40434:	10842404 	addi	r2,r2,4240
   40438:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   4043c:	00c03004 	movi	r3,192
   40440:	00800234 	movhi	r2,8
   40444:	10843804 	addi	r2,r2,4320
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40460:	defffa04 	addi	sp,sp,-24
   40464:	dfc00515 	stw	ra,20(sp)
   40468:	df000415 	stw	fp,16(sp)
   4046c:	df000404 	addi	fp,sp,16
   40470:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40474:	e0bfff03 	ldbu	r2,-4(fp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	10801918 	cmpnei	r2,r2,100
   40480:	1000051e 	bne	r2,zero,40498 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40484:	00800284 	movi	r2,10
   40488:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4048c:	00800284 	movi	r2,10
   40490:	e0bffd05 	stb	r2,-12(fp)
   40494:	00000b06 	br	404c4 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40498:	e0bfff03 	ldbu	r2,-4(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	01400284 	movi	r5,10
   404a4:	1009883a 	mov	r4,r2
   404a8:	00422500 	call	42250 <__udivsi3>
   404ac:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   404b0:	e0bfff03 	ldbu	r2,-4(fp)
   404b4:	e0fffd43 	ldbu	r3,-11(fp)
   404b8:	18fffda4 	muli	r3,r3,-10
   404bc:	10c5883a 	add	r2,r2,r3
   404c0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   404c4:	e0bfff43 	ldbu	r2,-3(fp)
   404c8:	10803fcc 	andi	r2,r2,255
   404cc:	10801918 	cmpnei	r2,r2,100
   404d0:	1000051e 	bne	r2,zero,404e8 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   404d4:	00800284 	movi	r2,10
   404d8:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   404dc:	00800284 	movi	r2,10
   404e0:	e0bffc85 	stb	r2,-14(fp)
   404e4:	00000b06 	br	40514 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   404e8:	e0bfff43 	ldbu	r2,-3(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	00422500 	call	42250 <__udivsi3>
   404fc:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   40500:	e0bfff43 	ldbu	r2,-3(fp)
   40504:	e0fffcc3 	ldbu	r3,-13(fp)
   40508:	18fffda4 	muli	r3,r3,-10
   4050c:	10c5883a 	add	r2,r2,r3
   40510:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   40514:	e0bfff83 	ldbu	r2,-2(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	10801918 	cmpnei	r2,r2,100
   40520:	1000051e 	bne	r2,zero,40538 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   40524:	00800284 	movi	r2,10
   40528:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   4052c:	00800284 	movi	r2,10
   40530:	e0bffc05 	stb	r2,-16(fp)
   40534:	00000b06 	br	40564 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   40538:	e0bfff83 	ldbu	r2,-2(fp)
   4053c:	10803fcc 	andi	r2,r2,255
   40540:	01400284 	movi	r5,10
   40544:	1009883a 	mov	r4,r2
   40548:	00422500 	call	42250 <__udivsi3>
   4054c:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   40550:	e0bfff83 	ldbu	r2,-2(fp)
   40554:	e0fffc43 	ldbu	r3,-15(fp)
   40558:	18fffda4 	muli	r3,r3,-10
   4055c:	10c5883a 	add	r2,r2,r3
   40560:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40564:	e0bffd43 	ldbu	r2,-11(fp)
   40568:	10c03fcc 	andi	r3,r2,255
   4056c:	00800134 	movhi	r2,4
   40570:	10907104 	addi	r2,r2,16836
   40574:	10c5883a 	add	r2,r2,r3
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40580:	e0bffd03 	ldbu	r2,-12(fp)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	00800134 	movhi	r2,4
   4058c:	10907104 	addi	r2,r2,16836
   40590:	10c5883a 	add	r2,r2,r3
   40594:	10800003 	ldbu	r2,0(r2)
   40598:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4059c:	e0bffcc3 	ldbu	r2,-13(fp)
   405a0:	10c03fcc 	andi	r3,r2,255
   405a4:	00800134 	movhi	r2,4
   405a8:	10907104 	addi	r2,r2,16836
   405ac:	10c5883a 	add	r2,r2,r3
   405b0:	10800003 	ldbu	r2,0(r2)
   405b4:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   405b8:	e0bffc83 	ldbu	r2,-14(fp)
   405bc:	10c03fcc 	andi	r3,r2,255
   405c0:	00800134 	movhi	r2,4
   405c4:	10907104 	addi	r2,r2,16836
   405c8:	10c5883a 	add	r2,r2,r3
   405cc:	10800003 	ldbu	r2,0(r2)
   405d0:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   405d4:	e0bffc43 	ldbu	r2,-15(fp)
   405d8:	10c03fcc 	andi	r3,r2,255
   405dc:	00800134 	movhi	r2,4
   405e0:	10907104 	addi	r2,r2,16836
   405e4:	10c5883a 	add	r2,r2,r3
   405e8:	10800003 	ldbu	r2,0(r2)
   405ec:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   405f0:	e0bffc03 	ldbu	r2,-16(fp)
   405f4:	10c03fcc 	andi	r3,r2,255
   405f8:	00800134 	movhi	r2,4
   405fc:	10907104 	addi	r2,r2,16836
   40600:	10c5883a 	add	r2,r2,r3
   40604:	10800003 	ldbu	r2,0(r2)
   40608:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   4060c:	e0bffec3 	ldbu	r2,-5(fp)
   40610:	10c03fcc 	andi	r3,r2,255
   40614:	00800234 	movhi	r2,8
   40618:	10841c04 	addi	r2,r2,4208
   4061c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   40620:	e0bffe83 	ldbu	r2,-6(fp)
   40624:	10c03fcc 	andi	r3,r2,255
   40628:	00800234 	movhi	r2,8
   4062c:	10844004 	addi	r2,r2,4352
   40630:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   40634:	e0bffe43 	ldbu	r2,-7(fp)
   40638:	10c03fcc 	andi	r3,r2,255
   4063c:	00800234 	movhi	r2,8
   40640:	10842004 	addi	r2,r2,4224
   40644:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   40648:	e0bffe03 	ldbu	r2,-8(fp)
   4064c:	10c03fcc 	andi	r3,r2,255
   40650:	00800234 	movhi	r2,8
   40654:	10843c04 	addi	r2,r2,4336
   40658:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   4065c:	e0bffdc3 	ldbu	r2,-9(fp)
   40660:	10c03fcc 	andi	r3,r2,255
   40664:	00800234 	movhi	r2,8
   40668:	10842404 	addi	r2,r2,4240
   4066c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40670:	e0bffd83 	ldbu	r2,-10(fp)
   40674:	10c03fcc 	andi	r3,r2,255
   40678:	00800234 	movhi	r2,8
   4067c:	10843804 	addi	r2,r2,4320
   40680:	10c00035 	stwio	r3,0(r2)
   40684:	0001883a 	nop
   40688:	e037883a 	mov	sp,fp
   4068c:	dfc00117 	ldw	ra,4(sp)
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00204 	addi	sp,sp,8
   40698:	f800283a 	ret

0004069c <testPWM>:
void check_return_code(unsigned int address, int return_code);
void testPWM(void);

void testPWM(void)

{
   4069c:	defffc04 	addi	sp,sp,-16
   406a0:	dfc00315 	stw	ra,12(sp)
   406a4:	df000215 	stw	fp,8(sp)
   406a8:	df000204 	addi	fp,sp,8
 
 unsigned int duty_cycle;
 int return_code = ALTERA_AVALON_PWM_OK;
   406ac:	e03fff15 	stw	zero,-4(fp)
 
 printf("Hello from the PWM test program.\n");
   406b0:	01000134 	movhi	r4,4
   406b4:	21107404 	addi	r4,r4,16848
   406b8:	00424140 	call	42414 <puts>
 printf("The starting values in the PWM registers are:\n");
   406bc:	01000134 	movhi	r4,4
   406c0:	21107d04 	addi	r4,r4,16884
   406c4:	00424140 	call	42414 <puts>
 printf("Period = %u\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE) );
   406c8:	00800234 	movhi	r2,8
   406cc:	10841804 	addi	r2,r2,4192
   406d0:	10800037 	ldwio	r2,0(r2)
   406d4:	100b883a 	mov	r5,r2
   406d8:	01000134 	movhi	r4,4
   406dc:	21108904 	addi	r4,r4,16932
   406e0:	00423480 	call	42348 <printf>
 printf("Duty cycle = %u\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE) );
   406e4:	00800234 	movhi	r2,8
   406e8:	10841904 	addi	r2,r2,4196
   406ec:	10800037 	ldwio	r2,0(r2)
   406f0:	100b883a 	mov	r5,r2
   406f4:	01000134 	movhi	r4,4
   406f8:	21108d04 	addi	r4,r4,16948
   406fc:	00423480 	call	42348 <printf>

 printf("\nNotice the pulsing LED on the development board.\n");
   40700:	01000134 	movhi	r4,4
   40704:	21109204 	addi	r4,r4,16968
   40708:	00424140 	call	42414 <puts>
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, 500000, 1);  
   4070c:	01800044 	movi	r6,1
   40710:	01400234 	movhi	r5,8
   40714:	29684804 	addi	r5,r5,-24288
   40718:	01000234 	movhi	r4,8
   4071c:	21041804 	addi	r4,r4,4192
   40720:	00402800 	call	40280 <altera_avalon_pwm_init>
   40724:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   40728:	e17fff17 	ldw	r5,-4(fp)
   4072c:	01000234 	movhi	r4,8
   40730:	21041804 	addi	r4,r4,4192
   40734:	00407ec0 	call	407ec <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   40738:	01000234 	movhi	r4,8
   4073c:	21041804 	addi	r4,r4,4192
   40740:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   40744:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   40748:	e17fff17 	ldw	r5,-4(fp)
   4074c:	01000234 	movhi	r4,8
   40750:	21041804 	addi	r4,r4,4192
   40754:	00407ec0 	call	407ec <check_return_code>

//init duty_cycle with the value written to duty_cycle register during initialization
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
   40758:	00800234 	movhi	r2,8
   4075c:	10841904 	addi	r2,r2,4196
   40760:	10800037 	ldwio	r2,0(r2)
   40764:	e0bffe15 	stw	r2,-8(fp)
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   40768:	00000906 	br	40790 <testPWM+0xf4>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   4076c:	e17ffe17 	ldw	r5,-8(fp)
   40770:	01000234 	movhi	r4,8
   40774:	21041804 	addi	r4,r4,4192
   40778:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
   4077c:	e0bfff15 	stw	r2,-4(fp)
      	check_return_code(PWM_BASE, return_code);
   40780:	e17fff17 	ldw	r5,-4(fp)
   40784:	01000234 	movhi	r4,8
   40788:	21041804 	addi	r4,r4,4192
   4078c:	00407ec0 	call	407ec <check_return_code>
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   40790:	e0fffe17 	ldw	r3,-8(fp)
   40794:	18800044 	addi	r2,r3,1
   40798:	e0bffe15 	stw	r2,-8(fp)
   4079c:	00800234 	movhi	r2,8
   407a0:	10841804 	addi	r2,r2,4192
   407a4:	10800037 	ldwio	r2,0(r2)
   407a8:	18bff036 	bltu	r3,r2,4076c <__alt_data_end+0xfffd876c>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   407ac:	00000406 	br	407c0 <testPWM+0x124>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   407b0:	e17ffe17 	ldw	r5,-8(fp)
   407b4:	01000234 	movhi	r4,8
   407b8:	21041804 	addi	r4,r4,4192
   407bc:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   407c0:	e0bffe17 	ldw	r2,-8(fp)
   407c4:	10bfffc4 	addi	r2,r2,-1
   407c8:	e0bffe15 	stw	r2,-8(fp)
   407cc:	e0bffe17 	ldw	r2,-8(fp)
   407d0:	108000a8 	cmpgeui	r2,r2,2
   407d4:	103ff61e 	bne	r2,zero,407b0 <__alt_data_end+0xfffd87b0>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
        check_return_code(PWM_BASE, return_code);
   407d8:	e17fff17 	ldw	r5,-4(fp)
   407dc:	01000234 	movhi	r4,8
   407e0:	21041804 	addi	r4,r4,4192
   407e4:	00407ec0 	call	407ec <check_return_code>
   }
   407e8:	003fdf06 	br	40768 <__alt_data_end+0xfffd8768>

000407ec <check_return_code>:
return 0;
}

void check_return_code(unsigned int address, int return_code)
{
   407ec:	defffc04 	addi	sp,sp,-16
   407f0:	dfc00315 	stw	ra,12(sp)
   407f4:	df000215 	stw	fp,8(sp)
   407f8:	df000204 	addi	fp,sp,8
   407fc:	e13ffe15 	stw	r4,-8(fp)
   40800:	e17fff15 	stw	r5,-4(fp)
	if(return_code != ALTERA_AVALON_PWM_OK)
   40804:	e0bfff17 	ldw	r2,-4(fp)
   40808:	10000326 	beq	r2,zero,40818 <check_return_code+0x2c>
      		print_error(address, return_code);	
   4080c:	e17fff17 	ldw	r5,-4(fp)
   40810:	e13ffe17 	ldw	r4,-8(fp)
   40814:	00408300 	call	40830 <print_error>
}
   40818:	0001883a 	nop
   4081c:	e037883a 	mov	sp,fp
   40820:	dfc00117 	ldw	ra,4(sp)
   40824:	df000017 	ldw	fp,0(sp)
   40828:	dec00204 	addi	sp,sp,8
   4082c:	f800283a 	ret

00040830 <print_error>:

void print_error(unsigned int address, int return_code)
{
   40830:	defffc04 	addi	sp,sp,-16
   40834:	dfc00315 	stw	ra,12(sp)
   40838:	df000215 	stw	fp,8(sp)
   4083c:	df000204 	addi	fp,sp,8
   40840:	e13ffe15 	stw	r4,-8(fp)
   40844:	e17fff15 	stw	r5,-4(fp)
	printf("Program Terminated Due to an error with Avalon PWM located at 0x%x:\n", address);
   40848:	e17ffe17 	ldw	r5,-8(fp)
   4084c:	01000134 	movhi	r4,4
   40850:	21109f04 	addi	r4,r4,17020
   40854:	00423480 	call	42348 <printf>
	switch(return_code)
   40858:	e0bfff17 	ldw	r2,-4(fp)
   4085c:	10ffffa0 	cmpeqi	r3,r2,-2
   40860:	1800161e 	bne	r3,zero,408bc <print_error+0x8c>
   40864:	10ffffe0 	cmpeqi	r3,r2,-1
   40868:	1800031e 	bne	r3,zero,40878 <print_error+0x48>
   4086c:	10bfff60 	cmpeqi	r2,r2,-3
   40870:	10001d1e 	bne	r2,zero,408e8 <print_error+0xb8>
   40874:	00002706 	br	40914 <print_error+0xe4>
	{
	case ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR:
		printf("The value in the clock cycle register must be greater than the value in the duty cycle register\n");
   40878:	01000134 	movhi	r4,4
   4087c:	2110b104 	addi	r4,r4,17092
   40880:	00424140 	call	42414 <puts>
		printf("Value in the Clock Divide Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address)); 
   40884:	e0bffe17 	ldw	r2,-8(fp)
   40888:	10800037 	ldwio	r2,0(r2)
   4088c:	100b883a 	mov	r5,r2
   40890:	01000134 	movhi	r4,4
   40894:	2110c904 	addi	r4,r4,17188
   40898:	00423480 	call	42348 <printf>
		printf("Value in the Duty Cycle Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(address));
   4089c:	e0bffe17 	ldw	r2,-8(fp)
   408a0:	10800104 	addi	r2,r2,4
   408a4:	10800037 	ldwio	r2,0(r2)
   408a8:	100b883a 	mov	r5,r2
   408ac:	01000134 	movhi	r4,4
   408b0:	2110d404 	addi	r4,r4,17232
   408b4:	00423480 	call	42348 <printf>
		break;
   408b8:	00001706 	br	40918 <print_error+0xe8>
        case ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR:
                printf("Unable to confirm that the PWM is enabled\n");
   408bc:	01000134 	movhi	r4,4
   408c0:	2110de04 	addi	r4,r4,17272
   408c4:	00424140 	call	42414 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   408c8:	e0bffe17 	ldw	r2,-8(fp)
   408cc:	10800204 	addi	r2,r2,8
   408d0:	10800037 	ldwio	r2,0(r2)
   408d4:	100b883a 	mov	r5,r2
   408d8:	01000134 	movhi	r4,4
   408dc:	2110e904 	addi	r4,r4,17316
   408e0:	00423480 	call	42348 <printf>
        	break;
   408e4:	00000c06 	br	40918 <print_error+0xe8>
        case ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR:
        	printf("Unable to confirm that the PWM is disabled\n");
   408e8:	01000134 	movhi	r4,4
   408ec:	2110f204 	addi	r4,r4,17352
   408f0:	00424140 	call	42414 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   408f4:	e0bffe17 	ldw	r2,-8(fp)
   408f8:	10800204 	addi	r2,r2,8
   408fc:	10800037 	ldwio	r2,0(r2)
   40900:	100b883a 	mov	r5,r2
   40904:	01000134 	movhi	r4,4
   40908:	2110e904 	addi	r4,r4,17316
   4090c:	00423480 	call	42348 <printf>
        	break;
   40910:	00000106 	br	40918 <print_error+0xe8>
        default:
        	break; 		     
   40914:	0001883a 	nop
	}

while(1);
   40918:	003fff06 	br	40918 <__alt_data_end+0xfffd8918>

0004091c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4091c:	defffb04 	addi	sp,sp,-20
   40920:	dfc00415 	stw	ra,16(sp)
   40924:	df000315 	stw	fp,12(sp)
   40928:	df000304 	addi	fp,sp,12
   4092c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   40930:	d8000015 	stw	zero,0(sp)
   40934:	000f883a 	mov	r7,zero
   40938:	e1bfff17 	ldw	r6,-4(fp)
   4093c:	01400044 	movi	r5,1
   40940:	0009883a 	mov	r4,zero
   40944:	0042b000 	call	42b00 <alt_ic_isr_register>
   40948:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4094c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40950:	e037883a 	mov	sp,fp
   40954:	dfc00117 	ldw	ra,4(sp)
   40958:	df000017 	ldw	fp,0(sp)
   4095c:	dec00204 	addi	sp,sp,8
   40960:	f800283a 	ret

00040964 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   40964:	deffff04 	addi	sp,sp,-4
   40968:	df000015 	stw	fp,0(sp)
   4096c:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   40970:	00c001c4 	movi	r3,7
   40974:	00800234 	movhi	r2,8
   40978:	10840904 	addi	r2,r2,4132
   4097c:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40980:	0001883a 	nop
   40984:	e037883a 	mov	sp,fp
   40988:	df000017 	ldw	fp,0(sp)
   4098c:	dec00104 	addi	sp,sp,4
   40990:	f800283a 	ret

00040994 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   40994:	defffb04 	addi	sp,sp,-20
   40998:	dfc00415 	stw	ra,16(sp)
   4099c:	df000315 	stw	fp,12(sp)
   409a0:	df000304 	addi	fp,sp,12
   409a4:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   409a8:	d8000015 	stw	zero,0(sp)
   409ac:	000f883a 	mov	r7,zero
   409b0:	e1bfff17 	ldw	r6,-4(fp)
   409b4:	01400084 	movi	r5,2
   409b8:	0009883a 	mov	r4,zero
   409bc:	0042b000 	call	42b00 <alt_ic_isr_register>
   409c0:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   409c4:	e0bffe03 	ldbu	r2,-8(fp)
}
   409c8:	e037883a 	mov	sp,fp
   409cc:	dfc00117 	ldw	ra,4(sp)
   409d0:	df000017 	ldw	fp,0(sp)
   409d4:	dec00204 	addi	sp,sp,8
   409d8:	f800283a 	ret

000409dc <buttonsRegisterISR>:


uint8_t buttonsRegisterISR(void (*buttonsISR)(void *isr_context)) {
   409dc:	defffb04 	addi	sp,sp,-20
   409e0:	dfc00415 	stw	ra,16(sp)
   409e4:	df000315 	stw	fp,12(sp)
   409e8:	df000304 	addi	fp,sp,12
   409ec:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
   409f0:	d8000015 	stw	zero,0(sp)
   409f4:	000f883a 	mov	r7,zero
   409f8:	e1bfff17 	ldw	r6,-4(fp)
   409fc:	014000c4 	movi	r5,3
   40a00:	0009883a 	mov	r4,zero
   40a04:	0042b000 	call	42b00 <alt_ic_isr_register>
   40a08:	e0bffe05 	stb	r2,-8(fp)
                                            BUTTONS_IRQ,
                                            buttonsISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40a0c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40a10:	e037883a 	mov	sp,fp
   40a14:	dfc00117 	ldw	ra,4(sp)
   40a18:	df000017 	ldw	fp,0(sp)
   40a1c:	dec00204 	addi	sp,sp,8
   40a20:	f800283a 	ret

00040a24 <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   40a24:	deffff04 	addi	sp,sp,-4
   40a28:	df000015 	stw	fp,0(sp)
   40a2c:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   40a30:	00ffffd4 	movui	r3,65535
   40a34:	00800234 	movhi	r2,8
   40a38:	10844a04 	addi	r2,r2,4392
   40a3c:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40a40:	0007883a 	mov	r3,zero
   40a44:	00800234 	movhi	r2,8
   40a48:	10844b04 	addi	r2,r2,4396
   40a4c:	10c00035 	stwio	r3,0(r2)
}
   40a50:	0001883a 	nop
   40a54:	e037883a 	mov	sp,fp
   40a58:	df000017 	ldw	fp,0(sp)
   40a5c:	dec00104 	addi	sp,sp,4
   40a60:	f800283a 	ret

00040a64 <buttonsEnableInterrupt>:

void buttonsEnableInterrupt(void) {
   40a64:	deffff04 	addi	sp,sp,-4
   40a68:	df000015 	stw	fp,0(sp)
   40a6c:	d839883a 	mov	fp,sp
  // enable all buttons to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, BUTTONS_INTERRUPT_MASK);
   40a70:	00c000c4 	movi	r3,3
   40a74:	00800234 	movhi	r2,8
   40a78:	10842a04 	addi	r2,r2,4264
   40a7c:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40a80:	0007883a 	mov	r3,zero
   40a84:	00800234 	movhi	r2,8
   40a88:	10842b04 	addi	r2,r2,4268
   40a8c:	10c00035 	stwio	r3,0(r2)
}
   40a90:	0001883a 	nop
   40a94:	e037883a 	mov	sp,fp
   40a98:	df000017 	ldw	fp,0(sp)
   40a9c:	dec00104 	addi	sp,sp,4
   40aa0:	f800283a 	ret

00040aa4 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40aa4:	deffff04 	addi	sp,sp,-4
   40aa8:	df000015 	stw	fp,0(sp)
   40aac:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40ab0:	0007883a 	mov	r3,zero
   40ab4:	00800234 	movhi	r2,8
   40ab8:	10843004 	addi	r2,r2,4288
   40abc:	10c00035 	stwio	r3,0(r2)
}
   40ac0:	0001883a 	nop
   40ac4:	e037883a 	mov	sp,fp
   40ac8:	df000017 	ldw	fp,0(sp)
   40acc:	dec00104 	addi	sp,sp,4
   40ad0:	f800283a 	ret

00040ad4 <alarmLEDon>:

void alarmLEDon(void) {
   40ad4:	deffff04 	addi	sp,sp,-4
   40ad8:	df000015 	stw	fp,0(sp)
   40adc:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40ae0:	00c00044 	movi	r3,1
   40ae4:	00800234 	movhi	r2,8
   40ae8:	10843004 	addi	r2,r2,4288
   40aec:	10c00035 	stwio	r3,0(r2)
}
   40af0:	0001883a 	nop
   40af4:	e037883a 	mov	sp,fp
   40af8:	df000017 	ldw	fp,0(sp)
   40afc:	dec00104 	addi	sp,sp,4
   40b00:	f800283a 	ret

00040b04 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40b04:	defffe04 	addi	sp,sp,-8
   40b08:	df000115 	stw	fp,4(sp)
   40b0c:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40b10:	00800234 	movhi	r2,8
   40b14:	10843004 	addi	r2,r2,4288
   40b18:	10800037 	ldwio	r2,0(r2)
   40b1c:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   40b20:	e0bfff03 	ldbu	r2,-4(fp)
   40b24:	10803fcc 	andi	r2,r2,255
   40b28:	1005003a 	cmpeq	r2,r2,zero
   40b2c:	10c03fcc 	andi	r3,r2,255
   40b30:	00800234 	movhi	r2,8
   40b34:	10843004 	addi	r2,r2,4288
   40b38:	10c00035 	stwio	r3,0(r2)
   40b3c:	0001883a 	nop
   40b40:	e037883a 	mov	sp,fp
   40b44:	df000017 	ldw	fp,0(sp)
   40b48:	dec00104 	addi	sp,sp,4
   40b4c:	f800283a 	ret

00040b50 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   40b50:	defffe04 	addi	sp,sp,-8
   40b54:	dfc00115 	stw	ra,4(sp)
   40b58:	df000015 	stw	fp,0(sp)
   40b5c:	d839883a 	mov	fp,sp

  testPWM();
   40b60:	004069c0 	call	4069c <testPWM>




  // initialization to "CLOCK" mode
  mode.invalid = FALSE;
   40b64:	d020c905 	stb	zero,-31964(gp)
  mode.display = DISP_CLOCK;
   40b68:	d020c945 	stb	zero,-31963(gp)
  mode.alarm = OFF;
   40b6c:	d020c985 	stb	zero,-31962(gp)
  mode.config.on = FALSE;
   40b70:	d020c9c5 	stb	zero,-31961(gp)
  mode.config.hour = FALSE;
   40b74:	d020ca05 	stb	zero,-31960(gp)
  mode.config.minute = FALSE;
   40b78:	d020ca45 	stb	zero,-31959(gp)

  alarmLEDoff();
   40b7c:	0040aa40 	call	40aa4 <alarmLEDoff>
  resetClockTime();
   40b80:	00418b40 	call	418b4 <resetClockTime>
  resetAlarmTime();
   40b84:	0041df40 	call	41df4 <resetAlarmTime>
  resetDisplay();
   40b88:	00403e00 	call	403e0 <resetDisplay>

  /* the callback ISR is passed in for the registration. When the timer peripheral
  fires its interrupt, timerSecondISR() will be called
  timerSecondISR can be preceded with or without & (both pass in the function address); 
  because a function’s name can also be used to get function's address */
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   40b8c:	01000134 	movhi	r4,4
   40b90:	21030b04 	addi	r4,r4,3116
   40b94:	004091c0 	call	4091c <timerSecondRegisterISR>
   40b98:	10803fcc 	andi	r2,r2,255
   40b9c:	1000051e 	bne	r2,zero,40bb4 <main+0x64>
    printf("timerSecondISR successively registered!\n");
   40ba0:	01000134 	movhi	r4,4
   40ba4:	2110fd04 	addi	r4,r4,17396
   40ba8:	00424140 	call	42414 <puts>
    timerSecondEnableInterrupt();
   40bac:	00409640 	call	40964 <timerSecondEnableInterrupt>
   40bb0:	00000306 	br	40bc0 <main+0x70>
  }
  else {
   printf("ERROR: timerSecondISR unsuccessively registered!\n");
   40bb4:	01000134 	movhi	r4,4
   40bb8:	21110704 	addi	r4,r4,17436
   40bbc:	00424140 	call	42414 <puts>
  }

  if (switchesRegisterISR(&switchesISR) == ISR_REGISTRATION_SUCCESS) {
   40bc0:	01000134 	movhi	r4,4
   40bc4:	21037d04 	addi	r4,r4,3572
   40bc8:	00409940 	call	40994 <switchesRegisterISR>
   40bcc:	10803fcc 	andi	r2,r2,255
   40bd0:	1000051e 	bne	r2,zero,40be8 <main+0x98>
    printf("switchesISR successively registered!\n");
   40bd4:	01000134 	movhi	r4,4
   40bd8:	21111404 	addi	r4,r4,17488
   40bdc:	00424140 	call	42414 <puts>
    switchesEnableInterrupt();
   40be0:	0040a240 	call	40a24 <switchesEnableInterrupt>
   40be4:	00000306 	br	40bf4 <main+0xa4>
  }
  else {
   printf("ERROR: switchesISR unsuccessively registered!\n");
   40be8:	01000134 	movhi	r4,4
   40bec:	21111e04 	addi	r4,r4,17528
   40bf0:	00424140 	call	42414 <puts>
  }

  if (buttonsRegisterISR(&buttonsISR) == ISR_REGISTRATION_SUCCESS) {
   40bf4:	01000134 	movhi	r4,4
   40bf8:	21041004 	addi	r4,r4,4160
   40bfc:	00409dc0 	call	409dc <buttonsRegisterISR>
   40c00:	10803fcc 	andi	r2,r2,255
   40c04:	1000051e 	bne	r2,zero,40c1c <main+0xcc>
    printf("buttonsISR successively registered!\n");
   40c08:	01000134 	movhi	r4,4
   40c0c:	21112a04 	addi	r4,r4,17576
   40c10:	00424140 	call	42414 <puts>
    buttonsEnableInterrupt();
   40c14:	0040a640 	call	40a64 <buttonsEnableInterrupt>
   40c18:	00000306 	br	40c28 <main+0xd8>
  }
  else {
   printf("ERROR: buttonsISR unsuccessively registered!\n");
   40c1c:	01000134 	movhi	r4,4
   40c20:	21113304 	addi	r4,r4,17612
   40c24:	00424140 	call	42414 <puts>





  while(1) {}  
   40c28:	003fff06 	br	40c28 <__alt_data_end+0xfffd8c28>

00040c2c <timerSecondISR>:


/* This is the main ISR that is called whenever the second timer fires its interrupt. 
This ISR lets us update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   40c2c:	defffb04 	addi	sp,sp,-20
   40c30:	dfc00415 	stw	ra,16(sp)
   40c34:	df000315 	stw	fp,12(sp)
   40c38:	df000304 	addi	fp,sp,12
   40c3c:	e13fff15 	stw	r4,-4(fp)

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   40c40:	0007883a 	mov	r3,zero
   40c44:	00800234 	movhi	r2,8
   40c48:	10840804 	addi	r2,r2,4128
   40c4c:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   40c50:	d0a0c943 	ldbu	r2,-31963(gp)
   40c54:	10803fcc 	andi	r2,r2,255
   40c58:	1000471e 	bne	r2,zero,40d78 <timerSecondISR+0x14c>

    if (mode.config.on == TRUE) {
   40c5c:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40c60:	10803fcc 	andi	r2,r2,255
   40c64:	10800058 	cmpnei	r2,r2,1
   40c68:	10000e1e 	bne	r2,zero,40ca4 <timerSecondISR+0x78>
      // since we're in config, we don't want to carry the digits
      clock = upClockSecond(CARRY_OFF);
   40c6c:	0009883a 	mov	r4,zero
   40c70:	00419700 	call	41970 <upClockSecond>
   40c74:	e0bffd05 	stb	r2,-12(fp)
   40c78:	1006d23a 	srli	r3,r2,8
   40c7c:	1809883a 	mov	r4,r3
   40c80:	00ffffc4 	movi	r3,-1
   40c84:	20c6703a 	and	r3,r4,r3
   40c88:	e0fffd45 	stb	r3,-11(fp)
   40c8c:	1004d43a 	srli	r2,r2,16
   40c90:	1007883a 	mov	r3,r2
   40c94:	00bfffc4 	movi	r2,-1
   40c98:	1884703a 	and	r2,r3,r2
   40c9c:	e0bffd85 	stb	r2,-10(fp)
   40ca0:	00003206 	br	40d6c <timerSecondISR+0x140>
    }
    else if (mode.config.on == FALSE) {
   40ca4:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40ca8:	10803fcc 	andi	r2,r2,255
   40cac:	10002c1e 	bne	r2,zero,40d60 <timerSecondISR+0x134>

      /* since we're not in config, the time should normally count and carry.
      This also means that if the alarm is turned ON, we need to check if it */
      clock = upClockSecond(CARRY_ON);
   40cb0:	01000044 	movi	r4,1
   40cb4:	00419700 	call	41970 <upClockSecond>
   40cb8:	e0bffd05 	stb	r2,-12(fp)
   40cbc:	1006d23a 	srli	r3,r2,8
   40cc0:	1809883a 	mov	r4,r3
   40cc4:	00ffffc4 	movi	r3,-1
   40cc8:	20c6703a 	and	r3,r4,r3
   40ccc:	e0fffd45 	stb	r3,-11(fp)
   40cd0:	1004d43a 	srli	r2,r2,16
   40cd4:	1007883a 	mov	r3,r2
   40cd8:	00bfffc4 	movi	r2,-1
   40cdc:	1884703a 	and	r2,r3,r2
   40ce0:	e0bffd85 	stb	r2,-10(fp)

      if (mode.alarm == ON) {
   40ce4:	d0a0c983 	ldbu	r2,-31962(gp)
   40ce8:	10803fcc 	andi	r2,r2,255
   40cec:	10800058 	cmpnei	r2,r2,1
   40cf0:	10001e1e 	bne	r2,zero,40d6c <timerSecondISR+0x140>
        // however, we do need to check whether or not the alarm should go off
        struct time alarm;
        alarm = getAlarmTime();
   40cf4:	0041e280 	call	41e28 <getAlarmTime>
   40cf8:	e0bffdc5 	stb	r2,-9(fp)
   40cfc:	1006d23a 	srli	r3,r2,8
   40d00:	1809883a 	mov	r4,r3
   40d04:	00ffffc4 	movi	r3,-1
   40d08:	20c6703a 	and	r3,r4,r3
   40d0c:	e0fffe05 	stb	r3,-8(fp)
   40d10:	1004d43a 	srli	r2,r2,16
   40d14:	1007883a 	mov	r3,r2
   40d18:	00bfffc4 	movi	r2,-1
   40d1c:	1884703a 	and	r2,r3,r2
   40d20:	e0bffe45 	stb	r2,-7(fp)

        /* to avoid executing the following block of code everytime and to only call playSong() once, 
        we have to check whether or not the time is currently at XX:XX:00. 
        At 0 seconds, thats when the alarm will be activated */
        if ( (clock.second == 0) && (alarm.hour == clock.hour) && (alarm.minute == clock.minute) ) {
   40d24:	e0bffd83 	ldbu	r2,-10(fp)
   40d28:	10803fcc 	andi	r2,r2,255
   40d2c:	10000f1e 	bne	r2,zero,40d6c <timerSecondISR+0x140>
   40d30:	e0fffdc3 	ldbu	r3,-9(fp)
   40d34:	e0bffd03 	ldbu	r2,-12(fp)
   40d38:	18c03fcc 	andi	r3,r3,255
   40d3c:	10803fcc 	andi	r2,r2,255
   40d40:	18800a1e 	bne	r3,r2,40d6c <timerSecondISR+0x140>
   40d44:	e0fffe03 	ldbu	r3,-8(fp)
   40d48:	e0bffd43 	ldbu	r2,-11(fp)
   40d4c:	18c03fcc 	andi	r3,r3,255
   40d50:	10803fcc 	andi	r2,r2,255
   40d54:	1880051e 	bne	r3,r2,40d6c <timerSecondISR+0x140>
          // start the alarm!
          playSong();
   40d58:	00415180 	call	41518 <playSong>
   40d5c:	00000306 	br	40d6c <timerSecondISR+0x140>
        }
      }

    }
    else {
      printf("ERROR: mode.config.on has an invalid value\n");
   40d60:	01000134 	movhi	r4,4
   40d64:	21113f04 	addi	r4,r4,17660
   40d68:	00424140 	call	42414 <puts>
    }

    // since the time is being displayed, we'll have to update the display
    updateDisplay(clock);
   40d6c:	e13ffd17 	ldw	r4,-12(fp)
   40d70:	00404600 	call	40460 <updateDisplay>
   40d74:	00000d06 	br	40dac <timerSecondISR+0x180>

  }
  else {
    // since the current time is not being displayed, we don't update the display
    clock = upClockSecond(CARRY_ON);
   40d78:	01000044 	movi	r4,1
   40d7c:	00419700 	call	41970 <upClockSecond>
   40d80:	e0bffd05 	stb	r2,-12(fp)
   40d84:	1006d23a 	srli	r3,r2,8
   40d88:	1809883a 	mov	r4,r3
   40d8c:	00ffffc4 	movi	r3,-1
   40d90:	20c6703a 	and	r3,r4,r3
   40d94:	e0fffd45 	stb	r3,-11(fp)
   40d98:	1004d43a 	srli	r2,r2,16
   40d9c:	1007883a 	mov	r3,r2
   40da0:	00bfffc4 	movi	r2,-1
   40da4:	1884703a 	and	r2,r3,r2
   40da8:	e0bffd85 	stb	r2,-10(fp)
  }

  // for debugging purposes:
  printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40dac:	e0bffd03 	ldbu	r2,-12(fp)
   40db0:	10803fcc 	andi	r2,r2,255
   40db4:	e0fffd43 	ldbu	r3,-11(fp)
   40db8:	18c03fcc 	andi	r3,r3,255
   40dbc:	e13ffd83 	ldbu	r4,-10(fp)
   40dc0:	21003fcc 	andi	r4,r4,255
   40dc4:	200f883a 	mov	r7,r4
   40dc8:	180d883a 	mov	r6,r3
   40dcc:	100b883a 	mov	r5,r2
   40dd0:	01000134 	movhi	r4,4
   40dd4:	21114a04 	addi	r4,r4,17704
   40dd8:	00423480 	call	42348 <printf>
}
   40ddc:	0001883a 	nop
   40de0:	e037883a 	mov	sp,fp
   40de4:	dfc00117 	ldw	ra,4(sp)
   40de8:	df000017 	ldw	fp,0(sp)
   40dec:	dec00204 	addi	sp,sp,8
   40df0:	f800283a 	ret

00040df4 <switchesISR>:


/* This ISR lets us determine what mode the user is currently requesting.
Once this mode is determined, the system will update the display to match what was requested,
and perform other actions such as turn on/off the alarm and on/off a song*/
void switchesISR(void* isr_context) {
   40df4:	defffa04 	addi	sp,sp,-24
   40df8:	dfc00515 	stw	ra,20(sp)
   40dfc:	df000415 	stw	fp,16(sp)
   40e00:	df000404 	addi	fp,sp,16
   40e04:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40e08:	0007883a 	mov	r3,zero
   40e0c:	00800234 	movhi	r2,8
   40e10:	10844b04 	addi	r2,r2,4396
   40e14:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40e18:	00415580 	call	41558 <determineMode>
   40e1c:	1009883a 	mov	r4,r2
   40e20:	180b883a 	mov	r5,r3
   40e24:	e13ffc05 	stb	r4,-16(fp)
   40e28:	2004d23a 	srli	r2,r4,8
   40e2c:	1007883a 	mov	r3,r2
   40e30:	00bfffc4 	movi	r2,-1
   40e34:	1884703a 	and	r2,r3,r2
   40e38:	e0bffc45 	stb	r2,-15(fp)
   40e3c:	2004d43a 	srli	r2,r4,16
   40e40:	1007883a 	mov	r3,r2
   40e44:	00bfffc4 	movi	r2,-1
   40e48:	1884703a 	and	r2,r3,r2
   40e4c:	e0bffc85 	stb	r2,-14(fp)
   40e50:	2004d63a 	srli	r2,r4,24
   40e54:	e0bffcc5 	stb	r2,-13(fp)
   40e58:	e17ffd05 	stb	r5,-12(fp)
   40e5c:	2804d23a 	srli	r2,r5,8
   40e60:	1007883a 	mov	r3,r2
   40e64:	00bfffc4 	movi	r2,-1
   40e68:	1884703a 	and	r2,r3,r2
   40e6c:	e0bffd45 	stb	r2,-11(fp)

  /* if an invalid mode is requested, nothing needs to change except for the mode struct
  if however a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40e70:	e0bffc03 	ldbu	r2,-16(fp)
   40e74:	10803fcc 	andi	r2,r2,255
   40e78:	10005c1e 	bne	r2,zero,40fec <switchesISR+0x1f8>

    /* if we're already displaying the same mode that was requested, we don't need 
    need to update the display. Thus we can skip the following if statement*/
    if (mode_request.display != mode.display) {
   40e7c:	e0fffc43 	ldbu	r3,-15(fp)
   40e80:	d0a0c943 	ldbu	r2,-31963(gp)
   40e84:	18c03fcc 	andi	r3,r3,255
   40e88:	10803fcc 	andi	r2,r2,255
   40e8c:	18804826 	beq	r3,r2,40fb0 <switchesISR+0x1bc>
      although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well. */
      struct time display;

      switch(mode_request.display) {
   40e90:	e0bffc43 	ldbu	r2,-15(fp)
   40e94:	10803fcc 	andi	r2,r2,255
   40e98:	10c00060 	cmpeqi	r3,r2,1
   40e9c:	1800161e 	bne	r3,zero,40ef8 <switchesISR+0x104>
   40ea0:	10c00088 	cmpgei	r3,r2,2
   40ea4:	1800021e 	bne	r3,zero,40eb0 <switchesISR+0xbc>
   40ea8:	10000626 	beq	r2,zero,40ec4 <switchesISR+0xd0>
   40eac:	00002e06 	br	40f68 <switchesISR+0x174>
   40eb0:	10c000a0 	cmpeqi	r3,r2,2
   40eb4:	18001d1e 	bne	r3,zero,40f2c <switchesISR+0x138>
   40eb8:	108000e0 	cmpeqi	r2,r2,3
   40ebc:	1000221e 	bne	r2,zero,40f48 <switchesISR+0x154>
   40ec0:	00002906 	br	40f68 <switchesISR+0x174>
        case DISP_CLOCK: 
          display = getClockTime();
   40ec4:	00418ec0 	call	418ec <getClockTime>
   40ec8:	e0bffd85 	stb	r2,-10(fp)
   40ecc:	1006d23a 	srli	r3,r2,8
   40ed0:	1809883a 	mov	r4,r3
   40ed4:	00ffffc4 	movi	r3,-1
   40ed8:	20c6703a 	and	r3,r4,r3
   40edc:	e0fffdc5 	stb	r3,-9(fp)
   40ee0:	1004d43a 	srli	r2,r2,16
   40ee4:	1007883a 	mov	r3,r2
   40ee8:	00bfffc4 	movi	r2,-1
   40eec:	1884703a 	and	r2,r3,r2
   40ef0:	e0bffe05 	stb	r2,-8(fp)
          break;
   40ef4:	00001f06 	br	40f74 <switchesISR+0x180>

        case DISP_ALARM:
          display = getAlarmTime();
   40ef8:	0041e280 	call	41e28 <getAlarmTime>
   40efc:	e0bffd85 	stb	r2,-10(fp)
   40f00:	1006d23a 	srli	r3,r2,8
   40f04:	1809883a 	mov	r4,r3
   40f08:	00ffffc4 	movi	r3,-1
   40f0c:	20c6703a 	and	r3,r4,r3
   40f10:	e0fffdc5 	stb	r3,-9(fp)
   40f14:	1004d43a 	srli	r2,r2,16
   40f18:	1007883a 	mov	r3,r2
   40f1c:	00bfffc4 	movi	r2,-1
   40f20:	1884703a 	and	r2,r3,r2
   40f24:	e0bffe05 	stb	r2,-8(fp)
          break;
   40f28:	00001206 	br	40f74 <switchesISR+0x180>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the volume exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40f2c:	00801904 	movi	r2,100
   40f30:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40f34:	00801904 	movi	r2,100
   40f38:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getVolume();
   40f3c:	00414280 	call	41428 <getVolume>
   40f40:	e0bffe05 	stb	r2,-8(fp)
          break;
   40f44:	00000b06 	br	40f74 <switchesISR+0x180>

        case DISP_SONG:
          /* the current song will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the song index exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40f48:	00801904 	movi	r2,100
   40f4c:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40f50:	00801904 	movi	r2,100
   40f54:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getSong();
   40f58:	00414a00 	call	414a0 <getSong>
   40f5c:	e0bffe05 	stb	r2,-8(fp)
          playSong();
   40f60:	00415180 	call	41518 <playSong>
          break;
   40f64:	00000306 	br	40f74 <switchesISR+0x180>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40f68:	01000134 	movhi	r4,4
   40f6c:	21115404 	addi	r4,r4,17744
   40f70:	00424140 	call	42414 <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40f74:	e0bffd8b 	ldhu	r2,-10(fp)
   40f78:	e0fffe0b 	ldhu	r3,-8(fp)
   40f7c:	18c03fcc 	andi	r3,r3,255
   40f80:	1806943a 	slli	r3,r3,16
   40f84:	1888b03a 	or	r4,r3,r2
   40f88:	0007883a 	mov	r3,zero
   40f8c:	00804034 	movhi	r2,256
   40f90:	10bfffc4 	addi	r2,r2,-1
   40f94:	2084703a 	and	r2,r4,r2
   40f98:	18ffc02c 	andhi	r3,r3,65280
   40f9c:	1884b03a 	or	r2,r3,r2
   40fa0:	1007883a 	mov	r3,r2
   40fa4:	1809883a 	mov	r4,r3
   40fa8:	00404600 	call	40460 <updateDisplay>
   40fac:	00000306 	br	40fbc <switchesISR+0x1c8>
    }

    // (mode_request.display == mode.display)
    else { 
      printf("The requested display mode is already active\n");
   40fb0:	01000134 	movhi	r4,4
   40fb4:	21115f04 	addi	r4,r4,17788
   40fb8:	00424140 	call	42414 <puts>
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40fbc:	e0bffc83 	ldbu	r2,-14(fp)
   40fc0:	10803fcc 	andi	r2,r2,255
   40fc4:	1000071e 	bne	r2,zero,40fe4 <switchesISR+0x1f0>
      alarmLEDoff();
   40fc8:	0040aa40 	call	40aa4 <alarmLEDoff>
      /* only stop the song if we're not in the song selection display.
      otherwise, the song that is being sampled while on this display will suddenly
      stop playing. A song should only stop playing if an armed alarm went off,
      and then a user decides to turn off said alarm, OR if a user changes from
      the song display menu to any other menu */
      if (mode_request.display != DISP_SONG) {
   40fcc:	e0bffc43 	ldbu	r2,-15(fp)
   40fd0:	10803fcc 	andi	r2,r2,255
   40fd4:	108000e0 	cmpeqi	r2,r2,3
   40fd8:	1000071e 	bne	r2,zero,40ff8 <switchesISR+0x204>
        stopSong();
   40fdc:	00415380 	call	41538 <stopSong>
   40fe0:	00000506 	br	40ff8 <switchesISR+0x204>
      }
    }

    // (mode_request.alarm == ON)
    else {
      alarmLEDon();
   40fe4:	0040ad40 	call	40ad4 <alarmLEDon>
   40fe8:	00000306 	br	40ff8 <switchesISR+0x204>
    }
  }

  // (mode_request.invalid == TRUE)
  else {
    printf("ERROR: An invalid mode was requested\n");
   40fec:	01000134 	movhi	r4,4
   40ff0:	21116b04 	addi	r4,r4,17836
   40ff4:	00424140 	call	42414 <puts>
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40ff8:	e0bffc03 	ldbu	r2,-16(fp)
   40ffc:	d0a0c905 	stb	r2,-31964(gp)
   41000:	e0bffc43 	ldbu	r2,-15(fp)
   41004:	d0a0c945 	stb	r2,-31963(gp)
   41008:	e0bffc83 	ldbu	r2,-14(fp)
   4100c:	d0a0c985 	stb	r2,-31962(gp)
   41010:	e0bffcc3 	ldbu	r2,-13(fp)
   41014:	d0a0c9c5 	stb	r2,-31961(gp)
   41018:	e0bffd03 	ldbu	r2,-12(fp)
   4101c:	d0a0ca05 	stb	r2,-31960(gp)
   41020:	e0bffd43 	ldbu	r2,-11(fp)
   41024:	d0a0ca45 	stb	r2,-31959(gp)
  return;
   41028:	0001883a 	nop

}
   4102c:	e037883a 	mov	sp,fp
   41030:	dfc00117 	ldw	ra,4(sp)
   41034:	df000017 	ldw	fp,0(sp)
   41038:	dec00204 	addi	sp,sp,8
   4103c:	f800283a 	ret

00041040 <buttonsISR>:


/* This ISR lets us determine what sort of operation the user wants to perform for the
correctly active display mode (increase/decrease clock time, song select, etc.).
Once the requested operation is determined, the system will update the display to match what was requested */
void buttonsISR(void* isr_context) {
   41040:	defffc04 	addi	sp,sp,-16
   41044:	dfc00315 	stw	ra,12(sp)
   41048:	df000215 	stw	fp,8(sp)
   4104c:	df000204 	addi	fp,sp,8
   41050:	e13fff15 	stw	r4,-4(fp)

  // if the user is not currently configuring something (time, alarm, etc), then a button press won't do anything
  if (mode.config.on == FALSE) {
   41054:	d0a0c9c3 	ldbu	r2,-31961(gp)
   41058:	10803fcc 	andi	r2,r2,255
   4105c:	1000081e 	bne	r2,zero,41080 <buttonsISR+0x40>
    printf("ERROR: Not currently in config mode! Button press ignored\n");
   41060:	01000134 	movhi	r4,4
   41064:	21117504 	addi	r4,r4,17876
   41068:	00424140 	call	42414 <puts>
    // we can't forget to reset edge capture register by writing to it though!
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   4106c:	0007883a 	mov	r3,zero
   41070:	00800234 	movhi	r2,8
   41074:	10842b04 	addi	r2,r2,4268
   41078:	10c00035 	stwio	r3,0(r2)
    return;
   4107c:	0000e506 	br	41414 <buttonsISR+0x3d4>
  }
  else {
    // determine the operation requested based on the buttons state
    uint8_t buttons_state = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
   41080:	00800234 	movhi	r2,8
   41084:	10842b04 	addi	r2,r2,4268
   41088:	10800037 	ldwio	r2,0(r2)
   4108c:	e0bffe05 	stb	r2,-8(fp)
      struct time display;

      /* what happens next is entirely dependant on what the current display mode is, whether or not 
      the button press was an UP or DOWN operation, and finally if the config was for the minute or hour time units.
      This scary case statement figures it out */
      switch(mode.display) {
   41090:	d0a0c943 	ldbu	r2,-31963(gp)
   41094:	10803fcc 	andi	r2,r2,255
   41098:	10c00060 	cmpeqi	r3,r2,1
   4109c:	1800551e 	bne	r3,zero,411f4 <buttonsISR+0x1b4>
   410a0:	10c00088 	cmpgei	r3,r2,2
   410a4:	1800021e 	bne	r3,zero,410b0 <buttonsISR+0x70>
   410a8:	10000626 	beq	r2,zero,410c4 <buttonsISR+0x84>
   410ac:	0000bc06 	br	413a0 <buttonsISR+0x360>
   410b0:	10c000a0 	cmpeqi	r3,r2,2
   410b4:	1800991e 	bne	r3,zero,4131c <buttonsISR+0x2dc>
   410b8:	108000e0 	cmpeqi	r2,r2,3
   410bc:	1000a71e 	bne	r2,zero,4135c <buttonsISR+0x31c>
   410c0:	0000b706 	br	413a0 <buttonsISR+0x360>

        case DISP_CLOCK: 

          if (buttons_state == UP) {
   410c4:	e0bffe03 	ldbu	r2,-8(fp)
   410c8:	10800098 	cmpnei	r2,r2,2
   410cc:	1000231e 	bne	r2,zero,4115c <buttonsISR+0x11c>
            if (mode.config.hour == TRUE) {
   410d0:	d0a0ca03 	ldbu	r2,-31960(gp)
   410d4:	10803fcc 	andi	r2,r2,255
   410d8:	10800058 	cmpnei	r2,r2,1
   410dc:	10000d1e 	bne	r2,zero,41114 <buttonsISR+0xd4>
              display = upClockHour();
   410e0:	0041b040 	call	41b04 <upClockHour>
   410e4:	e0bffe45 	stb	r2,-7(fp)
   410e8:	1006d23a 	srli	r3,r2,8
   410ec:	1809883a 	mov	r4,r3
   410f0:	00ffffc4 	movi	r3,-1
   410f4:	20c6703a 	and	r3,r4,r3
   410f8:	e0fffe85 	stb	r3,-6(fp)
   410fc:	1004d43a 	srli	r2,r2,16
   41100:	1007883a 	mov	r3,r2
   41104:	00bfffc4 	movi	r2,-1
   41108:	1884703a 	and	r2,r3,r2
   4110c:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41110:	0000a706 	br	413b0 <buttonsISR+0x370>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upClockHour();
            }
            else if (mode.config.minute == TRUE) {
   41114:	d0a0ca43 	ldbu	r2,-31959(gp)
   41118:	10803fcc 	andi	r2,r2,255
   4111c:	10800058 	cmpnei	r2,r2,1
   41120:	1000a31e 	bne	r2,zero,413b0 <buttonsISR+0x370>
              display = upClockMinute(CARRY_OFF);
   41124:	0009883a 	mov	r4,zero
   41128:	0041a3c0 	call	41a3c <upClockMinute>
   4112c:	e0bffe45 	stb	r2,-7(fp)
   41130:	1006d23a 	srli	r3,r2,8
   41134:	1809883a 	mov	r4,r3
   41138:	00ffffc4 	movi	r3,-1
   4113c:	20c6703a 	and	r3,r4,r3
   41140:	e0fffe85 	stb	r3,-6(fp)
   41144:	1004d43a 	srli	r2,r2,16
   41148:	1007883a 	mov	r3,r2
   4114c:	00bfffc4 	movi	r2,-1
   41150:	1884703a 	and	r2,r3,r2
   41154:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41158:	00009506 	br	413b0 <buttonsISR+0x370>
            }
            else if (mode.config.minute == TRUE) {
              display = upClockMinute(CARRY_OFF);
            }
          }
          else if (buttons_state == DOWN) {
   4115c:	e0bffe03 	ldbu	r2,-8(fp)
   41160:	10800058 	cmpnei	r2,r2,1
   41164:	1000921e 	bne	r2,zero,413b0 <buttonsISR+0x370>
            if (mode.config.hour == TRUE) {
   41168:	d0a0ca03 	ldbu	r2,-31960(gp)
   4116c:	10803fcc 	andi	r2,r2,255
   41170:	10800058 	cmpnei	r2,r2,1
   41174:	10000d1e 	bne	r2,zero,411ac <buttonsISR+0x16c>
              display = downClockHour();
   41178:	0041d480 	call	41d48 <downClockHour>
   4117c:	e0bffe45 	stb	r2,-7(fp)
   41180:	1006d23a 	srli	r3,r2,8
   41184:	1809883a 	mov	r4,r3
   41188:	00ffffc4 	movi	r3,-1
   4118c:	20c6703a 	and	r3,r4,r3
   41190:	e0fffe85 	stb	r3,-6(fp)
   41194:	1004d43a 	srli	r2,r2,16
   41198:	1007883a 	mov	r3,r2
   4119c:	00bfffc4 	movi	r2,-1
   411a0:	1884703a 	and	r2,r3,r2
   411a4:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   411a8:	00008106 	br	413b0 <buttonsISR+0x370>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downClockHour();
            }
            else if (mode.config.minute == TRUE) {
   411ac:	d0a0ca43 	ldbu	r2,-31959(gp)
   411b0:	10803fcc 	andi	r2,r2,255
   411b4:	10800058 	cmpnei	r2,r2,1
   411b8:	10007d1e 	bne	r2,zero,413b0 <buttonsISR+0x370>
              display = downClockMinute(CARRY_OFF);
   411bc:	0009883a 	mov	r4,zero
   411c0:	0041c800 	call	41c80 <downClockMinute>
   411c4:	e0bffe45 	stb	r2,-7(fp)
   411c8:	1006d23a 	srli	r3,r2,8
   411cc:	1809883a 	mov	r4,r3
   411d0:	00ffffc4 	movi	r3,-1
   411d4:	20c6703a 	and	r3,r4,r3
   411d8:	e0fffe85 	stb	r3,-6(fp)
   411dc:	1004d43a 	srli	r2,r2,16
   411e0:	1007883a 	mov	r3,r2
   411e4:	00bfffc4 	movi	r2,-1
   411e8:	1884703a 	and	r2,r3,r2
   411ec:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   411f0:	00006f06 	br	413b0 <buttonsISR+0x370>

        case DISP_ALARM:

          if (buttons_state == UP) {
   411f4:	e0bffe03 	ldbu	r2,-8(fp)
   411f8:	10800098 	cmpnei	r2,r2,2
   411fc:	1000221e 	bne	r2,zero,41288 <buttonsISR+0x248>
            if (mode.config.hour == TRUE) {
   41200:	d0a0ca03 	ldbu	r2,-31960(gp)
   41204:	10803fcc 	andi	r2,r2,255
   41208:	10800058 	cmpnei	r2,r2,1
   4120c:	10000d1e 	bne	r2,zero,41244 <buttonsISR+0x204>
              display = upAlarmHour();
   41210:	0041f540 	call	41f54 <upAlarmHour>
   41214:	e0bffe45 	stb	r2,-7(fp)
   41218:	1006d23a 	srli	r3,r2,8
   4121c:	1809883a 	mov	r4,r3
   41220:	00ffffc4 	movi	r3,-1
   41224:	20c6703a 	and	r3,r4,r3
   41228:	e0fffe85 	stb	r3,-6(fp)
   4122c:	1004d43a 	srli	r2,r2,16
   41230:	1007883a 	mov	r3,r2
   41234:	00bfffc4 	movi	r2,-1
   41238:	1884703a 	and	r2,r3,r2
   4123c:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41240:	00005d06 	br	413b8 <buttonsISR+0x378>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   41244:	d0a0ca43 	ldbu	r2,-31959(gp)
   41248:	10803fcc 	andi	r2,r2,255
   4124c:	10800058 	cmpnei	r2,r2,1
   41250:	1000591e 	bne	r2,zero,413b8 <buttonsISR+0x378>
              display = upAlarmMinute();
   41254:	0041eac0 	call	41eac <upAlarmMinute>
   41258:	e0bffe45 	stb	r2,-7(fp)
   4125c:	1006d23a 	srli	r3,r2,8
   41260:	1809883a 	mov	r4,r3
   41264:	00ffffc4 	movi	r3,-1
   41268:	20c6703a 	and	r3,r4,r3
   4126c:	e0fffe85 	stb	r3,-6(fp)
   41270:	1004d43a 	srli	r2,r2,16
   41274:	1007883a 	mov	r3,r2
   41278:	00bfffc4 	movi	r2,-1
   4127c:	1884703a 	and	r2,r3,r2
   41280:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41284:	00004c06 	br	413b8 <buttonsISR+0x378>
            }
            else if (mode.config.minute == TRUE) {
              display = upAlarmMinute();
            }
          }
          else if (buttons_state == DOWN) {
   41288:	e0bffe03 	ldbu	r2,-8(fp)
   4128c:	10800058 	cmpnei	r2,r2,1
   41290:	1000491e 	bne	r2,zero,413b8 <buttonsISR+0x378>
            if (mode.config.hour == TRUE) {
   41294:	d0a0ca03 	ldbu	r2,-31960(gp)
   41298:	10803fcc 	andi	r2,r2,255
   4129c:	10800058 	cmpnei	r2,r2,1
   412a0:	10000d1e 	bne	r2,zero,412d8 <buttonsISR+0x298>
              display = downAlarmHour();
   412a4:	00420ac0 	call	420ac <downAlarmHour>
   412a8:	e0bffe45 	stb	r2,-7(fp)
   412ac:	1006d23a 	srli	r3,r2,8
   412b0:	1809883a 	mov	r4,r3
   412b4:	00ffffc4 	movi	r3,-1
   412b8:	20c6703a 	and	r3,r4,r3
   412bc:	e0fffe85 	stb	r3,-6(fp)
   412c0:	1004d43a 	srli	r2,r2,16
   412c4:	1007883a 	mov	r3,r2
   412c8:	00bfffc4 	movi	r2,-1
   412cc:	1884703a 	and	r2,r3,r2
   412d0:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   412d4:	00003806 	br	413b8 <buttonsISR+0x378>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   412d8:	d0a0ca43 	ldbu	r2,-31959(gp)
   412dc:	10803fcc 	andi	r2,r2,255
   412e0:	10800058 	cmpnei	r2,r2,1
   412e4:	1000341e 	bne	r2,zero,413b8 <buttonsISR+0x378>
              display = downAlarmMinute();
   412e8:	00420040 	call	42004 <downAlarmMinute>
   412ec:	e0bffe45 	stb	r2,-7(fp)
   412f0:	1006d23a 	srli	r3,r2,8
   412f4:	1809883a 	mov	r4,r3
   412f8:	00ffffc4 	movi	r3,-1
   412fc:	20c6703a 	and	r3,r4,r3
   41300:	e0fffe85 	stb	r3,-6(fp)
   41304:	1004d43a 	srli	r2,r2,16
   41308:	1007883a 	mov	r3,r2
   4130c:	00bfffc4 	movi	r2,-1
   41310:	1884703a 	and	r2,r3,r2
   41314:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   41318:	00002706 	br	413b8 <buttonsISR+0x378>


        case DISP_VOLUME:

          display.hour = DONT_DISPLAY;
   4131c:	00801904 	movi	r2,100
   41320:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   41324:	00801904 	movi	r2,100
   41328:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   4132c:	e0bffe03 	ldbu	r2,-8(fp)
   41330:	10800098 	cmpnei	r2,r2,2
   41334:	1000031e 	bne	r2,zero,41344 <buttonsISR+0x304>
            display.second = upVolume();
   41338:	00414480 	call	41448 <upVolume>
   4133c:	e0bffec5 	stb	r2,-5(fp)
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   41340:	00001f06 	br	413c0 <buttonsISR+0x380>
          display.hour = DONT_DISPLAY;
          display.minute = DONT_DISPLAY;
          if (buttons_state == UP) {
            display.second = upVolume();
          }
          else if (buttons_state == DOWN) {
   41344:	e0bffe03 	ldbu	r2,-8(fp)
   41348:	10800058 	cmpnei	r2,r2,1
   4134c:	10001c1e 	bne	r2,zero,413c0 <buttonsISR+0x380>
            display.second = downVolume();
   41350:	00414740 	call	41474 <downVolume>
   41354:	e0bffec5 	stb	r2,-5(fp)
          }
          
          break;
   41358:	00001906 	br	413c0 <buttonsISR+0x380>

        case DISP_SONG:

          display.hour = DONT_DISPLAY;
   4135c:	00801904 	movi	r2,100
   41360:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   41364:	00801904 	movi	r2,100
   41368:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   4136c:	e0bffe03 	ldbu	r2,-8(fp)
   41370:	10800098 	cmpnei	r2,r2,2
   41374:	1000031e 	bne	r2,zero,41384 <buttonsISR+0x344>
            display.second = upSong();
   41378:	00414c00 	call	414c0 <upSong>
   4137c:	e0bffec5 	stb	r2,-5(fp)
   41380:	00000506 	br	41398 <buttonsISR+0x358>
          }
          else if (buttons_state == DOWN) {
   41384:	e0bffe03 	ldbu	r2,-8(fp)
   41388:	10800058 	cmpnei	r2,r2,1
   4138c:	1000021e 	bne	r2,zero,41398 <buttonsISR+0x358>
            display.second = downSong();
   41390:	00414ec0 	call	414ec <downSong>
   41394:	e0bffec5 	stb	r2,-5(fp)
          }
          playSong();
   41398:	00415180 	call	41518 <playSong>
          break;
   4139c:	00000906 	br	413c4 <buttonsISR+0x384>

        default:
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
   413a0:	01000134 	movhi	r4,4
   413a4:	21118404 	addi	r4,r4,17936
   413a8:	00424140 	call	42414 <puts>
   413ac:	00000506 	br	413c4 <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   413b0:	0001883a 	nop
   413b4:	00000306 	br	413c4 <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   413b8:	0001883a 	nop
   413bc:	00000106 	br	413c4 <buttonsISR+0x384>
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   413c0:	0001883a 	nop
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   413c4:	e0bffe43 	ldbu	r2,-7(fp)
   413c8:	e0fffe83 	ldbu	r3,-6(fp)
   413cc:	1806923a 	slli	r3,r3,8
   413d0:	1884b03a 	or	r2,r3,r2
   413d4:	e0fffec3 	ldbu	r3,-5(fp)
   413d8:	1806943a 	slli	r3,r3,16
   413dc:	1888b03a 	or	r4,r3,r2
   413e0:	0007883a 	mov	r3,zero
   413e4:	00804034 	movhi	r2,256
   413e8:	10bfffc4 	addi	r2,r2,-1
   413ec:	2084703a 	and	r2,r4,r2
   413f0:	18ffc02c 	andhi	r3,r3,65280
   413f4:	1884b03a 	or	r2,r3,r2
   413f8:	1007883a 	mov	r3,r2
   413fc:	1809883a 	mov	r4,r3
   41400:	00404600 	call	40460 <updateDisplay>
    }

  // we can't forget to reset edge capture register by writing to it!
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   41404:	0007883a 	mov	r3,zero
   41408:	00800234 	movhi	r2,8
   4140c:	10842b04 	addi	r2,r2,4268
   41410:	10c00035 	stwio	r3,0(r2)

}
   41414:	e037883a 	mov	sp,fp
   41418:	dfc00117 	ldw	ra,4(sp)
   4141c:	df000017 	ldw	fp,0(sp)
   41420:	dec00204 	addi	sp,sp,8
   41424:	f800283a 	ret

00041428 <getVolume>:
#include "pwm.h"

uint8_t volume = 5;

uint8_t getVolume(void) {
   41428:	deffff04 	addi	sp,sp,-4
   4142c:	df000015 	stw	fp,0(sp)
   41430:	d839883a 	mov	fp,sp
  return volume;
   41434:	d0a00003 	ldbu	r2,-32768(gp)
}
   41438:	e037883a 	mov	sp,fp
   4143c:	df000017 	ldw	fp,0(sp)
   41440:	dec00104 	addi	sp,sp,4
   41444:	f800283a 	ret

00041448 <upVolume>:

uint8_t upVolume(void) {
   41448:	deffff04 	addi	sp,sp,-4
   4144c:	df000015 	stw	fp,0(sp)
   41450:	d839883a 	mov	fp,sp
  volume++;
   41454:	d0a00003 	ldbu	r2,-32768(gp)
   41458:	10800044 	addi	r2,r2,1
   4145c:	d0a00005 	stb	r2,-32768(gp)
  return volume;
   41460:	d0a00003 	ldbu	r2,-32768(gp)
}
   41464:	e037883a 	mov	sp,fp
   41468:	df000017 	ldw	fp,0(sp)
   4146c:	dec00104 	addi	sp,sp,4
   41470:	f800283a 	ret

00041474 <downVolume>:

uint8_t downVolume(void) {
   41474:	deffff04 	addi	sp,sp,-4
   41478:	df000015 	stw	fp,0(sp)
   4147c:	d839883a 	mov	fp,sp
  volume--;
   41480:	d0a00003 	ldbu	r2,-32768(gp)
   41484:	10bfffc4 	addi	r2,r2,-1
   41488:	d0a00005 	stb	r2,-32768(gp)
  return volume;
   4148c:	d0a00003 	ldbu	r2,-32768(gp)
   41490:	e037883a 	mov	sp,fp
   41494:	df000017 	ldw	fp,0(sp)
   41498:	dec00104 	addi	sp,sp,4
   4149c:	f800283a 	ret

000414a0 <getSong>:
#include "rtttl.h"

uint8_t song_index = 0;

uint8_t getSong(void) {
   414a0:	deffff04 	addi	sp,sp,-4
   414a4:	df000015 	stw	fp,0(sp)
   414a8:	d839883a 	mov	fp,sp
  return song_index;
   414ac:	d0a0ca83 	ldbu	r2,-31958(gp)
}
   414b0:	e037883a 	mov	sp,fp
   414b4:	df000017 	ldw	fp,0(sp)
   414b8:	dec00104 	addi	sp,sp,4
   414bc:	f800283a 	ret

000414c0 <upSong>:

uint8_t upSong(void) {
   414c0:	deffff04 	addi	sp,sp,-4
   414c4:	df000015 	stw	fp,0(sp)
   414c8:	d839883a 	mov	fp,sp
  song_index++;
   414cc:	d0a0ca83 	ldbu	r2,-31958(gp)
   414d0:	10800044 	addi	r2,r2,1
   414d4:	d0a0ca85 	stb	r2,-31958(gp)
  return song_index;
   414d8:	d0a0ca83 	ldbu	r2,-31958(gp)
}
   414dc:	e037883a 	mov	sp,fp
   414e0:	df000017 	ldw	fp,0(sp)
   414e4:	dec00104 	addi	sp,sp,4
   414e8:	f800283a 	ret

000414ec <downSong>:

uint8_t downSong(void) {
   414ec:	deffff04 	addi	sp,sp,-4
   414f0:	df000015 	stw	fp,0(sp)
   414f4:	d839883a 	mov	fp,sp
  song_index--;
   414f8:	d0a0ca83 	ldbu	r2,-31958(gp)
   414fc:	10bfffc4 	addi	r2,r2,-1
   41500:	d0a0ca85 	stb	r2,-31958(gp)
  return song_index;
   41504:	d0a0ca83 	ldbu	r2,-31958(gp)
}
   41508:	e037883a 	mov	sp,fp
   4150c:	df000017 	ldw	fp,0(sp)
   41510:	dec00104 	addi	sp,sp,4
   41514:	f800283a 	ret

00041518 <playSong>:

void playSong(void) {
   41518:	deffff04 	addi	sp,sp,-4
   4151c:	df000015 	stw	fp,0(sp)
   41520:	d839883a 	mov	fp,sp
  // not yet implemented
  return;
   41524:	0001883a 	nop
}
   41528:	e037883a 	mov	sp,fp
   4152c:	df000017 	ldw	fp,0(sp)
   41530:	dec00104 	addi	sp,sp,4
   41534:	f800283a 	ret

00041538 <stopSong>:

void stopSong(void) {
   41538:	deffff04 	addi	sp,sp,-4
   4153c:	df000015 	stw	fp,0(sp)
   41540:	d839883a 	mov	fp,sp
  // not yet implemented
  return;
   41544:	0001883a 	nop
   41548:	e037883a 	mov	sp,fp
   4154c:	df000017 	ldw	fp,0(sp)
   41550:	dec00104 	addi	sp,sp,4
   41554:	f800283a 	ret

00041558 <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   41558:	defff904 	addi	sp,sp,-28
   4155c:	dfc00615 	stw	ra,24(sp)
   41560:	df000515 	stw	fp,20(sp)
   41564:	dc400415 	stw	r17,16(sp)
   41568:	dc000315 	stw	r16,12(sp)
   4156c:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   41570:	00800234 	movhi	r2,8
   41574:	10844804 	addi	r2,r2,4384
   41578:	10800037 	ldwio	r2,0(r2)
   4157c:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   41580:	e0bffd0b 	ldhu	r2,-12(fp)
   41584:	10bfffcc 	andi	r2,r2,65535
   41588:	1009883a 	mov	r4,r2
   4158c:	00417d40 	call	417d4 <checkInvalidMode>
   41590:	10803fcc 	andi	r2,r2,255
   41594:	10800058 	cmpnei	r2,r2,1
   41598:	10000f1e 	bne	r2,zero,415d8 <determineMode+0x80>
    mode.invalid = TRUE;
   4159c:	00800044 	movi	r2,1
   415a0:	d0a0cac5 	stb	r2,-31957(gp)
    return mode;
   415a4:	d0a0cac3 	ldbu	r2,-31957(gp)
   415a8:	e0bffb45 	stb	r2,-19(fp)
   415ac:	d0a0cb03 	ldbu	r2,-31956(gp)
   415b0:	e0bffb85 	stb	r2,-18(fp)
   415b4:	d0a0cb43 	ldbu	r2,-31955(gp)
   415b8:	e0bffbc5 	stb	r2,-17(fp)
   415bc:	d0a0cb83 	ldbu	r2,-31954(gp)
   415c0:	e0bffc05 	stb	r2,-16(fp)
   415c4:	d0a0cbc3 	ldbu	r2,-31953(gp)
   415c8:	e0bffc45 	stb	r2,-15(fp)
   415cc:	d0a0cc03 	ldbu	r2,-31952(gp)
   415d0:	e0bffc85 	stb	r2,-14(fp)
   415d4:	00004906 	br	416fc <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   415d8:	d020cac5 	stb	zero,-31957(gp)

    uint8_t i = 0;
   415dc:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   415e0:	00000606 	br	415fc <determineMode+0xa4>
      i++;
   415e4:	e0bffb03 	ldbu	r2,-20(fp)
   415e8:	10800044 	addi	r2,r2,1
   415ec:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   415f0:	e0bffb03 	ldbu	r2,-20(fp)
   415f4:	10800218 	cmpnei	r2,r2,8
   415f8:	10000b26 	beq	r2,zero,41628 <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   415fc:	e0fffb03 	ldbu	r3,-20(fp)
   41600:	00800134 	movhi	r2,4
   41604:	10919304 	addi	r2,r2,17996
   41608:	18c00324 	muli	r3,r3,12
   4160c:	10c5883a 	add	r2,r2,r3
   41610:	10c0000b 	ldhu	r3,0(r2)
   41614:	e0bffd0b 	ldhu	r2,-12(fp)
   41618:	18ffffcc 	andi	r3,r3,65535
   4161c:	10bfffcc 	andi	r2,r2,65535
   41620:	18bff01e 	bne	r3,r2,415e4 <__alt_data_end+0xfffd95e4>
   41624:	00000106 	br	4162c <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   41628:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   4162c:	e0fffb03 	ldbu	r3,-20(fp)
   41630:	00800134 	movhi	r2,4
   41634:	10919304 	addi	r2,r2,17996
   41638:	18c00324 	muli	r3,r3,12
   4163c:	10c5883a 	add	r2,r2,r3
   41640:	10800084 	addi	r2,r2,2
   41644:	1080000b 	ldhu	r2,0(r2)
   41648:	d0a0cb05 	stb	r2,-31956(gp)
    mode.config.on = mode_lookup_table[i][2];
   4164c:	e0fffb03 	ldbu	r3,-20(fp)
   41650:	00800134 	movhi	r2,4
   41654:	10919304 	addi	r2,r2,17996
   41658:	18c00324 	muli	r3,r3,12
   4165c:	10c5883a 	add	r2,r2,r3
   41660:	10800104 	addi	r2,r2,4
   41664:	1080000b 	ldhu	r2,0(r2)
   41668:	d0a0cb85 	stb	r2,-31954(gp)
    mode.config.hour = mode_lookup_table[i][3];
   4166c:	e0fffb03 	ldbu	r3,-20(fp)
   41670:	00800134 	movhi	r2,4
   41674:	10919304 	addi	r2,r2,17996
   41678:	18c00324 	muli	r3,r3,12
   4167c:	10c5883a 	add	r2,r2,r3
   41680:	10800184 	addi	r2,r2,6
   41684:	1080000b 	ldhu	r2,0(r2)
   41688:	d0a0cbc5 	stb	r2,-31953(gp)
    mode.config.minute = mode_lookup_table[i][4];
   4168c:	e0fffb03 	ldbu	r3,-20(fp)
   41690:	00800134 	movhi	r2,4
   41694:	10919304 	addi	r2,r2,17996
   41698:	18c00324 	muli	r3,r3,12
   4169c:	10c5883a 	add	r2,r2,r3
   416a0:	10800204 	addi	r2,r2,8
   416a4:	1080000b 	ldhu	r2,0(r2)
   416a8:	d0a0cc05 	stb	r2,-31952(gp)
    mode.alarm = mode_lookup_table[i][5];
   416ac:	e0fffb03 	ldbu	r3,-20(fp)
   416b0:	00800134 	movhi	r2,4
   416b4:	10919304 	addi	r2,r2,17996
   416b8:	18c00324 	muli	r3,r3,12
   416bc:	10c5883a 	add	r2,r2,r3
   416c0:	10800284 	addi	r2,r2,10
   416c4:	1080000b 	ldhu	r2,0(r2)
   416c8:	d0a0cb45 	stb	r2,-31955(gp)

    return mode;
   416cc:	d0a0cac3 	ldbu	r2,-31957(gp)
   416d0:	e0bffb45 	stb	r2,-19(fp)
   416d4:	d0a0cb03 	ldbu	r2,-31956(gp)
   416d8:	e0bffb85 	stb	r2,-18(fp)
   416dc:	d0a0cb43 	ldbu	r2,-31955(gp)
   416e0:	e0bffbc5 	stb	r2,-17(fp)
   416e4:	d0a0cb83 	ldbu	r2,-31954(gp)
   416e8:	e0bffc05 	stb	r2,-16(fp)
   416ec:	d0a0cbc3 	ldbu	r2,-31953(gp)
   416f0:	e0bffc45 	stb	r2,-15(fp)
   416f4:	d0a0cc03 	ldbu	r2,-31952(gp)
   416f8:	e0bffc85 	stb	r2,-14(fp)
   416fc:	0005883a 	mov	r2,zero
   41700:	e0fffb43 	ldbu	r3,-19(fp)
   41704:	18c03fcc 	andi	r3,r3,255
   41708:	013fc004 	movi	r4,-256
   4170c:	1104703a 	and	r2,r2,r4
   41710:	10c4b03a 	or	r2,r2,r3
   41714:	e0fffb83 	ldbu	r3,-18(fp)
   41718:	18c03fcc 	andi	r3,r3,255
   4171c:	1808923a 	slli	r4,r3,8
   41720:	00fffff4 	movhi	r3,65535
   41724:	18c03fc4 	addi	r3,r3,255
   41728:	10c4703a 	and	r2,r2,r3
   4172c:	1104b03a 	or	r2,r2,r4
   41730:	e0fffbc3 	ldbu	r3,-17(fp)
   41734:	18c03fcc 	andi	r3,r3,255
   41738:	1808943a 	slli	r4,r3,16
   4173c:	00ffc074 	movhi	r3,65281
   41740:	18ffffc4 	addi	r3,r3,-1
   41744:	10c4703a 	and	r2,r2,r3
   41748:	1104b03a 	or	r2,r2,r4
   4174c:	e0fffc03 	ldbu	r3,-16(fp)
   41750:	1808963a 	slli	r4,r3,24
   41754:	00c04034 	movhi	r3,256
   41758:	18ffffc4 	addi	r3,r3,-1
   4175c:	10c4703a 	and	r2,r2,r3
   41760:	1104b03a 	or	r2,r2,r4
   41764:	0009883a 	mov	r4,zero
   41768:	e0fffc43 	ldbu	r3,-15(fp)
   4176c:	18c03fcc 	andi	r3,r3,255
   41770:	017fc004 	movi	r5,-256
   41774:	2148703a 	and	r4,r4,r5
   41778:	20c6b03a 	or	r3,r4,r3
   4177c:	1809883a 	mov	r4,r3
   41780:	e0fffc83 	ldbu	r3,-14(fp)
   41784:	18c03fcc 	andi	r3,r3,255
   41788:	180a923a 	slli	r5,r3,8
   4178c:	00fffff4 	movhi	r3,65535
   41790:	18c03fc4 	addi	r3,r3,255
   41794:	20c6703a 	and	r3,r4,r3
   41798:	1946b03a 	or	r3,r3,r5
   4179c:	1809883a 	mov	r4,r3
   417a0:	1021883a 	mov	r16,r2
   417a4:	2023883a 	mov	r17,r4
   417a8:	8007883a 	mov	r3,r16
   417ac:	8809883a 	mov	r4,r17
  }

}
   417b0:	1805883a 	mov	r2,r3
   417b4:	2007883a 	mov	r3,r4
   417b8:	e6fffe04 	addi	sp,fp,-8
   417bc:	dfc00317 	ldw	ra,12(sp)
   417c0:	df000217 	ldw	fp,8(sp)
   417c4:	dc400117 	ldw	r17,4(sp)
   417c8:	dc000017 	ldw	r16,0(sp)
   417cc:	dec00404 	addi	sp,sp,16
   417d0:	f800283a 	ret

000417d4 <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   417d4:	defffc04 	addi	sp,sp,-16
   417d8:	dfc00315 	stw	ra,12(sp)
   417dc:	df000215 	stw	fp,8(sp)
   417e0:	df000204 	addi	fp,sp,8
   417e4:	2005883a 	mov	r2,r4
   417e8:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   417ec:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   417f0:	e0bffe03 	ldbu	r2,-8(fp)
   417f4:	108000d8 	cmpnei	r2,r2,3
   417f8:	10000e26 	beq	r2,zero,41834 <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   417fc:	e0bffe03 	ldbu	r2,-8(fp)
   41800:	1087883a 	add	r3,r2,r2
   41804:	d0a00084 	addi	r2,gp,-32766
   41808:	1885883a 	add	r2,r3,r2
   4180c:	1080000b 	ldhu	r2,0(r2)
   41810:	10ffffcc 	andi	r3,r2,65535
   41814:	e0bfff0b 	ldhu	r2,-4(fp)
   41818:	1880021e 	bne	r3,r2,41824 <checkInvalidMode+0x50>
      return INVALID;
   4181c:	00800044 	movi	r2,1
   41820:	00000e06 	br	4185c <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   41824:	e0bffe03 	ldbu	r2,-8(fp)
   41828:	10800044 	addi	r2,r2,1
   4182c:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   41830:	003fef06 	br	417f0 <__alt_data_end+0xfffd97f0>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   41834:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   41838:	e0bfff0b 	ldhu	r2,-4(fp)
   4183c:	1009883a 	mov	r4,r2
   41840:	00418700 	call	41870 <isPowerOfTwoOrZero>
   41844:	10803fcc 	andi	r2,r2,255
   41848:	10800058 	cmpnei	r2,r2,1
   4184c:	1000021e 	bne	r2,zero,41858 <checkInvalidMode+0x84>
    return VALID;
   41850:	0005883a 	mov	r2,zero
   41854:	00000106 	br	4185c <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   41858:	00800044 	movi	r2,1
  }
}
   4185c:	e037883a 	mov	sp,fp
   41860:	dfc00117 	ldw	ra,4(sp)
   41864:	df000017 	ldw	fp,0(sp)
   41868:	dec00204 	addi	sp,sp,8
   4186c:	f800283a 	ret

00041870 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   41870:	defffe04 	addi	sp,sp,-8
   41874:	df000115 	stw	fp,4(sp)
   41878:	df000104 	addi	fp,sp,4
   4187c:	2005883a 	mov	r2,r4
   41880:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   41884:	e0ffff0b 	ldhu	r3,-4(fp)
   41888:	e0bfff0b 	ldhu	r2,-4(fp)
   4188c:	10bfffc4 	addi	r2,r2,-1
   41890:	1884703a 	and	r2,r3,r2
   41894:	1000021e 	bne	r2,zero,418a0 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   41898:	00800044 	movi	r2,1
   4189c:	00000106 	br	418a4 <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   418a0:	0005883a 	mov	r2,zero
  }
   418a4:	e037883a 	mov	sp,fp
   418a8:	df000017 	ldw	fp,0(sp)
   418ac:	dec00104 	addi	sp,sp,4
   418b0:	f800283a 	ret

000418b4 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   418b4:	deffff04 	addi	sp,sp,-4
   418b8:	df000015 	stw	fp,0(sp)
   418bc:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   418c0:	008002c4 	movi	r2,11
   418c4:	d0a0cd05 	stb	r2,-31948(gp)
  clock.minute = reset_clock_value[1];
   418c8:	00800ec4 	movi	r2,59
   418cc:	d0a0cd45 	stb	r2,-31947(gp)
  clock.second = reset_clock_value[2];
   418d0:	0005883a 	mov	r2,zero
   418d4:	d0a0cd85 	stb	r2,-31946(gp)
}
   418d8:	0001883a 	nop
   418dc:	e037883a 	mov	sp,fp
   418e0:	df000017 	ldw	fp,0(sp)
   418e4:	dec00104 	addi	sp,sp,4
   418e8:	f800283a 	ret

000418ec <getClockTime>:

struct time getClockTime(void) {
   418ec:	defffe04 	addi	sp,sp,-8
   418f0:	df000115 	stw	fp,4(sp)
   418f4:	df000104 	addi	fp,sp,4
  return clock;
   418f8:	d0a0cd03 	ldbu	r2,-31948(gp)
   418fc:	e0bfff05 	stb	r2,-4(fp)
   41900:	d0a0cd43 	ldbu	r2,-31947(gp)
   41904:	e0bfff45 	stb	r2,-3(fp)
   41908:	d0a0cd83 	ldbu	r2,-31946(gp)
   4190c:	e0bfff85 	stb	r2,-2(fp)
   41910:	0005883a 	mov	r2,zero
   41914:	e0ffff03 	ldbu	r3,-4(fp)
   41918:	18c03fcc 	andi	r3,r3,255
   4191c:	013fc004 	movi	r4,-256
   41920:	1104703a 	and	r2,r2,r4
   41924:	10c4b03a 	or	r2,r2,r3
   41928:	e0ffff43 	ldbu	r3,-3(fp)
   4192c:	18c03fcc 	andi	r3,r3,255
   41930:	1808923a 	slli	r4,r3,8
   41934:	00fffff4 	movhi	r3,65535
   41938:	18c03fc4 	addi	r3,r3,255
   4193c:	10c4703a 	and	r2,r2,r3
   41940:	1104b03a 	or	r2,r2,r4
   41944:	e0ffff83 	ldbu	r3,-2(fp)
   41948:	18c03fcc 	andi	r3,r3,255
   4194c:	1808943a 	slli	r4,r3,16
   41950:	00ffc074 	movhi	r3,65281
   41954:	18ffffc4 	addi	r3,r3,-1
   41958:	10c4703a 	and	r2,r2,r3
   4195c:	1104b03a 	or	r2,r2,r4
}
   41960:	e037883a 	mov	sp,fp
   41964:	df000017 	ldw	fp,0(sp)
   41968:	dec00104 	addi	sp,sp,4
   4196c:	f800283a 	ret

00041970 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   41970:	defffc04 	addi	sp,sp,-16
   41974:	dfc00315 	stw	ra,12(sp)
   41978:	df000215 	stw	fp,8(sp)
   4197c:	df000204 	addi	fp,sp,8
   41980:	2005883a 	mov	r2,r4
   41984:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   41988:	d0a0cd83 	ldbu	r2,-31946(gp)
   4198c:	10803fcc 	andi	r2,r2,255
   41990:	10800ed8 	cmpnei	r2,r2,59
   41994:	1000071e 	bne	r2,zero,419b4 <upClockSecond+0x44>
    clock.second = 0;
   41998:	d020cd85 	stb	zero,-31946(gp)
    
    if (carry_setting == CARRY_ON) {
   4199c:	e0bfff03 	ldbu	r2,-4(fp)
   419a0:	10800058 	cmpnei	r2,r2,1
   419a4:	1000061e 	bne	r2,zero,419c0 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   419a8:	01000044 	movi	r4,1
   419ac:	0041a3c0 	call	41a3c <upClockMinute>
   419b0:	00000306 	br	419c0 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   419b4:	d0a0cd83 	ldbu	r2,-31946(gp)
   419b8:	10800044 	addi	r2,r2,1
   419bc:	d0a0cd85 	stb	r2,-31946(gp)
  }
  return clock;
   419c0:	d0a0cd03 	ldbu	r2,-31948(gp)
   419c4:	e0bffe05 	stb	r2,-8(fp)
   419c8:	d0a0cd43 	ldbu	r2,-31947(gp)
   419cc:	e0bffe45 	stb	r2,-7(fp)
   419d0:	d0a0cd83 	ldbu	r2,-31946(gp)
   419d4:	e0bffe85 	stb	r2,-6(fp)
   419d8:	0005883a 	mov	r2,zero
   419dc:	e0fffe03 	ldbu	r3,-8(fp)
   419e0:	18c03fcc 	andi	r3,r3,255
   419e4:	013fc004 	movi	r4,-256
   419e8:	1104703a 	and	r2,r2,r4
   419ec:	10c4b03a 	or	r2,r2,r3
   419f0:	e0fffe43 	ldbu	r3,-7(fp)
   419f4:	18c03fcc 	andi	r3,r3,255
   419f8:	1808923a 	slli	r4,r3,8
   419fc:	00fffff4 	movhi	r3,65535
   41a00:	18c03fc4 	addi	r3,r3,255
   41a04:	10c4703a 	and	r2,r2,r3
   41a08:	1104b03a 	or	r2,r2,r4
   41a0c:	e0fffe83 	ldbu	r3,-6(fp)
   41a10:	18c03fcc 	andi	r3,r3,255
   41a14:	1808943a 	slli	r4,r3,16
   41a18:	00ffc074 	movhi	r3,65281
   41a1c:	18ffffc4 	addi	r3,r3,-1
   41a20:	10c4703a 	and	r2,r2,r3
   41a24:	1104b03a 	or	r2,r2,r4
}
   41a28:	e037883a 	mov	sp,fp
   41a2c:	dfc00117 	ldw	ra,4(sp)
   41a30:	df000017 	ldw	fp,0(sp)
   41a34:	dec00204 	addi	sp,sp,8
   41a38:	f800283a 	ret

00041a3c <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   41a3c:	defffc04 	addi	sp,sp,-16
   41a40:	dfc00315 	stw	ra,12(sp)
   41a44:	df000215 	stw	fp,8(sp)
   41a48:	df000204 	addi	fp,sp,8
   41a4c:	2005883a 	mov	r2,r4
   41a50:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   41a54:	d0a0cd43 	ldbu	r2,-31947(gp)
   41a58:	10803fcc 	andi	r2,r2,255
   41a5c:	10800ed8 	cmpnei	r2,r2,59
   41a60:	1000061e 	bne	r2,zero,41a7c <upClockMinute+0x40>
    clock.minute = 0;
   41a64:	d020cd45 	stb	zero,-31947(gp)
    
    if (carry_setting == CARRY_ON) {
   41a68:	e0bfff03 	ldbu	r2,-4(fp)
   41a6c:	10800058 	cmpnei	r2,r2,1
   41a70:	1000051e 	bne	r2,zero,41a88 <upClockMinute+0x4c>
      upClockHour();
   41a74:	0041b040 	call	41b04 <upClockHour>
   41a78:	00000306 	br	41a88 <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   41a7c:	d0a0cd43 	ldbu	r2,-31947(gp)
   41a80:	10800044 	addi	r2,r2,1
   41a84:	d0a0cd45 	stb	r2,-31947(gp)
  }
  return clock;
   41a88:	d0a0cd03 	ldbu	r2,-31948(gp)
   41a8c:	e0bffe05 	stb	r2,-8(fp)
   41a90:	d0a0cd43 	ldbu	r2,-31947(gp)
   41a94:	e0bffe45 	stb	r2,-7(fp)
   41a98:	d0a0cd83 	ldbu	r2,-31946(gp)
   41a9c:	e0bffe85 	stb	r2,-6(fp)
   41aa0:	0005883a 	mov	r2,zero
   41aa4:	e0fffe03 	ldbu	r3,-8(fp)
   41aa8:	18c03fcc 	andi	r3,r3,255
   41aac:	013fc004 	movi	r4,-256
   41ab0:	1104703a 	and	r2,r2,r4
   41ab4:	10c4b03a 	or	r2,r2,r3
   41ab8:	e0fffe43 	ldbu	r3,-7(fp)
   41abc:	18c03fcc 	andi	r3,r3,255
   41ac0:	1808923a 	slli	r4,r3,8
   41ac4:	00fffff4 	movhi	r3,65535
   41ac8:	18c03fc4 	addi	r3,r3,255
   41acc:	10c4703a 	and	r2,r2,r3
   41ad0:	1104b03a 	or	r2,r2,r4
   41ad4:	e0fffe83 	ldbu	r3,-6(fp)
   41ad8:	18c03fcc 	andi	r3,r3,255
   41adc:	1808943a 	slli	r4,r3,16
   41ae0:	00ffc074 	movhi	r3,65281
   41ae4:	18ffffc4 	addi	r3,r3,-1
   41ae8:	10c4703a 	and	r2,r2,r3
   41aec:	1104b03a 	or	r2,r2,r4
}
   41af0:	e037883a 	mov	sp,fp
   41af4:	dfc00117 	ldw	ra,4(sp)
   41af8:	df000017 	ldw	fp,0(sp)
   41afc:	dec00204 	addi	sp,sp,8
   41b00:	f800283a 	ret

00041b04 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   41b04:	defffe04 	addi	sp,sp,-8
   41b08:	df000115 	stw	fp,4(sp)
   41b0c:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   41b10:	d0a0cd03 	ldbu	r2,-31948(gp)
   41b14:	10c03fcc 	andi	r3,r2,255
   41b18:	d0a002c3 	ldbu	r2,-32757(gp)
   41b1c:	10803fcc 	andi	r2,r2,255
   41b20:	10bfffc4 	addi	r2,r2,-1
   41b24:	1880021e 	bne	r3,r2,41b30 <upClockHour+0x2c>
    clock.hour = 0;
   41b28:	d020cd05 	stb	zero,-31948(gp)
   41b2c:	00000306 	br	41b3c <upClockHour+0x38>
  }
  else {
    clock.hour++;
   41b30:	d0a0cd03 	ldbu	r2,-31948(gp)
   41b34:	10800044 	addi	r2,r2,1
   41b38:	d0a0cd05 	stb	r2,-31948(gp)
  }
  return clock;
   41b3c:	d0a0cd03 	ldbu	r2,-31948(gp)
   41b40:	e0bfff05 	stb	r2,-4(fp)
   41b44:	d0a0cd43 	ldbu	r2,-31947(gp)
   41b48:	e0bfff45 	stb	r2,-3(fp)
   41b4c:	d0a0cd83 	ldbu	r2,-31946(gp)
   41b50:	e0bfff85 	stb	r2,-2(fp)
   41b54:	0005883a 	mov	r2,zero
   41b58:	e0ffff03 	ldbu	r3,-4(fp)
   41b5c:	18c03fcc 	andi	r3,r3,255
   41b60:	013fc004 	movi	r4,-256
   41b64:	1104703a 	and	r2,r2,r4
   41b68:	10c4b03a 	or	r2,r2,r3
   41b6c:	e0ffff43 	ldbu	r3,-3(fp)
   41b70:	18c03fcc 	andi	r3,r3,255
   41b74:	1808923a 	slli	r4,r3,8
   41b78:	00fffff4 	movhi	r3,65535
   41b7c:	18c03fc4 	addi	r3,r3,255
   41b80:	10c4703a 	and	r2,r2,r3
   41b84:	1104b03a 	or	r2,r2,r4
   41b88:	e0ffff83 	ldbu	r3,-2(fp)
   41b8c:	18c03fcc 	andi	r3,r3,255
   41b90:	1808943a 	slli	r4,r3,16
   41b94:	00ffc074 	movhi	r3,65281
   41b98:	18ffffc4 	addi	r3,r3,-1
   41b9c:	10c4703a 	and	r2,r2,r3
   41ba0:	1104b03a 	or	r2,r2,r4
}
   41ba4:	e037883a 	mov	sp,fp
   41ba8:	df000017 	ldw	fp,0(sp)
   41bac:	dec00104 	addi	sp,sp,4
   41bb0:	f800283a 	ret

00041bb4 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   41bb4:	defffc04 	addi	sp,sp,-16
   41bb8:	dfc00315 	stw	ra,12(sp)
   41bbc:	df000215 	stw	fp,8(sp)
   41bc0:	df000204 	addi	fp,sp,8
   41bc4:	2005883a 	mov	r2,r4
   41bc8:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   41bcc:	d0a0cd83 	ldbu	r2,-31946(gp)
   41bd0:	10803fcc 	andi	r2,r2,255
   41bd4:	1000081e 	bne	r2,zero,41bf8 <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   41bd8:	00800ec4 	movi	r2,59
   41bdc:	d0a0cd85 	stb	r2,-31946(gp)
    
    if (carry_setting == CARRY_ON) {
   41be0:	e0bfff03 	ldbu	r2,-4(fp)
   41be4:	10800058 	cmpnei	r2,r2,1
   41be8:	1000061e 	bne	r2,zero,41c04 <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   41bec:	01000044 	movi	r4,1
   41bf0:	0041c800 	call	41c80 <downClockMinute>
   41bf4:	00000306 	br	41c04 <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   41bf8:	d0a0cd83 	ldbu	r2,-31946(gp)
   41bfc:	10bfffc4 	addi	r2,r2,-1
   41c00:	d0a0cd85 	stb	r2,-31946(gp)
  }
  return clock;
   41c04:	d0a0cd03 	ldbu	r2,-31948(gp)
   41c08:	e0bffe05 	stb	r2,-8(fp)
   41c0c:	d0a0cd43 	ldbu	r2,-31947(gp)
   41c10:	e0bffe45 	stb	r2,-7(fp)
   41c14:	d0a0cd83 	ldbu	r2,-31946(gp)
   41c18:	e0bffe85 	stb	r2,-6(fp)
   41c1c:	0005883a 	mov	r2,zero
   41c20:	e0fffe03 	ldbu	r3,-8(fp)
   41c24:	18c03fcc 	andi	r3,r3,255
   41c28:	013fc004 	movi	r4,-256
   41c2c:	1104703a 	and	r2,r2,r4
   41c30:	10c4b03a 	or	r2,r2,r3
   41c34:	e0fffe43 	ldbu	r3,-7(fp)
   41c38:	18c03fcc 	andi	r3,r3,255
   41c3c:	1808923a 	slli	r4,r3,8
   41c40:	00fffff4 	movhi	r3,65535
   41c44:	18c03fc4 	addi	r3,r3,255
   41c48:	10c4703a 	and	r2,r2,r3
   41c4c:	1104b03a 	or	r2,r2,r4
   41c50:	e0fffe83 	ldbu	r3,-6(fp)
   41c54:	18c03fcc 	andi	r3,r3,255
   41c58:	1808943a 	slli	r4,r3,16
   41c5c:	00ffc074 	movhi	r3,65281
   41c60:	18ffffc4 	addi	r3,r3,-1
   41c64:	10c4703a 	and	r2,r2,r3
   41c68:	1104b03a 	or	r2,r2,r4
}
   41c6c:	e037883a 	mov	sp,fp
   41c70:	dfc00117 	ldw	ra,4(sp)
   41c74:	df000017 	ldw	fp,0(sp)
   41c78:	dec00204 	addi	sp,sp,8
   41c7c:	f800283a 	ret

00041c80 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   41c80:	defffc04 	addi	sp,sp,-16
   41c84:	dfc00315 	stw	ra,12(sp)
   41c88:	df000215 	stw	fp,8(sp)
   41c8c:	df000204 	addi	fp,sp,8
   41c90:	2005883a 	mov	r2,r4
   41c94:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   41c98:	d0a0cd43 	ldbu	r2,-31947(gp)
   41c9c:	10803fcc 	andi	r2,r2,255
   41ca0:	1000071e 	bne	r2,zero,41cc0 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   41ca4:	00800ec4 	movi	r2,59
   41ca8:	d0a0cd45 	stb	r2,-31947(gp)
    
    if (carry_setting == CARRY_ON) {
   41cac:	e0bfff03 	ldbu	r2,-4(fp)
   41cb0:	10800058 	cmpnei	r2,r2,1
   41cb4:	1000051e 	bne	r2,zero,41ccc <downClockMinute+0x4c>
      downClockHour();
   41cb8:	0041d480 	call	41d48 <downClockHour>
   41cbc:	00000306 	br	41ccc <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   41cc0:	d0a0cd43 	ldbu	r2,-31947(gp)
   41cc4:	10bfffc4 	addi	r2,r2,-1
   41cc8:	d0a0cd45 	stb	r2,-31947(gp)
  }
  return clock;
   41ccc:	d0a0cd03 	ldbu	r2,-31948(gp)
   41cd0:	e0bffe05 	stb	r2,-8(fp)
   41cd4:	d0a0cd43 	ldbu	r2,-31947(gp)
   41cd8:	e0bffe45 	stb	r2,-7(fp)
   41cdc:	d0a0cd83 	ldbu	r2,-31946(gp)
   41ce0:	e0bffe85 	stb	r2,-6(fp)
   41ce4:	0005883a 	mov	r2,zero
   41ce8:	e0fffe03 	ldbu	r3,-8(fp)
   41cec:	18c03fcc 	andi	r3,r3,255
   41cf0:	013fc004 	movi	r4,-256
   41cf4:	1104703a 	and	r2,r2,r4
   41cf8:	10c4b03a 	or	r2,r2,r3
   41cfc:	e0fffe43 	ldbu	r3,-7(fp)
   41d00:	18c03fcc 	andi	r3,r3,255
   41d04:	1808923a 	slli	r4,r3,8
   41d08:	00fffff4 	movhi	r3,65535
   41d0c:	18c03fc4 	addi	r3,r3,255
   41d10:	10c4703a 	and	r2,r2,r3
   41d14:	1104b03a 	or	r2,r2,r4
   41d18:	e0fffe83 	ldbu	r3,-6(fp)
   41d1c:	18c03fcc 	andi	r3,r3,255
   41d20:	1808943a 	slli	r4,r3,16
   41d24:	00ffc074 	movhi	r3,65281
   41d28:	18ffffc4 	addi	r3,r3,-1
   41d2c:	10c4703a 	and	r2,r2,r3
   41d30:	1104b03a 	or	r2,r2,r4
}
   41d34:	e037883a 	mov	sp,fp
   41d38:	dfc00117 	ldw	ra,4(sp)
   41d3c:	df000017 	ldw	fp,0(sp)
   41d40:	dec00204 	addi	sp,sp,8
   41d44:	f800283a 	ret

00041d48 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   41d48:	defffe04 	addi	sp,sp,-8
   41d4c:	df000115 	stw	fp,4(sp)
   41d50:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   41d54:	d0a0cd03 	ldbu	r2,-31948(gp)
   41d58:	10803fcc 	andi	r2,r2,255
   41d5c:	1000041e 	bne	r2,zero,41d70 <downClockHour+0x28>
    clock.hour = (time_format-1);
   41d60:	d0a002c3 	ldbu	r2,-32757(gp)
   41d64:	10bfffc4 	addi	r2,r2,-1
   41d68:	d0a0cd05 	stb	r2,-31948(gp)
   41d6c:	00000306 	br	41d7c <downClockHour+0x34>
  }
  else {
    clock.hour--;
   41d70:	d0a0cd03 	ldbu	r2,-31948(gp)
   41d74:	10bfffc4 	addi	r2,r2,-1
   41d78:	d0a0cd05 	stb	r2,-31948(gp)
  }
  return clock;
   41d7c:	d0a0cd03 	ldbu	r2,-31948(gp)
   41d80:	e0bfff05 	stb	r2,-4(fp)
   41d84:	d0a0cd43 	ldbu	r2,-31947(gp)
   41d88:	e0bfff45 	stb	r2,-3(fp)
   41d8c:	d0a0cd83 	ldbu	r2,-31946(gp)
   41d90:	e0bfff85 	stb	r2,-2(fp)
   41d94:	0005883a 	mov	r2,zero
   41d98:	e0ffff03 	ldbu	r3,-4(fp)
   41d9c:	18c03fcc 	andi	r3,r3,255
   41da0:	013fc004 	movi	r4,-256
   41da4:	1104703a 	and	r2,r2,r4
   41da8:	10c4b03a 	or	r2,r2,r3
   41dac:	e0ffff43 	ldbu	r3,-3(fp)
   41db0:	18c03fcc 	andi	r3,r3,255
   41db4:	1808923a 	slli	r4,r3,8
   41db8:	00fffff4 	movhi	r3,65535
   41dbc:	18c03fc4 	addi	r3,r3,255
   41dc0:	10c4703a 	and	r2,r2,r3
   41dc4:	1104b03a 	or	r2,r2,r4
   41dc8:	e0ffff83 	ldbu	r3,-2(fp)
   41dcc:	18c03fcc 	andi	r3,r3,255
   41dd0:	1808943a 	slli	r4,r3,16
   41dd4:	00ffc074 	movhi	r3,65281
   41dd8:	18ffffc4 	addi	r3,r3,-1
   41ddc:	10c4703a 	and	r2,r2,r3
   41de0:	1104b03a 	or	r2,r2,r4
}
   41de4:	e037883a 	mov	sp,fp
   41de8:	df000017 	ldw	fp,0(sp)
   41dec:	dec00104 	addi	sp,sp,4
   41df0:	f800283a 	ret

00041df4 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   41df4:	deffff04 	addi	sp,sp,-4
   41df8:	df000015 	stw	fp,0(sp)
   41dfc:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   41e00:	d020cc45 	stb	zero,-31951(gp)
   41e04:	d020cc85 	stb	zero,-31950(gp)
   41e08:	d020ccc5 	stb	zero,-31949(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   41e0c:	00801904 	movi	r2,100
   41e10:	d0a0ccc5 	stb	r2,-31949(gp)
}
   41e14:	0001883a 	nop
   41e18:	e037883a 	mov	sp,fp
   41e1c:	df000017 	ldw	fp,0(sp)
   41e20:	dec00104 	addi	sp,sp,4
   41e24:	f800283a 	ret

00041e28 <getAlarmTime>:

struct time getAlarmTime(void) {
   41e28:	defffe04 	addi	sp,sp,-8
   41e2c:	df000115 	stw	fp,4(sp)
   41e30:	df000104 	addi	fp,sp,4
  return alarm;
   41e34:	d0a0cc43 	ldbu	r2,-31951(gp)
   41e38:	e0bfff05 	stb	r2,-4(fp)
   41e3c:	d0a0cc83 	ldbu	r2,-31950(gp)
   41e40:	e0bfff45 	stb	r2,-3(fp)
   41e44:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41e48:	e0bfff85 	stb	r2,-2(fp)
   41e4c:	0005883a 	mov	r2,zero
   41e50:	e0ffff03 	ldbu	r3,-4(fp)
   41e54:	18c03fcc 	andi	r3,r3,255
   41e58:	013fc004 	movi	r4,-256
   41e5c:	1104703a 	and	r2,r2,r4
   41e60:	10c4b03a 	or	r2,r2,r3
   41e64:	e0ffff43 	ldbu	r3,-3(fp)
   41e68:	18c03fcc 	andi	r3,r3,255
   41e6c:	1808923a 	slli	r4,r3,8
   41e70:	00fffff4 	movhi	r3,65535
   41e74:	18c03fc4 	addi	r3,r3,255
   41e78:	10c4703a 	and	r2,r2,r3
   41e7c:	1104b03a 	or	r2,r2,r4
   41e80:	e0ffff83 	ldbu	r3,-2(fp)
   41e84:	18c03fcc 	andi	r3,r3,255
   41e88:	1808943a 	slli	r4,r3,16
   41e8c:	00ffc074 	movhi	r3,65281
   41e90:	18ffffc4 	addi	r3,r3,-1
   41e94:	10c4703a 	and	r2,r2,r3
   41e98:	1104b03a 	or	r2,r2,r4
}
   41e9c:	e037883a 	mov	sp,fp
   41ea0:	df000017 	ldw	fp,0(sp)
   41ea4:	dec00104 	addi	sp,sp,4
   41ea8:	f800283a 	ret

00041eac <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute(void) {
   41eac:	defffe04 	addi	sp,sp,-8
   41eb0:	df000115 	stw	fp,4(sp)
   41eb4:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   41eb8:	d0a0cc83 	ldbu	r2,-31950(gp)
   41ebc:	10803fcc 	andi	r2,r2,255
   41ec0:	10800ed8 	cmpnei	r2,r2,59
   41ec4:	1000021e 	bne	r2,zero,41ed0 <upAlarmMinute+0x24>
    alarm.minute = 0;
   41ec8:	d020cc85 	stb	zero,-31950(gp)
   41ecc:	00000306 	br	41edc <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   41ed0:	d0a0cc83 	ldbu	r2,-31950(gp)
   41ed4:	10800044 	addi	r2,r2,1
   41ed8:	d0a0cc85 	stb	r2,-31950(gp)
  }
  return alarm;
   41edc:	d0a0cc43 	ldbu	r2,-31951(gp)
   41ee0:	e0bfff05 	stb	r2,-4(fp)
   41ee4:	d0a0cc83 	ldbu	r2,-31950(gp)
   41ee8:	e0bfff45 	stb	r2,-3(fp)
   41eec:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41ef0:	e0bfff85 	stb	r2,-2(fp)
   41ef4:	0005883a 	mov	r2,zero
   41ef8:	e0ffff03 	ldbu	r3,-4(fp)
   41efc:	18c03fcc 	andi	r3,r3,255
   41f00:	013fc004 	movi	r4,-256
   41f04:	1104703a 	and	r2,r2,r4
   41f08:	10c4b03a 	or	r2,r2,r3
   41f0c:	e0ffff43 	ldbu	r3,-3(fp)
   41f10:	18c03fcc 	andi	r3,r3,255
   41f14:	1808923a 	slli	r4,r3,8
   41f18:	00fffff4 	movhi	r3,65535
   41f1c:	18c03fc4 	addi	r3,r3,255
   41f20:	10c4703a 	and	r2,r2,r3
   41f24:	1104b03a 	or	r2,r2,r4
   41f28:	e0ffff83 	ldbu	r3,-2(fp)
   41f2c:	18c03fcc 	andi	r3,r3,255
   41f30:	1808943a 	slli	r4,r3,16
   41f34:	00ffc074 	movhi	r3,65281
   41f38:	18ffffc4 	addi	r3,r3,-1
   41f3c:	10c4703a 	and	r2,r2,r3
   41f40:	1104b03a 	or	r2,r2,r4
}
   41f44:	e037883a 	mov	sp,fp
   41f48:	df000017 	ldw	fp,0(sp)
   41f4c:	dec00104 	addi	sp,sp,4
   41f50:	f800283a 	ret

00041f54 <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   41f54:	defffe04 	addi	sp,sp,-8
   41f58:	df000115 	stw	fp,4(sp)
   41f5c:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   41f60:	d0a0cc43 	ldbu	r2,-31951(gp)
   41f64:	10c03fcc 	andi	r3,r2,255
   41f68:	d0a002c3 	ldbu	r2,-32757(gp)
   41f6c:	10803fcc 	andi	r2,r2,255
   41f70:	10bfffc4 	addi	r2,r2,-1
   41f74:	1880021e 	bne	r3,r2,41f80 <upAlarmHour+0x2c>
    alarm.hour = 0;
   41f78:	d020cc45 	stb	zero,-31951(gp)
   41f7c:	00000306 	br	41f8c <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   41f80:	d0a0cc43 	ldbu	r2,-31951(gp)
   41f84:	10800044 	addi	r2,r2,1
   41f88:	d0a0cc45 	stb	r2,-31951(gp)
  }
  return alarm;
   41f8c:	d0a0cc43 	ldbu	r2,-31951(gp)
   41f90:	e0bfff05 	stb	r2,-4(fp)
   41f94:	d0a0cc83 	ldbu	r2,-31950(gp)
   41f98:	e0bfff45 	stb	r2,-3(fp)
   41f9c:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41fa0:	e0bfff85 	stb	r2,-2(fp)
   41fa4:	0005883a 	mov	r2,zero
   41fa8:	e0ffff03 	ldbu	r3,-4(fp)
   41fac:	18c03fcc 	andi	r3,r3,255
   41fb0:	013fc004 	movi	r4,-256
   41fb4:	1104703a 	and	r2,r2,r4
   41fb8:	10c4b03a 	or	r2,r2,r3
   41fbc:	e0ffff43 	ldbu	r3,-3(fp)
   41fc0:	18c03fcc 	andi	r3,r3,255
   41fc4:	1808923a 	slli	r4,r3,8
   41fc8:	00fffff4 	movhi	r3,65535
   41fcc:	18c03fc4 	addi	r3,r3,255
   41fd0:	10c4703a 	and	r2,r2,r3
   41fd4:	1104b03a 	or	r2,r2,r4
   41fd8:	e0ffff83 	ldbu	r3,-2(fp)
   41fdc:	18c03fcc 	andi	r3,r3,255
   41fe0:	1808943a 	slli	r4,r3,16
   41fe4:	00ffc074 	movhi	r3,65281
   41fe8:	18ffffc4 	addi	r3,r3,-1
   41fec:	10c4703a 	and	r2,r2,r3
   41ff0:	1104b03a 	or	r2,r2,r4
}
   41ff4:	e037883a 	mov	sp,fp
   41ff8:	df000017 	ldw	fp,0(sp)
   41ffc:	dec00104 	addi	sp,sp,4
   42000:	f800283a 	ret

00042004 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute(void) {
   42004:	defffe04 	addi	sp,sp,-8
   42008:	df000115 	stw	fp,4(sp)
   4200c:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   42010:	d0a0cc83 	ldbu	r2,-31950(gp)
   42014:	10803fcc 	andi	r2,r2,255
   42018:	1000031e 	bne	r2,zero,42028 <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   4201c:	00800ec4 	movi	r2,59
   42020:	d0a0cc85 	stb	r2,-31950(gp)
   42024:	00000306 	br	42034 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   42028:	d0a0cc83 	ldbu	r2,-31950(gp)
   4202c:	10bfffc4 	addi	r2,r2,-1
   42030:	d0a0cc85 	stb	r2,-31950(gp)
  }
  return alarm;
   42034:	d0a0cc43 	ldbu	r2,-31951(gp)
   42038:	e0bfff05 	stb	r2,-4(fp)
   4203c:	d0a0cc83 	ldbu	r2,-31950(gp)
   42040:	e0bfff45 	stb	r2,-3(fp)
   42044:	d0a0ccc3 	ldbu	r2,-31949(gp)
   42048:	e0bfff85 	stb	r2,-2(fp)
   4204c:	0005883a 	mov	r2,zero
   42050:	e0ffff03 	ldbu	r3,-4(fp)
   42054:	18c03fcc 	andi	r3,r3,255
   42058:	013fc004 	movi	r4,-256
   4205c:	1104703a 	and	r2,r2,r4
   42060:	10c4b03a 	or	r2,r2,r3
   42064:	e0ffff43 	ldbu	r3,-3(fp)
   42068:	18c03fcc 	andi	r3,r3,255
   4206c:	1808923a 	slli	r4,r3,8
   42070:	00fffff4 	movhi	r3,65535
   42074:	18c03fc4 	addi	r3,r3,255
   42078:	10c4703a 	and	r2,r2,r3
   4207c:	1104b03a 	or	r2,r2,r4
   42080:	e0ffff83 	ldbu	r3,-2(fp)
   42084:	18c03fcc 	andi	r3,r3,255
   42088:	1808943a 	slli	r4,r3,16
   4208c:	00ffc074 	movhi	r3,65281
   42090:	18ffffc4 	addi	r3,r3,-1
   42094:	10c4703a 	and	r2,r2,r3
   42098:	1104b03a 	or	r2,r2,r4
}
   4209c:	e037883a 	mov	sp,fp
   420a0:	df000017 	ldw	fp,0(sp)
   420a4:	dec00104 	addi	sp,sp,4
   420a8:	f800283a 	ret

000420ac <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   420ac:	defffe04 	addi	sp,sp,-8
   420b0:	df000115 	stw	fp,4(sp)
   420b4:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   420b8:	d0a0cc43 	ldbu	r2,-31951(gp)
   420bc:	10803fcc 	andi	r2,r2,255
   420c0:	1000041e 	bne	r2,zero,420d4 <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   420c4:	d0a002c3 	ldbu	r2,-32757(gp)
   420c8:	10bfffc4 	addi	r2,r2,-1
   420cc:	d0a0cc45 	stb	r2,-31951(gp)
   420d0:	00000306 	br	420e0 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   420d4:	d0a0cc43 	ldbu	r2,-31951(gp)
   420d8:	10bfffc4 	addi	r2,r2,-1
   420dc:	d0a0cc45 	stb	r2,-31951(gp)
  }
  return alarm;
   420e0:	d0a0cc43 	ldbu	r2,-31951(gp)
   420e4:	e0bfff05 	stb	r2,-4(fp)
   420e8:	d0a0cc83 	ldbu	r2,-31950(gp)
   420ec:	e0bfff45 	stb	r2,-3(fp)
   420f0:	d0a0ccc3 	ldbu	r2,-31949(gp)
   420f4:	e0bfff85 	stb	r2,-2(fp)
   420f8:	0005883a 	mov	r2,zero
   420fc:	e0ffff03 	ldbu	r3,-4(fp)
   42100:	18c03fcc 	andi	r3,r3,255
   42104:	013fc004 	movi	r4,-256
   42108:	1104703a 	and	r2,r2,r4
   4210c:	10c4b03a 	or	r2,r2,r3
   42110:	e0ffff43 	ldbu	r3,-3(fp)
   42114:	18c03fcc 	andi	r3,r3,255
   42118:	1808923a 	slli	r4,r3,8
   4211c:	00fffff4 	movhi	r3,65535
   42120:	18c03fc4 	addi	r3,r3,255
   42124:	10c4703a 	and	r2,r2,r3
   42128:	1104b03a 	or	r2,r2,r4
   4212c:	e0ffff83 	ldbu	r3,-2(fp)
   42130:	18c03fcc 	andi	r3,r3,255
   42134:	1808943a 	slli	r4,r3,16
   42138:	00ffc074 	movhi	r3,65281
   4213c:	18ffffc4 	addi	r3,r3,-1
   42140:	10c4703a 	and	r2,r2,r3
   42144:	1104b03a 	or	r2,r2,r4
}
   42148:	e037883a 	mov	sp,fp
   4214c:	df000017 	ldw	fp,0(sp)
   42150:	dec00104 	addi	sp,sp,4
   42154:	f800283a 	ret

00042158 <__divsi3>:
   42158:	20001b16 	blt	r4,zero,421c8 <__divsi3+0x70>
   4215c:	000f883a 	mov	r7,zero
   42160:	28001616 	blt	r5,zero,421bc <__divsi3+0x64>
   42164:	200d883a 	mov	r6,r4
   42168:	29001a2e 	bgeu	r5,r4,421d4 <__divsi3+0x7c>
   4216c:	00800804 	movi	r2,32
   42170:	00c00044 	movi	r3,1
   42174:	00000106 	br	4217c <__divsi3+0x24>
   42178:	10000d26 	beq	r2,zero,421b0 <__divsi3+0x58>
   4217c:	294b883a 	add	r5,r5,r5
   42180:	10bfffc4 	addi	r2,r2,-1
   42184:	18c7883a 	add	r3,r3,r3
   42188:	293ffb36 	bltu	r5,r4,42178 <__alt_data_end+0xfffda178>
   4218c:	0005883a 	mov	r2,zero
   42190:	18000726 	beq	r3,zero,421b0 <__divsi3+0x58>
   42194:	0005883a 	mov	r2,zero
   42198:	31400236 	bltu	r6,r5,421a4 <__divsi3+0x4c>
   4219c:	314dc83a 	sub	r6,r6,r5
   421a0:	10c4b03a 	or	r2,r2,r3
   421a4:	1806d07a 	srli	r3,r3,1
   421a8:	280ad07a 	srli	r5,r5,1
   421ac:	183ffa1e 	bne	r3,zero,42198 <__alt_data_end+0xfffda198>
   421b0:	38000126 	beq	r7,zero,421b8 <__divsi3+0x60>
   421b4:	0085c83a 	sub	r2,zero,r2
   421b8:	f800283a 	ret
   421bc:	014bc83a 	sub	r5,zero,r5
   421c0:	39c0005c 	xori	r7,r7,1
   421c4:	003fe706 	br	42164 <__alt_data_end+0xfffda164>
   421c8:	0109c83a 	sub	r4,zero,r4
   421cc:	01c00044 	movi	r7,1
   421d0:	003fe306 	br	42160 <__alt_data_end+0xfffda160>
   421d4:	00c00044 	movi	r3,1
   421d8:	003fee06 	br	42194 <__alt_data_end+0xfffda194>

000421dc <__modsi3>:
   421dc:	20001716 	blt	r4,zero,4223c <__modsi3+0x60>
   421e0:	000f883a 	mov	r7,zero
   421e4:	2005883a 	mov	r2,r4
   421e8:	28001216 	blt	r5,zero,42234 <__modsi3+0x58>
   421ec:	2900162e 	bgeu	r5,r4,42248 <__modsi3+0x6c>
   421f0:	01800804 	movi	r6,32
   421f4:	00c00044 	movi	r3,1
   421f8:	00000106 	br	42200 <__modsi3+0x24>
   421fc:	30000a26 	beq	r6,zero,42228 <__modsi3+0x4c>
   42200:	294b883a 	add	r5,r5,r5
   42204:	31bfffc4 	addi	r6,r6,-1
   42208:	18c7883a 	add	r3,r3,r3
   4220c:	293ffb36 	bltu	r5,r4,421fc <__alt_data_end+0xfffda1fc>
   42210:	18000526 	beq	r3,zero,42228 <__modsi3+0x4c>
   42214:	1806d07a 	srli	r3,r3,1
   42218:	11400136 	bltu	r2,r5,42220 <__modsi3+0x44>
   4221c:	1145c83a 	sub	r2,r2,r5
   42220:	280ad07a 	srli	r5,r5,1
   42224:	183ffb1e 	bne	r3,zero,42214 <__alt_data_end+0xfffda214>
   42228:	38000126 	beq	r7,zero,42230 <__modsi3+0x54>
   4222c:	0085c83a 	sub	r2,zero,r2
   42230:	f800283a 	ret
   42234:	014bc83a 	sub	r5,zero,r5
   42238:	003fec06 	br	421ec <__alt_data_end+0xfffda1ec>
   4223c:	0109c83a 	sub	r4,zero,r4
   42240:	01c00044 	movi	r7,1
   42244:	003fe706 	br	421e4 <__alt_data_end+0xfffda1e4>
   42248:	00c00044 	movi	r3,1
   4224c:	003ff106 	br	42214 <__alt_data_end+0xfffda214>

00042250 <__udivsi3>:
   42250:	200d883a 	mov	r6,r4
   42254:	2900152e 	bgeu	r5,r4,422ac <__udivsi3+0x5c>
   42258:	28001416 	blt	r5,zero,422ac <__udivsi3+0x5c>
   4225c:	00800804 	movi	r2,32
   42260:	00c00044 	movi	r3,1
   42264:	00000206 	br	42270 <__udivsi3+0x20>
   42268:	10000e26 	beq	r2,zero,422a4 <__udivsi3+0x54>
   4226c:	28000516 	blt	r5,zero,42284 <__udivsi3+0x34>
   42270:	294b883a 	add	r5,r5,r5
   42274:	10bfffc4 	addi	r2,r2,-1
   42278:	18c7883a 	add	r3,r3,r3
   4227c:	293ffa36 	bltu	r5,r4,42268 <__alt_data_end+0xfffda268>
   42280:	18000826 	beq	r3,zero,422a4 <__udivsi3+0x54>
   42284:	0005883a 	mov	r2,zero
   42288:	31400236 	bltu	r6,r5,42294 <__udivsi3+0x44>
   4228c:	314dc83a 	sub	r6,r6,r5
   42290:	10c4b03a 	or	r2,r2,r3
   42294:	1806d07a 	srli	r3,r3,1
   42298:	280ad07a 	srli	r5,r5,1
   4229c:	183ffa1e 	bne	r3,zero,42288 <__alt_data_end+0xfffda288>
   422a0:	f800283a 	ret
   422a4:	0005883a 	mov	r2,zero
   422a8:	f800283a 	ret
   422ac:	00c00044 	movi	r3,1
   422b0:	003ff406 	br	42284 <__alt_data_end+0xfffda284>

000422b4 <__umodsi3>:
   422b4:	2005883a 	mov	r2,r4
   422b8:	2900122e 	bgeu	r5,r4,42304 <__umodsi3+0x50>
   422bc:	28001116 	blt	r5,zero,42304 <__umodsi3+0x50>
   422c0:	01800804 	movi	r6,32
   422c4:	00c00044 	movi	r3,1
   422c8:	00000206 	br	422d4 <__umodsi3+0x20>
   422cc:	30000c26 	beq	r6,zero,42300 <__umodsi3+0x4c>
   422d0:	28000516 	blt	r5,zero,422e8 <__umodsi3+0x34>
   422d4:	294b883a 	add	r5,r5,r5
   422d8:	31bfffc4 	addi	r6,r6,-1
   422dc:	18c7883a 	add	r3,r3,r3
   422e0:	293ffa36 	bltu	r5,r4,422cc <__alt_data_end+0xfffda2cc>
   422e4:	18000626 	beq	r3,zero,42300 <__umodsi3+0x4c>
   422e8:	1806d07a 	srli	r3,r3,1
   422ec:	11400136 	bltu	r2,r5,422f4 <__umodsi3+0x40>
   422f0:	1145c83a 	sub	r2,r2,r5
   422f4:	280ad07a 	srli	r5,r5,1
   422f8:	183ffb1e 	bne	r3,zero,422e8 <__alt_data_end+0xfffda2e8>
   422fc:	f800283a 	ret
   42300:	f800283a 	ret
   42304:	00c00044 	movi	r3,1
   42308:	003ff706 	br	422e8 <__alt_data_end+0xfffda2e8>

0004230c <_printf_r>:
   4230c:	defffd04 	addi	sp,sp,-12
   42310:	dfc00015 	stw	ra,0(sp)
   42314:	d9800115 	stw	r6,4(sp)
   42318:	d9c00215 	stw	r7,8(sp)
   4231c:	20c00217 	ldw	r3,8(r4)
   42320:	01800134 	movhi	r6,4
   42324:	318a7c04 	addi	r6,r6,10736
   42328:	19800115 	stw	r6,4(r3)
   4232c:	280d883a 	mov	r6,r5
   42330:	21400217 	ldw	r5,8(r4)
   42334:	d9c00104 	addi	r7,sp,4
   42338:	00424b00 	call	424b0 <___vfprintf_internal_r>
   4233c:	dfc00017 	ldw	ra,0(sp)
   42340:	dec00304 	addi	sp,sp,12
   42344:	f800283a 	ret

00042348 <printf>:
   42348:	defffc04 	addi	sp,sp,-16
   4234c:	dfc00015 	stw	ra,0(sp)
   42350:	d9400115 	stw	r5,4(sp)
   42354:	d9800215 	stw	r6,8(sp)
   42358:	d9c00315 	stw	r7,12(sp)
   4235c:	00800134 	movhi	r2,4
   42360:	10926a04 	addi	r2,r2,18856
   42364:	10800017 	ldw	r2,0(r2)
   42368:	01400134 	movhi	r5,4
   4236c:	294a7c04 	addi	r5,r5,10736
   42370:	10c00217 	ldw	r3,8(r2)
   42374:	d9800104 	addi	r6,sp,4
   42378:	19400115 	stw	r5,4(r3)
   4237c:	200b883a 	mov	r5,r4
   42380:	11000217 	ldw	r4,8(r2)
   42384:	00429d40 	call	429d4 <__vfprintf_internal>
   42388:	dfc00017 	ldw	ra,0(sp)
   4238c:	dec00404 	addi	sp,sp,16
   42390:	f800283a 	ret

00042394 <_puts_r>:
   42394:	defffd04 	addi	sp,sp,-12
   42398:	dc000015 	stw	r16,0(sp)
   4239c:	2021883a 	mov	r16,r4
   423a0:	2809883a 	mov	r4,r5
   423a4:	dfc00215 	stw	ra,8(sp)
   423a8:	dc400115 	stw	r17,4(sp)
   423ac:	2823883a 	mov	r17,r5
   423b0:	00424280 	call	42428 <strlen>
   423b4:	81400217 	ldw	r5,8(r16)
   423b8:	01000134 	movhi	r4,4
   423bc:	210a7c04 	addi	r4,r4,10736
   423c0:	29000115 	stw	r4,4(r5)
   423c4:	100f883a 	mov	r7,r2
   423c8:	880d883a 	mov	r6,r17
   423cc:	8009883a 	mov	r4,r16
   423d0:	00429f00 	call	429f0 <__sfvwrite_small_dev>
   423d4:	00ffffc4 	movi	r3,-1
   423d8:	10c00926 	beq	r2,r3,42400 <_puts_r+0x6c>
   423dc:	81400217 	ldw	r5,8(r16)
   423e0:	01800134 	movhi	r6,4
   423e4:	01c00044 	movi	r7,1
   423e8:	28800117 	ldw	r2,4(r5)
   423ec:	3191ab04 	addi	r6,r6,18092
   423f0:	8009883a 	mov	r4,r16
   423f4:	103ee83a 	callr	r2
   423f8:	10bfffe0 	cmpeqi	r2,r2,-1
   423fc:	0085c83a 	sub	r2,zero,r2
   42400:	dfc00217 	ldw	ra,8(sp)
   42404:	dc400117 	ldw	r17,4(sp)
   42408:	dc000017 	ldw	r16,0(sp)
   4240c:	dec00304 	addi	sp,sp,12
   42410:	f800283a 	ret

00042414 <puts>:
   42414:	00800134 	movhi	r2,4
   42418:	10926a04 	addi	r2,r2,18856
   4241c:	200b883a 	mov	r5,r4
   42420:	11000017 	ldw	r4,0(r2)
   42424:	00423941 	jmpi	42394 <_puts_r>

00042428 <strlen>:
   42428:	2005883a 	mov	r2,r4
   4242c:	10c00007 	ldb	r3,0(r2)
   42430:	18000226 	beq	r3,zero,4243c <strlen+0x14>
   42434:	10800044 	addi	r2,r2,1
   42438:	003ffc06 	br	4242c <__alt_data_end+0xfffda42c>
   4243c:	1105c83a 	sub	r2,r2,r4
   42440:	f800283a 	ret

00042444 <print_repeat>:
   42444:	defffb04 	addi	sp,sp,-20
   42448:	dc800315 	stw	r18,12(sp)
   4244c:	dc400215 	stw	r17,8(sp)
   42450:	dc000115 	stw	r16,4(sp)
   42454:	dfc00415 	stw	ra,16(sp)
   42458:	2025883a 	mov	r18,r4
   4245c:	2823883a 	mov	r17,r5
   42460:	d9800005 	stb	r6,0(sp)
   42464:	3821883a 	mov	r16,r7
   42468:	04000a0e 	bge	zero,r16,42494 <print_repeat+0x50>
   4246c:	88800117 	ldw	r2,4(r17)
   42470:	01c00044 	movi	r7,1
   42474:	d80d883a 	mov	r6,sp
   42478:	880b883a 	mov	r5,r17
   4247c:	9009883a 	mov	r4,r18
   42480:	103ee83a 	callr	r2
   42484:	843fffc4 	addi	r16,r16,-1
   42488:	103ff726 	beq	r2,zero,42468 <__alt_data_end+0xfffda468>
   4248c:	00bfffc4 	movi	r2,-1
   42490:	00000106 	br	42498 <print_repeat+0x54>
   42494:	0005883a 	mov	r2,zero
   42498:	dfc00417 	ldw	ra,16(sp)
   4249c:	dc800317 	ldw	r18,12(sp)
   424a0:	dc400217 	ldw	r17,8(sp)
   424a4:	dc000117 	ldw	r16,4(sp)
   424a8:	dec00504 	addi	sp,sp,20
   424ac:	f800283a 	ret

000424b0 <___vfprintf_internal_r>:
   424b0:	deffe504 	addi	sp,sp,-108
   424b4:	d8c00804 	addi	r3,sp,32
   424b8:	df001915 	stw	fp,100(sp)
   424bc:	ddc01815 	stw	r23,96(sp)
   424c0:	dd801715 	stw	r22,92(sp)
   424c4:	dd401615 	stw	r21,88(sp)
   424c8:	dd001515 	stw	r20,84(sp)
   424cc:	dcc01415 	stw	r19,80(sp)
   424d0:	dc801315 	stw	r18,76(sp)
   424d4:	dc401215 	stw	r17,72(sp)
   424d8:	dc001115 	stw	r16,68(sp)
   424dc:	dfc01a15 	stw	ra,104(sp)
   424e0:	2027883a 	mov	r19,r4
   424e4:	2839883a 	mov	fp,r5
   424e8:	382d883a 	mov	r22,r7
   424ec:	d9800f15 	stw	r6,60(sp)
   424f0:	0021883a 	mov	r16,zero
   424f4:	d8000e15 	stw	zero,56(sp)
   424f8:	002f883a 	mov	r23,zero
   424fc:	002b883a 	mov	r21,zero
   42500:	0025883a 	mov	r18,zero
   42504:	0023883a 	mov	r17,zero
   42508:	d8000c15 	stw	zero,48(sp)
   4250c:	d8000b15 	stw	zero,44(sp)
   42510:	0029883a 	mov	r20,zero
   42514:	d8c00915 	stw	r3,36(sp)
   42518:	d8c00f17 	ldw	r3,60(sp)
   4251c:	19000003 	ldbu	r4,0(r3)
   42520:	20803fcc 	andi	r2,r4,255
   42524:	1080201c 	xori	r2,r2,128
   42528:	10bfe004 	addi	r2,r2,-128
   4252c:	10011c26 	beq	r2,zero,429a0 <___vfprintf_internal_r+0x4f0>
   42530:	00c00044 	movi	r3,1
   42534:	a0c01426 	beq	r20,r3,42588 <___vfprintf_internal_r+0xd8>
   42538:	1d000216 	blt	r3,r20,42544 <___vfprintf_internal_r+0x94>
   4253c:	a0000626 	beq	r20,zero,42558 <___vfprintf_internal_r+0xa8>
   42540:	00011306 	br	42990 <___vfprintf_internal_r+0x4e0>
   42544:	01400084 	movi	r5,2
   42548:	a1401d26 	beq	r20,r5,425c0 <___vfprintf_internal_r+0x110>
   4254c:	014000c4 	movi	r5,3
   42550:	a1402926 	beq	r20,r5,425f8 <___vfprintf_internal_r+0x148>
   42554:	00010e06 	br	42990 <___vfprintf_internal_r+0x4e0>
   42558:	01400944 	movi	r5,37
   4255c:	1140fb26 	beq	r2,r5,4294c <___vfprintf_internal_r+0x49c>
   42560:	e0800117 	ldw	r2,4(fp)
   42564:	d9000005 	stb	r4,0(sp)
   42568:	01c00044 	movi	r7,1
   4256c:	d80d883a 	mov	r6,sp
   42570:	e00b883a 	mov	r5,fp
   42574:	9809883a 	mov	r4,r19
   42578:	103ee83a 	callr	r2
   4257c:	1000d61e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   42580:	84000044 	addi	r16,r16,1
   42584:	00010206 	br	42990 <___vfprintf_internal_r+0x4e0>
   42588:	01400c04 	movi	r5,48
   4258c:	1140f826 	beq	r2,r5,42970 <___vfprintf_internal_r+0x4c0>
   42590:	01400944 	movi	r5,37
   42594:	11400a1e 	bne	r2,r5,425c0 <___vfprintf_internal_r+0x110>
   42598:	d8800005 	stb	r2,0(sp)
   4259c:	e0800117 	ldw	r2,4(fp)
   425a0:	a00f883a 	mov	r7,r20
   425a4:	d80d883a 	mov	r6,sp
   425a8:	e00b883a 	mov	r5,fp
   425ac:	9809883a 	mov	r4,r19
   425b0:	103ee83a 	callr	r2
   425b4:	1000c81e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   425b8:	84000044 	addi	r16,r16,1
   425bc:	0000f306 	br	4298c <___vfprintf_internal_r+0x4dc>
   425c0:	217ff404 	addi	r5,r4,-48
   425c4:	29403fcc 	andi	r5,r5,255
   425c8:	00c00244 	movi	r3,9
   425cc:	19400736 	bltu	r3,r5,425ec <___vfprintf_internal_r+0x13c>
   425d0:	00bfffc4 	movi	r2,-1
   425d4:	88800226 	beq	r17,r2,425e0 <___vfprintf_internal_r+0x130>
   425d8:	8c4002a4 	muli	r17,r17,10
   425dc:	00000106 	br	425e4 <___vfprintf_internal_r+0x134>
   425e0:	0023883a 	mov	r17,zero
   425e4:	2c63883a 	add	r17,r5,r17
   425e8:	0000e206 	br	42974 <___vfprintf_internal_r+0x4c4>
   425ec:	01400b84 	movi	r5,46
   425f0:	1140e426 	beq	r2,r5,42984 <___vfprintf_internal_r+0x4d4>
   425f4:	05000084 	movi	r20,2
   425f8:	213ff404 	addi	r4,r4,-48
   425fc:	21003fcc 	andi	r4,r4,255
   42600:	00c00244 	movi	r3,9
   42604:	19000736 	bltu	r3,r4,42624 <___vfprintf_internal_r+0x174>
   42608:	00bfffc4 	movi	r2,-1
   4260c:	90800226 	beq	r18,r2,42618 <___vfprintf_internal_r+0x168>
   42610:	948002a4 	muli	r18,r18,10
   42614:	00000106 	br	4261c <___vfprintf_internal_r+0x16c>
   42618:	0025883a 	mov	r18,zero
   4261c:	24a5883a 	add	r18,r4,r18
   42620:	0000db06 	br	42990 <___vfprintf_internal_r+0x4e0>
   42624:	00c01b04 	movi	r3,108
   42628:	10c0d426 	beq	r2,r3,4297c <___vfprintf_internal_r+0x4cc>
   4262c:	013fffc4 	movi	r4,-1
   42630:	91000226 	beq	r18,r4,4263c <___vfprintf_internal_r+0x18c>
   42634:	d8000b15 	stw	zero,44(sp)
   42638:	00000106 	br	42640 <___vfprintf_internal_r+0x190>
   4263c:	04800044 	movi	r18,1
   42640:	01001a44 	movi	r4,105
   42644:	11001626 	beq	r2,r4,426a0 <___vfprintf_internal_r+0x1f0>
   42648:	20800916 	blt	r4,r2,42670 <___vfprintf_internal_r+0x1c0>
   4264c:	010018c4 	movi	r4,99
   42650:	11008a26 	beq	r2,r4,4287c <___vfprintf_internal_r+0x3cc>
   42654:	01001904 	movi	r4,100
   42658:	11001126 	beq	r2,r4,426a0 <___vfprintf_internal_r+0x1f0>
   4265c:	01001604 	movi	r4,88
   42660:	1100ca1e 	bne	r2,r4,4298c <___vfprintf_internal_r+0x4dc>
   42664:	00c00044 	movi	r3,1
   42668:	d8c00e15 	stw	r3,56(sp)
   4266c:	00001406 	br	426c0 <___vfprintf_internal_r+0x210>
   42670:	01001cc4 	movi	r4,115
   42674:	11009a26 	beq	r2,r4,428e0 <___vfprintf_internal_r+0x430>
   42678:	20800416 	blt	r4,r2,4268c <___vfprintf_internal_r+0x1dc>
   4267c:	01001bc4 	movi	r4,111
   42680:	1100c21e 	bne	r2,r4,4298c <___vfprintf_internal_r+0x4dc>
   42684:	05400204 	movi	r21,8
   42688:	00000e06 	br	426c4 <___vfprintf_internal_r+0x214>
   4268c:	01001d44 	movi	r4,117
   42690:	11000c26 	beq	r2,r4,426c4 <___vfprintf_internal_r+0x214>
   42694:	01001e04 	movi	r4,120
   42698:	11000926 	beq	r2,r4,426c0 <___vfprintf_internal_r+0x210>
   4269c:	0000bb06 	br	4298c <___vfprintf_internal_r+0x4dc>
   426a0:	b5000104 	addi	r20,r22,4
   426a4:	b8000726 	beq	r23,zero,426c4 <___vfprintf_internal_r+0x214>
   426a8:	dd000d15 	stw	r20,52(sp)
   426ac:	b5800017 	ldw	r22,0(r22)
   426b0:	b000080e 	bge	r22,zero,426d4 <___vfprintf_internal_r+0x224>
   426b4:	05adc83a 	sub	r22,zero,r22
   426b8:	02800044 	movi	r10,1
   426bc:	00000606 	br	426d8 <___vfprintf_internal_r+0x228>
   426c0:	05400404 	movi	r21,16
   426c4:	b0c00104 	addi	r3,r22,4
   426c8:	d8c00d15 	stw	r3,52(sp)
   426cc:	b5800017 	ldw	r22,0(r22)
   426d0:	002f883a 	mov	r23,zero
   426d4:	0015883a 	mov	r10,zero
   426d8:	d829883a 	mov	r20,sp
   426dc:	b0001426 	beq	r22,zero,42730 <___vfprintf_internal_r+0x280>
   426e0:	b009883a 	mov	r4,r22
   426e4:	a80b883a 	mov	r5,r21
   426e8:	da801015 	stw	r10,64(sp)
   426ec:	00422500 	call	42250 <__udivsi3>
   426f0:	1549383a 	mul	r4,r2,r21
   426f4:	00c00244 	movi	r3,9
   426f8:	da801017 	ldw	r10,64(sp)
   426fc:	b12dc83a 	sub	r22,r22,r4
   42700:	1d800216 	blt	r3,r22,4270c <___vfprintf_internal_r+0x25c>
   42704:	b5800c04 	addi	r22,r22,48
   42708:	00000506 	br	42720 <___vfprintf_internal_r+0x270>
   4270c:	d8c00e17 	ldw	r3,56(sp)
   42710:	18000226 	beq	r3,zero,4271c <___vfprintf_internal_r+0x26c>
   42714:	b5800dc4 	addi	r22,r22,55
   42718:	00000106 	br	42720 <___vfprintf_internal_r+0x270>
   4271c:	b58015c4 	addi	r22,r22,87
   42720:	a5800005 	stb	r22,0(r20)
   42724:	a5000044 	addi	r20,r20,1
   42728:	102d883a 	mov	r22,r2
   4272c:	003feb06 	br	426dc <__alt_data_end+0xfffda6dc>
   42730:	a6c7c83a 	sub	r3,r20,sp
   42734:	d8c00a15 	stw	r3,40(sp)
   42738:	90c5c83a 	sub	r2,r18,r3
   4273c:	00800a0e 	bge	zero,r2,42768 <___vfprintf_internal_r+0x2b8>
   42740:	a085883a 	add	r2,r20,r2
   42744:	01400c04 	movi	r5,48
   42748:	d8c00917 	ldw	r3,36(sp)
   4274c:	a009883a 	mov	r4,r20
   42750:	a0c0032e 	bgeu	r20,r3,42760 <___vfprintf_internal_r+0x2b0>
   42754:	a5000044 	addi	r20,r20,1
   42758:	21400005 	stb	r5,0(r4)
   4275c:	a0bffa1e 	bne	r20,r2,42748 <__alt_data_end+0xfffda748>
   42760:	a6c7c83a 	sub	r3,r20,sp
   42764:	d8c00a15 	stw	r3,40(sp)
   42768:	d8c00a17 	ldw	r3,40(sp)
   4276c:	50d3883a 	add	r9,r10,r3
   42770:	d8c00b17 	ldw	r3,44(sp)
   42774:	8a6dc83a 	sub	r22,r17,r9
   42778:	18001726 	beq	r3,zero,427d8 <___vfprintf_internal_r+0x328>
   4277c:	50000a26 	beq	r10,zero,427a8 <___vfprintf_internal_r+0x2f8>
   42780:	00800b44 	movi	r2,45
   42784:	d8800805 	stb	r2,32(sp)
   42788:	e0800117 	ldw	r2,4(fp)
   4278c:	01c00044 	movi	r7,1
   42790:	d9800804 	addi	r6,sp,32
   42794:	e00b883a 	mov	r5,fp
   42798:	9809883a 	mov	r4,r19
   4279c:	103ee83a 	callr	r2
   427a0:	10004d1e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   427a4:	84000044 	addi	r16,r16,1
   427a8:	0580070e 	bge	zero,r22,427c8 <___vfprintf_internal_r+0x318>
   427ac:	b00f883a 	mov	r7,r22
   427b0:	01800c04 	movi	r6,48
   427b4:	e00b883a 	mov	r5,fp
   427b8:	9809883a 	mov	r4,r19
   427bc:	00424440 	call	42444 <print_repeat>
   427c0:	1000451e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   427c4:	85a1883a 	add	r16,r16,r22
   427c8:	d8c00a17 	ldw	r3,40(sp)
   427cc:	a013883a 	mov	r9,r20
   427d0:	1d2dc83a 	sub	r22,r3,r20
   427d4:	00002206 	br	42860 <___vfprintf_internal_r+0x3b0>
   427d8:	0580090e 	bge	zero,r22,42800 <___vfprintf_internal_r+0x350>
   427dc:	b00f883a 	mov	r7,r22
   427e0:	01800804 	movi	r6,32
   427e4:	e00b883a 	mov	r5,fp
   427e8:	9809883a 	mov	r4,r19
   427ec:	da801015 	stw	r10,64(sp)
   427f0:	00424440 	call	42444 <print_repeat>
   427f4:	da801017 	ldw	r10,64(sp)
   427f8:	1000371e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   427fc:	85a1883a 	add	r16,r16,r22
   42800:	503ff126 	beq	r10,zero,427c8 <__alt_data_end+0xfffda7c8>
   42804:	00800b44 	movi	r2,45
   42808:	d8800805 	stb	r2,32(sp)
   4280c:	e0800117 	ldw	r2,4(fp)
   42810:	01c00044 	movi	r7,1
   42814:	d9800804 	addi	r6,sp,32
   42818:	e00b883a 	mov	r5,fp
   4281c:	9809883a 	mov	r4,r19
   42820:	103ee83a 	callr	r2
   42824:	10002c1e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   42828:	84000044 	addi	r16,r16,1
   4282c:	003fe606 	br	427c8 <__alt_data_end+0xfffda7c8>
   42830:	4a7fffc4 	addi	r9,r9,-1
   42834:	48800003 	ldbu	r2,0(r9)
   42838:	01c00044 	movi	r7,1
   4283c:	d9800804 	addi	r6,sp,32
   42840:	d8800805 	stb	r2,32(sp)
   42844:	e0800117 	ldw	r2,4(fp)
   42848:	e00b883a 	mov	r5,fp
   4284c:	da401015 	stw	r9,64(sp)
   42850:	9809883a 	mov	r4,r19
   42854:	103ee83a 	callr	r2
   42858:	da401017 	ldw	r9,64(sp)
   4285c:	10001e1e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   42860:	8245c83a 	sub	r2,r16,r9
   42864:	4d89883a 	add	r4,r9,r22
   42868:	a085883a 	add	r2,r20,r2
   4286c:	013ff016 	blt	zero,r4,42830 <__alt_data_end+0xfffda830>
   42870:	1021883a 	mov	r16,r2
   42874:	dd800d17 	ldw	r22,52(sp)
   42878:	00004406 	br	4298c <___vfprintf_internal_r+0x4dc>
   4287c:	00800044 	movi	r2,1
   42880:	1440080e 	bge	r2,r17,428a4 <___vfprintf_internal_r+0x3f4>
   42884:	8d3fffc4 	addi	r20,r17,-1
   42888:	a00f883a 	mov	r7,r20
   4288c:	01800804 	movi	r6,32
   42890:	e00b883a 	mov	r5,fp
   42894:	9809883a 	mov	r4,r19
   42898:	00424440 	call	42444 <print_repeat>
   4289c:	10000e1e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   428a0:	8521883a 	add	r16,r16,r20
   428a4:	b0800017 	ldw	r2,0(r22)
   428a8:	01c00044 	movi	r7,1
   428ac:	d80d883a 	mov	r6,sp
   428b0:	d8800005 	stb	r2,0(sp)
   428b4:	e0800117 	ldw	r2,4(fp)
   428b8:	e00b883a 	mov	r5,fp
   428bc:	9809883a 	mov	r4,r19
   428c0:	b5000104 	addi	r20,r22,4
   428c4:	103ee83a 	callr	r2
   428c8:	1000031e 	bne	r2,zero,428d8 <___vfprintf_internal_r+0x428>
   428cc:	84000044 	addi	r16,r16,1
   428d0:	a02d883a 	mov	r22,r20
   428d4:	00002d06 	br	4298c <___vfprintf_internal_r+0x4dc>
   428d8:	00bfffc4 	movi	r2,-1
   428dc:	00003106 	br	429a4 <___vfprintf_internal_r+0x4f4>
   428e0:	b5000017 	ldw	r20,0(r22)
   428e4:	b0c00104 	addi	r3,r22,4
   428e8:	d8c00a15 	stw	r3,40(sp)
   428ec:	a009883a 	mov	r4,r20
   428f0:	00424280 	call	42428 <strlen>
   428f4:	8893c83a 	sub	r9,r17,r2
   428f8:	102d883a 	mov	r22,r2
   428fc:	0240090e 	bge	zero,r9,42924 <___vfprintf_internal_r+0x474>
   42900:	480f883a 	mov	r7,r9
   42904:	01800804 	movi	r6,32
   42908:	e00b883a 	mov	r5,fp
   4290c:	9809883a 	mov	r4,r19
   42910:	da401015 	stw	r9,64(sp)
   42914:	00424440 	call	42444 <print_repeat>
   42918:	da401017 	ldw	r9,64(sp)
   4291c:	103fee1e 	bne	r2,zero,428d8 <__alt_data_end+0xfffda8d8>
   42920:	8261883a 	add	r16,r16,r9
   42924:	e0800117 	ldw	r2,4(fp)
   42928:	b00f883a 	mov	r7,r22
   4292c:	a00d883a 	mov	r6,r20
   42930:	e00b883a 	mov	r5,fp
   42934:	9809883a 	mov	r4,r19
   42938:	103ee83a 	callr	r2
   4293c:	103fe61e 	bne	r2,zero,428d8 <__alt_data_end+0xfffda8d8>
   42940:	85a1883a 	add	r16,r16,r22
   42944:	dd800a17 	ldw	r22,40(sp)
   42948:	00001006 	br	4298c <___vfprintf_internal_r+0x4dc>
   4294c:	05c00044 	movi	r23,1
   42950:	04bfffc4 	movi	r18,-1
   42954:	d8000e15 	stw	zero,56(sp)
   42958:	05400284 	movi	r21,10
   4295c:	9023883a 	mov	r17,r18
   42960:	d8000c15 	stw	zero,48(sp)
   42964:	d8000b15 	stw	zero,44(sp)
   42968:	b829883a 	mov	r20,r23
   4296c:	00000806 	br	42990 <___vfprintf_internal_r+0x4e0>
   42970:	dd000b15 	stw	r20,44(sp)
   42974:	05000084 	movi	r20,2
   42978:	00000506 	br	42990 <___vfprintf_internal_r+0x4e0>
   4297c:	00c00044 	movi	r3,1
   42980:	d8c00c15 	stw	r3,48(sp)
   42984:	050000c4 	movi	r20,3
   42988:	00000106 	br	42990 <___vfprintf_internal_r+0x4e0>
   4298c:	0029883a 	mov	r20,zero
   42990:	d8c00f17 	ldw	r3,60(sp)
   42994:	18c00044 	addi	r3,r3,1
   42998:	d8c00f15 	stw	r3,60(sp)
   4299c:	003ede06 	br	42518 <__alt_data_end+0xfffda518>
   429a0:	8005883a 	mov	r2,r16
   429a4:	dfc01a17 	ldw	ra,104(sp)
   429a8:	df001917 	ldw	fp,100(sp)
   429ac:	ddc01817 	ldw	r23,96(sp)
   429b0:	dd801717 	ldw	r22,92(sp)
   429b4:	dd401617 	ldw	r21,88(sp)
   429b8:	dd001517 	ldw	r20,84(sp)
   429bc:	dcc01417 	ldw	r19,80(sp)
   429c0:	dc801317 	ldw	r18,76(sp)
   429c4:	dc401217 	ldw	r17,72(sp)
   429c8:	dc001117 	ldw	r16,68(sp)
   429cc:	dec01b04 	addi	sp,sp,108
   429d0:	f800283a 	ret

000429d4 <__vfprintf_internal>:
   429d4:	00800134 	movhi	r2,4
   429d8:	10926a04 	addi	r2,r2,18856
   429dc:	300f883a 	mov	r7,r6
   429e0:	280d883a 	mov	r6,r5
   429e4:	200b883a 	mov	r5,r4
   429e8:	11000017 	ldw	r4,0(r2)
   429ec:	00424b01 	jmpi	424b0 <___vfprintf_internal_r>

000429f0 <__sfvwrite_small_dev>:
   429f0:	2880000b 	ldhu	r2,0(r5)
   429f4:	1080020c 	andi	r2,r2,8
   429f8:	10002126 	beq	r2,zero,42a80 <__sfvwrite_small_dev+0x90>
   429fc:	2880008f 	ldh	r2,2(r5)
   42a00:	defffa04 	addi	sp,sp,-24
   42a04:	dc000015 	stw	r16,0(sp)
   42a08:	dfc00515 	stw	ra,20(sp)
   42a0c:	dd000415 	stw	r20,16(sp)
   42a10:	dcc00315 	stw	r19,12(sp)
   42a14:	dc800215 	stw	r18,8(sp)
   42a18:	dc400115 	stw	r17,4(sp)
   42a1c:	2821883a 	mov	r16,r5
   42a20:	10001216 	blt	r2,zero,42a6c <__sfvwrite_small_dev+0x7c>
   42a24:	2027883a 	mov	r19,r4
   42a28:	3025883a 	mov	r18,r6
   42a2c:	3823883a 	mov	r17,r7
   42a30:	05010004 	movi	r20,1024
   42a34:	04400b0e 	bge	zero,r17,42a64 <__sfvwrite_small_dev+0x74>
   42a38:	880f883a 	mov	r7,r17
   42a3c:	a440010e 	bge	r20,r17,42a44 <__sfvwrite_small_dev+0x54>
   42a40:	01c10004 	movi	r7,1024
   42a44:	8140008f 	ldh	r5,2(r16)
   42a48:	900d883a 	mov	r6,r18
   42a4c:	9809883a 	mov	r4,r19
   42a50:	0042aa80 	call	42aa8 <_write_r>
   42a54:	0080050e 	bge	zero,r2,42a6c <__sfvwrite_small_dev+0x7c>
   42a58:	88a3c83a 	sub	r17,r17,r2
   42a5c:	90a5883a 	add	r18,r18,r2
   42a60:	003ff406 	br	42a34 <__alt_data_end+0xfffdaa34>
   42a64:	0005883a 	mov	r2,zero
   42a68:	00000706 	br	42a88 <__sfvwrite_small_dev+0x98>
   42a6c:	8080000b 	ldhu	r2,0(r16)
   42a70:	10801014 	ori	r2,r2,64
   42a74:	8080000d 	sth	r2,0(r16)
   42a78:	00bfffc4 	movi	r2,-1
   42a7c:	00000206 	br	42a88 <__sfvwrite_small_dev+0x98>
   42a80:	00bfffc4 	movi	r2,-1
   42a84:	f800283a 	ret
   42a88:	dfc00517 	ldw	ra,20(sp)
   42a8c:	dd000417 	ldw	r20,16(sp)
   42a90:	dcc00317 	ldw	r19,12(sp)
   42a94:	dc800217 	ldw	r18,8(sp)
   42a98:	dc400117 	ldw	r17,4(sp)
   42a9c:	dc000017 	ldw	r16,0(sp)
   42aa0:	dec00604 	addi	sp,sp,24
   42aa4:	f800283a 	ret

00042aa8 <_write_r>:
   42aa8:	defffd04 	addi	sp,sp,-12
   42aac:	dc000015 	stw	r16,0(sp)
   42ab0:	04000134 	movhi	r16,4
   42ab4:	dc400115 	stw	r17,4(sp)
   42ab8:	84133404 	addi	r16,r16,19664
   42abc:	2023883a 	mov	r17,r4
   42ac0:	2809883a 	mov	r4,r5
   42ac4:	300b883a 	mov	r5,r6
   42ac8:	380d883a 	mov	r6,r7
   42acc:	dfc00215 	stw	ra,8(sp)
   42ad0:	80000015 	stw	zero,0(r16)
   42ad4:	0042f340 	call	42f34 <write>
   42ad8:	00ffffc4 	movi	r3,-1
   42adc:	10c0031e 	bne	r2,r3,42aec <_write_r+0x44>
   42ae0:	80c00017 	ldw	r3,0(r16)
   42ae4:	18000126 	beq	r3,zero,42aec <_write_r+0x44>
   42ae8:	88c00015 	stw	r3,0(r17)
   42aec:	dfc00217 	ldw	ra,8(sp)
   42af0:	dc400117 	ldw	r17,4(sp)
   42af4:	dc000017 	ldw	r16,0(sp)
   42af8:	dec00304 	addi	sp,sp,12
   42afc:	f800283a 	ret

00042b00 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42b00:	defff904 	addi	sp,sp,-28
   42b04:	dfc00615 	stw	ra,24(sp)
   42b08:	df000515 	stw	fp,20(sp)
   42b0c:	df000504 	addi	fp,sp,20
   42b10:	e13ffc15 	stw	r4,-16(fp)
   42b14:	e17ffd15 	stw	r5,-12(fp)
   42b18:	e1bffe15 	stw	r6,-8(fp)
   42b1c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   42b20:	e0800217 	ldw	r2,8(fp)
   42b24:	d8800015 	stw	r2,0(sp)
   42b28:	e1ffff17 	ldw	r7,-4(fp)
   42b2c:	e1bffe17 	ldw	r6,-8(fp)
   42b30:	e17ffd17 	ldw	r5,-12(fp)
   42b34:	e13ffc17 	ldw	r4,-16(fp)
   42b38:	0042cb00 	call	42cb0 <alt_iic_isr_register>
}  
   42b3c:	e037883a 	mov	sp,fp
   42b40:	dfc00117 	ldw	ra,4(sp)
   42b44:	df000017 	ldw	fp,0(sp)
   42b48:	dec00204 	addi	sp,sp,8
   42b4c:	f800283a 	ret

00042b50 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   42b50:	defff904 	addi	sp,sp,-28
   42b54:	df000615 	stw	fp,24(sp)
   42b58:	df000604 	addi	fp,sp,24
   42b5c:	e13ffe15 	stw	r4,-8(fp)
   42b60:	e17fff15 	stw	r5,-4(fp)
   42b64:	e0bfff17 	ldw	r2,-4(fp)
   42b68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42b6c:	0005303a 	rdctl	r2,status
   42b70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42b74:	e0fffb17 	ldw	r3,-20(fp)
   42b78:	00bfff84 	movi	r2,-2
   42b7c:	1884703a 	and	r2,r3,r2
   42b80:	1001703a 	wrctl	status,r2
  
  return context;
   42b84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42b88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   42b8c:	00c00044 	movi	r3,1
   42b90:	e0bffa17 	ldw	r2,-24(fp)
   42b94:	1884983a 	sll	r2,r3,r2
   42b98:	1007883a 	mov	r3,r2
   42b9c:	d0a0cf17 	ldw	r2,-31940(gp)
   42ba0:	1884b03a 	or	r2,r3,r2
   42ba4:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42ba8:	d0a0cf17 	ldw	r2,-31940(gp)
   42bac:	100170fa 	wrctl	ienable,r2
   42bb0:	e0bffc17 	ldw	r2,-16(fp)
   42bb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42bb8:	e0bffd17 	ldw	r2,-12(fp)
   42bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42bc0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   42bc4:	0001883a 	nop
}
   42bc8:	e037883a 	mov	sp,fp
   42bcc:	df000017 	ldw	fp,0(sp)
   42bd0:	dec00104 	addi	sp,sp,4
   42bd4:	f800283a 	ret

00042bd8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   42bd8:	defff904 	addi	sp,sp,-28
   42bdc:	df000615 	stw	fp,24(sp)
   42be0:	df000604 	addi	fp,sp,24
   42be4:	e13ffe15 	stw	r4,-8(fp)
   42be8:	e17fff15 	stw	r5,-4(fp)
   42bec:	e0bfff17 	ldw	r2,-4(fp)
   42bf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42bf4:	0005303a 	rdctl	r2,status
   42bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42bfc:	e0fffb17 	ldw	r3,-20(fp)
   42c00:	00bfff84 	movi	r2,-2
   42c04:	1884703a 	and	r2,r3,r2
   42c08:	1001703a 	wrctl	status,r2
  
  return context;
   42c0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42c10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   42c14:	00c00044 	movi	r3,1
   42c18:	e0bffa17 	ldw	r2,-24(fp)
   42c1c:	1884983a 	sll	r2,r3,r2
   42c20:	0084303a 	nor	r2,zero,r2
   42c24:	1007883a 	mov	r3,r2
   42c28:	d0a0cf17 	ldw	r2,-31940(gp)
   42c2c:	1884703a 	and	r2,r3,r2
   42c30:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42c34:	d0a0cf17 	ldw	r2,-31940(gp)
   42c38:	100170fa 	wrctl	ienable,r2
   42c3c:	e0bffc17 	ldw	r2,-16(fp)
   42c40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42c44:	e0bffd17 	ldw	r2,-12(fp)
   42c48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42c4c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   42c50:	0001883a 	nop
}
   42c54:	e037883a 	mov	sp,fp
   42c58:	df000017 	ldw	fp,0(sp)
   42c5c:	dec00104 	addi	sp,sp,4
   42c60:	f800283a 	ret

00042c64 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   42c64:	defffc04 	addi	sp,sp,-16
   42c68:	df000315 	stw	fp,12(sp)
   42c6c:	df000304 	addi	fp,sp,12
   42c70:	e13ffe15 	stw	r4,-8(fp)
   42c74:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   42c78:	000530fa 	rdctl	r2,ienable
   42c7c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   42c80:	00c00044 	movi	r3,1
   42c84:	e0bfff17 	ldw	r2,-4(fp)
   42c88:	1884983a 	sll	r2,r3,r2
   42c8c:	1007883a 	mov	r3,r2
   42c90:	e0bffd17 	ldw	r2,-12(fp)
   42c94:	1884703a 	and	r2,r3,r2
   42c98:	1004c03a 	cmpne	r2,r2,zero
   42c9c:	10803fcc 	andi	r2,r2,255
}
   42ca0:	e037883a 	mov	sp,fp
   42ca4:	df000017 	ldw	fp,0(sp)
   42ca8:	dec00104 	addi	sp,sp,4
   42cac:	f800283a 	ret

00042cb0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42cb0:	defff504 	addi	sp,sp,-44
   42cb4:	dfc00a15 	stw	ra,40(sp)
   42cb8:	df000915 	stw	fp,36(sp)
   42cbc:	df000904 	addi	fp,sp,36
   42cc0:	e13ffc15 	stw	r4,-16(fp)
   42cc4:	e17ffd15 	stw	r5,-12(fp)
   42cc8:	e1bffe15 	stw	r6,-8(fp)
   42ccc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   42cd0:	00bffa84 	movi	r2,-22
   42cd4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   42cd8:	e0bffd17 	ldw	r2,-12(fp)
   42cdc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   42ce0:	e0bff817 	ldw	r2,-32(fp)
   42ce4:	10800808 	cmpgei	r2,r2,32
   42ce8:	1000271e 	bne	r2,zero,42d88 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42cec:	0005303a 	rdctl	r2,status
   42cf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42cf4:	e0fffb17 	ldw	r3,-20(fp)
   42cf8:	00bfff84 	movi	r2,-2
   42cfc:	1884703a 	and	r2,r3,r2
   42d00:	1001703a 	wrctl	status,r2
  
  return context;
   42d04:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   42d08:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   42d0c:	00800134 	movhi	r2,4
   42d10:	10933c04 	addi	r2,r2,19696
   42d14:	e0fff817 	ldw	r3,-32(fp)
   42d18:	180690fa 	slli	r3,r3,3
   42d1c:	10c5883a 	add	r2,r2,r3
   42d20:	e0fffe17 	ldw	r3,-8(fp)
   42d24:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   42d28:	00800134 	movhi	r2,4
   42d2c:	10933c04 	addi	r2,r2,19696
   42d30:	e0fff817 	ldw	r3,-32(fp)
   42d34:	180690fa 	slli	r3,r3,3
   42d38:	10c5883a 	add	r2,r2,r3
   42d3c:	10800104 	addi	r2,r2,4
   42d40:	e0ffff17 	ldw	r3,-4(fp)
   42d44:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   42d48:	e0bffe17 	ldw	r2,-8(fp)
   42d4c:	10000526 	beq	r2,zero,42d64 <alt_iic_isr_register+0xb4>
   42d50:	e0bff817 	ldw	r2,-32(fp)
   42d54:	100b883a 	mov	r5,r2
   42d58:	e13ffc17 	ldw	r4,-16(fp)
   42d5c:	0042b500 	call	42b50 <alt_ic_irq_enable>
   42d60:	00000406 	br	42d74 <alt_iic_isr_register+0xc4>
   42d64:	e0bff817 	ldw	r2,-32(fp)
   42d68:	100b883a 	mov	r5,r2
   42d6c:	e13ffc17 	ldw	r4,-16(fp)
   42d70:	0042bd80 	call	42bd8 <alt_ic_irq_disable>
   42d74:	e0bff715 	stw	r2,-36(fp)
   42d78:	e0bffa17 	ldw	r2,-24(fp)
   42d7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42d80:	e0bff917 	ldw	r2,-28(fp)
   42d84:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   42d88:	e0bff717 	ldw	r2,-36(fp)
}
   42d8c:	e037883a 	mov	sp,fp
   42d90:	dfc00117 	ldw	ra,4(sp)
   42d94:	df000017 	ldw	fp,0(sp)
   42d98:	dec00204 	addi	sp,sp,8
   42d9c:	f800283a 	ret

00042da0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   42da0:	defffc04 	addi	sp,sp,-16
   42da4:	df000315 	stw	fp,12(sp)
   42da8:	df000304 	addi	fp,sp,12
   42dac:	e13ffd15 	stw	r4,-12(fp)
   42db0:	e17ffe15 	stw	r5,-8(fp)
   42db4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   42db8:	e0fffe17 	ldw	r3,-8(fp)
   42dbc:	e0bffd17 	ldw	r2,-12(fp)
   42dc0:	18800c26 	beq	r3,r2,42df4 <alt_load_section+0x54>
  {
    while( to != end )
   42dc4:	00000806 	br	42de8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   42dc8:	e0bffe17 	ldw	r2,-8(fp)
   42dcc:	10c00104 	addi	r3,r2,4
   42dd0:	e0fffe15 	stw	r3,-8(fp)
   42dd4:	e0fffd17 	ldw	r3,-12(fp)
   42dd8:	19000104 	addi	r4,r3,4
   42ddc:	e13ffd15 	stw	r4,-12(fp)
   42de0:	18c00017 	ldw	r3,0(r3)
   42de4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   42de8:	e0fffe17 	ldw	r3,-8(fp)
   42dec:	e0bfff17 	ldw	r2,-4(fp)
   42df0:	18bff51e 	bne	r3,r2,42dc8 <__alt_data_end+0xfffdadc8>
    {
      *to++ = *from++;
    }
  }
}
   42df4:	0001883a 	nop
   42df8:	e037883a 	mov	sp,fp
   42dfc:	df000017 	ldw	fp,0(sp)
   42e00:	dec00104 	addi	sp,sp,4
   42e04:	f800283a 	ret

00042e08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   42e08:	defffe04 	addi	sp,sp,-8
   42e0c:	dfc00115 	stw	ra,4(sp)
   42e10:	df000015 	stw	fp,0(sp)
   42e14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   42e18:	01800134 	movhi	r6,4
   42e1c:	31927404 	addi	r6,r6,18896
   42e20:	01400134 	movhi	r5,4
   42e24:	2951b904 	addi	r5,r5,18148
   42e28:	01000134 	movhi	r4,4
   42e2c:	21127404 	addi	r4,r4,18896
   42e30:	0042da00 	call	42da0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   42e34:	01800134 	movhi	r6,4
   42e38:	31809104 	addi	r6,r6,580
   42e3c:	01400134 	movhi	r5,4
   42e40:	29400804 	addi	r5,r5,32
   42e44:	01000134 	movhi	r4,4
   42e48:	21000804 	addi	r4,r4,32
   42e4c:	0042da00 	call	42da0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   42e50:	01800134 	movhi	r6,4
   42e54:	3191b904 	addi	r6,r6,18148
   42e58:	01400134 	movhi	r5,4
   42e5c:	29507104 	addi	r5,r5,16836
   42e60:	01000134 	movhi	r4,4
   42e64:	21107104 	addi	r4,r4,16836
   42e68:	0042da00 	call	42da0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   42e6c:	00435280 	call	43528 <alt_dcache_flush_all>
  alt_icache_flush_all();
   42e70:	00436540 	call	43654 <alt_icache_flush_all>
}
   42e74:	0001883a 	nop
   42e78:	e037883a 	mov	sp,fp
   42e7c:	dfc00117 	ldw	ra,4(sp)
   42e80:	df000017 	ldw	fp,0(sp)
   42e84:	dec00204 	addi	sp,sp,8
   42e88:	f800283a 	ret

00042e8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   42e8c:	defffd04 	addi	sp,sp,-12
   42e90:	dfc00215 	stw	ra,8(sp)
   42e94:	df000115 	stw	fp,4(sp)
   42e98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   42e9c:	0009883a 	mov	r4,zero
   42ea0:	00430600 	call	43060 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   42ea4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   42ea8:	00430980 	call	43098 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   42eac:	01800134 	movhi	r6,4
   42eb0:	3191ac04 	addi	r6,r6,18096
   42eb4:	01400134 	movhi	r5,4
   42eb8:	2951ac04 	addi	r5,r5,18096
   42ebc:	01000134 	movhi	r4,4
   42ec0:	2111ac04 	addi	r4,r4,18096
   42ec4:	00437e80 	call	437e8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   42ec8:	d0a0d017 	ldw	r2,-31936(gp)
   42ecc:	d0e0d117 	ldw	r3,-31932(gp)
   42ed0:	d120d217 	ldw	r4,-31928(gp)
   42ed4:	200d883a 	mov	r6,r4
   42ed8:	180b883a 	mov	r5,r3
   42edc:	1009883a 	mov	r4,r2
   42ee0:	0040b500 	call	40b50 <main>
   42ee4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   42ee8:	01000044 	movi	r4,1
   42eec:	00434580 	call	43458 <close>
  exit (result);
   42ef0:	e13fff17 	ldw	r4,-4(fp)
   42ef4:	0043fb00 	call	43fb0 <exit>

00042ef8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42ef8:	defffe04 	addi	sp,sp,-8
   42efc:	dfc00115 	stw	ra,4(sp)
   42f00:	df000015 	stw	fp,0(sp)
   42f04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42f08:	d0a00b17 	ldw	r2,-32724(gp)
   42f0c:	10000326 	beq	r2,zero,42f1c <alt_get_errno+0x24>
   42f10:	d0a00b17 	ldw	r2,-32724(gp)
   42f14:	103ee83a 	callr	r2
   42f18:	00000106 	br	42f20 <alt_get_errno+0x28>
   42f1c:	d0a0ce04 	addi	r2,gp,-31944
}
   42f20:	e037883a 	mov	sp,fp
   42f24:	dfc00117 	ldw	ra,4(sp)
   42f28:	df000017 	ldw	fp,0(sp)
   42f2c:	dec00204 	addi	sp,sp,8
   42f30:	f800283a 	ret

00042f34 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   42f34:	defff904 	addi	sp,sp,-28
   42f38:	dfc00615 	stw	ra,24(sp)
   42f3c:	df000515 	stw	fp,20(sp)
   42f40:	df000504 	addi	fp,sp,20
   42f44:	e13ffd15 	stw	r4,-12(fp)
   42f48:	e17ffe15 	stw	r5,-8(fp)
   42f4c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42f50:	e0bffd17 	ldw	r2,-12(fp)
   42f54:	10000616 	blt	r2,zero,42f70 <write+0x3c>
   42f58:	e0bffd17 	ldw	r2,-12(fp)
   42f5c:	10c00324 	muli	r3,r2,12
   42f60:	00800134 	movhi	r2,4
   42f64:	10920604 	addi	r2,r2,18456
   42f68:	1885883a 	add	r2,r3,r2
   42f6c:	00000106 	br	42f74 <write+0x40>
   42f70:	0005883a 	mov	r2,zero
   42f74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   42f78:	e0bffb17 	ldw	r2,-20(fp)
   42f7c:	10002126 	beq	r2,zero,43004 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   42f80:	e0bffb17 	ldw	r2,-20(fp)
   42f84:	10800217 	ldw	r2,8(r2)
   42f88:	108000cc 	andi	r2,r2,3
   42f8c:	10001826 	beq	r2,zero,42ff0 <write+0xbc>
   42f90:	e0bffb17 	ldw	r2,-20(fp)
   42f94:	10800017 	ldw	r2,0(r2)
   42f98:	10800617 	ldw	r2,24(r2)
   42f9c:	10001426 	beq	r2,zero,42ff0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   42fa0:	e0bffb17 	ldw	r2,-20(fp)
   42fa4:	10800017 	ldw	r2,0(r2)
   42fa8:	10800617 	ldw	r2,24(r2)
   42fac:	e0ffff17 	ldw	r3,-4(fp)
   42fb0:	180d883a 	mov	r6,r3
   42fb4:	e17ffe17 	ldw	r5,-8(fp)
   42fb8:	e13ffb17 	ldw	r4,-20(fp)
   42fbc:	103ee83a 	callr	r2
   42fc0:	e0bffc15 	stw	r2,-16(fp)
   42fc4:	e0bffc17 	ldw	r2,-16(fp)
   42fc8:	1000070e 	bge	r2,zero,42fe8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   42fcc:	0042ef80 	call	42ef8 <alt_get_errno>
   42fd0:	1007883a 	mov	r3,r2
   42fd4:	e0bffc17 	ldw	r2,-16(fp)
   42fd8:	0085c83a 	sub	r2,zero,r2
   42fdc:	18800015 	stw	r2,0(r3)
        return -1;
   42fe0:	00bfffc4 	movi	r2,-1
   42fe4:	00000c06 	br	43018 <write+0xe4>
      }
      return rval;
   42fe8:	e0bffc17 	ldw	r2,-16(fp)
   42fec:	00000a06 	br	43018 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   42ff0:	0042ef80 	call	42ef8 <alt_get_errno>
   42ff4:	1007883a 	mov	r3,r2
   42ff8:	00800344 	movi	r2,13
   42ffc:	18800015 	stw	r2,0(r3)
   43000:	00000406 	br	43014 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43004:	0042ef80 	call	42ef8 <alt_get_errno>
   43008:	1007883a 	mov	r3,r2
   4300c:	00801444 	movi	r2,81
   43010:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43014:	00bfffc4 	movi	r2,-1
}
   43018:	e037883a 	mov	sp,fp
   4301c:	dfc00117 	ldw	ra,4(sp)
   43020:	df000017 	ldw	fp,0(sp)
   43024:	dec00204 	addi	sp,sp,8
   43028:	f800283a 	ret

0004302c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4302c:	defffd04 	addi	sp,sp,-12
   43030:	dfc00215 	stw	ra,8(sp)
   43034:	df000115 	stw	fp,4(sp)
   43038:	df000104 	addi	fp,sp,4
   4303c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43040:	d1600804 	addi	r5,gp,-32736
   43044:	e13fff17 	ldw	r4,-4(fp)
   43048:	00435b00 	call	435b0 <alt_dev_llist_insert>
}
   4304c:	e037883a 	mov	sp,fp
   43050:	dfc00117 	ldw	ra,4(sp)
   43054:	df000017 	ldw	fp,0(sp)
   43058:	dec00204 	addi	sp,sp,8
   4305c:	f800283a 	ret

00043060 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43060:	defffd04 	addi	sp,sp,-12
   43064:	dfc00215 	stw	ra,8(sp)
   43068:	df000115 	stw	fp,4(sp)
   4306c:	df000104 	addi	fp,sp,4
   43070:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   43074:	0043cc00 	call	43cc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43078:	00800044 	movi	r2,1
   4307c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43080:	0001883a 	nop
   43084:	e037883a 	mov	sp,fp
   43088:	dfc00117 	ldw	ra,4(sp)
   4308c:	df000017 	ldw	fp,0(sp)
   43090:	dec00204 	addi	sp,sp,8
   43094:	f800283a 	ret

00043098 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43098:	defffe04 	addi	sp,sp,-8
   4309c:	dfc00115 	stw	ra,4(sp)
   430a0:	df000015 	stw	fp,0(sp)
   430a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   430a8:	01c0fa04 	movi	r7,1000
   430ac:	000d883a 	mov	r6,zero
   430b0:	000b883a 	mov	r5,zero
   430b4:	01000234 	movhi	r4,8
   430b8:	21041004 	addi	r4,r4,4160
   430bc:	00433a00 	call	433a0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_PWM, timer_pwm);
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   430c0:	01000134 	movhi	r4,4
   430c4:	2111f104 	addi	r4,r4,18372
   430c8:	004302c0 	call	4302c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   430cc:	0001883a 	nop
}
   430d0:	0001883a 	nop
   430d4:	e037883a 	mov	sp,fp
   430d8:	dfc00117 	ldw	ra,4(sp)
   430dc:	df000017 	ldw	fp,0(sp)
   430e0:	dec00204 	addi	sp,sp,8
   430e4:	f800283a 	ret

000430e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   430e8:	defffa04 	addi	sp,sp,-24
   430ec:	dfc00515 	stw	ra,20(sp)
   430f0:	df000415 	stw	fp,16(sp)
   430f4:	df000404 	addi	fp,sp,16
   430f8:	e13ffd15 	stw	r4,-12(fp)
   430fc:	e17ffe15 	stw	r5,-8(fp)
   43100:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43104:	e0bffd17 	ldw	r2,-12(fp)
   43108:	10800017 	ldw	r2,0(r2)
   4310c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43110:	e0bffc17 	ldw	r2,-16(fp)
   43114:	10c00a04 	addi	r3,r2,40
   43118:	e0bffd17 	ldw	r2,-12(fp)
   4311c:	10800217 	ldw	r2,8(r2)
   43120:	100f883a 	mov	r7,r2
   43124:	e1bfff17 	ldw	r6,-4(fp)
   43128:	e17ffe17 	ldw	r5,-8(fp)
   4312c:	1809883a 	mov	r4,r3
   43130:	00431a80 	call	431a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   43134:	e037883a 	mov	sp,fp
   43138:	dfc00117 	ldw	ra,4(sp)
   4313c:	df000017 	ldw	fp,0(sp)
   43140:	dec00204 	addi	sp,sp,8
   43144:	f800283a 	ret

00043148 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   43148:	defffa04 	addi	sp,sp,-24
   4314c:	dfc00515 	stw	ra,20(sp)
   43150:	df000415 	stw	fp,16(sp)
   43154:	df000404 	addi	fp,sp,16
   43158:	e13ffd15 	stw	r4,-12(fp)
   4315c:	e17ffe15 	stw	r5,-8(fp)
   43160:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43164:	e0bffd17 	ldw	r2,-12(fp)
   43168:	10800017 	ldw	r2,0(r2)
   4316c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43170:	e0bffc17 	ldw	r2,-16(fp)
   43174:	10c00a04 	addi	r3,r2,40
   43178:	e0bffd17 	ldw	r2,-12(fp)
   4317c:	10800217 	ldw	r2,8(r2)
   43180:	100f883a 	mov	r7,r2
   43184:	e1bfff17 	ldw	r6,-4(fp)
   43188:	e17ffe17 	ldw	r5,-8(fp)
   4318c:	1809883a 	mov	r4,r3
   43190:	00432940 	call	43294 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43194:	e037883a 	mov	sp,fp
   43198:	dfc00117 	ldw	ra,4(sp)
   4319c:	df000017 	ldw	fp,0(sp)
   431a0:	dec00204 	addi	sp,sp,8
   431a4:	f800283a 	ret

000431a8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   431a8:	defff704 	addi	sp,sp,-36
   431ac:	df000815 	stw	fp,32(sp)
   431b0:	df000804 	addi	fp,sp,32
   431b4:	e13ffc15 	stw	r4,-16(fp)
   431b8:	e17ffd15 	stw	r5,-12(fp)
   431bc:	e1bffe15 	stw	r6,-8(fp)
   431c0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   431c4:	e0bffc17 	ldw	r2,-16(fp)
   431c8:	10800017 	ldw	r2,0(r2)
   431cc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   431d0:	e0bffd17 	ldw	r2,-12(fp)
   431d4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   431d8:	e0bffe17 	ldw	r2,-8(fp)
   431dc:	e0fffd17 	ldw	r3,-12(fp)
   431e0:	1885883a 	add	r2,r3,r2
   431e4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   431e8:	00001206 	br	43234 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   431ec:	e0bff917 	ldw	r2,-28(fp)
   431f0:	10800037 	ldwio	r2,0(r2)
   431f4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   431f8:	e0bffb17 	ldw	r2,-20(fp)
   431fc:	10a0000c 	andi	r2,r2,32768
   43200:	10000626 	beq	r2,zero,4321c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43204:	e0bff817 	ldw	r2,-32(fp)
   43208:	10c00044 	addi	r3,r2,1
   4320c:	e0fff815 	stw	r3,-32(fp)
   43210:	e0fffb17 	ldw	r3,-20(fp)
   43214:	10c00005 	stb	r3,0(r2)
   43218:	00000606 	br	43234 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   4321c:	e0fff817 	ldw	r3,-32(fp)
   43220:	e0bffd17 	ldw	r2,-12(fp)
   43224:	1880071e 	bne	r3,r2,43244 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   43228:	e0bfff17 	ldw	r2,-4(fp)
   4322c:	1090000c 	andi	r2,r2,16384
   43230:	1000061e 	bne	r2,zero,4324c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   43234:	e0fff817 	ldw	r3,-32(fp)
   43238:	e0bffa17 	ldw	r2,-24(fp)
   4323c:	18bfeb36 	bltu	r3,r2,431ec <__alt_data_end+0xfffdb1ec>
   43240:	00000306 	br	43250 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   43244:	0001883a 	nop
   43248:	00000106 	br	43250 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   4324c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   43250:	e0fff817 	ldw	r3,-32(fp)
   43254:	e0bffd17 	ldw	r2,-12(fp)
   43258:	18800426 	beq	r3,r2,4326c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   4325c:	e0fff817 	ldw	r3,-32(fp)
   43260:	e0bffd17 	ldw	r2,-12(fp)
   43264:	1885c83a 	sub	r2,r3,r2
   43268:	00000606 	br	43284 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   4326c:	e0bfff17 	ldw	r2,-4(fp)
   43270:	1090000c 	andi	r2,r2,16384
   43274:	10000226 	beq	r2,zero,43280 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   43278:	00bffd44 	movi	r2,-11
   4327c:	00000106 	br	43284 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   43280:	00bffec4 	movi	r2,-5
}
   43284:	e037883a 	mov	sp,fp
   43288:	df000017 	ldw	fp,0(sp)
   4328c:	dec00104 	addi	sp,sp,4
   43290:	f800283a 	ret

00043294 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   43294:	defff904 	addi	sp,sp,-28
   43298:	df000615 	stw	fp,24(sp)
   4329c:	df000604 	addi	fp,sp,24
   432a0:	e13ffc15 	stw	r4,-16(fp)
   432a4:	e17ffd15 	stw	r5,-12(fp)
   432a8:	e1bffe15 	stw	r6,-8(fp)
   432ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   432b0:	e0bffc17 	ldw	r2,-16(fp)
   432b4:	10800017 	ldw	r2,0(r2)
   432b8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   432bc:	e0bffe17 	ldw	r2,-8(fp)
   432c0:	e0fffd17 	ldw	r3,-12(fp)
   432c4:	1885883a 	add	r2,r3,r2
   432c8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   432cc:	00000e06 	br	43308 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   432d0:	e0bffa17 	ldw	r2,-24(fp)
   432d4:	10800104 	addi	r2,r2,4
   432d8:	10800037 	ldwio	r2,0(r2)
   432dc:	10bfffec 	andhi	r2,r2,65535
   432e0:	10000926 	beq	r2,zero,43308 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   432e4:	e0fffa17 	ldw	r3,-24(fp)
   432e8:	e0bffd17 	ldw	r2,-12(fp)
   432ec:	11000044 	addi	r4,r2,1
   432f0:	e13ffd15 	stw	r4,-12(fp)
   432f4:	10800003 	ldbu	r2,0(r2)
   432f8:	10803fcc 	andi	r2,r2,255
   432fc:	1080201c 	xori	r2,r2,128
   43300:	10bfe004 	addi	r2,r2,-128
   43304:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   43308:	e0fffd17 	ldw	r3,-12(fp)
   4330c:	e0bffb17 	ldw	r2,-20(fp)
   43310:	18bfef36 	bltu	r3,r2,432d0 <__alt_data_end+0xfffdb2d0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   43314:	e0bffe17 	ldw	r2,-8(fp)
}
   43318:	e037883a 	mov	sp,fp
   4331c:	df000017 	ldw	fp,0(sp)
   43320:	dec00104 	addi	sp,sp,4
   43324:	f800283a 	ret

00043328 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   43328:	defffa04 	addi	sp,sp,-24
   4332c:	dfc00515 	stw	ra,20(sp)
   43330:	df000415 	stw	fp,16(sp)
   43334:	df000404 	addi	fp,sp,16
   43338:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4333c:	0007883a 	mov	r3,zero
   43340:	e0bfff17 	ldw	r2,-4(fp)
   43344:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   43348:	e0bfff17 	ldw	r2,-4(fp)
   4334c:	10800104 	addi	r2,r2,4
   43350:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43354:	0005303a 	rdctl	r2,status
   43358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4335c:	e0fffd17 	ldw	r3,-12(fp)
   43360:	00bfff84 	movi	r2,-2
   43364:	1884703a 	and	r2,r3,r2
   43368:	1001703a 	wrctl	status,r2
  
  return context;
   4336c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   43370:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   43374:	0043bb80 	call	43bb8 <alt_tick>
   43378:	e0bffc17 	ldw	r2,-16(fp)
   4337c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43380:	e0bffe17 	ldw	r2,-8(fp)
   43384:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   43388:	0001883a 	nop
   4338c:	e037883a 	mov	sp,fp
   43390:	dfc00117 	ldw	ra,4(sp)
   43394:	df000017 	ldw	fp,0(sp)
   43398:	dec00204 	addi	sp,sp,8
   4339c:	f800283a 	ret

000433a0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   433a0:	defff804 	addi	sp,sp,-32
   433a4:	dfc00715 	stw	ra,28(sp)
   433a8:	df000615 	stw	fp,24(sp)
   433ac:	df000604 	addi	fp,sp,24
   433b0:	e13ffc15 	stw	r4,-16(fp)
   433b4:	e17ffd15 	stw	r5,-12(fp)
   433b8:	e1bffe15 	stw	r6,-8(fp)
   433bc:	e1ffff15 	stw	r7,-4(fp)
   433c0:	e0bfff17 	ldw	r2,-4(fp)
   433c4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   433c8:	d0a0d417 	ldw	r2,-31920(gp)
   433cc:	1000021e 	bne	r2,zero,433d8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   433d0:	e0bffb17 	ldw	r2,-20(fp)
   433d4:	d0a0d415 	stw	r2,-31920(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   433d8:	e0bffc17 	ldw	r2,-16(fp)
   433dc:	10800104 	addi	r2,r2,4
   433e0:	00c001c4 	movi	r3,7
   433e4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   433e8:	d8000015 	stw	zero,0(sp)
   433ec:	e1fffc17 	ldw	r7,-16(fp)
   433f0:	01800134 	movhi	r6,4
   433f4:	318cca04 	addi	r6,r6,13096
   433f8:	e17ffe17 	ldw	r5,-8(fp)
   433fc:	e13ffd17 	ldw	r4,-12(fp)
   43400:	0042b000 	call	42b00 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   43404:	0001883a 	nop
   43408:	e037883a 	mov	sp,fp
   4340c:	dfc00117 	ldw	ra,4(sp)
   43410:	df000017 	ldw	fp,0(sp)
   43414:	dec00204 	addi	sp,sp,8
   43418:	f800283a 	ret

0004341c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4341c:	defffe04 	addi	sp,sp,-8
   43420:	dfc00115 	stw	ra,4(sp)
   43424:	df000015 	stw	fp,0(sp)
   43428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4342c:	d0a00b17 	ldw	r2,-32724(gp)
   43430:	10000326 	beq	r2,zero,43440 <alt_get_errno+0x24>
   43434:	d0a00b17 	ldw	r2,-32724(gp)
   43438:	103ee83a 	callr	r2
   4343c:	00000106 	br	43444 <alt_get_errno+0x28>
   43440:	d0a0ce04 	addi	r2,gp,-31944
}
   43444:	e037883a 	mov	sp,fp
   43448:	dfc00117 	ldw	ra,4(sp)
   4344c:	df000017 	ldw	fp,0(sp)
   43450:	dec00204 	addi	sp,sp,8
   43454:	f800283a 	ret

00043458 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   43458:	defffb04 	addi	sp,sp,-20
   4345c:	dfc00415 	stw	ra,16(sp)
   43460:	df000315 	stw	fp,12(sp)
   43464:	df000304 	addi	fp,sp,12
   43468:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4346c:	e0bfff17 	ldw	r2,-4(fp)
   43470:	10000616 	blt	r2,zero,4348c <close+0x34>
   43474:	e0bfff17 	ldw	r2,-4(fp)
   43478:	10c00324 	muli	r3,r2,12
   4347c:	00800134 	movhi	r2,4
   43480:	10920604 	addi	r2,r2,18456
   43484:	1885883a 	add	r2,r3,r2
   43488:	00000106 	br	43490 <close+0x38>
   4348c:	0005883a 	mov	r2,zero
   43490:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43494:	e0bffd17 	ldw	r2,-12(fp)
   43498:	10001926 	beq	r2,zero,43500 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4349c:	e0bffd17 	ldw	r2,-12(fp)
   434a0:	10800017 	ldw	r2,0(r2)
   434a4:	10800417 	ldw	r2,16(r2)
   434a8:	10000626 	beq	r2,zero,434c4 <close+0x6c>
   434ac:	e0bffd17 	ldw	r2,-12(fp)
   434b0:	10800017 	ldw	r2,0(r2)
   434b4:	10800417 	ldw	r2,16(r2)
   434b8:	e13ffd17 	ldw	r4,-12(fp)
   434bc:	103ee83a 	callr	r2
   434c0:	00000106 	br	434c8 <close+0x70>
   434c4:	0005883a 	mov	r2,zero
   434c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   434cc:	e13fff17 	ldw	r4,-4(fp)
   434d0:	0043ab80 	call	43ab8 <alt_release_fd>
    if (rval < 0)
   434d4:	e0bffe17 	ldw	r2,-8(fp)
   434d8:	1000070e 	bge	r2,zero,434f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   434dc:	004341c0 	call	4341c <alt_get_errno>
   434e0:	1007883a 	mov	r3,r2
   434e4:	e0bffe17 	ldw	r2,-8(fp)
   434e8:	0085c83a 	sub	r2,zero,r2
   434ec:	18800015 	stw	r2,0(r3)
      return -1;
   434f0:	00bfffc4 	movi	r2,-1
   434f4:	00000706 	br	43514 <close+0xbc>
    }
    return 0;
   434f8:	0005883a 	mov	r2,zero
   434fc:	00000506 	br	43514 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43500:	004341c0 	call	4341c <alt_get_errno>
   43504:	1007883a 	mov	r3,r2
   43508:	00801444 	movi	r2,81
   4350c:	18800015 	stw	r2,0(r3)
    return -1;
   43510:	00bfffc4 	movi	r2,-1
  }
}
   43514:	e037883a 	mov	sp,fp
   43518:	dfc00117 	ldw	ra,4(sp)
   4351c:	df000017 	ldw	fp,0(sp)
   43520:	dec00204 	addi	sp,sp,8
   43524:	f800283a 	ret

00043528 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   43528:	deffff04 	addi	sp,sp,-4
   4352c:	df000015 	stw	fp,0(sp)
   43530:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   43534:	0001883a 	nop
   43538:	e037883a 	mov	sp,fp
   4353c:	df000017 	ldw	fp,0(sp)
   43540:	dec00104 	addi	sp,sp,4
   43544:	f800283a 	ret

00043548 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   43548:	defffc04 	addi	sp,sp,-16
   4354c:	df000315 	stw	fp,12(sp)
   43550:	df000304 	addi	fp,sp,12
   43554:	e13ffd15 	stw	r4,-12(fp)
   43558:	e17ffe15 	stw	r5,-8(fp)
   4355c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43560:	e0bfff17 	ldw	r2,-4(fp)
}
   43564:	e037883a 	mov	sp,fp
   43568:	df000017 	ldw	fp,0(sp)
   4356c:	dec00104 	addi	sp,sp,4
   43570:	f800283a 	ret

00043574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43574:	defffe04 	addi	sp,sp,-8
   43578:	dfc00115 	stw	ra,4(sp)
   4357c:	df000015 	stw	fp,0(sp)
   43580:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43584:	d0a00b17 	ldw	r2,-32724(gp)
   43588:	10000326 	beq	r2,zero,43598 <alt_get_errno+0x24>
   4358c:	d0a00b17 	ldw	r2,-32724(gp)
   43590:	103ee83a 	callr	r2
   43594:	00000106 	br	4359c <alt_get_errno+0x28>
   43598:	d0a0ce04 	addi	r2,gp,-31944
}
   4359c:	e037883a 	mov	sp,fp
   435a0:	dfc00117 	ldw	ra,4(sp)
   435a4:	df000017 	ldw	fp,0(sp)
   435a8:	dec00204 	addi	sp,sp,8
   435ac:	f800283a 	ret

000435b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   435b0:	defffa04 	addi	sp,sp,-24
   435b4:	dfc00515 	stw	ra,20(sp)
   435b8:	df000415 	stw	fp,16(sp)
   435bc:	df000404 	addi	fp,sp,16
   435c0:	e13ffe15 	stw	r4,-8(fp)
   435c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   435c8:	e0bffe17 	ldw	r2,-8(fp)
   435cc:	10000326 	beq	r2,zero,435dc <alt_dev_llist_insert+0x2c>
   435d0:	e0bffe17 	ldw	r2,-8(fp)
   435d4:	10800217 	ldw	r2,8(r2)
   435d8:	1000061e 	bne	r2,zero,435f4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   435dc:	00435740 	call	43574 <alt_get_errno>
   435e0:	1007883a 	mov	r3,r2
   435e4:	00800584 	movi	r2,22
   435e8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   435ec:	00bffa84 	movi	r2,-22
   435f0:	00001306 	br	43640 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   435f4:	e0bffe17 	ldw	r2,-8(fp)
   435f8:	e0ffff17 	ldw	r3,-4(fp)
   435fc:	e0fffc15 	stw	r3,-16(fp)
   43600:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   43604:	e0bffd17 	ldw	r2,-12(fp)
   43608:	e0fffc17 	ldw	r3,-16(fp)
   4360c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   43610:	e0bffc17 	ldw	r2,-16(fp)
   43614:	10c00017 	ldw	r3,0(r2)
   43618:	e0bffd17 	ldw	r2,-12(fp)
   4361c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   43620:	e0bffc17 	ldw	r2,-16(fp)
   43624:	10800017 	ldw	r2,0(r2)
   43628:	e0fffd17 	ldw	r3,-12(fp)
   4362c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   43630:	e0bffc17 	ldw	r2,-16(fp)
   43634:	e0fffd17 	ldw	r3,-12(fp)
   43638:	10c00015 	stw	r3,0(r2)

  return 0;  
   4363c:	0005883a 	mov	r2,zero
}
   43640:	e037883a 	mov	sp,fp
   43644:	dfc00117 	ldw	ra,4(sp)
   43648:	df000017 	ldw	fp,0(sp)
   4364c:	dec00204 	addi	sp,sp,8
   43650:	f800283a 	ret

00043654 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   43654:	defffe04 	addi	sp,sp,-8
   43658:	dfc00115 	stw	ra,4(sp)
   4365c:	df000015 	stw	fp,0(sp)
   43660:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   43664:	01420004 	movi	r5,2048
   43668:	0009883a 	mov	r4,zero
   4366c:	0043f200 	call	43f20 <alt_icache_flush>
#endif
}
   43670:	0001883a 	nop
   43674:	e037883a 	mov	sp,fp
   43678:	dfc00117 	ldw	ra,4(sp)
   4367c:	df000017 	ldw	fp,0(sp)
   43680:	dec00204 	addi	sp,sp,8
   43684:	f800283a 	ret

00043688 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   43688:	defffe04 	addi	sp,sp,-8
   4368c:	df000115 	stw	fp,4(sp)
   43690:	df000104 	addi	fp,sp,4
   43694:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   43698:	e0bfff17 	ldw	r2,-4(fp)
   4369c:	10bffe84 	addi	r2,r2,-6
   436a0:	10c00428 	cmpgeui	r3,r2,16
   436a4:	18001a1e 	bne	r3,zero,43710 <alt_exception_cause_generated_bad_addr+0x88>
   436a8:	100690ba 	slli	r3,r2,2
   436ac:	00800134 	movhi	r2,4
   436b0:	108db004 	addi	r2,r2,14016
   436b4:	1885883a 	add	r2,r3,r2
   436b8:	10800017 	ldw	r2,0(r2)
   436bc:	1000683a 	jmp	r2
   436c0:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436c4:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436c8:	00043710 	cmplti	zero,zero,4316
   436cc:	00043710 	cmplti	zero,zero,4316
   436d0:	00043710 	cmplti	zero,zero,4316
   436d4:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436d8:	00043708 	cmpgei	zero,zero,4316
   436dc:	00043710 	cmplti	zero,zero,4316
   436e0:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436e4:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436e8:	00043710 	cmplti	zero,zero,4316
   436ec:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
   436f0:	00043708 	cmpgei	zero,zero,4316
   436f4:	00043710 	cmplti	zero,zero,4316
   436f8:	00043710 	cmplti	zero,zero,4316
   436fc:	00043700 	call	4370 <__alt_mem_onchip_memory-0x3bc90>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   43700:	00800044 	movi	r2,1
   43704:	00000306 	br	43714 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   43708:	0005883a 	mov	r2,zero
   4370c:	00000106 	br	43714 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   43710:	0005883a 	mov	r2,zero
  }
}
   43714:	e037883a 	mov	sp,fp
   43718:	df000017 	ldw	fp,0(sp)
   4371c:	dec00104 	addi	sp,sp,4
   43720:	f800283a 	ret

00043724 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43724:	defff904 	addi	sp,sp,-28
   43728:	dfc00615 	stw	ra,24(sp)
   4372c:	df000515 	stw	fp,20(sp)
   43730:	df000504 	addi	fp,sp,20
   43734:	e13ffc15 	stw	r4,-16(fp)
   43738:	e17ffd15 	stw	r5,-12(fp)
   4373c:	e1bffe15 	stw	r6,-8(fp)
   43740:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   43744:	e1bfff17 	ldw	r6,-4(fp)
   43748:	e17ffe17 	ldw	r5,-8(fp)
   4374c:	e13ffd17 	ldw	r4,-12(fp)
   43750:	00439640 	call	43964 <open>
   43754:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   43758:	e0bffb17 	ldw	r2,-20(fp)
   4375c:	10001c16 	blt	r2,zero,437d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   43760:	00800134 	movhi	r2,4
   43764:	10920604 	addi	r2,r2,18456
   43768:	e0fffb17 	ldw	r3,-20(fp)
   4376c:	18c00324 	muli	r3,r3,12
   43770:	10c5883a 	add	r2,r2,r3
   43774:	10c00017 	ldw	r3,0(r2)
   43778:	e0bffc17 	ldw	r2,-16(fp)
   4377c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   43780:	00800134 	movhi	r2,4
   43784:	10920604 	addi	r2,r2,18456
   43788:	e0fffb17 	ldw	r3,-20(fp)
   4378c:	18c00324 	muli	r3,r3,12
   43790:	10c5883a 	add	r2,r2,r3
   43794:	10800104 	addi	r2,r2,4
   43798:	10c00017 	ldw	r3,0(r2)
   4379c:	e0bffc17 	ldw	r2,-16(fp)
   437a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   437a4:	00800134 	movhi	r2,4
   437a8:	10920604 	addi	r2,r2,18456
   437ac:	e0fffb17 	ldw	r3,-20(fp)
   437b0:	18c00324 	muli	r3,r3,12
   437b4:	10c5883a 	add	r2,r2,r3
   437b8:	10800204 	addi	r2,r2,8
   437bc:	10c00017 	ldw	r3,0(r2)
   437c0:	e0bffc17 	ldw	r2,-16(fp)
   437c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   437c8:	e13ffb17 	ldw	r4,-20(fp)
   437cc:	0043ab80 	call	43ab8 <alt_release_fd>
  }
} 
   437d0:	0001883a 	nop
   437d4:	e037883a 	mov	sp,fp
   437d8:	dfc00117 	ldw	ra,4(sp)
   437dc:	df000017 	ldw	fp,0(sp)
   437e0:	dec00204 	addi	sp,sp,8
   437e4:	f800283a 	ret

000437e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   437e8:	defffb04 	addi	sp,sp,-20
   437ec:	dfc00415 	stw	ra,16(sp)
   437f0:	df000315 	stw	fp,12(sp)
   437f4:	df000304 	addi	fp,sp,12
   437f8:	e13ffd15 	stw	r4,-12(fp)
   437fc:	e17ffe15 	stw	r5,-8(fp)
   43800:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   43804:	01c07fc4 	movi	r7,511
   43808:	01800044 	movi	r6,1
   4380c:	e17ffd17 	ldw	r5,-12(fp)
   43810:	01000134 	movhi	r4,4
   43814:	21120904 	addi	r4,r4,18468
   43818:	00437240 	call	43724 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4381c:	01c07fc4 	movi	r7,511
   43820:	000d883a 	mov	r6,zero
   43824:	e17ffe17 	ldw	r5,-8(fp)
   43828:	01000134 	movhi	r4,4
   4382c:	21120604 	addi	r4,r4,18456
   43830:	00437240 	call	43724 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   43834:	01c07fc4 	movi	r7,511
   43838:	01800044 	movi	r6,1
   4383c:	e17fff17 	ldw	r5,-4(fp)
   43840:	01000134 	movhi	r4,4
   43844:	21120c04 	addi	r4,r4,18480
   43848:	00437240 	call	43724 <alt_open_fd>
}  
   4384c:	0001883a 	nop
   43850:	e037883a 	mov	sp,fp
   43854:	dfc00117 	ldw	ra,4(sp)
   43858:	df000017 	ldw	fp,0(sp)
   4385c:	dec00204 	addi	sp,sp,8
   43860:	f800283a 	ret

00043864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43864:	defffe04 	addi	sp,sp,-8
   43868:	dfc00115 	stw	ra,4(sp)
   4386c:	df000015 	stw	fp,0(sp)
   43870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43874:	d0a00b17 	ldw	r2,-32724(gp)
   43878:	10000326 	beq	r2,zero,43888 <alt_get_errno+0x24>
   4387c:	d0a00b17 	ldw	r2,-32724(gp)
   43880:	103ee83a 	callr	r2
   43884:	00000106 	br	4388c <alt_get_errno+0x28>
   43888:	d0a0ce04 	addi	r2,gp,-31944
}
   4388c:	e037883a 	mov	sp,fp
   43890:	dfc00117 	ldw	ra,4(sp)
   43894:	df000017 	ldw	fp,0(sp)
   43898:	dec00204 	addi	sp,sp,8
   4389c:	f800283a 	ret

000438a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   438a0:	defffd04 	addi	sp,sp,-12
   438a4:	df000215 	stw	fp,8(sp)
   438a8:	df000204 	addi	fp,sp,8
   438ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   438b0:	e0bfff17 	ldw	r2,-4(fp)
   438b4:	10800217 	ldw	r2,8(r2)
   438b8:	10d00034 	orhi	r3,r2,16384
   438bc:	e0bfff17 	ldw	r2,-4(fp)
   438c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   438c4:	e03ffe15 	stw	zero,-8(fp)
   438c8:	00001d06 	br	43940 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   438cc:	00800134 	movhi	r2,4
   438d0:	10920604 	addi	r2,r2,18456
   438d4:	e0fffe17 	ldw	r3,-8(fp)
   438d8:	18c00324 	muli	r3,r3,12
   438dc:	10c5883a 	add	r2,r2,r3
   438e0:	10c00017 	ldw	r3,0(r2)
   438e4:	e0bfff17 	ldw	r2,-4(fp)
   438e8:	10800017 	ldw	r2,0(r2)
   438ec:	1880111e 	bne	r3,r2,43934 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   438f0:	00800134 	movhi	r2,4
   438f4:	10920604 	addi	r2,r2,18456
   438f8:	e0fffe17 	ldw	r3,-8(fp)
   438fc:	18c00324 	muli	r3,r3,12
   43900:	10c5883a 	add	r2,r2,r3
   43904:	10800204 	addi	r2,r2,8
   43908:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4390c:	1000090e 	bge	r2,zero,43934 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   43910:	e0bffe17 	ldw	r2,-8(fp)
   43914:	10c00324 	muli	r3,r2,12
   43918:	00800134 	movhi	r2,4
   4391c:	10920604 	addi	r2,r2,18456
   43920:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43924:	e0bfff17 	ldw	r2,-4(fp)
   43928:	18800226 	beq	r3,r2,43934 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4392c:	00bffcc4 	movi	r2,-13
   43930:	00000806 	br	43954 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43934:	e0bffe17 	ldw	r2,-8(fp)
   43938:	10800044 	addi	r2,r2,1
   4393c:	e0bffe15 	stw	r2,-8(fp)
   43940:	d0a00a17 	ldw	r2,-32728(gp)
   43944:	1007883a 	mov	r3,r2
   43948:	e0bffe17 	ldw	r2,-8(fp)
   4394c:	18bfdf2e 	bgeu	r3,r2,438cc <__alt_data_end+0xfffdb8cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   43950:	0005883a 	mov	r2,zero
}
   43954:	e037883a 	mov	sp,fp
   43958:	df000017 	ldw	fp,0(sp)
   4395c:	dec00104 	addi	sp,sp,4
   43960:	f800283a 	ret

00043964 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   43964:	defff604 	addi	sp,sp,-40
   43968:	dfc00915 	stw	ra,36(sp)
   4396c:	df000815 	stw	fp,32(sp)
   43970:	df000804 	addi	fp,sp,32
   43974:	e13ffd15 	stw	r4,-12(fp)
   43978:	e17ffe15 	stw	r5,-8(fp)
   4397c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   43980:	00bfffc4 	movi	r2,-1
   43984:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   43988:	00bffb44 	movi	r2,-19
   4398c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   43990:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   43994:	d1600804 	addi	r5,gp,-32736
   43998:	e13ffd17 	ldw	r4,-12(fp)
   4399c:	0043ce40 	call	43ce4 <alt_find_dev>
   439a0:	e0bff815 	stw	r2,-32(fp)
   439a4:	e0bff817 	ldw	r2,-32(fp)
   439a8:	1000051e 	bne	r2,zero,439c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   439ac:	e13ffd17 	ldw	r4,-12(fp)
   439b0:	0043d740 	call	43d74 <alt_find_file>
   439b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   439b8:	00800044 	movi	r2,1
   439bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   439c0:	e0bff817 	ldw	r2,-32(fp)
   439c4:	10002926 	beq	r2,zero,43a6c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   439c8:	e13ff817 	ldw	r4,-32(fp)
   439cc:	0043e7c0 	call	43e7c <alt_get_fd>
   439d0:	e0bff915 	stw	r2,-28(fp)
   439d4:	e0bff917 	ldw	r2,-28(fp)
   439d8:	1000030e 	bge	r2,zero,439e8 <open+0x84>
    {
      status = index;
   439dc:	e0bff917 	ldw	r2,-28(fp)
   439e0:	e0bffa15 	stw	r2,-24(fp)
   439e4:	00002306 	br	43a74 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   439e8:	e0bff917 	ldw	r2,-28(fp)
   439ec:	10c00324 	muli	r3,r2,12
   439f0:	00800134 	movhi	r2,4
   439f4:	10920604 	addi	r2,r2,18456
   439f8:	1885883a 	add	r2,r3,r2
   439fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   43a00:	e0fffe17 	ldw	r3,-8(fp)
   43a04:	00900034 	movhi	r2,16384
   43a08:	10bfffc4 	addi	r2,r2,-1
   43a0c:	1886703a 	and	r3,r3,r2
   43a10:	e0bffc17 	ldw	r2,-16(fp)
   43a14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   43a18:	e0bffb17 	ldw	r2,-20(fp)
   43a1c:	1000051e 	bne	r2,zero,43a34 <open+0xd0>
   43a20:	e13ffc17 	ldw	r4,-16(fp)
   43a24:	00438a00 	call	438a0 <alt_file_locked>
   43a28:	e0bffa15 	stw	r2,-24(fp)
   43a2c:	e0bffa17 	ldw	r2,-24(fp)
   43a30:	10001016 	blt	r2,zero,43a74 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   43a34:	e0bff817 	ldw	r2,-32(fp)
   43a38:	10800317 	ldw	r2,12(r2)
   43a3c:	10000826 	beq	r2,zero,43a60 <open+0xfc>
   43a40:	e0bff817 	ldw	r2,-32(fp)
   43a44:	10800317 	ldw	r2,12(r2)
   43a48:	e1ffff17 	ldw	r7,-4(fp)
   43a4c:	e1bffe17 	ldw	r6,-8(fp)
   43a50:	e17ffd17 	ldw	r5,-12(fp)
   43a54:	e13ffc17 	ldw	r4,-16(fp)
   43a58:	103ee83a 	callr	r2
   43a5c:	00000106 	br	43a64 <open+0x100>
   43a60:	0005883a 	mov	r2,zero
   43a64:	e0bffa15 	stw	r2,-24(fp)
   43a68:	00000206 	br	43a74 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   43a6c:	00bffb44 	movi	r2,-19
   43a70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   43a74:	e0bffa17 	ldw	r2,-24(fp)
   43a78:	1000090e 	bge	r2,zero,43aa0 <open+0x13c>
  {
    alt_release_fd (index);  
   43a7c:	e13ff917 	ldw	r4,-28(fp)
   43a80:	0043ab80 	call	43ab8 <alt_release_fd>
    ALT_ERRNO = -status;
   43a84:	00438640 	call	43864 <alt_get_errno>
   43a88:	1007883a 	mov	r3,r2
   43a8c:	e0bffa17 	ldw	r2,-24(fp)
   43a90:	0085c83a 	sub	r2,zero,r2
   43a94:	18800015 	stw	r2,0(r3)
    return -1;
   43a98:	00bfffc4 	movi	r2,-1
   43a9c:	00000106 	br	43aa4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   43aa0:	e0bff917 	ldw	r2,-28(fp)
}
   43aa4:	e037883a 	mov	sp,fp
   43aa8:	dfc00117 	ldw	ra,4(sp)
   43aac:	df000017 	ldw	fp,0(sp)
   43ab0:	dec00204 	addi	sp,sp,8
   43ab4:	f800283a 	ret

00043ab8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   43ab8:	defffe04 	addi	sp,sp,-8
   43abc:	df000115 	stw	fp,4(sp)
   43ac0:	df000104 	addi	fp,sp,4
   43ac4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   43ac8:	e0bfff17 	ldw	r2,-4(fp)
   43acc:	108000d0 	cmplti	r2,r2,3
   43ad0:	10000d1e 	bne	r2,zero,43b08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43ad4:	00800134 	movhi	r2,4
   43ad8:	10920604 	addi	r2,r2,18456
   43adc:	e0ffff17 	ldw	r3,-4(fp)
   43ae0:	18c00324 	muli	r3,r3,12
   43ae4:	10c5883a 	add	r2,r2,r3
   43ae8:	10800204 	addi	r2,r2,8
   43aec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43af0:	00800134 	movhi	r2,4
   43af4:	10920604 	addi	r2,r2,18456
   43af8:	e0ffff17 	ldw	r3,-4(fp)
   43afc:	18c00324 	muli	r3,r3,12
   43b00:	10c5883a 	add	r2,r2,r3
   43b04:	10000015 	stw	zero,0(r2)
  }
}
   43b08:	0001883a 	nop
   43b0c:	e037883a 	mov	sp,fp
   43b10:	df000017 	ldw	fp,0(sp)
   43b14:	dec00104 	addi	sp,sp,4
   43b18:	f800283a 	ret

00043b1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   43b1c:	defffa04 	addi	sp,sp,-24
   43b20:	df000515 	stw	fp,20(sp)
   43b24:	df000504 	addi	fp,sp,20
   43b28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43b2c:	0005303a 	rdctl	r2,status
   43b30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43b34:	e0fffc17 	ldw	r3,-16(fp)
   43b38:	00bfff84 	movi	r2,-2
   43b3c:	1884703a 	and	r2,r3,r2
   43b40:	1001703a 	wrctl	status,r2
  
  return context;
   43b44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   43b48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   43b4c:	e0bfff17 	ldw	r2,-4(fp)
   43b50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   43b54:	e0bffd17 	ldw	r2,-12(fp)
   43b58:	10800017 	ldw	r2,0(r2)
   43b5c:	e0fffd17 	ldw	r3,-12(fp)
   43b60:	18c00117 	ldw	r3,4(r3)
   43b64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   43b68:	e0bffd17 	ldw	r2,-12(fp)
   43b6c:	10800117 	ldw	r2,4(r2)
   43b70:	e0fffd17 	ldw	r3,-12(fp)
   43b74:	18c00017 	ldw	r3,0(r3)
   43b78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   43b7c:	e0bffd17 	ldw	r2,-12(fp)
   43b80:	e0fffd17 	ldw	r3,-12(fp)
   43b84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   43b88:	e0bffd17 	ldw	r2,-12(fp)
   43b8c:	e0fffd17 	ldw	r3,-12(fp)
   43b90:	10c00015 	stw	r3,0(r2)
   43b94:	e0bffb17 	ldw	r2,-20(fp)
   43b98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43b9c:	e0bffe17 	ldw	r2,-8(fp)
   43ba0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   43ba4:	0001883a 	nop
   43ba8:	e037883a 	mov	sp,fp
   43bac:	df000017 	ldw	fp,0(sp)
   43bb0:	dec00104 	addi	sp,sp,4
   43bb4:	f800283a 	ret

00043bb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   43bb8:	defffb04 	addi	sp,sp,-20
   43bbc:	dfc00415 	stw	ra,16(sp)
   43bc0:	df000315 	stw	fp,12(sp)
   43bc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   43bc8:	d0a00c17 	ldw	r2,-32720(gp)
   43bcc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   43bd0:	d0a0d517 	ldw	r2,-31916(gp)
   43bd4:	10800044 	addi	r2,r2,1
   43bd8:	d0a0d515 	stw	r2,-31916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43bdc:	00002e06 	br	43c98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   43be0:	e0bffd17 	ldw	r2,-12(fp)
   43be4:	10800017 	ldw	r2,0(r2)
   43be8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   43bec:	e0bffd17 	ldw	r2,-12(fp)
   43bf0:	10800403 	ldbu	r2,16(r2)
   43bf4:	10803fcc 	andi	r2,r2,255
   43bf8:	10000426 	beq	r2,zero,43c0c <alt_tick+0x54>
   43bfc:	d0a0d517 	ldw	r2,-31916(gp)
   43c00:	1000021e 	bne	r2,zero,43c0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   43c04:	e0bffd17 	ldw	r2,-12(fp)
   43c08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   43c0c:	e0bffd17 	ldw	r2,-12(fp)
   43c10:	10800217 	ldw	r2,8(r2)
   43c14:	d0e0d517 	ldw	r3,-31916(gp)
   43c18:	18801d36 	bltu	r3,r2,43c90 <alt_tick+0xd8>
   43c1c:	e0bffd17 	ldw	r2,-12(fp)
   43c20:	10800403 	ldbu	r2,16(r2)
   43c24:	10803fcc 	andi	r2,r2,255
   43c28:	1000191e 	bne	r2,zero,43c90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   43c2c:	e0bffd17 	ldw	r2,-12(fp)
   43c30:	10800317 	ldw	r2,12(r2)
   43c34:	e0fffd17 	ldw	r3,-12(fp)
   43c38:	18c00517 	ldw	r3,20(r3)
   43c3c:	1809883a 	mov	r4,r3
   43c40:	103ee83a 	callr	r2
   43c44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   43c48:	e0bfff17 	ldw	r2,-4(fp)
   43c4c:	1000031e 	bne	r2,zero,43c5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   43c50:	e13ffd17 	ldw	r4,-12(fp)
   43c54:	0043b1c0 	call	43b1c <alt_alarm_stop>
   43c58:	00000d06 	br	43c90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   43c5c:	e0bffd17 	ldw	r2,-12(fp)
   43c60:	10c00217 	ldw	r3,8(r2)
   43c64:	e0bfff17 	ldw	r2,-4(fp)
   43c68:	1887883a 	add	r3,r3,r2
   43c6c:	e0bffd17 	ldw	r2,-12(fp)
   43c70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   43c74:	e0bffd17 	ldw	r2,-12(fp)
   43c78:	10c00217 	ldw	r3,8(r2)
   43c7c:	d0a0d517 	ldw	r2,-31916(gp)
   43c80:	1880032e 	bgeu	r3,r2,43c90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   43c84:	e0bffd17 	ldw	r2,-12(fp)
   43c88:	00c00044 	movi	r3,1
   43c8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   43c90:	e0bffe17 	ldw	r2,-8(fp)
   43c94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43c98:	e0fffd17 	ldw	r3,-12(fp)
   43c9c:	d0a00c04 	addi	r2,gp,-32720
   43ca0:	18bfcf1e 	bne	r3,r2,43be0 <__alt_data_end+0xfffdbbe0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   43ca4:	0001883a 	nop
}
   43ca8:	0001883a 	nop
   43cac:	e037883a 	mov	sp,fp
   43cb0:	dfc00117 	ldw	ra,4(sp)
   43cb4:	df000017 	ldw	fp,0(sp)
   43cb8:	dec00204 	addi	sp,sp,8
   43cbc:	f800283a 	ret

00043cc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   43cc0:	deffff04 	addi	sp,sp,-4
   43cc4:	df000015 	stw	fp,0(sp)
   43cc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   43ccc:	000170fa 	wrctl	ienable,zero
}
   43cd0:	0001883a 	nop
   43cd4:	e037883a 	mov	sp,fp
   43cd8:	df000017 	ldw	fp,0(sp)
   43cdc:	dec00104 	addi	sp,sp,4
   43ce0:	f800283a 	ret

00043ce4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   43ce4:	defffa04 	addi	sp,sp,-24
   43ce8:	dfc00515 	stw	ra,20(sp)
   43cec:	df000415 	stw	fp,16(sp)
   43cf0:	df000404 	addi	fp,sp,16
   43cf4:	e13ffe15 	stw	r4,-8(fp)
   43cf8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   43cfc:	e0bfff17 	ldw	r2,-4(fp)
   43d00:	10800017 	ldw	r2,0(r2)
   43d04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   43d08:	e13ffe17 	ldw	r4,-8(fp)
   43d0c:	00424280 	call	42428 <strlen>
   43d10:	10800044 	addi	r2,r2,1
   43d14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43d18:	00000d06 	br	43d50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43d1c:	e0bffc17 	ldw	r2,-16(fp)
   43d20:	10800217 	ldw	r2,8(r2)
   43d24:	e0fffd17 	ldw	r3,-12(fp)
   43d28:	180d883a 	mov	r6,r3
   43d2c:	e17ffe17 	ldw	r5,-8(fp)
   43d30:	1009883a 	mov	r4,r2
   43d34:	0043fd00 	call	43fd0 <memcmp>
   43d38:	1000021e 	bne	r2,zero,43d44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   43d3c:	e0bffc17 	ldw	r2,-16(fp)
   43d40:	00000706 	br	43d60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   43d44:	e0bffc17 	ldw	r2,-16(fp)
   43d48:	10800017 	ldw	r2,0(r2)
   43d4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43d50:	e0fffc17 	ldw	r3,-16(fp)
   43d54:	e0bfff17 	ldw	r2,-4(fp)
   43d58:	18bff01e 	bne	r3,r2,43d1c <__alt_data_end+0xfffdbd1c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   43d5c:	0005883a 	mov	r2,zero
}
   43d60:	e037883a 	mov	sp,fp
   43d64:	dfc00117 	ldw	ra,4(sp)
   43d68:	df000017 	ldw	fp,0(sp)
   43d6c:	dec00204 	addi	sp,sp,8
   43d70:	f800283a 	ret

00043d74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   43d74:	defffb04 	addi	sp,sp,-20
   43d78:	dfc00415 	stw	ra,16(sp)
   43d7c:	df000315 	stw	fp,12(sp)
   43d80:	df000304 	addi	fp,sp,12
   43d84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   43d88:	d0a00617 	ldw	r2,-32744(gp)
   43d8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43d90:	00003106 	br	43e58 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   43d94:	e0bffd17 	ldw	r2,-12(fp)
   43d98:	10800217 	ldw	r2,8(r2)
   43d9c:	1009883a 	mov	r4,r2
   43da0:	00424280 	call	42428 <strlen>
   43da4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   43da8:	e0bffd17 	ldw	r2,-12(fp)
   43dac:	10c00217 	ldw	r3,8(r2)
   43db0:	e0bffe17 	ldw	r2,-8(fp)
   43db4:	10bfffc4 	addi	r2,r2,-1
   43db8:	1885883a 	add	r2,r3,r2
   43dbc:	10800003 	ldbu	r2,0(r2)
   43dc0:	10803fcc 	andi	r2,r2,255
   43dc4:	1080201c 	xori	r2,r2,128
   43dc8:	10bfe004 	addi	r2,r2,-128
   43dcc:	10800bd8 	cmpnei	r2,r2,47
   43dd0:	1000031e 	bne	r2,zero,43de0 <alt_find_file+0x6c>
    {
      len -= 1;
   43dd4:	e0bffe17 	ldw	r2,-8(fp)
   43dd8:	10bfffc4 	addi	r2,r2,-1
   43ddc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43de0:	e0bffe17 	ldw	r2,-8(fp)
   43de4:	e0ffff17 	ldw	r3,-4(fp)
   43de8:	1885883a 	add	r2,r3,r2
   43dec:	10800003 	ldbu	r2,0(r2)
   43df0:	10803fcc 	andi	r2,r2,255
   43df4:	1080201c 	xori	r2,r2,128
   43df8:	10bfe004 	addi	r2,r2,-128
   43dfc:	10800be0 	cmpeqi	r2,r2,47
   43e00:	1000081e 	bne	r2,zero,43e24 <alt_find_file+0xb0>
   43e04:	e0bffe17 	ldw	r2,-8(fp)
   43e08:	e0ffff17 	ldw	r3,-4(fp)
   43e0c:	1885883a 	add	r2,r3,r2
   43e10:	10800003 	ldbu	r2,0(r2)
   43e14:	10803fcc 	andi	r2,r2,255
   43e18:	1080201c 	xori	r2,r2,128
   43e1c:	10bfe004 	addi	r2,r2,-128
   43e20:	10000a1e 	bne	r2,zero,43e4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   43e24:	e0bffd17 	ldw	r2,-12(fp)
   43e28:	10800217 	ldw	r2,8(r2)
   43e2c:	e0fffe17 	ldw	r3,-8(fp)
   43e30:	180d883a 	mov	r6,r3
   43e34:	e17fff17 	ldw	r5,-4(fp)
   43e38:	1009883a 	mov	r4,r2
   43e3c:	0043fd00 	call	43fd0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43e40:	1000021e 	bne	r2,zero,43e4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   43e44:	e0bffd17 	ldw	r2,-12(fp)
   43e48:	00000706 	br	43e68 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   43e4c:	e0bffd17 	ldw	r2,-12(fp)
   43e50:	10800017 	ldw	r2,0(r2)
   43e54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43e58:	e0fffd17 	ldw	r3,-12(fp)
   43e5c:	d0a00604 	addi	r2,gp,-32744
   43e60:	18bfcc1e 	bne	r3,r2,43d94 <__alt_data_end+0xfffdbd94>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   43e64:	0005883a 	mov	r2,zero
}
   43e68:	e037883a 	mov	sp,fp
   43e6c:	dfc00117 	ldw	ra,4(sp)
   43e70:	df000017 	ldw	fp,0(sp)
   43e74:	dec00204 	addi	sp,sp,8
   43e78:	f800283a 	ret

00043e7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43e7c:	defffc04 	addi	sp,sp,-16
   43e80:	df000315 	stw	fp,12(sp)
   43e84:	df000304 	addi	fp,sp,12
   43e88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   43e8c:	00bffa04 	movi	r2,-24
   43e90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43e94:	e03ffd15 	stw	zero,-12(fp)
   43e98:	00001906 	br	43f00 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   43e9c:	00800134 	movhi	r2,4
   43ea0:	10920604 	addi	r2,r2,18456
   43ea4:	e0fffd17 	ldw	r3,-12(fp)
   43ea8:	18c00324 	muli	r3,r3,12
   43eac:	10c5883a 	add	r2,r2,r3
   43eb0:	10800017 	ldw	r2,0(r2)
   43eb4:	10000f1e 	bne	r2,zero,43ef4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   43eb8:	00800134 	movhi	r2,4
   43ebc:	10920604 	addi	r2,r2,18456
   43ec0:	e0fffd17 	ldw	r3,-12(fp)
   43ec4:	18c00324 	muli	r3,r3,12
   43ec8:	10c5883a 	add	r2,r2,r3
   43ecc:	e0ffff17 	ldw	r3,-4(fp)
   43ed0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   43ed4:	d0e00a17 	ldw	r3,-32728(gp)
   43ed8:	e0bffd17 	ldw	r2,-12(fp)
   43edc:	1880020e 	bge	r3,r2,43ee8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   43ee0:	e0bffd17 	ldw	r2,-12(fp)
   43ee4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   43ee8:	e0bffd17 	ldw	r2,-12(fp)
   43eec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   43ef0:	00000606 	br	43f0c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43ef4:	e0bffd17 	ldw	r2,-12(fp)
   43ef8:	10800044 	addi	r2,r2,1
   43efc:	e0bffd15 	stw	r2,-12(fp)
   43f00:	e0bffd17 	ldw	r2,-12(fp)
   43f04:	10800810 	cmplti	r2,r2,32
   43f08:	103fe41e 	bne	r2,zero,43e9c <__alt_data_end+0xfffdbe9c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   43f0c:	e0bffe17 	ldw	r2,-8(fp)
}
   43f10:	e037883a 	mov	sp,fp
   43f14:	df000017 	ldw	fp,0(sp)
   43f18:	dec00104 	addi	sp,sp,4
   43f1c:	f800283a 	ret

00043f20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   43f20:	defffb04 	addi	sp,sp,-20
   43f24:	df000415 	stw	fp,16(sp)
   43f28:	df000404 	addi	fp,sp,16
   43f2c:	e13ffe15 	stw	r4,-8(fp)
   43f30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   43f34:	e0bfff17 	ldw	r2,-4(fp)
   43f38:	10820070 	cmpltui	r2,r2,2049
   43f3c:	1000021e 	bne	r2,zero,43f48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   43f40:	00820004 	movi	r2,2048
   43f44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   43f48:	e0fffe17 	ldw	r3,-8(fp)
   43f4c:	e0bfff17 	ldw	r2,-4(fp)
   43f50:	1885883a 	add	r2,r3,r2
   43f54:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43f58:	e0bffe17 	ldw	r2,-8(fp)
   43f5c:	e0bffc15 	stw	r2,-16(fp)
   43f60:	00000506 	br	43f78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   43f64:	e0bffc17 	ldw	r2,-16(fp)
   43f68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43f6c:	e0bffc17 	ldw	r2,-16(fp)
   43f70:	10800804 	addi	r2,r2,32
   43f74:	e0bffc15 	stw	r2,-16(fp)
   43f78:	e0fffc17 	ldw	r3,-16(fp)
   43f7c:	e0bffd17 	ldw	r2,-12(fp)
   43f80:	18bff836 	bltu	r3,r2,43f64 <__alt_data_end+0xfffdbf64>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   43f84:	e0bffe17 	ldw	r2,-8(fp)
   43f88:	108007cc 	andi	r2,r2,31
   43f8c:	10000226 	beq	r2,zero,43f98 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   43f90:	e0bffc17 	ldw	r2,-16(fp)
   43f94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   43f98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   43f9c:	0001883a 	nop
   43fa0:	e037883a 	mov	sp,fp
   43fa4:	df000017 	ldw	fp,0(sp)
   43fa8:	dec00104 	addi	sp,sp,4
   43fac:	f800283a 	ret

00043fb0 <exit>:
   43fb0:	defffe04 	addi	sp,sp,-8
   43fb4:	000b883a 	mov	r5,zero
   43fb8:	dc000015 	stw	r16,0(sp)
   43fbc:	dfc00115 	stw	ra,4(sp)
   43fc0:	2021883a 	mov	r16,r4
   43fc4:	00440000 	call	44000 <__call_exitprocs>
   43fc8:	8009883a 	mov	r4,r16
   43fcc:	00441900 	call	44190 <_exit>

00043fd0 <memcmp>:
   43fd0:	218d883a 	add	r6,r4,r6
   43fd4:	21800826 	beq	r4,r6,43ff8 <memcmp+0x28>
   43fd8:	20800003 	ldbu	r2,0(r4)
   43fdc:	28c00003 	ldbu	r3,0(r5)
   43fe0:	10c00226 	beq	r2,r3,43fec <memcmp+0x1c>
   43fe4:	10c5c83a 	sub	r2,r2,r3
   43fe8:	f800283a 	ret
   43fec:	21000044 	addi	r4,r4,1
   43ff0:	29400044 	addi	r5,r5,1
   43ff4:	003ff706 	br	43fd4 <__alt_data_end+0xfffdbfd4>
   43ff8:	0005883a 	mov	r2,zero
   43ffc:	f800283a 	ret

00044000 <__call_exitprocs>:
   44000:	defff504 	addi	sp,sp,-44
   44004:	dd000515 	stw	r20,20(sp)
   44008:	05000134 	movhi	r20,4
   4400c:	dc800315 	stw	r18,12(sp)
   44010:	dfc00a15 	stw	ra,40(sp)
   44014:	df000915 	stw	fp,36(sp)
   44018:	ddc00815 	stw	r23,32(sp)
   4401c:	dd800715 	stw	r22,28(sp)
   44020:	dd400615 	stw	r21,24(sp)
   44024:	dcc00415 	stw	r19,16(sp)
   44028:	dc400215 	stw	r17,8(sp)
   4402c:	dc000115 	stw	r16,4(sp)
   44030:	d9000015 	stw	r4,0(sp)
   44034:	2825883a 	mov	r18,r5
   44038:	a5126904 	addi	r20,r20,18852
   4403c:	a4400017 	ldw	r17,0(r20)
   44040:	8cc00c17 	ldw	r19,48(r17)
   44044:	8c400c04 	addi	r17,r17,48
   44048:	98004526 	beq	r19,zero,44160 <__call_exitprocs+0x160>
   4404c:	9c000117 	ldw	r16,4(r19)
   44050:	00900034 	movhi	r2,16384
   44054:	10bfffc4 	addi	r2,r2,-1
   44058:	9d402217 	ldw	r21,136(r19)
   4405c:	85bfffc4 	addi	r22,r16,-1
   44060:	80a1883a 	add	r16,r16,r2
   44064:	8421883a 	add	r16,r16,r16
   44068:	8421883a 	add	r16,r16,r16
   4406c:	ac2f883a 	add	r23,r21,r16
   44070:	84000204 	addi	r16,r16,8
   44074:	9c21883a 	add	r16,r19,r16
   44078:	b0002716 	blt	r22,zero,44118 <__call_exitprocs+0x118>
   4407c:	90000726 	beq	r18,zero,4409c <__call_exitprocs+0x9c>
   44080:	a800041e 	bne	r21,zero,44094 <__call_exitprocs+0x94>
   44084:	b5bfffc4 	addi	r22,r22,-1
   44088:	bdffff04 	addi	r23,r23,-4
   4408c:	843fff04 	addi	r16,r16,-4
   44090:	003ff906 	br	44078 <__alt_data_end+0xfffdc078>
   44094:	b9002017 	ldw	r4,128(r23)
   44098:	913ffa1e 	bne	r18,r4,44084 <__alt_data_end+0xfffdc084>
   4409c:	99000117 	ldw	r4,4(r19)
   440a0:	82000017 	ldw	r8,0(r16)
   440a4:	213fffc4 	addi	r4,r4,-1
   440a8:	b100021e 	bne	r22,r4,440b4 <__call_exitprocs+0xb4>
   440ac:	9d800115 	stw	r22,4(r19)
   440b0:	00000106 	br	440b8 <__call_exitprocs+0xb8>
   440b4:	80000015 	stw	zero,0(r16)
   440b8:	403ff226 	beq	r8,zero,44084 <__alt_data_end+0xfffdc084>
   440bc:	9f000117 	ldw	fp,4(r19)
   440c0:	a8000526 	beq	r21,zero,440d8 <__call_exitprocs+0xd8>
   440c4:	00800044 	movi	r2,1
   440c8:	1592983a 	sll	r9,r2,r22
   440cc:	a9404017 	ldw	r5,256(r21)
   440d0:	494a703a 	and	r5,r9,r5
   440d4:	2800021e 	bne	r5,zero,440e0 <__call_exitprocs+0xe0>
   440d8:	403ee83a 	callr	r8
   440dc:	00000906 	br	44104 <__call_exitprocs+0x104>
   440e0:	a9004117 	ldw	r4,260(r21)
   440e4:	4908703a 	and	r4,r9,r4
   440e8:	2000041e 	bne	r4,zero,440fc <__call_exitprocs+0xfc>
   440ec:	b9400017 	ldw	r5,0(r23)
   440f0:	d9000017 	ldw	r4,0(sp)
   440f4:	403ee83a 	callr	r8
   440f8:	00000206 	br	44104 <__call_exitprocs+0x104>
   440fc:	b9000017 	ldw	r4,0(r23)
   44100:	403ee83a 	callr	r8
   44104:	99000117 	ldw	r4,4(r19)
   44108:	e13fcc1e 	bne	fp,r4,4403c <__alt_data_end+0xfffdc03c>
   4410c:	89000017 	ldw	r4,0(r17)
   44110:	993fdc26 	beq	r19,r4,44084 <__alt_data_end+0xfffdc084>
   44114:	003fc906 	br	4403c <__alt_data_end+0xfffdc03c>
   44118:	00800034 	movhi	r2,0
   4411c:	10800004 	addi	r2,r2,0
   44120:	10000f26 	beq	r2,zero,44160 <__call_exitprocs+0x160>
   44124:	99400117 	ldw	r5,4(r19)
   44128:	99000017 	ldw	r4,0(r19)
   4412c:	2800091e 	bne	r5,zero,44154 <__call_exitprocs+0x154>
   44130:	20000826 	beq	r4,zero,44154 <__call_exitprocs+0x154>
   44134:	89000015 	stw	r4,0(r17)
   44138:	a8000226 	beq	r21,zero,44144 <__call_exitprocs+0x144>
   4413c:	a809883a 	mov	r4,r21
   44140:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   44144:	9809883a 	mov	r4,r19
   44148:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4414c:	8cc00017 	ldw	r19,0(r17)
   44150:	003fbd06 	br	44048 <__alt_data_end+0xfffdc048>
   44154:	9823883a 	mov	r17,r19
   44158:	2027883a 	mov	r19,r4
   4415c:	003fba06 	br	44048 <__alt_data_end+0xfffdc048>
   44160:	dfc00a17 	ldw	ra,40(sp)
   44164:	df000917 	ldw	fp,36(sp)
   44168:	ddc00817 	ldw	r23,32(sp)
   4416c:	dd800717 	ldw	r22,28(sp)
   44170:	dd400617 	ldw	r21,24(sp)
   44174:	dd000517 	ldw	r20,20(sp)
   44178:	dcc00417 	ldw	r19,16(sp)
   4417c:	dc800317 	ldw	r18,12(sp)
   44180:	dc400217 	ldw	r17,8(sp)
   44184:	dc000117 	ldw	r16,4(sp)
   44188:	dec00b04 	addi	sp,sp,44
   4418c:	f800283a 	ret

00044190 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   44190:	defffd04 	addi	sp,sp,-12
   44194:	df000215 	stw	fp,8(sp)
   44198:	df000204 	addi	fp,sp,8
   4419c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   441a0:	0001883a 	nop
   441a4:	e0bfff17 	ldw	r2,-4(fp)
   441a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   441ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   441b0:	10000226 	beq	r2,zero,441bc <_exit+0x2c>
    ALT_SIM_FAIL();
   441b4:	002af070 	cmpltui	zero,zero,43969
   441b8:	00000106 	br	441c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   441bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   441c0:	003fff06 	br	441c0 <__alt_data_end+0xfffdc1c0>
