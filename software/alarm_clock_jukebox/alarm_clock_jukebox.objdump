
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00004224 memsz 0x00004224 flags r-x
    LOAD off    0x00005244 vaddr 0x00044244 paddr 0x00044528 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x0000580c vaddr 0x0004480c paddr 0x0004480c align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c70  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000390  00043eb4  00043eb4  00004eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00044244  00044528  00005244  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  0004480c  0004480c  0000580c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00044938  00044938  00005528  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005528  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000698  00000000  00000000  00005550  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000840f  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d74  00000000  00000000  0000dff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000374b  00000000  00000000  00010d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001190  00000000  00000000  000144b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002006  00000000  00000000  00015648  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  0001764e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00018958  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  00018978  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001acba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0001acbd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001acc7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001acc8  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001acc9  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001accd  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001acd1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001acd5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001ace0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001aceb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001acf6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0001ad01  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0001ad62  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000856a0  00000000  00000000  000206fc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00043eb4 l    d  .rodata	00000000 .rodata
00044244 l    d  .rwdata	00000000 .rwdata
0004480c l    d  .bss	00000000 .bss
00044938 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_pwm_routines.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
00044813 l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000423e4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00044244 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00042d40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00042e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00042fcc l     F .text	00000034 alt_dev_reg
00044324 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
000432b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000433dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00043408 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000435b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000436f8 l     F .text	0000003c alt_get_errno
00043734 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00044834 g     O .bss	00000004 alt_instruction_exception_handler
00042e2c g     F .text	0000006c alt_main
00042334 g     F .text	00000080 _puts_r
00044838 g     O .bss	00000100 alt_irq
00044528 g       *ABS*	00000000 __flash_rwdata_start
000422e8 g     F .text	0000004c printf
0004188c g     F .text	00000084 getClockTime
00041aa4 g     F .text	000000b0 upClockHour
0004075c g     F .text	00000048 buttonsRegisterISR
00041130 g     F .text	0000002c downVolume
000439b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00044820 g     O .bss	00000004 errno
0004482c g     O .bss	00000004 alt_argv
0004c4f8 g       *ABS*	00000000 _gp
00044503 g     O .rwdata	00000001 time_format
00040854 g     F .text	00000030 alarmLEDon
00044378 g     O .rwdata	00000180 alt_fd_list
000439d4 g     F .text	00000090 alt_find_dev
0004367c g     F .text	0000007c alt_io_redirect
000423b4 g     F .text	00000014 puts
0004351c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00043130 g     F .text	000000ec altera_avalon_jtag_uart_read
000422ac g     F .text	0000003c _printf_r
000421f0 g     F .text	00000064 .hidden __udivsi3
00043c10 g     F .text	00000090 alt_icache_flush
000444f8 g     O .rwdata	00000001 volume
00040714 g     F .text	00000048 switchesRegisterISR
00044520 g     O .rwdata	00000004 alt_max_fd
000444fa g     O .rwdata	00000006 unused_switches
0004204c g     F .text	000000ac downAlarmHour
00041310 g     F .text	00000044 check_return_code
00041c20 g     F .text	000000c8 downClockMinute
00044504 g     O .rwdata	00000004 _global_impure_ptr
00041dc8 g     F .text	00000084 getAlarmTime
00044938 g       *ABS*	00000000 __bss_end
00042c50 g     F .text	000000f0 alt_iic_isr_register
00040ab0 g     F .text	0000024c switchesISR
00042c04 g     F .text	0000004c alt_ic_irq_enabled
00044819 g     O .bss	00000003 alarm
00044824 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00044350 g     O .rwdata	00000028 alt_dev_null
000433bc g     F .text	00000020 alt_dcache_flush_all
000408e8 g     F .text	000001c8 timerSecondISR
00044528 g       *ABS*	00000000 __ram_rwdata_end
00041e4c g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00044518 g     O .rwdata	00000008 alt_dev_list
00042ed4 g     F .text	000000f8 write
00041ce8 g     F .text	000000ac downClockHour
00044244 g       *ABS*	00000000 __ram_rodata_end
00043eb4 g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00041910 g     F .text	000000cc upClockSecond
00042254 g     F .text	00000058 .hidden __umodsi3
00040824 g     F .text	00000030 alarmLEDoff
00040884 g     F .text	0000004c alarmLEDtoggle
00044938 g       *ABS*	00000000 end
0004480c g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00041fa4 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
0004321c g     F .text	00000094 altera_avalon_jtag_uart_write
00042450 g     F .text	00000524 ___vfprintf_internal_r
00043cf0 g     F .text	00000190 __call_exitprocs
00041460 g     F .text	0000002c upSong
00040244 g     F .text	0000003c _start
00040280 g     F .text	00000064 altera_avalon_pwm_init
00043038 g     F .text	00000038 alt_sys_init
00041774 g     F .text	0000009c checkInvalidMode
00044244 g       *ABS*	00000000 __ram_rwdata_start
00043eb4 g       *ABS*	00000000 __ram_rodata_start
00044500 g     O .rwdata	00000003 reset_clock_value
000407a4 g     F .text	00000040 switchesEnableInterrupt
00041104 g     F .text	0000002c upVolume
00043070 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00043b6c g     F .text	000000a4 alt_get_fd
00043cc0 g     F .text	00000030 memcmp
00044938 g       *ABS*	00000000 __alt_stack_base
00041354 g     F .text	000000ec print_error
00041810 g     F .text	00000044 isPowerOfTwoOrZero
00043a64 g     F .text	00000108 alt_find_file
00043444 g     F .text	000000a4 alt_dev_llist_insert
00041854 g     F .text	00000038 resetClockTime
000402e4 g     F .text	00000054 altera_avalon_pwm_enable
00042990 g     F .text	000000b8 __sfvwrite_small_dev
0004480c g       *ABS*	00000000 __bss_start
00041440 g     F .text	00000020 getSong
000408d0 g     F .text	00000018 main
00044830 g     O .bss	00000004 alt_envp
000430d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000403e0 g     F .text	00000080 resetDisplay
00044524 g     O .rwdata	00000004 alt_errno
000420f8 g     F .text	00000084 .hidden __divsi3
00041b54 g     F .text	000000cc downClockSecond
00043eb4 g       *ABS*	00000000 __flash_rodata_start
00040388 g     F .text	00000058 altera_avalon_pwm_change_duty_cycle
00043000 g     F .text	00000038 alt_irq_init
0004394c g     F .text	00000064 alt_release_fd
00044812 g     O .bss	00000001 song_index
00042a48 g     F .text	00000058 _write_r
000419dc g     F .text	000000c8 upClockMinute
00044508 g     O .rwdata	00000004 _impure_ptr
00044828 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
000406e4 g     F .text	00000030 timerSecondEnableInterrupt
00044510 g     O .rwdata	00000008 alt_fs_list
000414f8 g     F .text	0000027c determineMode
00040338 g     F .text	00000050 altera_avalon_pwm_disable
00040020 g       *ABS*	00000000 __ram_exceptions_start
00042aa0 g     F .text	00000050 alt_ic_isr_register
00044528 g       *ABS*	00000000 _edata
00044938 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000407e4 g     F .text	00000040 buttonsEnableInterrupt
00042b78 g     F .text	0000008c alt_ic_irq_disable
00043ca0 g     F .text	00000020 exit
0004217c g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004069c g     F .text	00000048 timerSecondRegisterISR
00041ef4 g     F .text	000000b0 upAlarmHour
000414d8 g     F .text	00000020 stopSong
00043e80 g     F .text	00000034 _exit
0004148c g     F .text	0000002c downSong
000423c8 g     F .text	0000001c strlen
000437f8 g     F .text	00000154 open
000414b8 g     F .text	00000020 playSong
0004481c g     O .bss	00000003 clock
000441ac g     O .rodata	00000060 mode_lookup_table
000434e8 g     F .text	00000034 alt_icache_flush_all
00040cfc g     F .text	000003e8 buttonsISR
0004450c g     O .rwdata	00000004 alt_priority_mask
00042af0 g     F .text	00000088 alt_ic_irq_enable
00042974 g     F .text	0000001c __vfprintf_internal
000432ec g     F .text	000000d0 close
000411e4 g     F .text	0000012c testPWM
000410e4 g     F .text	00000020 getVolume
00041d94 g     F .text	00000034 resetAlarmTime
00042da8 g     F .text	00000084 alt_load
00040460 g     F .text	0000023c updateDisplay
0004115c g     F .text	00000088 default500HzSquareWave



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	10920e04 	addi	r2,r2,18488
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	10920e04 	addi	r2,r2,18488
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a0cf17 	ldw	r2,-31940(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a0cf17 	ldw	r2,-31940(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6b13e14 	ori	gp,gp,50424
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	10920314 	ori	r2,r2,18444

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18d24e14 	ori	r3,r3,18744

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	0042da80 	call	42da8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	0042e2c0 	call	42e2c <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <altera_avalon_pwm_init>:

#include "altera_avalon_pwm_routines.h"


int altera_avalon_pwm_init(unsigned int address, unsigned int clock_divider, unsigned int duty_cycle)
{
   40280:	defffc04 	addi	sp,sp,-16
   40284:	df000315 	stw	fp,12(sp)
   40288:	df000304 	addi	fp,sp,12
   4028c:	e13ffd15 	stw	r4,-12(fp)
   40290:	e17ffe15 	stw	r5,-8(fp)
   40294:	e1bfff15 	stw	r6,-4(fp)
	if(duty_cycle > clock_divider)  //duty cycle reg must be less than or equal to clock divider
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	e0fffe17 	ldw	r3,-8(fp)
   402a0:	1880022e 	bgeu	r3,r2,402ac <altera_avalon_pwm_init+0x2c>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	00000a06 	br	402d4 <altera_avalon_pwm_init+0x54>
	}
	else
	{
		IOWR_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address, clock_divider - 1);
   402ac:	e0bffd17 	ldw	r2,-12(fp)
   402b0:	e0fffe17 	ldw	r3,-8(fp)
   402b4:	18ffffc4 	addi	r3,r3,-1
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800104 	addi	r2,r2,4
   402c4:	1007883a 	mov	r3,r2
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	18800035 	stwio	r2,0(r3)
	}
	 return ALTERA_AVALON_PWM_OK;
   402d0:	0005883a 	mov	r2,zero
}
   402d4:	e037883a 	mov	sp,fp
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00104 	addi	sp,sp,4
   402e0:	f800283a 	ret

000402e4 <altera_avalon_pwm_enable>:

int altera_avalon_pwm_enable(unsigned int address)
{
   402e4:	defffe04 	addi	sp,sp,-8
   402e8:	df000115 	stw	fp,4(sp)
   402ec:	df000104 	addi	fp,sp,4
   402f0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ALTERA_AVALON_PWM_ENABLE_MSK);
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	10800204 	addi	r2,r2,8
   402fc:	1007883a 	mov	r3,r2
   40300:	00800044 	movi	r2,1
   40304:	18800035 	stwio	r2,0(r3)
  
  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_ENABLED) //Confirm PWM is enabled
   40308:	e0bfff17 	ldw	r2,-4(fp)
   4030c:	10800204 	addi	r2,r2,8
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	10800060 	cmpeqi	r2,r2,1
   40318:	1000021e 	bne	r2,zero,40324 <altera_avalon_pwm_enable+0x40>
  {
  	return ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR;
   4031c:	00bfff84 	movi	r2,-2
   40320:	00000106 	br	40328 <altera_avalon_pwm_enable+0x44>
  }
  return ALTERA_AVALON_PWM_OK;
   40324:	0005883a 	mov	r2,zero
}
   40328:	e037883a 	mov	sp,fp
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00104 	addi	sp,sp,4
   40334:	f800283a 	ret

00040338 <altera_avalon_pwm_disable>:

int altera_avalon_pwm_disable(unsigned int address)
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
   40344:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ~ALTERA_AVALON_PWM_ENABLE_MSK);
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800204 	addi	r2,r2,8
   40350:	1007883a 	mov	r3,r2
   40354:	00bfff84 	movi	r2,-2
   40358:	18800035 	stwio	r2,0(r3)

  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_DISABLED)  //Confirm PWM is disabled 
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10800204 	addi	r2,r2,8
   40364:	10800037 	ldwio	r2,0(r2)
   40368:	10000226 	beq	r2,zero,40374 <altera_avalon_pwm_disable+0x3c>
  {
  	return ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR;
   4036c:	00bfff44 	movi	r2,-3
   40370:	00000106 	br	40378 <altera_avalon_pwm_disable+0x40>
  }
  return ALTERA_AVALON_PWM_OK;
   40374:	0005883a 	mov	r2,zero
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <altera_avalon_pwm_change_duty_cycle>:


int altera_avalon_pwm_change_duty_cycle(unsigned int address, unsigned int duty_cycle)
{
   40388:	defffd04 	addi	sp,sp,-12
   4038c:	df000215 	stw	fp,8(sp)
   40390:	df000204 	addi	fp,sp,8
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
	if(duty_cycle > IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address))  //duty cycle reg must be less than or equal to clock divider
   4039c:	e0bffe17 	ldw	r2,-8(fp)
   403a0:	10800037 	ldwio	r2,0(r2)
   403a4:	1007883a 	mov	r3,r2
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	1880022e 	bgeu	r3,r2,403b8 <altera_avalon_pwm_change_duty_cycle+0x30>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	00000606 	br	403d0 <altera_avalon_pwm_change_duty_cycle+0x48>
	}
	else
	{
    IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	10800104 	addi	r2,r2,4
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	18800035 	stwio	r2,0(r3)
	}
  return ALTERA_AVALON_PWM_OK;
   403cc:	0005883a 	mov	r2,zero
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00104 	addi	sp,sp,4
   403dc:	f800283a 	ret

000403e0 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   403e0:	deffff04 	addi	sp,sp,-4
   403e4:	df000015 	stw	fp,0(sp)
   403e8:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   403ec:	00c03004 	movi	r3,192
   403f0:	00800234 	movhi	r2,8
   403f4:	10841004 	addi	r2,r2,4160
   403f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   403fc:	00c03004 	movi	r3,192
   40400:	00800234 	movhi	r2,8
   40404:	10843004 	addi	r2,r2,4288
   40408:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   4040c:	00c03004 	movi	r3,192
   40410:	00800234 	movhi	r2,8
   40414:	10841404 	addi	r2,r2,4176
   40418:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   4041c:	00c03004 	movi	r3,192
   40420:	00800234 	movhi	r2,8
   40424:	10842c04 	addi	r2,r2,4272
   40428:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   4042c:	00c03004 	movi	r3,192
   40430:	00800234 	movhi	r2,8
   40434:	10841804 	addi	r2,r2,4192
   40438:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   4043c:	00c03004 	movi	r3,192
   40440:	00800234 	movhi	r2,8
   40444:	10842804 	addi	r2,r2,4256
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40460:	defffa04 	addi	sp,sp,-24
   40464:	dfc00515 	stw	ra,20(sp)
   40468:	df000415 	stw	fp,16(sp)
   4046c:	df000404 	addi	fp,sp,16
   40470:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40474:	e0bfff03 	ldbu	r2,-4(fp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	10801918 	cmpnei	r2,r2,100
   40480:	1000051e 	bne	r2,zero,40498 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40484:	00800284 	movi	r2,10
   40488:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4048c:	00800284 	movi	r2,10
   40490:	e0bffd05 	stb	r2,-12(fp)
   40494:	00000b06 	br	404c4 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40498:	e0bfff03 	ldbu	r2,-4(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	01400284 	movi	r5,10
   404a4:	1009883a 	mov	r4,r2
   404a8:	00421f00 	call	421f0 <__udivsi3>
   404ac:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   404b0:	e0bfff03 	ldbu	r2,-4(fp)
   404b4:	e0fffd43 	ldbu	r3,-11(fp)
   404b8:	18fffda4 	muli	r3,r3,-10
   404bc:	10c5883a 	add	r2,r2,r3
   404c0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   404c4:	e0bfff43 	ldbu	r2,-3(fp)
   404c8:	10803fcc 	andi	r2,r2,255
   404cc:	10801918 	cmpnei	r2,r2,100
   404d0:	1000051e 	bne	r2,zero,404e8 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   404d4:	00800284 	movi	r2,10
   404d8:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   404dc:	00800284 	movi	r2,10
   404e0:	e0bffc85 	stb	r2,-14(fp)
   404e4:	00000b06 	br	40514 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   404e8:	e0bfff43 	ldbu	r2,-3(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	00421f00 	call	421f0 <__udivsi3>
   404fc:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   40500:	e0bfff43 	ldbu	r2,-3(fp)
   40504:	e0fffcc3 	ldbu	r3,-13(fp)
   40508:	18fffda4 	muli	r3,r3,-10
   4050c:	10c5883a 	add	r2,r2,r3
   40510:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   40514:	e0bfff83 	ldbu	r2,-2(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	10801918 	cmpnei	r2,r2,100
   40520:	1000051e 	bne	r2,zero,40538 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   40524:	00800284 	movi	r2,10
   40528:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   4052c:	00800284 	movi	r2,10
   40530:	e0bffc05 	stb	r2,-16(fp)
   40534:	00000b06 	br	40564 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   40538:	e0bfff83 	ldbu	r2,-2(fp)
   4053c:	10803fcc 	andi	r2,r2,255
   40540:	01400284 	movi	r5,10
   40544:	1009883a 	mov	r4,r2
   40548:	00421f00 	call	421f0 <__udivsi3>
   4054c:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   40550:	e0bfff83 	ldbu	r2,-2(fp)
   40554:	e0fffc43 	ldbu	r3,-15(fp)
   40558:	18fffda4 	muli	r3,r3,-10
   4055c:	10c5883a 	add	r2,r2,r3
   40560:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40564:	e0bffd43 	ldbu	r2,-11(fp)
   40568:	10c03fcc 	andi	r3,r2,255
   4056c:	00800134 	movhi	r2,4
   40570:	108fad04 	addi	r2,r2,16052
   40574:	10c5883a 	add	r2,r2,r3
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40580:	e0bffd03 	ldbu	r2,-12(fp)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	00800134 	movhi	r2,4
   4058c:	108fad04 	addi	r2,r2,16052
   40590:	10c5883a 	add	r2,r2,r3
   40594:	10800003 	ldbu	r2,0(r2)
   40598:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4059c:	e0bffcc3 	ldbu	r2,-13(fp)
   405a0:	10c03fcc 	andi	r3,r2,255
   405a4:	00800134 	movhi	r2,4
   405a8:	108fad04 	addi	r2,r2,16052
   405ac:	10c5883a 	add	r2,r2,r3
   405b0:	10800003 	ldbu	r2,0(r2)
   405b4:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   405b8:	e0bffc83 	ldbu	r2,-14(fp)
   405bc:	10c03fcc 	andi	r3,r2,255
   405c0:	00800134 	movhi	r2,4
   405c4:	108fad04 	addi	r2,r2,16052
   405c8:	10c5883a 	add	r2,r2,r3
   405cc:	10800003 	ldbu	r2,0(r2)
   405d0:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   405d4:	e0bffc43 	ldbu	r2,-15(fp)
   405d8:	10c03fcc 	andi	r3,r2,255
   405dc:	00800134 	movhi	r2,4
   405e0:	108fad04 	addi	r2,r2,16052
   405e4:	10c5883a 	add	r2,r2,r3
   405e8:	10800003 	ldbu	r2,0(r2)
   405ec:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   405f0:	e0bffc03 	ldbu	r2,-16(fp)
   405f4:	10c03fcc 	andi	r3,r2,255
   405f8:	00800134 	movhi	r2,4
   405fc:	108fad04 	addi	r2,r2,16052
   40600:	10c5883a 	add	r2,r2,r3
   40604:	10800003 	ldbu	r2,0(r2)
   40608:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   4060c:	e0bffec3 	ldbu	r2,-5(fp)
   40610:	10c03fcc 	andi	r3,r2,255
   40614:	00800234 	movhi	r2,8
   40618:	10841004 	addi	r2,r2,4160
   4061c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   40620:	e0bffe83 	ldbu	r2,-6(fp)
   40624:	10c03fcc 	andi	r3,r2,255
   40628:	00800234 	movhi	r2,8
   4062c:	10843004 	addi	r2,r2,4288
   40630:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   40634:	e0bffe43 	ldbu	r2,-7(fp)
   40638:	10c03fcc 	andi	r3,r2,255
   4063c:	00800234 	movhi	r2,8
   40640:	10841404 	addi	r2,r2,4176
   40644:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   40648:	e0bffe03 	ldbu	r2,-8(fp)
   4064c:	10c03fcc 	andi	r3,r2,255
   40650:	00800234 	movhi	r2,8
   40654:	10842c04 	addi	r2,r2,4272
   40658:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   4065c:	e0bffdc3 	ldbu	r2,-9(fp)
   40660:	10c03fcc 	andi	r3,r2,255
   40664:	00800234 	movhi	r2,8
   40668:	10841804 	addi	r2,r2,4192
   4066c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40670:	e0bffd83 	ldbu	r2,-10(fp)
   40674:	10c03fcc 	andi	r3,r2,255
   40678:	00800234 	movhi	r2,8
   4067c:	10842804 	addi	r2,r2,4256
   40680:	10c00035 	stwio	r3,0(r2)
   40684:	0001883a 	nop
   40688:	e037883a 	mov	sp,fp
   4068c:	dfc00117 	ldw	ra,4(sp)
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00204 	addi	sp,sp,8
   40698:	f800283a 	ret

0004069c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4069c:	defffb04 	addi	sp,sp,-20
   406a0:	dfc00415 	stw	ra,16(sp)
   406a4:	df000315 	stw	fp,12(sp)
   406a8:	df000304 	addi	fp,sp,12
   406ac:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   406b0:	d8000015 	stw	zero,0(sp)
   406b4:	000f883a 	mov	r7,zero
   406b8:	e1bfff17 	ldw	r6,-4(fp)
   406bc:	01400044 	movi	r5,1
   406c0:	0009883a 	mov	r4,zero
   406c4:	0042aa00 	call	42aa0 <alt_ic_isr_register>
   406c8:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   406cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   406d0:	e037883a 	mov	sp,fp
   406d4:	dfc00117 	ldw	ra,4(sp)
   406d8:	df000017 	ldw	fp,0(sp)
   406dc:	dec00204 	addi	sp,sp,8
   406e0:	f800283a 	ret

000406e4 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   406e4:	deffff04 	addi	sp,sp,-4
   406e8:	df000015 	stw	fp,0(sp)
   406ec:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   406f0:	00c001c4 	movi	r3,7
   406f4:	00800234 	movhi	r2,8
   406f8:	10840904 	addi	r2,r2,4132
   406fc:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40700:	0001883a 	nop
   40704:	e037883a 	mov	sp,fp
   40708:	df000017 	ldw	fp,0(sp)
   4070c:	dec00104 	addi	sp,sp,4
   40710:	f800283a 	ret

00040714 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   40714:	defffb04 	addi	sp,sp,-20
   40718:	dfc00415 	stw	ra,16(sp)
   4071c:	df000315 	stw	fp,12(sp)
   40720:	df000304 	addi	fp,sp,12
   40724:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	000f883a 	mov	r7,zero
   40730:	e1bfff17 	ldw	r6,-4(fp)
   40734:	01400084 	movi	r5,2
   40738:	0009883a 	mov	r4,zero
   4073c:	0042aa00 	call	42aa0 <alt_ic_isr_register>
   40740:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40744:	e0bffe03 	ldbu	r2,-8(fp)
}
   40748:	e037883a 	mov	sp,fp
   4074c:	dfc00117 	ldw	ra,4(sp)
   40750:	df000017 	ldw	fp,0(sp)
   40754:	dec00204 	addi	sp,sp,8
   40758:	f800283a 	ret

0004075c <buttonsRegisterISR>:


uint8_t buttonsRegisterISR(void (*buttonsISR)(void *isr_context)) {
   4075c:	defffb04 	addi	sp,sp,-20
   40760:	dfc00415 	stw	ra,16(sp)
   40764:	df000315 	stw	fp,12(sp)
   40768:	df000304 	addi	fp,sp,12
   4076c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
   40770:	d8000015 	stw	zero,0(sp)
   40774:	000f883a 	mov	r7,zero
   40778:	e1bfff17 	ldw	r6,-4(fp)
   4077c:	014000c4 	movi	r5,3
   40780:	0009883a 	mov	r4,zero
   40784:	0042aa00 	call	42aa0 <alt_ic_isr_register>
   40788:	e0bffe05 	stb	r2,-8(fp)
                                            BUTTONS_IRQ,
                                            buttonsISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4078c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40790:	e037883a 	mov	sp,fp
   40794:	dfc00117 	ldw	ra,4(sp)
   40798:	df000017 	ldw	fp,0(sp)
   4079c:	dec00204 	addi	sp,sp,8
   407a0:	f800283a 	ret

000407a4 <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   407a4:	deffff04 	addi	sp,sp,-4
   407a8:	df000015 	stw	fp,0(sp)
   407ac:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   407b0:	00ffffd4 	movui	r3,65535
   407b4:	00800234 	movhi	r2,8
   407b8:	10843a04 	addi	r2,r2,4328
   407bc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   407c0:	0007883a 	mov	r3,zero
   407c4:	00800234 	movhi	r2,8
   407c8:	10843b04 	addi	r2,r2,4332
   407cc:	10c00035 	stwio	r3,0(r2)
}
   407d0:	0001883a 	nop
   407d4:	e037883a 	mov	sp,fp
   407d8:	df000017 	ldw	fp,0(sp)
   407dc:	dec00104 	addi	sp,sp,4
   407e0:	f800283a 	ret

000407e4 <buttonsEnableInterrupt>:

void buttonsEnableInterrupt(void) {
   407e4:	deffff04 	addi	sp,sp,-4
   407e8:	df000015 	stw	fp,0(sp)
   407ec:	d839883a 	mov	fp,sp
  // enable all buttons to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, BUTTONS_INTERRUPT_MASK);
   407f0:	00c000c4 	movi	r3,3
   407f4:	00800234 	movhi	r2,8
   407f8:	10841e04 	addi	r2,r2,4216
   407fc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40800:	0007883a 	mov	r3,zero
   40804:	00800234 	movhi	r2,8
   40808:	10841f04 	addi	r2,r2,4220
   4080c:	10c00035 	stwio	r3,0(r2)
}
   40810:	0001883a 	nop
   40814:	e037883a 	mov	sp,fp
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00104 	addi	sp,sp,4
   40820:	f800283a 	ret

00040824 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40824:	deffff04 	addi	sp,sp,-4
   40828:	df000015 	stw	fp,0(sp)
   4082c:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40830:	0007883a 	mov	r3,zero
   40834:	00800234 	movhi	r2,8
   40838:	10842404 	addi	r2,r2,4240
   4083c:	10c00035 	stwio	r3,0(r2)
}
   40840:	0001883a 	nop
   40844:	e037883a 	mov	sp,fp
   40848:	df000017 	ldw	fp,0(sp)
   4084c:	dec00104 	addi	sp,sp,4
   40850:	f800283a 	ret

00040854 <alarmLEDon>:

void alarmLEDon(void) {
   40854:	deffff04 	addi	sp,sp,-4
   40858:	df000015 	stw	fp,0(sp)
   4085c:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40860:	00c00044 	movi	r3,1
   40864:	00800234 	movhi	r2,8
   40868:	10842404 	addi	r2,r2,4240
   4086c:	10c00035 	stwio	r3,0(r2)
}
   40870:	0001883a 	nop
   40874:	e037883a 	mov	sp,fp
   40878:	df000017 	ldw	fp,0(sp)
   4087c:	dec00104 	addi	sp,sp,4
   40880:	f800283a 	ret

00040884 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40884:	defffe04 	addi	sp,sp,-8
   40888:	df000115 	stw	fp,4(sp)
   4088c:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40890:	00800234 	movhi	r2,8
   40894:	10842404 	addi	r2,r2,4240
   40898:	10800037 	ldwio	r2,0(r2)
   4089c:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   408a0:	e0bfff03 	ldbu	r2,-4(fp)
   408a4:	10803fcc 	andi	r2,r2,255
   408a8:	1005003a 	cmpeq	r2,r2,zero
   408ac:	10c03fcc 	andi	r3,r2,255
   408b0:	00800234 	movhi	r2,8
   408b4:	10842404 	addi	r2,r2,4240
   408b8:	10c00035 	stwio	r3,0(r2)
   408bc:	0001883a 	nop
   408c0:	e037883a 	mov	sp,fp
   408c4:	df000017 	ldw	fp,0(sp)
   408c8:	dec00104 	addi	sp,sp,4
   408cc:	f800283a 	ret

000408d0 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   408d0:	defffe04 	addi	sp,sp,-8
   408d4:	dfc00115 	stw	ra,4(sp)
   408d8:	df000015 	stw	fp,0(sp)
   408dc:	d839883a 	mov	fp,sp

  default500HzSquareWave();
   408e0:	004115c0 	call	4115c <default500HzSquareWave>
  while(1);
   408e4:	003fff06 	br	408e4 <__alt_data_end+0xfffd88e4>

000408e8 <timerSecondISR>:


/* This is the main ISR that is called whenever the second timer fires its interrupt. 
This ISR lets us update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   408e8:	defffb04 	addi	sp,sp,-20
   408ec:	dfc00415 	stw	ra,16(sp)
   408f0:	df000315 	stw	fp,12(sp)
   408f4:	df000304 	addi	fp,sp,12
   408f8:	e13fff15 	stw	r4,-4(fp)

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   408fc:	0007883a 	mov	r3,zero
   40900:	00800234 	movhi	r2,8
   40904:	10840804 	addi	r2,r2,4128
   40908:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   4090c:	d0a0c543 	ldbu	r2,-31979(gp)
   40910:	10803fcc 	andi	r2,r2,255
   40914:	1000471e 	bne	r2,zero,40a34 <timerSecondISR+0x14c>

    if (mode.config.on == TRUE) {
   40918:	d0a0c5c3 	ldbu	r2,-31977(gp)
   4091c:	10803fcc 	andi	r2,r2,255
   40920:	10800058 	cmpnei	r2,r2,1
   40924:	10000e1e 	bne	r2,zero,40960 <timerSecondISR+0x78>
      // since we're in config, we don't want to carry the digits
      clock = upClockSecond(CARRY_OFF);
   40928:	0009883a 	mov	r4,zero
   4092c:	00419100 	call	41910 <upClockSecond>
   40930:	e0bffd05 	stb	r2,-12(fp)
   40934:	1006d23a 	srli	r3,r2,8
   40938:	1809883a 	mov	r4,r3
   4093c:	00ffffc4 	movi	r3,-1
   40940:	20c6703a 	and	r3,r4,r3
   40944:	e0fffd45 	stb	r3,-11(fp)
   40948:	1004d43a 	srli	r2,r2,16
   4094c:	1007883a 	mov	r3,r2
   40950:	00bfffc4 	movi	r2,-1
   40954:	1884703a 	and	r2,r3,r2
   40958:	e0bffd85 	stb	r2,-10(fp)
   4095c:	00003206 	br	40a28 <timerSecondISR+0x140>
    }
    else if (mode.config.on == FALSE) {
   40960:	d0a0c5c3 	ldbu	r2,-31977(gp)
   40964:	10803fcc 	andi	r2,r2,255
   40968:	10002c1e 	bne	r2,zero,40a1c <timerSecondISR+0x134>

      /* since we're not in config, the time should normally count and carry.
      This also means that if the alarm is turned ON, we need to check if it */
      clock = upClockSecond(CARRY_ON);
   4096c:	01000044 	movi	r4,1
   40970:	00419100 	call	41910 <upClockSecond>
   40974:	e0bffd05 	stb	r2,-12(fp)
   40978:	1006d23a 	srli	r3,r2,8
   4097c:	1809883a 	mov	r4,r3
   40980:	00ffffc4 	movi	r3,-1
   40984:	20c6703a 	and	r3,r4,r3
   40988:	e0fffd45 	stb	r3,-11(fp)
   4098c:	1004d43a 	srli	r2,r2,16
   40990:	1007883a 	mov	r3,r2
   40994:	00bfffc4 	movi	r2,-1
   40998:	1884703a 	and	r2,r3,r2
   4099c:	e0bffd85 	stb	r2,-10(fp)

      if (mode.alarm == ON) {
   409a0:	d0a0c583 	ldbu	r2,-31978(gp)
   409a4:	10803fcc 	andi	r2,r2,255
   409a8:	10800058 	cmpnei	r2,r2,1
   409ac:	10001e1e 	bne	r2,zero,40a28 <timerSecondISR+0x140>
        // however, we do need to check whether or not the alarm should go off
        struct time alarm;
        alarm = getAlarmTime();
   409b0:	0041dc80 	call	41dc8 <getAlarmTime>
   409b4:	e0bffdc5 	stb	r2,-9(fp)
   409b8:	1006d23a 	srli	r3,r2,8
   409bc:	1809883a 	mov	r4,r3
   409c0:	00ffffc4 	movi	r3,-1
   409c4:	20c6703a 	and	r3,r4,r3
   409c8:	e0fffe05 	stb	r3,-8(fp)
   409cc:	1004d43a 	srli	r2,r2,16
   409d0:	1007883a 	mov	r3,r2
   409d4:	00bfffc4 	movi	r2,-1
   409d8:	1884703a 	and	r2,r3,r2
   409dc:	e0bffe45 	stb	r2,-7(fp)

        /* to avoid executing the following block of code everytime and to only call playSong() once, 
        we have to check whether or not the time is currently at XX:XX:00. 
        At 0 seconds, thats when the alarm will be activated */
        if ( (clock.second == 0) && (alarm.hour == clock.hour) && (alarm.minute == clock.minute) ) {
   409e0:	e0bffd83 	ldbu	r2,-10(fp)
   409e4:	10803fcc 	andi	r2,r2,255
   409e8:	10000f1e 	bne	r2,zero,40a28 <timerSecondISR+0x140>
   409ec:	e0fffdc3 	ldbu	r3,-9(fp)
   409f0:	e0bffd03 	ldbu	r2,-12(fp)
   409f4:	18c03fcc 	andi	r3,r3,255
   409f8:	10803fcc 	andi	r2,r2,255
   409fc:	18800a1e 	bne	r3,r2,40a28 <timerSecondISR+0x140>
   40a00:	e0fffe03 	ldbu	r3,-8(fp)
   40a04:	e0bffd43 	ldbu	r2,-11(fp)
   40a08:	18c03fcc 	andi	r3,r3,255
   40a0c:	10803fcc 	andi	r2,r2,255
   40a10:	1880051e 	bne	r3,r2,40a28 <timerSecondISR+0x140>
          // start the alarm!
          playSong();
   40a14:	00414b80 	call	414b8 <playSong>
   40a18:	00000306 	br	40a28 <timerSecondISR+0x140>
        }
      }

    }
    else {
      printf("ERROR: mode.config.on has an invalid value\n");
   40a1c:	01000134 	movhi	r4,4
   40a20:	210fb004 	addi	r4,r4,16064
   40a24:	00423b40 	call	423b4 <puts>
    }

    // since the time is being displayed, we'll have to update the display
    updateDisplay(clock);
   40a28:	e13ffd17 	ldw	r4,-12(fp)
   40a2c:	00404600 	call	40460 <updateDisplay>
   40a30:	00000d06 	br	40a68 <timerSecondISR+0x180>

  }
  else {
    // since the current time is not being displayed, we don't update the display
    clock = upClockSecond(CARRY_ON);
   40a34:	01000044 	movi	r4,1
   40a38:	00419100 	call	41910 <upClockSecond>
   40a3c:	e0bffd05 	stb	r2,-12(fp)
   40a40:	1006d23a 	srli	r3,r2,8
   40a44:	1809883a 	mov	r4,r3
   40a48:	00ffffc4 	movi	r3,-1
   40a4c:	20c6703a 	and	r3,r4,r3
   40a50:	e0fffd45 	stb	r3,-11(fp)
   40a54:	1004d43a 	srli	r2,r2,16
   40a58:	1007883a 	mov	r3,r2
   40a5c:	00bfffc4 	movi	r2,-1
   40a60:	1884703a 	and	r2,r3,r2
   40a64:	e0bffd85 	stb	r2,-10(fp)
  }

  // for debugging purposes:
  printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40a68:	e0bffd03 	ldbu	r2,-12(fp)
   40a6c:	10803fcc 	andi	r2,r2,255
   40a70:	e0fffd43 	ldbu	r3,-11(fp)
   40a74:	18c03fcc 	andi	r3,r3,255
   40a78:	e13ffd83 	ldbu	r4,-10(fp)
   40a7c:	21003fcc 	andi	r4,r4,255
   40a80:	200f883a 	mov	r7,r4
   40a84:	180d883a 	mov	r6,r3
   40a88:	100b883a 	mov	r5,r2
   40a8c:	01000134 	movhi	r4,4
   40a90:	210fbb04 	addi	r4,r4,16108
   40a94:	00422e80 	call	422e8 <printf>
}
   40a98:	0001883a 	nop
   40a9c:	e037883a 	mov	sp,fp
   40aa0:	dfc00117 	ldw	ra,4(sp)
   40aa4:	df000017 	ldw	fp,0(sp)
   40aa8:	dec00204 	addi	sp,sp,8
   40aac:	f800283a 	ret

00040ab0 <switchesISR>:


/* This ISR lets us determine what mode the user is currently requesting.
Once this mode is determined, the system will update the display to match what was requested,
and perform other actions such as turn on/off the alarm and on/off a song*/
void switchesISR(void* isr_context) {
   40ab0:	defffa04 	addi	sp,sp,-24
   40ab4:	dfc00515 	stw	ra,20(sp)
   40ab8:	df000415 	stw	fp,16(sp)
   40abc:	df000404 	addi	fp,sp,16
   40ac0:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40ac4:	0007883a 	mov	r3,zero
   40ac8:	00800234 	movhi	r2,8
   40acc:	10843b04 	addi	r2,r2,4332
   40ad0:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40ad4:	00414f80 	call	414f8 <determineMode>
   40ad8:	1009883a 	mov	r4,r2
   40adc:	180b883a 	mov	r5,r3
   40ae0:	e13ffc05 	stb	r4,-16(fp)
   40ae4:	2004d23a 	srli	r2,r4,8
   40ae8:	1007883a 	mov	r3,r2
   40aec:	00bfffc4 	movi	r2,-1
   40af0:	1884703a 	and	r2,r3,r2
   40af4:	e0bffc45 	stb	r2,-15(fp)
   40af8:	2004d43a 	srli	r2,r4,16
   40afc:	1007883a 	mov	r3,r2
   40b00:	00bfffc4 	movi	r2,-1
   40b04:	1884703a 	and	r2,r3,r2
   40b08:	e0bffc85 	stb	r2,-14(fp)
   40b0c:	2004d63a 	srli	r2,r4,24
   40b10:	e0bffcc5 	stb	r2,-13(fp)
   40b14:	e17ffd05 	stb	r5,-12(fp)
   40b18:	2804d23a 	srli	r2,r5,8
   40b1c:	1007883a 	mov	r3,r2
   40b20:	00bfffc4 	movi	r2,-1
   40b24:	1884703a 	and	r2,r3,r2
   40b28:	e0bffd45 	stb	r2,-11(fp)

  /* if an invalid mode is requested, nothing needs to change except for the mode struct
  if however a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40b2c:	e0bffc03 	ldbu	r2,-16(fp)
   40b30:	10803fcc 	andi	r2,r2,255
   40b34:	10005c1e 	bne	r2,zero,40ca8 <switchesISR+0x1f8>

    /* if we're already displaying the same mode that was requested, we don't need 
    need to update the display. Thus we can skip the following if statement*/
    if (mode_request.display != mode.display) {
   40b38:	e0fffc43 	ldbu	r3,-15(fp)
   40b3c:	d0a0c543 	ldbu	r2,-31979(gp)
   40b40:	18c03fcc 	andi	r3,r3,255
   40b44:	10803fcc 	andi	r2,r2,255
   40b48:	18804826 	beq	r3,r2,40c6c <switchesISR+0x1bc>
      although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well. */
      struct time display;

      switch(mode_request.display) {
   40b4c:	e0bffc43 	ldbu	r2,-15(fp)
   40b50:	10803fcc 	andi	r2,r2,255
   40b54:	10c00060 	cmpeqi	r3,r2,1
   40b58:	1800161e 	bne	r3,zero,40bb4 <switchesISR+0x104>
   40b5c:	10c00088 	cmpgei	r3,r2,2
   40b60:	1800021e 	bne	r3,zero,40b6c <switchesISR+0xbc>
   40b64:	10000626 	beq	r2,zero,40b80 <switchesISR+0xd0>
   40b68:	00002e06 	br	40c24 <switchesISR+0x174>
   40b6c:	10c000a0 	cmpeqi	r3,r2,2
   40b70:	18001d1e 	bne	r3,zero,40be8 <switchesISR+0x138>
   40b74:	108000e0 	cmpeqi	r2,r2,3
   40b78:	1000221e 	bne	r2,zero,40c04 <switchesISR+0x154>
   40b7c:	00002906 	br	40c24 <switchesISR+0x174>
        case DISP_CLOCK: 
          display = getClockTime();
   40b80:	004188c0 	call	4188c <getClockTime>
   40b84:	e0bffd85 	stb	r2,-10(fp)
   40b88:	1006d23a 	srli	r3,r2,8
   40b8c:	1809883a 	mov	r4,r3
   40b90:	00ffffc4 	movi	r3,-1
   40b94:	20c6703a 	and	r3,r4,r3
   40b98:	e0fffdc5 	stb	r3,-9(fp)
   40b9c:	1004d43a 	srli	r2,r2,16
   40ba0:	1007883a 	mov	r3,r2
   40ba4:	00bfffc4 	movi	r2,-1
   40ba8:	1884703a 	and	r2,r3,r2
   40bac:	e0bffe05 	stb	r2,-8(fp)
          break;
   40bb0:	00001f06 	br	40c30 <switchesISR+0x180>

        case DISP_ALARM:
          display = getAlarmTime();
   40bb4:	0041dc80 	call	41dc8 <getAlarmTime>
   40bb8:	e0bffd85 	stb	r2,-10(fp)
   40bbc:	1006d23a 	srli	r3,r2,8
   40bc0:	1809883a 	mov	r4,r3
   40bc4:	00ffffc4 	movi	r3,-1
   40bc8:	20c6703a 	and	r3,r4,r3
   40bcc:	e0fffdc5 	stb	r3,-9(fp)
   40bd0:	1004d43a 	srli	r2,r2,16
   40bd4:	1007883a 	mov	r3,r2
   40bd8:	00bfffc4 	movi	r2,-1
   40bdc:	1884703a 	and	r2,r3,r2
   40be0:	e0bffe05 	stb	r2,-8(fp)
          break;
   40be4:	00001206 	br	40c30 <switchesISR+0x180>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the volume exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40be8:	00801904 	movi	r2,100
   40bec:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40bf0:	00801904 	movi	r2,100
   40bf4:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getVolume();
   40bf8:	00410e40 	call	410e4 <getVolume>
   40bfc:	e0bffe05 	stb	r2,-8(fp)
          break;
   40c00:	00000b06 	br	40c30 <switchesISR+0x180>

        case DISP_SONG:
          /* the current song will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the song index exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40c04:	00801904 	movi	r2,100
   40c08:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40c0c:	00801904 	movi	r2,100
   40c10:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getSong();
   40c14:	00414400 	call	41440 <getSong>
   40c18:	e0bffe05 	stb	r2,-8(fp)
          playSong();
   40c1c:	00414b80 	call	414b8 <playSong>
          break;
   40c20:	00000306 	br	40c30 <switchesISR+0x180>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40c24:	01000134 	movhi	r4,4
   40c28:	210fc504 	addi	r4,r4,16148
   40c2c:	00423b40 	call	423b4 <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40c30:	e0bffd8b 	ldhu	r2,-10(fp)
   40c34:	e0fffe0b 	ldhu	r3,-8(fp)
   40c38:	18c03fcc 	andi	r3,r3,255
   40c3c:	1806943a 	slli	r3,r3,16
   40c40:	1888b03a 	or	r4,r3,r2
   40c44:	0007883a 	mov	r3,zero
   40c48:	00804034 	movhi	r2,256
   40c4c:	10bfffc4 	addi	r2,r2,-1
   40c50:	2084703a 	and	r2,r4,r2
   40c54:	18ffc02c 	andhi	r3,r3,65280
   40c58:	1884b03a 	or	r2,r3,r2
   40c5c:	1007883a 	mov	r3,r2
   40c60:	1809883a 	mov	r4,r3
   40c64:	00404600 	call	40460 <updateDisplay>
   40c68:	00000306 	br	40c78 <switchesISR+0x1c8>
    }

    // (mode_request.display == mode.display)
    else { 
      printf("The requested display mode is already active\n");
   40c6c:	01000134 	movhi	r4,4
   40c70:	210fd004 	addi	r4,r4,16192
   40c74:	00423b40 	call	423b4 <puts>
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40c78:	e0bffc83 	ldbu	r2,-14(fp)
   40c7c:	10803fcc 	andi	r2,r2,255
   40c80:	1000071e 	bne	r2,zero,40ca0 <switchesISR+0x1f0>
      alarmLEDoff();
   40c84:	00408240 	call	40824 <alarmLEDoff>
      /* only stop the song if we're not in the song selection display.
      otherwise, the song that is being sampled while on this display will suddenly
      stop playing. A song should only stop playing if an armed alarm went off,
      and then a user decides to turn off said alarm, OR if a user changes from
      the song display menu to any other menu */
      if (mode_request.display != DISP_SONG) {
   40c88:	e0bffc43 	ldbu	r2,-15(fp)
   40c8c:	10803fcc 	andi	r2,r2,255
   40c90:	108000e0 	cmpeqi	r2,r2,3
   40c94:	1000071e 	bne	r2,zero,40cb4 <switchesISR+0x204>
        stopSong();
   40c98:	00414d80 	call	414d8 <stopSong>
   40c9c:	00000506 	br	40cb4 <switchesISR+0x204>
      }
    }

    // (mode_request.alarm == ON)
    else {
      alarmLEDon();
   40ca0:	00408540 	call	40854 <alarmLEDon>
   40ca4:	00000306 	br	40cb4 <switchesISR+0x204>
    }
  }

  // (mode_request.invalid == TRUE)
  else {
    printf("ERROR: An invalid mode was requested\n");
   40ca8:	01000134 	movhi	r4,4
   40cac:	210fdc04 	addi	r4,r4,16240
   40cb0:	00423b40 	call	423b4 <puts>
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40cb4:	e0bffc03 	ldbu	r2,-16(fp)
   40cb8:	d0a0c505 	stb	r2,-31980(gp)
   40cbc:	e0bffc43 	ldbu	r2,-15(fp)
   40cc0:	d0a0c545 	stb	r2,-31979(gp)
   40cc4:	e0bffc83 	ldbu	r2,-14(fp)
   40cc8:	d0a0c585 	stb	r2,-31978(gp)
   40ccc:	e0bffcc3 	ldbu	r2,-13(fp)
   40cd0:	d0a0c5c5 	stb	r2,-31977(gp)
   40cd4:	e0bffd03 	ldbu	r2,-12(fp)
   40cd8:	d0a0c605 	stb	r2,-31976(gp)
   40cdc:	e0bffd43 	ldbu	r2,-11(fp)
   40ce0:	d0a0c645 	stb	r2,-31975(gp)
  return;
   40ce4:	0001883a 	nop

}
   40ce8:	e037883a 	mov	sp,fp
   40cec:	dfc00117 	ldw	ra,4(sp)
   40cf0:	df000017 	ldw	fp,0(sp)
   40cf4:	dec00204 	addi	sp,sp,8
   40cf8:	f800283a 	ret

00040cfc <buttonsISR>:


/* This ISR lets us determine what sort of operation the user wants to perform for the
correctly active display mode (increase/decrease clock time, song select, etc.).
Once the requested operation is determined, the system will update the display to match what was requested */
void buttonsISR(void* isr_context) {
   40cfc:	defffc04 	addi	sp,sp,-16
   40d00:	dfc00315 	stw	ra,12(sp)
   40d04:	df000215 	stw	fp,8(sp)
   40d08:	df000204 	addi	fp,sp,8
   40d0c:	e13fff15 	stw	r4,-4(fp)

  // if the user is not currently configuring something (time, alarm, etc), then a button press won't do anything
  if (mode.config.on == FALSE) {
   40d10:	d0a0c5c3 	ldbu	r2,-31977(gp)
   40d14:	10803fcc 	andi	r2,r2,255
   40d18:	1000081e 	bne	r2,zero,40d3c <buttonsISR+0x40>
    printf("ERROR: Not currently in config mode! Button press ignored\n");
   40d1c:	01000134 	movhi	r4,4
   40d20:	210fe604 	addi	r4,r4,16280
   40d24:	00423b40 	call	423b4 <puts>
    // we can't forget to reset edge capture register by writing to it though!
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40d28:	0007883a 	mov	r3,zero
   40d2c:	00800234 	movhi	r2,8
   40d30:	10841f04 	addi	r2,r2,4220
   40d34:	10c00035 	stwio	r3,0(r2)
    return;
   40d38:	0000e506 	br	410d0 <buttonsISR+0x3d4>
  }
  else {
    // determine the operation requested based on the buttons state
    uint8_t buttons_state = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
   40d3c:	00800234 	movhi	r2,8
   40d40:	10841f04 	addi	r2,r2,4220
   40d44:	10800037 	ldwio	r2,0(r2)
   40d48:	e0bffe05 	stb	r2,-8(fp)
      struct time display;

      /* what happens next is entirely dependant on what the current display mode is, whether or not 
      the button press was an UP or DOWN operation, and finally if the config was for the minute or hour time units.
      This scary case statement figures it out */
      switch(mode.display) {
   40d4c:	d0a0c543 	ldbu	r2,-31979(gp)
   40d50:	10803fcc 	andi	r2,r2,255
   40d54:	10c00060 	cmpeqi	r3,r2,1
   40d58:	1800551e 	bne	r3,zero,40eb0 <buttonsISR+0x1b4>
   40d5c:	10c00088 	cmpgei	r3,r2,2
   40d60:	1800021e 	bne	r3,zero,40d6c <buttonsISR+0x70>
   40d64:	10000626 	beq	r2,zero,40d80 <buttonsISR+0x84>
   40d68:	0000bc06 	br	4105c <buttonsISR+0x360>
   40d6c:	10c000a0 	cmpeqi	r3,r2,2
   40d70:	1800991e 	bne	r3,zero,40fd8 <buttonsISR+0x2dc>
   40d74:	108000e0 	cmpeqi	r2,r2,3
   40d78:	1000a71e 	bne	r2,zero,41018 <buttonsISR+0x31c>
   40d7c:	0000b706 	br	4105c <buttonsISR+0x360>

        case DISP_CLOCK: 

          if (buttons_state == UP) {
   40d80:	e0bffe03 	ldbu	r2,-8(fp)
   40d84:	10800098 	cmpnei	r2,r2,2
   40d88:	1000231e 	bne	r2,zero,40e18 <buttonsISR+0x11c>
            if (mode.config.hour == TRUE) {
   40d8c:	d0a0c603 	ldbu	r2,-31976(gp)
   40d90:	10803fcc 	andi	r2,r2,255
   40d94:	10800058 	cmpnei	r2,r2,1
   40d98:	10000d1e 	bne	r2,zero,40dd0 <buttonsISR+0xd4>
              display = upClockHour();
   40d9c:	0041aa40 	call	41aa4 <upClockHour>
   40da0:	e0bffe45 	stb	r2,-7(fp)
   40da4:	1006d23a 	srli	r3,r2,8
   40da8:	1809883a 	mov	r4,r3
   40dac:	00ffffc4 	movi	r3,-1
   40db0:	20c6703a 	and	r3,r4,r3
   40db4:	e0fffe85 	stb	r3,-6(fp)
   40db8:	1004d43a 	srli	r2,r2,16
   40dbc:	1007883a 	mov	r3,r2
   40dc0:	00bfffc4 	movi	r2,-1
   40dc4:	1884703a 	and	r2,r3,r2
   40dc8:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40dcc:	0000a706 	br	4106c <buttonsISR+0x370>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40dd0:	d0a0c643 	ldbu	r2,-31975(gp)
   40dd4:	10803fcc 	andi	r2,r2,255
   40dd8:	10800058 	cmpnei	r2,r2,1
   40ddc:	1000a31e 	bne	r2,zero,4106c <buttonsISR+0x370>
              display = upClockMinute(CARRY_OFF);
   40de0:	0009883a 	mov	r4,zero
   40de4:	00419dc0 	call	419dc <upClockMinute>
   40de8:	e0bffe45 	stb	r2,-7(fp)
   40dec:	1006d23a 	srli	r3,r2,8
   40df0:	1809883a 	mov	r4,r3
   40df4:	00ffffc4 	movi	r3,-1
   40df8:	20c6703a 	and	r3,r4,r3
   40dfc:	e0fffe85 	stb	r3,-6(fp)
   40e00:	1004d43a 	srli	r2,r2,16
   40e04:	1007883a 	mov	r3,r2
   40e08:	00bfffc4 	movi	r2,-1
   40e0c:	1884703a 	and	r2,r3,r2
   40e10:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40e14:	00009506 	br	4106c <buttonsISR+0x370>
            }
            else if (mode.config.minute == TRUE) {
              display = upClockMinute(CARRY_OFF);
            }
          }
          else if (buttons_state == DOWN) {
   40e18:	e0bffe03 	ldbu	r2,-8(fp)
   40e1c:	10800058 	cmpnei	r2,r2,1
   40e20:	1000921e 	bne	r2,zero,4106c <buttonsISR+0x370>
            if (mode.config.hour == TRUE) {
   40e24:	d0a0c603 	ldbu	r2,-31976(gp)
   40e28:	10803fcc 	andi	r2,r2,255
   40e2c:	10800058 	cmpnei	r2,r2,1
   40e30:	10000d1e 	bne	r2,zero,40e68 <buttonsISR+0x16c>
              display = downClockHour();
   40e34:	0041ce80 	call	41ce8 <downClockHour>
   40e38:	e0bffe45 	stb	r2,-7(fp)
   40e3c:	1006d23a 	srli	r3,r2,8
   40e40:	1809883a 	mov	r4,r3
   40e44:	00ffffc4 	movi	r3,-1
   40e48:	20c6703a 	and	r3,r4,r3
   40e4c:	e0fffe85 	stb	r3,-6(fp)
   40e50:	1004d43a 	srli	r2,r2,16
   40e54:	1007883a 	mov	r3,r2
   40e58:	00bfffc4 	movi	r2,-1
   40e5c:	1884703a 	and	r2,r3,r2
   40e60:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40e64:	00008106 	br	4106c <buttonsISR+0x370>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40e68:	d0a0c643 	ldbu	r2,-31975(gp)
   40e6c:	10803fcc 	andi	r2,r2,255
   40e70:	10800058 	cmpnei	r2,r2,1
   40e74:	10007d1e 	bne	r2,zero,4106c <buttonsISR+0x370>
              display = downClockMinute(CARRY_OFF);
   40e78:	0009883a 	mov	r4,zero
   40e7c:	0041c200 	call	41c20 <downClockMinute>
   40e80:	e0bffe45 	stb	r2,-7(fp)
   40e84:	1006d23a 	srli	r3,r2,8
   40e88:	1809883a 	mov	r4,r3
   40e8c:	00ffffc4 	movi	r3,-1
   40e90:	20c6703a 	and	r3,r4,r3
   40e94:	e0fffe85 	stb	r3,-6(fp)
   40e98:	1004d43a 	srli	r2,r2,16
   40e9c:	1007883a 	mov	r3,r2
   40ea0:	00bfffc4 	movi	r2,-1
   40ea4:	1884703a 	and	r2,r3,r2
   40ea8:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   40eac:	00006f06 	br	4106c <buttonsISR+0x370>

        case DISP_ALARM:

          if (buttons_state == UP) {
   40eb0:	e0bffe03 	ldbu	r2,-8(fp)
   40eb4:	10800098 	cmpnei	r2,r2,2
   40eb8:	1000221e 	bne	r2,zero,40f44 <buttonsISR+0x248>
            if (mode.config.hour == TRUE) {
   40ebc:	d0a0c603 	ldbu	r2,-31976(gp)
   40ec0:	10803fcc 	andi	r2,r2,255
   40ec4:	10800058 	cmpnei	r2,r2,1
   40ec8:	10000d1e 	bne	r2,zero,40f00 <buttonsISR+0x204>
              display = upAlarmHour();
   40ecc:	0041ef40 	call	41ef4 <upAlarmHour>
   40ed0:	e0bffe45 	stb	r2,-7(fp)
   40ed4:	1006d23a 	srli	r3,r2,8
   40ed8:	1809883a 	mov	r4,r3
   40edc:	00ffffc4 	movi	r3,-1
   40ee0:	20c6703a 	and	r3,r4,r3
   40ee4:	e0fffe85 	stb	r3,-6(fp)
   40ee8:	1004d43a 	srli	r2,r2,16
   40eec:	1007883a 	mov	r3,r2
   40ef0:	00bfffc4 	movi	r2,-1
   40ef4:	1884703a 	and	r2,r3,r2
   40ef8:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   40efc:	00005d06 	br	41074 <buttonsISR+0x378>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   40f00:	d0a0c643 	ldbu	r2,-31975(gp)
   40f04:	10803fcc 	andi	r2,r2,255
   40f08:	10800058 	cmpnei	r2,r2,1
   40f0c:	1000591e 	bne	r2,zero,41074 <buttonsISR+0x378>
              display = upAlarmMinute();
   40f10:	0041e4c0 	call	41e4c <upAlarmMinute>
   40f14:	e0bffe45 	stb	r2,-7(fp)
   40f18:	1006d23a 	srli	r3,r2,8
   40f1c:	1809883a 	mov	r4,r3
   40f20:	00ffffc4 	movi	r3,-1
   40f24:	20c6703a 	and	r3,r4,r3
   40f28:	e0fffe85 	stb	r3,-6(fp)
   40f2c:	1004d43a 	srli	r2,r2,16
   40f30:	1007883a 	mov	r3,r2
   40f34:	00bfffc4 	movi	r2,-1
   40f38:	1884703a 	and	r2,r3,r2
   40f3c:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   40f40:	00004c06 	br	41074 <buttonsISR+0x378>
            }
            else if (mode.config.minute == TRUE) {
              display = upAlarmMinute();
            }
          }
          else if (buttons_state == DOWN) {
   40f44:	e0bffe03 	ldbu	r2,-8(fp)
   40f48:	10800058 	cmpnei	r2,r2,1
   40f4c:	1000491e 	bne	r2,zero,41074 <buttonsISR+0x378>
            if (mode.config.hour == TRUE) {
   40f50:	d0a0c603 	ldbu	r2,-31976(gp)
   40f54:	10803fcc 	andi	r2,r2,255
   40f58:	10800058 	cmpnei	r2,r2,1
   40f5c:	10000d1e 	bne	r2,zero,40f94 <buttonsISR+0x298>
              display = downAlarmHour();
   40f60:	004204c0 	call	4204c <downAlarmHour>
   40f64:	e0bffe45 	stb	r2,-7(fp)
   40f68:	1006d23a 	srli	r3,r2,8
   40f6c:	1809883a 	mov	r4,r3
   40f70:	00ffffc4 	movi	r3,-1
   40f74:	20c6703a 	and	r3,r4,r3
   40f78:	e0fffe85 	stb	r3,-6(fp)
   40f7c:	1004d43a 	srli	r2,r2,16
   40f80:	1007883a 	mov	r3,r2
   40f84:	00bfffc4 	movi	r2,-1
   40f88:	1884703a 	and	r2,r3,r2
   40f8c:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   40f90:	00003806 	br	41074 <buttonsISR+0x378>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   40f94:	d0a0c643 	ldbu	r2,-31975(gp)
   40f98:	10803fcc 	andi	r2,r2,255
   40f9c:	10800058 	cmpnei	r2,r2,1
   40fa0:	1000341e 	bne	r2,zero,41074 <buttonsISR+0x378>
              display = downAlarmMinute();
   40fa4:	0041fa40 	call	41fa4 <downAlarmMinute>
   40fa8:	e0bffe45 	stb	r2,-7(fp)
   40fac:	1006d23a 	srli	r3,r2,8
   40fb0:	1809883a 	mov	r4,r3
   40fb4:	00ffffc4 	movi	r3,-1
   40fb8:	20c6703a 	and	r3,r4,r3
   40fbc:	e0fffe85 	stb	r3,-6(fp)
   40fc0:	1004d43a 	srli	r2,r2,16
   40fc4:	1007883a 	mov	r3,r2
   40fc8:	00bfffc4 	movi	r2,-1
   40fcc:	1884703a 	and	r2,r3,r2
   40fd0:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   40fd4:	00002706 	br	41074 <buttonsISR+0x378>


        case DISP_VOLUME:

          display.hour = DONT_DISPLAY;
   40fd8:	00801904 	movi	r2,100
   40fdc:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   40fe0:	00801904 	movi	r2,100
   40fe4:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   40fe8:	e0bffe03 	ldbu	r2,-8(fp)
   40fec:	10800098 	cmpnei	r2,r2,2
   40ff0:	1000031e 	bne	r2,zero,41000 <buttonsISR+0x304>
            display.second = upVolume();
   40ff4:	00411040 	call	41104 <upVolume>
   40ff8:	e0bffec5 	stb	r2,-5(fp)
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   40ffc:	00001f06 	br	4107c <buttonsISR+0x380>
          display.hour = DONT_DISPLAY;
          display.minute = DONT_DISPLAY;
          if (buttons_state == UP) {
            display.second = upVolume();
          }
          else if (buttons_state == DOWN) {
   41000:	e0bffe03 	ldbu	r2,-8(fp)
   41004:	10800058 	cmpnei	r2,r2,1
   41008:	10001c1e 	bne	r2,zero,4107c <buttonsISR+0x380>
            display.second = downVolume();
   4100c:	00411300 	call	41130 <downVolume>
   41010:	e0bffec5 	stb	r2,-5(fp)
          }
          
          break;
   41014:	00001906 	br	4107c <buttonsISR+0x380>

        case DISP_SONG:

          display.hour = DONT_DISPLAY;
   41018:	00801904 	movi	r2,100
   4101c:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   41020:	00801904 	movi	r2,100
   41024:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   41028:	e0bffe03 	ldbu	r2,-8(fp)
   4102c:	10800098 	cmpnei	r2,r2,2
   41030:	1000031e 	bne	r2,zero,41040 <buttonsISR+0x344>
            display.second = upSong();
   41034:	00414600 	call	41460 <upSong>
   41038:	e0bffec5 	stb	r2,-5(fp)
   4103c:	00000506 	br	41054 <buttonsISR+0x358>
          }
          else if (buttons_state == DOWN) {
   41040:	e0bffe03 	ldbu	r2,-8(fp)
   41044:	10800058 	cmpnei	r2,r2,1
   41048:	1000021e 	bne	r2,zero,41054 <buttonsISR+0x358>
            display.second = downSong();
   4104c:	004148c0 	call	4148c <downSong>
   41050:	e0bffec5 	stb	r2,-5(fp)
          }
          playSong();
   41054:	00414b80 	call	414b8 <playSong>
          break;
   41058:	00000906 	br	41080 <buttonsISR+0x384>

        default:
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
   4105c:	01000134 	movhi	r4,4
   41060:	210ff504 	addi	r4,r4,16340
   41064:	00423b40 	call	423b4 <puts>
   41068:	00000506 	br	41080 <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   4106c:	0001883a 	nop
   41070:	00000306 	br	41080 <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41074:	0001883a 	nop
   41078:	00000106 	br	41080 <buttonsISR+0x384>
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   4107c:	0001883a 	nop
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   41080:	e0bffe43 	ldbu	r2,-7(fp)
   41084:	e0fffe83 	ldbu	r3,-6(fp)
   41088:	1806923a 	slli	r3,r3,8
   4108c:	1884b03a 	or	r2,r3,r2
   41090:	e0fffec3 	ldbu	r3,-5(fp)
   41094:	1806943a 	slli	r3,r3,16
   41098:	1888b03a 	or	r4,r3,r2
   4109c:	0007883a 	mov	r3,zero
   410a0:	00804034 	movhi	r2,256
   410a4:	10bfffc4 	addi	r2,r2,-1
   410a8:	2084703a 	and	r2,r4,r2
   410ac:	18ffc02c 	andhi	r3,r3,65280
   410b0:	1884b03a 	or	r2,r3,r2
   410b4:	1007883a 	mov	r3,r2
   410b8:	1809883a 	mov	r4,r3
   410bc:	00404600 	call	40460 <updateDisplay>
    }

  // we can't forget to reset edge capture register by writing to it!
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   410c0:	0007883a 	mov	r3,zero
   410c4:	00800234 	movhi	r2,8
   410c8:	10841f04 	addi	r2,r2,4220
   410cc:	10c00035 	stwio	r3,0(r2)

}
   410d0:	e037883a 	mov	sp,fp
   410d4:	dfc00117 	ldw	ra,4(sp)
   410d8:	df000017 	ldw	fp,0(sp)
   410dc:	dec00204 	addi	sp,sp,8
   410e0:	f800283a 	ret

000410e4 <getVolume>:
#include "pwm.h"

uint8_t volume = 5;

uint8_t getVolume(void) {
   410e4:	deffff04 	addi	sp,sp,-4
   410e8:	df000015 	stw	fp,0(sp)
   410ec:	d839883a 	mov	fp,sp
  return volume;
   410f0:	d0a00003 	ldbu	r2,-32768(gp)
}
   410f4:	e037883a 	mov	sp,fp
   410f8:	df000017 	ldw	fp,0(sp)
   410fc:	dec00104 	addi	sp,sp,4
   41100:	f800283a 	ret

00041104 <upVolume>:

uint8_t upVolume(void) {
   41104:	deffff04 	addi	sp,sp,-4
   41108:	df000015 	stw	fp,0(sp)
   4110c:	d839883a 	mov	fp,sp
  volume++;
   41110:	d0a00003 	ldbu	r2,-32768(gp)
   41114:	10800044 	addi	r2,r2,1
   41118:	d0a00005 	stb	r2,-32768(gp)
  return volume;
   4111c:	d0a00003 	ldbu	r2,-32768(gp)
}
   41120:	e037883a 	mov	sp,fp
   41124:	df000017 	ldw	fp,0(sp)
   41128:	dec00104 	addi	sp,sp,4
   4112c:	f800283a 	ret

00041130 <downVolume>:

uint8_t downVolume(void) {
   41130:	deffff04 	addi	sp,sp,-4
   41134:	df000015 	stw	fp,0(sp)
   41138:	d839883a 	mov	fp,sp
  volume--;
   4113c:	d0a00003 	ldbu	r2,-32768(gp)
   41140:	10bfffc4 	addi	r2,r2,-1
   41144:	d0a00005 	stb	r2,-32768(gp)
  return volume;
   41148:	d0a00003 	ldbu	r2,-32768(gp)
}
   4114c:	e037883a 	mov	sp,fp
   41150:	df000017 	ldw	fp,0(sp)
   41154:	dec00104 	addi	sp,sp,4
   41158:	f800283a 	ret

0004115c <default500HzSquareWave>:


void default500HzSquareWave(void) {
   4115c:	defffb04 	addi	sp,sp,-20
   41160:	dfc00415 	stw	ra,16(sp)
   41164:	df000315 	stw	fp,12(sp)
   41168:	df000304 	addi	fp,sp,12

 unsigned int clock_divide = 100000;
   4116c:	008000b4 	movhi	r2,2
   41170:	10a1a804 	addi	r2,r2,-31072
   41174:	e0bffd15 	stw	r2,-12(fp)
 unsigned int duty_cycle =    10;
   41178:	00800284 	movi	r2,10
   4117c:	e0bffe15 	stw	r2,-8(fp)
 int return_code = ALTERA_AVALON_PWM_OK;
   41180:	e03fff15 	stw	zero,-4(fp)
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   41184:	e1bffe17 	ldw	r6,-8(fp)
   41188:	e17ffd17 	ldw	r5,-12(fp)
   4118c:	01000234 	movhi	r4,8
   41190:	21043c04 	addi	r4,r4,4336
   41194:	00402800 	call	40280 <altera_avalon_pwm_init>
   41198:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4119c:	e17fff17 	ldw	r5,-4(fp)
   411a0:	01000234 	movhi	r4,8
   411a4:	21043c04 	addi	r4,r4,4336
   411a8:	00413100 	call	41310 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   411ac:	01000234 	movhi	r4,8
   411b0:	21043c04 	addi	r4,r4,4336
   411b4:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   411b8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   411bc:	e17fff17 	ldw	r5,-4(fp)
   411c0:	01000234 	movhi	r4,8
   411c4:	21043c04 	addi	r4,r4,4336
   411c8:	00413100 	call	41310 <check_return_code>
}
   411cc:	0001883a 	nop
   411d0:	e037883a 	mov	sp,fp
   411d4:	dfc00117 	ldw	ra,4(sp)
   411d8:	df000017 	ldw	fp,0(sp)
   411dc:	dec00204 	addi	sp,sp,8
   411e0:	f800283a 	ret

000411e4 <testPWM>:

void testPWM(void) {
   411e4:	defffc04 	addi	sp,sp,-16
   411e8:	dfc00315 	stw	ra,12(sp)
   411ec:	df000215 	stw	fp,8(sp)
   411f0:	df000204 	addi	fp,sp,8
 
 unsigned int duty_cycle;
 int return_code = ALTERA_AVALON_PWM_OK;
   411f4:	e03fff15 	stw	zero,-4(fp)
 
 printf("Period = %u\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE) );
   411f8:	00800234 	movhi	r2,8
   411fc:	10843c04 	addi	r2,r2,4336
   41200:	10800037 	ldwio	r2,0(r2)
   41204:	100b883a 	mov	r5,r2
   41208:	01000134 	movhi	r4,4
   4120c:	21100404 	addi	r4,r4,16400
   41210:	00422e80 	call	422e8 <printf>
 printf("Duty cycle = %u\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE) );
   41214:	00800234 	movhi	r2,8
   41218:	10843d04 	addi	r2,r2,4340
   4121c:	10800037 	ldwio	r2,0(r2)
   41220:	100b883a 	mov	r5,r2
   41224:	01000134 	movhi	r4,4
   41228:	21100804 	addi	r4,r4,16416
   4122c:	00422e80 	call	422e8 <printf>
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, 500000, 1);  
   41230:	01800044 	movi	r6,1
   41234:	01400234 	movhi	r5,8
   41238:	29684804 	addi	r5,r5,-24288
   4123c:	01000234 	movhi	r4,8
   41240:	21043c04 	addi	r4,r4,4336
   41244:	00402800 	call	40280 <altera_avalon_pwm_init>
   41248:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4124c:	e17fff17 	ldw	r5,-4(fp)
   41250:	01000234 	movhi	r4,8
   41254:	21043c04 	addi	r4,r4,4336
   41258:	00413100 	call	41310 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   4125c:	01000234 	movhi	r4,8
   41260:	21043c04 	addi	r4,r4,4336
   41264:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41268:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4126c:	e17fff17 	ldw	r5,-4(fp)
   41270:	01000234 	movhi	r4,8
   41274:	21043c04 	addi	r4,r4,4336
   41278:	00413100 	call	41310 <check_return_code>

//init duty_cycle with the value written to duty_cycle register during initialization
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
   4127c:	00800234 	movhi	r2,8
   41280:	10843d04 	addi	r2,r2,4340
   41284:	10800037 	ldwio	r2,0(r2)
   41288:	e0bffe15 	stw	r2,-8(fp)
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   4128c:	00000906 	br	412b4 <testPWM+0xd0>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   41290:	e17ffe17 	ldw	r5,-8(fp)
   41294:	01000234 	movhi	r4,8
   41298:	21043c04 	addi	r4,r4,4336
   4129c:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
   412a0:	e0bfff15 	stw	r2,-4(fp)
      	check_return_code(PWM_BASE, return_code);
   412a4:	e17fff17 	ldw	r5,-4(fp)
   412a8:	01000234 	movhi	r4,8
   412ac:	21043c04 	addi	r4,r4,4336
   412b0:	00413100 	call	41310 <check_return_code>
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   412b4:	e0fffe17 	ldw	r3,-8(fp)
   412b8:	18800044 	addi	r2,r3,1
   412bc:	e0bffe15 	stw	r2,-8(fp)
   412c0:	00800234 	movhi	r2,8
   412c4:	10843c04 	addi	r2,r2,4336
   412c8:	10800037 	ldwio	r2,0(r2)
   412cc:	18bff036 	bltu	r3,r2,41290 <__alt_data_end+0xfffd9290>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   412d0:	00000406 	br	412e4 <testPWM+0x100>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   412d4:	e17ffe17 	ldw	r5,-8(fp)
   412d8:	01000234 	movhi	r4,8
   412dc:	21043c04 	addi	r4,r4,4336
   412e0:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   412e4:	e0bffe17 	ldw	r2,-8(fp)
   412e8:	10bfffc4 	addi	r2,r2,-1
   412ec:	e0bffe15 	stw	r2,-8(fp)
   412f0:	e0bffe17 	ldw	r2,-8(fp)
   412f4:	108000a8 	cmpgeui	r2,r2,2
   412f8:	103ff61e 	bne	r2,zero,412d4 <__alt_data_end+0xfffd92d4>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
        check_return_code(PWM_BASE, return_code);
   412fc:	e17fff17 	ldw	r5,-4(fp)
   41300:	01000234 	movhi	r4,8
   41304:	21043c04 	addi	r4,r4,4336
   41308:	00413100 	call	41310 <check_return_code>
   }
   4130c:	003fdf06 	br	4128c <__alt_data_end+0xfffd928c>

00041310 <check_return_code>:
}

void check_return_code(unsigned int address, int return_code)
{
   41310:	defffc04 	addi	sp,sp,-16
   41314:	dfc00315 	stw	ra,12(sp)
   41318:	df000215 	stw	fp,8(sp)
   4131c:	df000204 	addi	fp,sp,8
   41320:	e13ffe15 	stw	r4,-8(fp)
   41324:	e17fff15 	stw	r5,-4(fp)
	if(return_code != ALTERA_AVALON_PWM_OK)
   41328:	e0bfff17 	ldw	r2,-4(fp)
   4132c:	10000326 	beq	r2,zero,4133c <check_return_code+0x2c>
      		print_error(address, return_code);	
   41330:	e17fff17 	ldw	r5,-4(fp)
   41334:	e13ffe17 	ldw	r4,-8(fp)
   41338:	00413540 	call	41354 <print_error>
}
   4133c:	0001883a 	nop
   41340:	e037883a 	mov	sp,fp
   41344:	dfc00117 	ldw	ra,4(sp)
   41348:	df000017 	ldw	fp,0(sp)
   4134c:	dec00204 	addi	sp,sp,8
   41350:	f800283a 	ret

00041354 <print_error>:

void print_error(unsigned int address, int return_code)
{
   41354:	defffc04 	addi	sp,sp,-16
   41358:	dfc00315 	stw	ra,12(sp)
   4135c:	df000215 	stw	fp,8(sp)
   41360:	df000204 	addi	fp,sp,8
   41364:	e13ffe15 	stw	r4,-8(fp)
   41368:	e17fff15 	stw	r5,-4(fp)
	printf("Program Terminated Due to an error with Avalon PWM located at 0x%x:\n", address);
   4136c:	e17ffe17 	ldw	r5,-8(fp)
   41370:	01000134 	movhi	r4,4
   41374:	21100d04 	addi	r4,r4,16436
   41378:	00422e80 	call	422e8 <printf>
	switch(return_code)
   4137c:	e0bfff17 	ldw	r2,-4(fp)
   41380:	10ffffa0 	cmpeqi	r3,r2,-2
   41384:	1800161e 	bne	r3,zero,413e0 <print_error+0x8c>
   41388:	10ffffe0 	cmpeqi	r3,r2,-1
   4138c:	1800031e 	bne	r3,zero,4139c <print_error+0x48>
   41390:	10bfff60 	cmpeqi	r2,r2,-3
   41394:	10001d1e 	bne	r2,zero,4140c <print_error+0xb8>
   41398:	00002706 	br	41438 <print_error+0xe4>
	{
	case ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR:
		printf("The value in the clock cycle register must be greater than the value in the duty cycle register\n");
   4139c:	01000134 	movhi	r4,4
   413a0:	21101f04 	addi	r4,r4,16508
   413a4:	00423b40 	call	423b4 <puts>
		printf("Value in the Clock Divide Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address)); 
   413a8:	e0bffe17 	ldw	r2,-8(fp)
   413ac:	10800037 	ldwio	r2,0(r2)
   413b0:	100b883a 	mov	r5,r2
   413b4:	01000134 	movhi	r4,4
   413b8:	21103704 	addi	r4,r4,16604
   413bc:	00422e80 	call	422e8 <printf>
		printf("Value in the Duty Cycle Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(address));
   413c0:	e0bffe17 	ldw	r2,-8(fp)
   413c4:	10800104 	addi	r2,r2,4
   413c8:	10800037 	ldwio	r2,0(r2)
   413cc:	100b883a 	mov	r5,r2
   413d0:	01000134 	movhi	r4,4
   413d4:	21104204 	addi	r4,r4,16648
   413d8:	00422e80 	call	422e8 <printf>
		break;
   413dc:	00001706 	br	4143c <print_error+0xe8>
  case ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR:
    printf("Unable to confirm that the PWM is enabled\n");
   413e0:	01000134 	movhi	r4,4
   413e4:	21104c04 	addi	r4,r4,16688
   413e8:	00423b40 	call	423b4 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   413ec:	e0bffe17 	ldw	r2,-8(fp)
   413f0:	10800204 	addi	r2,r2,8
   413f4:	10800037 	ldwio	r2,0(r2)
   413f8:	100b883a 	mov	r5,r2
   413fc:	01000134 	movhi	r4,4
   41400:	21105704 	addi	r4,r4,16732
   41404:	00422e80 	call	422e8 <printf>
    break;
   41408:	00000c06 	br	4143c <print_error+0xe8>
  case ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR:
  	printf("Unable to confirm that the PWM is disabled\n");
   4140c:	01000134 	movhi	r4,4
   41410:	21106004 	addi	r4,r4,16768
   41414:	00423b40 	call	423b4 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   41418:	e0bffe17 	ldw	r2,-8(fp)
   4141c:	10800204 	addi	r2,r2,8
   41420:	10800037 	ldwio	r2,0(r2)
   41424:	100b883a 	mov	r5,r2
   41428:	01000134 	movhi	r4,4
   4142c:	21105704 	addi	r4,r4,16732
   41430:	00422e80 	call	422e8 <printf>
  	break;
   41434:	00000106 	br	4143c <print_error+0xe8>
  default:
  	break; 		     
   41438:	0001883a 	nop
	}
while(1);
   4143c:	003fff06 	br	4143c <__alt_data_end+0xfffd943c>

00041440 <getSong>:
#include "rtttl.h"

uint8_t song_index = 0;

uint8_t getSong(void) {
   41440:	deffff04 	addi	sp,sp,-4
   41444:	df000015 	stw	fp,0(sp)
   41448:	d839883a 	mov	fp,sp
  return song_index;
   4144c:	d0a0c683 	ldbu	r2,-31974(gp)
}
   41450:	e037883a 	mov	sp,fp
   41454:	df000017 	ldw	fp,0(sp)
   41458:	dec00104 	addi	sp,sp,4
   4145c:	f800283a 	ret

00041460 <upSong>:

uint8_t upSong(void) {
   41460:	deffff04 	addi	sp,sp,-4
   41464:	df000015 	stw	fp,0(sp)
   41468:	d839883a 	mov	fp,sp
  song_index++;
   4146c:	d0a0c683 	ldbu	r2,-31974(gp)
   41470:	10800044 	addi	r2,r2,1
   41474:	d0a0c685 	stb	r2,-31974(gp)
  return song_index;
   41478:	d0a0c683 	ldbu	r2,-31974(gp)
}
   4147c:	e037883a 	mov	sp,fp
   41480:	df000017 	ldw	fp,0(sp)
   41484:	dec00104 	addi	sp,sp,4
   41488:	f800283a 	ret

0004148c <downSong>:

uint8_t downSong(void) {
   4148c:	deffff04 	addi	sp,sp,-4
   41490:	df000015 	stw	fp,0(sp)
   41494:	d839883a 	mov	fp,sp
  song_index--;
   41498:	d0a0c683 	ldbu	r2,-31974(gp)
   4149c:	10bfffc4 	addi	r2,r2,-1
   414a0:	d0a0c685 	stb	r2,-31974(gp)
  return song_index;
   414a4:	d0a0c683 	ldbu	r2,-31974(gp)
}
   414a8:	e037883a 	mov	sp,fp
   414ac:	df000017 	ldw	fp,0(sp)
   414b0:	dec00104 	addi	sp,sp,4
   414b4:	f800283a 	ret

000414b8 <playSong>:

void playSong(void) {
   414b8:	deffff04 	addi	sp,sp,-4
   414bc:	df000015 	stw	fp,0(sp)
   414c0:	d839883a 	mov	fp,sp
  // not yet implemented
  return;
   414c4:	0001883a 	nop
}
   414c8:	e037883a 	mov	sp,fp
   414cc:	df000017 	ldw	fp,0(sp)
   414d0:	dec00104 	addi	sp,sp,4
   414d4:	f800283a 	ret

000414d8 <stopSong>:

void stopSong(void) {
   414d8:	deffff04 	addi	sp,sp,-4
   414dc:	df000015 	stw	fp,0(sp)
   414e0:	d839883a 	mov	fp,sp
  // not yet implemented
  return;
   414e4:	0001883a 	nop
   414e8:	e037883a 	mov	sp,fp
   414ec:	df000017 	ldw	fp,0(sp)
   414f0:	dec00104 	addi	sp,sp,4
   414f4:	f800283a 	ret

000414f8 <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   414f8:	defff904 	addi	sp,sp,-28
   414fc:	dfc00615 	stw	ra,24(sp)
   41500:	df000515 	stw	fp,20(sp)
   41504:	dc400415 	stw	r17,16(sp)
   41508:	dc000315 	stw	r16,12(sp)
   4150c:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   41510:	00800234 	movhi	r2,8
   41514:	10843804 	addi	r2,r2,4320
   41518:	10800037 	ldwio	r2,0(r2)
   4151c:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   41520:	e0bffd0b 	ldhu	r2,-12(fp)
   41524:	10bfffcc 	andi	r2,r2,65535
   41528:	1009883a 	mov	r4,r2
   4152c:	00417740 	call	41774 <checkInvalidMode>
   41530:	10803fcc 	andi	r2,r2,255
   41534:	10800058 	cmpnei	r2,r2,1
   41538:	10000f1e 	bne	r2,zero,41578 <determineMode+0x80>
    mode.invalid = TRUE;
   4153c:	00800044 	movi	r2,1
   41540:	d0a0c6c5 	stb	r2,-31973(gp)
    return mode;
   41544:	d0a0c6c3 	ldbu	r2,-31973(gp)
   41548:	e0bffb45 	stb	r2,-19(fp)
   4154c:	d0a0c703 	ldbu	r2,-31972(gp)
   41550:	e0bffb85 	stb	r2,-18(fp)
   41554:	d0a0c743 	ldbu	r2,-31971(gp)
   41558:	e0bffbc5 	stb	r2,-17(fp)
   4155c:	d0a0c783 	ldbu	r2,-31970(gp)
   41560:	e0bffc05 	stb	r2,-16(fp)
   41564:	d0a0c7c3 	ldbu	r2,-31969(gp)
   41568:	e0bffc45 	stb	r2,-15(fp)
   4156c:	d0a0c803 	ldbu	r2,-31968(gp)
   41570:	e0bffc85 	stb	r2,-14(fp)
   41574:	00004906 	br	4169c <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   41578:	d020c6c5 	stb	zero,-31973(gp)

    uint8_t i = 0;
   4157c:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   41580:	00000606 	br	4159c <determineMode+0xa4>
      i++;
   41584:	e0bffb03 	ldbu	r2,-20(fp)
   41588:	10800044 	addi	r2,r2,1
   4158c:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   41590:	e0bffb03 	ldbu	r2,-20(fp)
   41594:	10800218 	cmpnei	r2,r2,8
   41598:	10000b26 	beq	r2,zero,415c8 <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   4159c:	e0fffb03 	ldbu	r3,-20(fp)
   415a0:	00800134 	movhi	r2,4
   415a4:	10906b04 	addi	r2,r2,16812
   415a8:	18c00324 	muli	r3,r3,12
   415ac:	10c5883a 	add	r2,r2,r3
   415b0:	10c0000b 	ldhu	r3,0(r2)
   415b4:	e0bffd0b 	ldhu	r2,-12(fp)
   415b8:	18ffffcc 	andi	r3,r3,65535
   415bc:	10bfffcc 	andi	r2,r2,65535
   415c0:	18bff01e 	bne	r3,r2,41584 <__alt_data_end+0xfffd9584>
   415c4:	00000106 	br	415cc <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   415c8:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   415cc:	e0fffb03 	ldbu	r3,-20(fp)
   415d0:	00800134 	movhi	r2,4
   415d4:	10906b04 	addi	r2,r2,16812
   415d8:	18c00324 	muli	r3,r3,12
   415dc:	10c5883a 	add	r2,r2,r3
   415e0:	10800084 	addi	r2,r2,2
   415e4:	1080000b 	ldhu	r2,0(r2)
   415e8:	d0a0c705 	stb	r2,-31972(gp)
    mode.config.on = mode_lookup_table[i][2];
   415ec:	e0fffb03 	ldbu	r3,-20(fp)
   415f0:	00800134 	movhi	r2,4
   415f4:	10906b04 	addi	r2,r2,16812
   415f8:	18c00324 	muli	r3,r3,12
   415fc:	10c5883a 	add	r2,r2,r3
   41600:	10800104 	addi	r2,r2,4
   41604:	1080000b 	ldhu	r2,0(r2)
   41608:	d0a0c785 	stb	r2,-31970(gp)
    mode.config.hour = mode_lookup_table[i][3];
   4160c:	e0fffb03 	ldbu	r3,-20(fp)
   41610:	00800134 	movhi	r2,4
   41614:	10906b04 	addi	r2,r2,16812
   41618:	18c00324 	muli	r3,r3,12
   4161c:	10c5883a 	add	r2,r2,r3
   41620:	10800184 	addi	r2,r2,6
   41624:	1080000b 	ldhu	r2,0(r2)
   41628:	d0a0c7c5 	stb	r2,-31969(gp)
    mode.config.minute = mode_lookup_table[i][4];
   4162c:	e0fffb03 	ldbu	r3,-20(fp)
   41630:	00800134 	movhi	r2,4
   41634:	10906b04 	addi	r2,r2,16812
   41638:	18c00324 	muli	r3,r3,12
   4163c:	10c5883a 	add	r2,r2,r3
   41640:	10800204 	addi	r2,r2,8
   41644:	1080000b 	ldhu	r2,0(r2)
   41648:	d0a0c805 	stb	r2,-31968(gp)
    mode.alarm = mode_lookup_table[i][5];
   4164c:	e0fffb03 	ldbu	r3,-20(fp)
   41650:	00800134 	movhi	r2,4
   41654:	10906b04 	addi	r2,r2,16812
   41658:	18c00324 	muli	r3,r3,12
   4165c:	10c5883a 	add	r2,r2,r3
   41660:	10800284 	addi	r2,r2,10
   41664:	1080000b 	ldhu	r2,0(r2)
   41668:	d0a0c745 	stb	r2,-31971(gp)

    return mode;
   4166c:	d0a0c6c3 	ldbu	r2,-31973(gp)
   41670:	e0bffb45 	stb	r2,-19(fp)
   41674:	d0a0c703 	ldbu	r2,-31972(gp)
   41678:	e0bffb85 	stb	r2,-18(fp)
   4167c:	d0a0c743 	ldbu	r2,-31971(gp)
   41680:	e0bffbc5 	stb	r2,-17(fp)
   41684:	d0a0c783 	ldbu	r2,-31970(gp)
   41688:	e0bffc05 	stb	r2,-16(fp)
   4168c:	d0a0c7c3 	ldbu	r2,-31969(gp)
   41690:	e0bffc45 	stb	r2,-15(fp)
   41694:	d0a0c803 	ldbu	r2,-31968(gp)
   41698:	e0bffc85 	stb	r2,-14(fp)
   4169c:	0005883a 	mov	r2,zero
   416a0:	e0fffb43 	ldbu	r3,-19(fp)
   416a4:	18c03fcc 	andi	r3,r3,255
   416a8:	013fc004 	movi	r4,-256
   416ac:	1104703a 	and	r2,r2,r4
   416b0:	10c4b03a 	or	r2,r2,r3
   416b4:	e0fffb83 	ldbu	r3,-18(fp)
   416b8:	18c03fcc 	andi	r3,r3,255
   416bc:	1808923a 	slli	r4,r3,8
   416c0:	00fffff4 	movhi	r3,65535
   416c4:	18c03fc4 	addi	r3,r3,255
   416c8:	10c4703a 	and	r2,r2,r3
   416cc:	1104b03a 	or	r2,r2,r4
   416d0:	e0fffbc3 	ldbu	r3,-17(fp)
   416d4:	18c03fcc 	andi	r3,r3,255
   416d8:	1808943a 	slli	r4,r3,16
   416dc:	00ffc074 	movhi	r3,65281
   416e0:	18ffffc4 	addi	r3,r3,-1
   416e4:	10c4703a 	and	r2,r2,r3
   416e8:	1104b03a 	or	r2,r2,r4
   416ec:	e0fffc03 	ldbu	r3,-16(fp)
   416f0:	1808963a 	slli	r4,r3,24
   416f4:	00c04034 	movhi	r3,256
   416f8:	18ffffc4 	addi	r3,r3,-1
   416fc:	10c4703a 	and	r2,r2,r3
   41700:	1104b03a 	or	r2,r2,r4
   41704:	0009883a 	mov	r4,zero
   41708:	e0fffc43 	ldbu	r3,-15(fp)
   4170c:	18c03fcc 	andi	r3,r3,255
   41710:	017fc004 	movi	r5,-256
   41714:	2148703a 	and	r4,r4,r5
   41718:	20c6b03a 	or	r3,r4,r3
   4171c:	1809883a 	mov	r4,r3
   41720:	e0fffc83 	ldbu	r3,-14(fp)
   41724:	18c03fcc 	andi	r3,r3,255
   41728:	180a923a 	slli	r5,r3,8
   4172c:	00fffff4 	movhi	r3,65535
   41730:	18c03fc4 	addi	r3,r3,255
   41734:	20c6703a 	and	r3,r4,r3
   41738:	1946b03a 	or	r3,r3,r5
   4173c:	1809883a 	mov	r4,r3
   41740:	1021883a 	mov	r16,r2
   41744:	2023883a 	mov	r17,r4
   41748:	8007883a 	mov	r3,r16
   4174c:	8809883a 	mov	r4,r17
  }

}
   41750:	1805883a 	mov	r2,r3
   41754:	2007883a 	mov	r3,r4
   41758:	e6fffe04 	addi	sp,fp,-8
   4175c:	dfc00317 	ldw	ra,12(sp)
   41760:	df000217 	ldw	fp,8(sp)
   41764:	dc400117 	ldw	r17,4(sp)
   41768:	dc000017 	ldw	r16,0(sp)
   4176c:	dec00404 	addi	sp,sp,16
   41770:	f800283a 	ret

00041774 <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   41774:	defffc04 	addi	sp,sp,-16
   41778:	dfc00315 	stw	ra,12(sp)
   4177c:	df000215 	stw	fp,8(sp)
   41780:	df000204 	addi	fp,sp,8
   41784:	2005883a 	mov	r2,r4
   41788:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   4178c:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   41790:	e0bffe03 	ldbu	r2,-8(fp)
   41794:	108000d8 	cmpnei	r2,r2,3
   41798:	10000e26 	beq	r2,zero,417d4 <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   4179c:	e0bffe03 	ldbu	r2,-8(fp)
   417a0:	1087883a 	add	r3,r2,r2
   417a4:	d0a00084 	addi	r2,gp,-32766
   417a8:	1885883a 	add	r2,r3,r2
   417ac:	1080000b 	ldhu	r2,0(r2)
   417b0:	10ffffcc 	andi	r3,r2,65535
   417b4:	e0bfff0b 	ldhu	r2,-4(fp)
   417b8:	1880021e 	bne	r3,r2,417c4 <checkInvalidMode+0x50>
      return INVALID;
   417bc:	00800044 	movi	r2,1
   417c0:	00000e06 	br	417fc <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   417c4:	e0bffe03 	ldbu	r2,-8(fp)
   417c8:	10800044 	addi	r2,r2,1
   417cc:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   417d0:	003fef06 	br	41790 <__alt_data_end+0xfffd9790>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   417d4:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   417d8:	e0bfff0b 	ldhu	r2,-4(fp)
   417dc:	1009883a 	mov	r4,r2
   417e0:	00418100 	call	41810 <isPowerOfTwoOrZero>
   417e4:	10803fcc 	andi	r2,r2,255
   417e8:	10800058 	cmpnei	r2,r2,1
   417ec:	1000021e 	bne	r2,zero,417f8 <checkInvalidMode+0x84>
    return VALID;
   417f0:	0005883a 	mov	r2,zero
   417f4:	00000106 	br	417fc <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   417f8:	00800044 	movi	r2,1
  }
}
   417fc:	e037883a 	mov	sp,fp
   41800:	dfc00117 	ldw	ra,4(sp)
   41804:	df000017 	ldw	fp,0(sp)
   41808:	dec00204 	addi	sp,sp,8
   4180c:	f800283a 	ret

00041810 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   41810:	defffe04 	addi	sp,sp,-8
   41814:	df000115 	stw	fp,4(sp)
   41818:	df000104 	addi	fp,sp,4
   4181c:	2005883a 	mov	r2,r4
   41820:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   41824:	e0ffff0b 	ldhu	r3,-4(fp)
   41828:	e0bfff0b 	ldhu	r2,-4(fp)
   4182c:	10bfffc4 	addi	r2,r2,-1
   41830:	1884703a 	and	r2,r3,r2
   41834:	1000021e 	bne	r2,zero,41840 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   41838:	00800044 	movi	r2,1
   4183c:	00000106 	br	41844 <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   41840:	0005883a 	mov	r2,zero
  }
   41844:	e037883a 	mov	sp,fp
   41848:	df000017 	ldw	fp,0(sp)
   4184c:	dec00104 	addi	sp,sp,4
   41850:	f800283a 	ret

00041854 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   41854:	deffff04 	addi	sp,sp,-4
   41858:	df000015 	stw	fp,0(sp)
   4185c:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   41860:	008002c4 	movi	r2,11
   41864:	d0a0c905 	stb	r2,-31964(gp)
  clock.minute = reset_clock_value[1];
   41868:	00800ec4 	movi	r2,59
   4186c:	d0a0c945 	stb	r2,-31963(gp)
  clock.second = reset_clock_value[2];
   41870:	0005883a 	mov	r2,zero
   41874:	d0a0c985 	stb	r2,-31962(gp)
}
   41878:	0001883a 	nop
   4187c:	e037883a 	mov	sp,fp
   41880:	df000017 	ldw	fp,0(sp)
   41884:	dec00104 	addi	sp,sp,4
   41888:	f800283a 	ret

0004188c <getClockTime>:

struct time getClockTime(void) {
   4188c:	defffe04 	addi	sp,sp,-8
   41890:	df000115 	stw	fp,4(sp)
   41894:	df000104 	addi	fp,sp,4
  return clock;
   41898:	d0a0c903 	ldbu	r2,-31964(gp)
   4189c:	e0bfff05 	stb	r2,-4(fp)
   418a0:	d0a0c943 	ldbu	r2,-31963(gp)
   418a4:	e0bfff45 	stb	r2,-3(fp)
   418a8:	d0a0c983 	ldbu	r2,-31962(gp)
   418ac:	e0bfff85 	stb	r2,-2(fp)
   418b0:	0005883a 	mov	r2,zero
   418b4:	e0ffff03 	ldbu	r3,-4(fp)
   418b8:	18c03fcc 	andi	r3,r3,255
   418bc:	013fc004 	movi	r4,-256
   418c0:	1104703a 	and	r2,r2,r4
   418c4:	10c4b03a 	or	r2,r2,r3
   418c8:	e0ffff43 	ldbu	r3,-3(fp)
   418cc:	18c03fcc 	andi	r3,r3,255
   418d0:	1808923a 	slli	r4,r3,8
   418d4:	00fffff4 	movhi	r3,65535
   418d8:	18c03fc4 	addi	r3,r3,255
   418dc:	10c4703a 	and	r2,r2,r3
   418e0:	1104b03a 	or	r2,r2,r4
   418e4:	e0ffff83 	ldbu	r3,-2(fp)
   418e8:	18c03fcc 	andi	r3,r3,255
   418ec:	1808943a 	slli	r4,r3,16
   418f0:	00ffc074 	movhi	r3,65281
   418f4:	18ffffc4 	addi	r3,r3,-1
   418f8:	10c4703a 	and	r2,r2,r3
   418fc:	1104b03a 	or	r2,r2,r4
}
   41900:	e037883a 	mov	sp,fp
   41904:	df000017 	ldw	fp,0(sp)
   41908:	dec00104 	addi	sp,sp,4
   4190c:	f800283a 	ret

00041910 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   41910:	defffc04 	addi	sp,sp,-16
   41914:	dfc00315 	stw	ra,12(sp)
   41918:	df000215 	stw	fp,8(sp)
   4191c:	df000204 	addi	fp,sp,8
   41920:	2005883a 	mov	r2,r4
   41924:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   41928:	d0a0c983 	ldbu	r2,-31962(gp)
   4192c:	10803fcc 	andi	r2,r2,255
   41930:	10800ed8 	cmpnei	r2,r2,59
   41934:	1000071e 	bne	r2,zero,41954 <upClockSecond+0x44>
    clock.second = 0;
   41938:	d020c985 	stb	zero,-31962(gp)
    
    if (carry_setting == CARRY_ON) {
   4193c:	e0bfff03 	ldbu	r2,-4(fp)
   41940:	10800058 	cmpnei	r2,r2,1
   41944:	1000061e 	bne	r2,zero,41960 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   41948:	01000044 	movi	r4,1
   4194c:	00419dc0 	call	419dc <upClockMinute>
   41950:	00000306 	br	41960 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   41954:	d0a0c983 	ldbu	r2,-31962(gp)
   41958:	10800044 	addi	r2,r2,1
   4195c:	d0a0c985 	stb	r2,-31962(gp)
  }
  return clock;
   41960:	d0a0c903 	ldbu	r2,-31964(gp)
   41964:	e0bffe05 	stb	r2,-8(fp)
   41968:	d0a0c943 	ldbu	r2,-31963(gp)
   4196c:	e0bffe45 	stb	r2,-7(fp)
   41970:	d0a0c983 	ldbu	r2,-31962(gp)
   41974:	e0bffe85 	stb	r2,-6(fp)
   41978:	0005883a 	mov	r2,zero
   4197c:	e0fffe03 	ldbu	r3,-8(fp)
   41980:	18c03fcc 	andi	r3,r3,255
   41984:	013fc004 	movi	r4,-256
   41988:	1104703a 	and	r2,r2,r4
   4198c:	10c4b03a 	or	r2,r2,r3
   41990:	e0fffe43 	ldbu	r3,-7(fp)
   41994:	18c03fcc 	andi	r3,r3,255
   41998:	1808923a 	slli	r4,r3,8
   4199c:	00fffff4 	movhi	r3,65535
   419a0:	18c03fc4 	addi	r3,r3,255
   419a4:	10c4703a 	and	r2,r2,r3
   419a8:	1104b03a 	or	r2,r2,r4
   419ac:	e0fffe83 	ldbu	r3,-6(fp)
   419b0:	18c03fcc 	andi	r3,r3,255
   419b4:	1808943a 	slli	r4,r3,16
   419b8:	00ffc074 	movhi	r3,65281
   419bc:	18ffffc4 	addi	r3,r3,-1
   419c0:	10c4703a 	and	r2,r2,r3
   419c4:	1104b03a 	or	r2,r2,r4
}
   419c8:	e037883a 	mov	sp,fp
   419cc:	dfc00117 	ldw	ra,4(sp)
   419d0:	df000017 	ldw	fp,0(sp)
   419d4:	dec00204 	addi	sp,sp,8
   419d8:	f800283a 	ret

000419dc <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   419dc:	defffc04 	addi	sp,sp,-16
   419e0:	dfc00315 	stw	ra,12(sp)
   419e4:	df000215 	stw	fp,8(sp)
   419e8:	df000204 	addi	fp,sp,8
   419ec:	2005883a 	mov	r2,r4
   419f0:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   419f4:	d0a0c943 	ldbu	r2,-31963(gp)
   419f8:	10803fcc 	andi	r2,r2,255
   419fc:	10800ed8 	cmpnei	r2,r2,59
   41a00:	1000061e 	bne	r2,zero,41a1c <upClockMinute+0x40>
    clock.minute = 0;
   41a04:	d020c945 	stb	zero,-31963(gp)
    
    if (carry_setting == CARRY_ON) {
   41a08:	e0bfff03 	ldbu	r2,-4(fp)
   41a0c:	10800058 	cmpnei	r2,r2,1
   41a10:	1000051e 	bne	r2,zero,41a28 <upClockMinute+0x4c>
      upClockHour();
   41a14:	0041aa40 	call	41aa4 <upClockHour>
   41a18:	00000306 	br	41a28 <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   41a1c:	d0a0c943 	ldbu	r2,-31963(gp)
   41a20:	10800044 	addi	r2,r2,1
   41a24:	d0a0c945 	stb	r2,-31963(gp)
  }
  return clock;
   41a28:	d0a0c903 	ldbu	r2,-31964(gp)
   41a2c:	e0bffe05 	stb	r2,-8(fp)
   41a30:	d0a0c943 	ldbu	r2,-31963(gp)
   41a34:	e0bffe45 	stb	r2,-7(fp)
   41a38:	d0a0c983 	ldbu	r2,-31962(gp)
   41a3c:	e0bffe85 	stb	r2,-6(fp)
   41a40:	0005883a 	mov	r2,zero
   41a44:	e0fffe03 	ldbu	r3,-8(fp)
   41a48:	18c03fcc 	andi	r3,r3,255
   41a4c:	013fc004 	movi	r4,-256
   41a50:	1104703a 	and	r2,r2,r4
   41a54:	10c4b03a 	or	r2,r2,r3
   41a58:	e0fffe43 	ldbu	r3,-7(fp)
   41a5c:	18c03fcc 	andi	r3,r3,255
   41a60:	1808923a 	slli	r4,r3,8
   41a64:	00fffff4 	movhi	r3,65535
   41a68:	18c03fc4 	addi	r3,r3,255
   41a6c:	10c4703a 	and	r2,r2,r3
   41a70:	1104b03a 	or	r2,r2,r4
   41a74:	e0fffe83 	ldbu	r3,-6(fp)
   41a78:	18c03fcc 	andi	r3,r3,255
   41a7c:	1808943a 	slli	r4,r3,16
   41a80:	00ffc074 	movhi	r3,65281
   41a84:	18ffffc4 	addi	r3,r3,-1
   41a88:	10c4703a 	and	r2,r2,r3
   41a8c:	1104b03a 	or	r2,r2,r4
}
   41a90:	e037883a 	mov	sp,fp
   41a94:	dfc00117 	ldw	ra,4(sp)
   41a98:	df000017 	ldw	fp,0(sp)
   41a9c:	dec00204 	addi	sp,sp,8
   41aa0:	f800283a 	ret

00041aa4 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   41aa4:	defffe04 	addi	sp,sp,-8
   41aa8:	df000115 	stw	fp,4(sp)
   41aac:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   41ab0:	d0a0c903 	ldbu	r2,-31964(gp)
   41ab4:	10c03fcc 	andi	r3,r2,255
   41ab8:	d0a002c3 	ldbu	r2,-32757(gp)
   41abc:	10803fcc 	andi	r2,r2,255
   41ac0:	10bfffc4 	addi	r2,r2,-1
   41ac4:	1880021e 	bne	r3,r2,41ad0 <upClockHour+0x2c>
    clock.hour = 0;
   41ac8:	d020c905 	stb	zero,-31964(gp)
   41acc:	00000306 	br	41adc <upClockHour+0x38>
  }
  else {
    clock.hour++;
   41ad0:	d0a0c903 	ldbu	r2,-31964(gp)
   41ad4:	10800044 	addi	r2,r2,1
   41ad8:	d0a0c905 	stb	r2,-31964(gp)
  }
  return clock;
   41adc:	d0a0c903 	ldbu	r2,-31964(gp)
   41ae0:	e0bfff05 	stb	r2,-4(fp)
   41ae4:	d0a0c943 	ldbu	r2,-31963(gp)
   41ae8:	e0bfff45 	stb	r2,-3(fp)
   41aec:	d0a0c983 	ldbu	r2,-31962(gp)
   41af0:	e0bfff85 	stb	r2,-2(fp)
   41af4:	0005883a 	mov	r2,zero
   41af8:	e0ffff03 	ldbu	r3,-4(fp)
   41afc:	18c03fcc 	andi	r3,r3,255
   41b00:	013fc004 	movi	r4,-256
   41b04:	1104703a 	and	r2,r2,r4
   41b08:	10c4b03a 	or	r2,r2,r3
   41b0c:	e0ffff43 	ldbu	r3,-3(fp)
   41b10:	18c03fcc 	andi	r3,r3,255
   41b14:	1808923a 	slli	r4,r3,8
   41b18:	00fffff4 	movhi	r3,65535
   41b1c:	18c03fc4 	addi	r3,r3,255
   41b20:	10c4703a 	and	r2,r2,r3
   41b24:	1104b03a 	or	r2,r2,r4
   41b28:	e0ffff83 	ldbu	r3,-2(fp)
   41b2c:	18c03fcc 	andi	r3,r3,255
   41b30:	1808943a 	slli	r4,r3,16
   41b34:	00ffc074 	movhi	r3,65281
   41b38:	18ffffc4 	addi	r3,r3,-1
   41b3c:	10c4703a 	and	r2,r2,r3
   41b40:	1104b03a 	or	r2,r2,r4
}
   41b44:	e037883a 	mov	sp,fp
   41b48:	df000017 	ldw	fp,0(sp)
   41b4c:	dec00104 	addi	sp,sp,4
   41b50:	f800283a 	ret

00041b54 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   41b54:	defffc04 	addi	sp,sp,-16
   41b58:	dfc00315 	stw	ra,12(sp)
   41b5c:	df000215 	stw	fp,8(sp)
   41b60:	df000204 	addi	fp,sp,8
   41b64:	2005883a 	mov	r2,r4
   41b68:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   41b6c:	d0a0c983 	ldbu	r2,-31962(gp)
   41b70:	10803fcc 	andi	r2,r2,255
   41b74:	1000081e 	bne	r2,zero,41b98 <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   41b78:	00800ec4 	movi	r2,59
   41b7c:	d0a0c985 	stb	r2,-31962(gp)
    
    if (carry_setting == CARRY_ON) {
   41b80:	e0bfff03 	ldbu	r2,-4(fp)
   41b84:	10800058 	cmpnei	r2,r2,1
   41b88:	1000061e 	bne	r2,zero,41ba4 <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   41b8c:	01000044 	movi	r4,1
   41b90:	0041c200 	call	41c20 <downClockMinute>
   41b94:	00000306 	br	41ba4 <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   41b98:	d0a0c983 	ldbu	r2,-31962(gp)
   41b9c:	10bfffc4 	addi	r2,r2,-1
   41ba0:	d0a0c985 	stb	r2,-31962(gp)
  }
  return clock;
   41ba4:	d0a0c903 	ldbu	r2,-31964(gp)
   41ba8:	e0bffe05 	stb	r2,-8(fp)
   41bac:	d0a0c943 	ldbu	r2,-31963(gp)
   41bb0:	e0bffe45 	stb	r2,-7(fp)
   41bb4:	d0a0c983 	ldbu	r2,-31962(gp)
   41bb8:	e0bffe85 	stb	r2,-6(fp)
   41bbc:	0005883a 	mov	r2,zero
   41bc0:	e0fffe03 	ldbu	r3,-8(fp)
   41bc4:	18c03fcc 	andi	r3,r3,255
   41bc8:	013fc004 	movi	r4,-256
   41bcc:	1104703a 	and	r2,r2,r4
   41bd0:	10c4b03a 	or	r2,r2,r3
   41bd4:	e0fffe43 	ldbu	r3,-7(fp)
   41bd8:	18c03fcc 	andi	r3,r3,255
   41bdc:	1808923a 	slli	r4,r3,8
   41be0:	00fffff4 	movhi	r3,65535
   41be4:	18c03fc4 	addi	r3,r3,255
   41be8:	10c4703a 	and	r2,r2,r3
   41bec:	1104b03a 	or	r2,r2,r4
   41bf0:	e0fffe83 	ldbu	r3,-6(fp)
   41bf4:	18c03fcc 	andi	r3,r3,255
   41bf8:	1808943a 	slli	r4,r3,16
   41bfc:	00ffc074 	movhi	r3,65281
   41c00:	18ffffc4 	addi	r3,r3,-1
   41c04:	10c4703a 	and	r2,r2,r3
   41c08:	1104b03a 	or	r2,r2,r4
}
   41c0c:	e037883a 	mov	sp,fp
   41c10:	dfc00117 	ldw	ra,4(sp)
   41c14:	df000017 	ldw	fp,0(sp)
   41c18:	dec00204 	addi	sp,sp,8
   41c1c:	f800283a 	ret

00041c20 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   41c20:	defffc04 	addi	sp,sp,-16
   41c24:	dfc00315 	stw	ra,12(sp)
   41c28:	df000215 	stw	fp,8(sp)
   41c2c:	df000204 	addi	fp,sp,8
   41c30:	2005883a 	mov	r2,r4
   41c34:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   41c38:	d0a0c943 	ldbu	r2,-31963(gp)
   41c3c:	10803fcc 	andi	r2,r2,255
   41c40:	1000071e 	bne	r2,zero,41c60 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   41c44:	00800ec4 	movi	r2,59
   41c48:	d0a0c945 	stb	r2,-31963(gp)
    
    if (carry_setting == CARRY_ON) {
   41c4c:	e0bfff03 	ldbu	r2,-4(fp)
   41c50:	10800058 	cmpnei	r2,r2,1
   41c54:	1000051e 	bne	r2,zero,41c6c <downClockMinute+0x4c>
      downClockHour();
   41c58:	0041ce80 	call	41ce8 <downClockHour>
   41c5c:	00000306 	br	41c6c <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   41c60:	d0a0c943 	ldbu	r2,-31963(gp)
   41c64:	10bfffc4 	addi	r2,r2,-1
   41c68:	d0a0c945 	stb	r2,-31963(gp)
  }
  return clock;
   41c6c:	d0a0c903 	ldbu	r2,-31964(gp)
   41c70:	e0bffe05 	stb	r2,-8(fp)
   41c74:	d0a0c943 	ldbu	r2,-31963(gp)
   41c78:	e0bffe45 	stb	r2,-7(fp)
   41c7c:	d0a0c983 	ldbu	r2,-31962(gp)
   41c80:	e0bffe85 	stb	r2,-6(fp)
   41c84:	0005883a 	mov	r2,zero
   41c88:	e0fffe03 	ldbu	r3,-8(fp)
   41c8c:	18c03fcc 	andi	r3,r3,255
   41c90:	013fc004 	movi	r4,-256
   41c94:	1104703a 	and	r2,r2,r4
   41c98:	10c4b03a 	or	r2,r2,r3
   41c9c:	e0fffe43 	ldbu	r3,-7(fp)
   41ca0:	18c03fcc 	andi	r3,r3,255
   41ca4:	1808923a 	slli	r4,r3,8
   41ca8:	00fffff4 	movhi	r3,65535
   41cac:	18c03fc4 	addi	r3,r3,255
   41cb0:	10c4703a 	and	r2,r2,r3
   41cb4:	1104b03a 	or	r2,r2,r4
   41cb8:	e0fffe83 	ldbu	r3,-6(fp)
   41cbc:	18c03fcc 	andi	r3,r3,255
   41cc0:	1808943a 	slli	r4,r3,16
   41cc4:	00ffc074 	movhi	r3,65281
   41cc8:	18ffffc4 	addi	r3,r3,-1
   41ccc:	10c4703a 	and	r2,r2,r3
   41cd0:	1104b03a 	or	r2,r2,r4
}
   41cd4:	e037883a 	mov	sp,fp
   41cd8:	dfc00117 	ldw	ra,4(sp)
   41cdc:	df000017 	ldw	fp,0(sp)
   41ce0:	dec00204 	addi	sp,sp,8
   41ce4:	f800283a 	ret

00041ce8 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   41ce8:	defffe04 	addi	sp,sp,-8
   41cec:	df000115 	stw	fp,4(sp)
   41cf0:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   41cf4:	d0a0c903 	ldbu	r2,-31964(gp)
   41cf8:	10803fcc 	andi	r2,r2,255
   41cfc:	1000041e 	bne	r2,zero,41d10 <downClockHour+0x28>
    clock.hour = (time_format-1);
   41d00:	d0a002c3 	ldbu	r2,-32757(gp)
   41d04:	10bfffc4 	addi	r2,r2,-1
   41d08:	d0a0c905 	stb	r2,-31964(gp)
   41d0c:	00000306 	br	41d1c <downClockHour+0x34>
  }
  else {
    clock.hour--;
   41d10:	d0a0c903 	ldbu	r2,-31964(gp)
   41d14:	10bfffc4 	addi	r2,r2,-1
   41d18:	d0a0c905 	stb	r2,-31964(gp)
  }
  return clock;
   41d1c:	d0a0c903 	ldbu	r2,-31964(gp)
   41d20:	e0bfff05 	stb	r2,-4(fp)
   41d24:	d0a0c943 	ldbu	r2,-31963(gp)
   41d28:	e0bfff45 	stb	r2,-3(fp)
   41d2c:	d0a0c983 	ldbu	r2,-31962(gp)
   41d30:	e0bfff85 	stb	r2,-2(fp)
   41d34:	0005883a 	mov	r2,zero
   41d38:	e0ffff03 	ldbu	r3,-4(fp)
   41d3c:	18c03fcc 	andi	r3,r3,255
   41d40:	013fc004 	movi	r4,-256
   41d44:	1104703a 	and	r2,r2,r4
   41d48:	10c4b03a 	or	r2,r2,r3
   41d4c:	e0ffff43 	ldbu	r3,-3(fp)
   41d50:	18c03fcc 	andi	r3,r3,255
   41d54:	1808923a 	slli	r4,r3,8
   41d58:	00fffff4 	movhi	r3,65535
   41d5c:	18c03fc4 	addi	r3,r3,255
   41d60:	10c4703a 	and	r2,r2,r3
   41d64:	1104b03a 	or	r2,r2,r4
   41d68:	e0ffff83 	ldbu	r3,-2(fp)
   41d6c:	18c03fcc 	andi	r3,r3,255
   41d70:	1808943a 	slli	r4,r3,16
   41d74:	00ffc074 	movhi	r3,65281
   41d78:	18ffffc4 	addi	r3,r3,-1
   41d7c:	10c4703a 	and	r2,r2,r3
   41d80:	1104b03a 	or	r2,r2,r4
}
   41d84:	e037883a 	mov	sp,fp
   41d88:	df000017 	ldw	fp,0(sp)
   41d8c:	dec00104 	addi	sp,sp,4
   41d90:	f800283a 	ret

00041d94 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   41d94:	deffff04 	addi	sp,sp,-4
   41d98:	df000015 	stw	fp,0(sp)
   41d9c:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   41da0:	d020c845 	stb	zero,-31967(gp)
   41da4:	d020c885 	stb	zero,-31966(gp)
   41da8:	d020c8c5 	stb	zero,-31965(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   41dac:	00801904 	movi	r2,100
   41db0:	d0a0c8c5 	stb	r2,-31965(gp)
}
   41db4:	0001883a 	nop
   41db8:	e037883a 	mov	sp,fp
   41dbc:	df000017 	ldw	fp,0(sp)
   41dc0:	dec00104 	addi	sp,sp,4
   41dc4:	f800283a 	ret

00041dc8 <getAlarmTime>:

struct time getAlarmTime(void) {
   41dc8:	defffe04 	addi	sp,sp,-8
   41dcc:	df000115 	stw	fp,4(sp)
   41dd0:	df000104 	addi	fp,sp,4
  return alarm;
   41dd4:	d0a0c843 	ldbu	r2,-31967(gp)
   41dd8:	e0bfff05 	stb	r2,-4(fp)
   41ddc:	d0a0c883 	ldbu	r2,-31966(gp)
   41de0:	e0bfff45 	stb	r2,-3(fp)
   41de4:	d0a0c8c3 	ldbu	r2,-31965(gp)
   41de8:	e0bfff85 	stb	r2,-2(fp)
   41dec:	0005883a 	mov	r2,zero
   41df0:	e0ffff03 	ldbu	r3,-4(fp)
   41df4:	18c03fcc 	andi	r3,r3,255
   41df8:	013fc004 	movi	r4,-256
   41dfc:	1104703a 	and	r2,r2,r4
   41e00:	10c4b03a 	or	r2,r2,r3
   41e04:	e0ffff43 	ldbu	r3,-3(fp)
   41e08:	18c03fcc 	andi	r3,r3,255
   41e0c:	1808923a 	slli	r4,r3,8
   41e10:	00fffff4 	movhi	r3,65535
   41e14:	18c03fc4 	addi	r3,r3,255
   41e18:	10c4703a 	and	r2,r2,r3
   41e1c:	1104b03a 	or	r2,r2,r4
   41e20:	e0ffff83 	ldbu	r3,-2(fp)
   41e24:	18c03fcc 	andi	r3,r3,255
   41e28:	1808943a 	slli	r4,r3,16
   41e2c:	00ffc074 	movhi	r3,65281
   41e30:	18ffffc4 	addi	r3,r3,-1
   41e34:	10c4703a 	and	r2,r2,r3
   41e38:	1104b03a 	or	r2,r2,r4
}
   41e3c:	e037883a 	mov	sp,fp
   41e40:	df000017 	ldw	fp,0(sp)
   41e44:	dec00104 	addi	sp,sp,4
   41e48:	f800283a 	ret

00041e4c <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute(void) {
   41e4c:	defffe04 	addi	sp,sp,-8
   41e50:	df000115 	stw	fp,4(sp)
   41e54:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   41e58:	d0a0c883 	ldbu	r2,-31966(gp)
   41e5c:	10803fcc 	andi	r2,r2,255
   41e60:	10800ed8 	cmpnei	r2,r2,59
   41e64:	1000021e 	bne	r2,zero,41e70 <upAlarmMinute+0x24>
    alarm.minute = 0;
   41e68:	d020c885 	stb	zero,-31966(gp)
   41e6c:	00000306 	br	41e7c <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   41e70:	d0a0c883 	ldbu	r2,-31966(gp)
   41e74:	10800044 	addi	r2,r2,1
   41e78:	d0a0c885 	stb	r2,-31966(gp)
  }
  return alarm;
   41e7c:	d0a0c843 	ldbu	r2,-31967(gp)
   41e80:	e0bfff05 	stb	r2,-4(fp)
   41e84:	d0a0c883 	ldbu	r2,-31966(gp)
   41e88:	e0bfff45 	stb	r2,-3(fp)
   41e8c:	d0a0c8c3 	ldbu	r2,-31965(gp)
   41e90:	e0bfff85 	stb	r2,-2(fp)
   41e94:	0005883a 	mov	r2,zero
   41e98:	e0ffff03 	ldbu	r3,-4(fp)
   41e9c:	18c03fcc 	andi	r3,r3,255
   41ea0:	013fc004 	movi	r4,-256
   41ea4:	1104703a 	and	r2,r2,r4
   41ea8:	10c4b03a 	or	r2,r2,r3
   41eac:	e0ffff43 	ldbu	r3,-3(fp)
   41eb0:	18c03fcc 	andi	r3,r3,255
   41eb4:	1808923a 	slli	r4,r3,8
   41eb8:	00fffff4 	movhi	r3,65535
   41ebc:	18c03fc4 	addi	r3,r3,255
   41ec0:	10c4703a 	and	r2,r2,r3
   41ec4:	1104b03a 	or	r2,r2,r4
   41ec8:	e0ffff83 	ldbu	r3,-2(fp)
   41ecc:	18c03fcc 	andi	r3,r3,255
   41ed0:	1808943a 	slli	r4,r3,16
   41ed4:	00ffc074 	movhi	r3,65281
   41ed8:	18ffffc4 	addi	r3,r3,-1
   41edc:	10c4703a 	and	r2,r2,r3
   41ee0:	1104b03a 	or	r2,r2,r4
}
   41ee4:	e037883a 	mov	sp,fp
   41ee8:	df000017 	ldw	fp,0(sp)
   41eec:	dec00104 	addi	sp,sp,4
   41ef0:	f800283a 	ret

00041ef4 <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   41ef4:	defffe04 	addi	sp,sp,-8
   41ef8:	df000115 	stw	fp,4(sp)
   41efc:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   41f00:	d0a0c843 	ldbu	r2,-31967(gp)
   41f04:	10c03fcc 	andi	r3,r2,255
   41f08:	d0a002c3 	ldbu	r2,-32757(gp)
   41f0c:	10803fcc 	andi	r2,r2,255
   41f10:	10bfffc4 	addi	r2,r2,-1
   41f14:	1880021e 	bne	r3,r2,41f20 <upAlarmHour+0x2c>
    alarm.hour = 0;
   41f18:	d020c845 	stb	zero,-31967(gp)
   41f1c:	00000306 	br	41f2c <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   41f20:	d0a0c843 	ldbu	r2,-31967(gp)
   41f24:	10800044 	addi	r2,r2,1
   41f28:	d0a0c845 	stb	r2,-31967(gp)
  }
  return alarm;
   41f2c:	d0a0c843 	ldbu	r2,-31967(gp)
   41f30:	e0bfff05 	stb	r2,-4(fp)
   41f34:	d0a0c883 	ldbu	r2,-31966(gp)
   41f38:	e0bfff45 	stb	r2,-3(fp)
   41f3c:	d0a0c8c3 	ldbu	r2,-31965(gp)
   41f40:	e0bfff85 	stb	r2,-2(fp)
   41f44:	0005883a 	mov	r2,zero
   41f48:	e0ffff03 	ldbu	r3,-4(fp)
   41f4c:	18c03fcc 	andi	r3,r3,255
   41f50:	013fc004 	movi	r4,-256
   41f54:	1104703a 	and	r2,r2,r4
   41f58:	10c4b03a 	or	r2,r2,r3
   41f5c:	e0ffff43 	ldbu	r3,-3(fp)
   41f60:	18c03fcc 	andi	r3,r3,255
   41f64:	1808923a 	slli	r4,r3,8
   41f68:	00fffff4 	movhi	r3,65535
   41f6c:	18c03fc4 	addi	r3,r3,255
   41f70:	10c4703a 	and	r2,r2,r3
   41f74:	1104b03a 	or	r2,r2,r4
   41f78:	e0ffff83 	ldbu	r3,-2(fp)
   41f7c:	18c03fcc 	andi	r3,r3,255
   41f80:	1808943a 	slli	r4,r3,16
   41f84:	00ffc074 	movhi	r3,65281
   41f88:	18ffffc4 	addi	r3,r3,-1
   41f8c:	10c4703a 	and	r2,r2,r3
   41f90:	1104b03a 	or	r2,r2,r4
}
   41f94:	e037883a 	mov	sp,fp
   41f98:	df000017 	ldw	fp,0(sp)
   41f9c:	dec00104 	addi	sp,sp,4
   41fa0:	f800283a 	ret

00041fa4 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute(void) {
   41fa4:	defffe04 	addi	sp,sp,-8
   41fa8:	df000115 	stw	fp,4(sp)
   41fac:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   41fb0:	d0a0c883 	ldbu	r2,-31966(gp)
   41fb4:	10803fcc 	andi	r2,r2,255
   41fb8:	1000031e 	bne	r2,zero,41fc8 <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   41fbc:	00800ec4 	movi	r2,59
   41fc0:	d0a0c885 	stb	r2,-31966(gp)
   41fc4:	00000306 	br	41fd4 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   41fc8:	d0a0c883 	ldbu	r2,-31966(gp)
   41fcc:	10bfffc4 	addi	r2,r2,-1
   41fd0:	d0a0c885 	stb	r2,-31966(gp)
  }
  return alarm;
   41fd4:	d0a0c843 	ldbu	r2,-31967(gp)
   41fd8:	e0bfff05 	stb	r2,-4(fp)
   41fdc:	d0a0c883 	ldbu	r2,-31966(gp)
   41fe0:	e0bfff45 	stb	r2,-3(fp)
   41fe4:	d0a0c8c3 	ldbu	r2,-31965(gp)
   41fe8:	e0bfff85 	stb	r2,-2(fp)
   41fec:	0005883a 	mov	r2,zero
   41ff0:	e0ffff03 	ldbu	r3,-4(fp)
   41ff4:	18c03fcc 	andi	r3,r3,255
   41ff8:	013fc004 	movi	r4,-256
   41ffc:	1104703a 	and	r2,r2,r4
   42000:	10c4b03a 	or	r2,r2,r3
   42004:	e0ffff43 	ldbu	r3,-3(fp)
   42008:	18c03fcc 	andi	r3,r3,255
   4200c:	1808923a 	slli	r4,r3,8
   42010:	00fffff4 	movhi	r3,65535
   42014:	18c03fc4 	addi	r3,r3,255
   42018:	10c4703a 	and	r2,r2,r3
   4201c:	1104b03a 	or	r2,r2,r4
   42020:	e0ffff83 	ldbu	r3,-2(fp)
   42024:	18c03fcc 	andi	r3,r3,255
   42028:	1808943a 	slli	r4,r3,16
   4202c:	00ffc074 	movhi	r3,65281
   42030:	18ffffc4 	addi	r3,r3,-1
   42034:	10c4703a 	and	r2,r2,r3
   42038:	1104b03a 	or	r2,r2,r4
}
   4203c:	e037883a 	mov	sp,fp
   42040:	df000017 	ldw	fp,0(sp)
   42044:	dec00104 	addi	sp,sp,4
   42048:	f800283a 	ret

0004204c <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   4204c:	defffe04 	addi	sp,sp,-8
   42050:	df000115 	stw	fp,4(sp)
   42054:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   42058:	d0a0c843 	ldbu	r2,-31967(gp)
   4205c:	10803fcc 	andi	r2,r2,255
   42060:	1000041e 	bne	r2,zero,42074 <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   42064:	d0a002c3 	ldbu	r2,-32757(gp)
   42068:	10bfffc4 	addi	r2,r2,-1
   4206c:	d0a0c845 	stb	r2,-31967(gp)
   42070:	00000306 	br	42080 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   42074:	d0a0c843 	ldbu	r2,-31967(gp)
   42078:	10bfffc4 	addi	r2,r2,-1
   4207c:	d0a0c845 	stb	r2,-31967(gp)
  }
  return alarm;
   42080:	d0a0c843 	ldbu	r2,-31967(gp)
   42084:	e0bfff05 	stb	r2,-4(fp)
   42088:	d0a0c883 	ldbu	r2,-31966(gp)
   4208c:	e0bfff45 	stb	r2,-3(fp)
   42090:	d0a0c8c3 	ldbu	r2,-31965(gp)
   42094:	e0bfff85 	stb	r2,-2(fp)
   42098:	0005883a 	mov	r2,zero
   4209c:	e0ffff03 	ldbu	r3,-4(fp)
   420a0:	18c03fcc 	andi	r3,r3,255
   420a4:	013fc004 	movi	r4,-256
   420a8:	1104703a 	and	r2,r2,r4
   420ac:	10c4b03a 	or	r2,r2,r3
   420b0:	e0ffff43 	ldbu	r3,-3(fp)
   420b4:	18c03fcc 	andi	r3,r3,255
   420b8:	1808923a 	slli	r4,r3,8
   420bc:	00fffff4 	movhi	r3,65535
   420c0:	18c03fc4 	addi	r3,r3,255
   420c4:	10c4703a 	and	r2,r2,r3
   420c8:	1104b03a 	or	r2,r2,r4
   420cc:	e0ffff83 	ldbu	r3,-2(fp)
   420d0:	18c03fcc 	andi	r3,r3,255
   420d4:	1808943a 	slli	r4,r3,16
   420d8:	00ffc074 	movhi	r3,65281
   420dc:	18ffffc4 	addi	r3,r3,-1
   420e0:	10c4703a 	and	r2,r2,r3
   420e4:	1104b03a 	or	r2,r2,r4
}
   420e8:	e037883a 	mov	sp,fp
   420ec:	df000017 	ldw	fp,0(sp)
   420f0:	dec00104 	addi	sp,sp,4
   420f4:	f800283a 	ret

000420f8 <__divsi3>:
   420f8:	20001b16 	blt	r4,zero,42168 <__divsi3+0x70>
   420fc:	000f883a 	mov	r7,zero
   42100:	28001616 	blt	r5,zero,4215c <__divsi3+0x64>
   42104:	200d883a 	mov	r6,r4
   42108:	29001a2e 	bgeu	r5,r4,42174 <__divsi3+0x7c>
   4210c:	00800804 	movi	r2,32
   42110:	00c00044 	movi	r3,1
   42114:	00000106 	br	4211c <__divsi3+0x24>
   42118:	10000d26 	beq	r2,zero,42150 <__divsi3+0x58>
   4211c:	294b883a 	add	r5,r5,r5
   42120:	10bfffc4 	addi	r2,r2,-1
   42124:	18c7883a 	add	r3,r3,r3
   42128:	293ffb36 	bltu	r5,r4,42118 <__alt_data_end+0xfffda118>
   4212c:	0005883a 	mov	r2,zero
   42130:	18000726 	beq	r3,zero,42150 <__divsi3+0x58>
   42134:	0005883a 	mov	r2,zero
   42138:	31400236 	bltu	r6,r5,42144 <__divsi3+0x4c>
   4213c:	314dc83a 	sub	r6,r6,r5
   42140:	10c4b03a 	or	r2,r2,r3
   42144:	1806d07a 	srli	r3,r3,1
   42148:	280ad07a 	srli	r5,r5,1
   4214c:	183ffa1e 	bne	r3,zero,42138 <__alt_data_end+0xfffda138>
   42150:	38000126 	beq	r7,zero,42158 <__divsi3+0x60>
   42154:	0085c83a 	sub	r2,zero,r2
   42158:	f800283a 	ret
   4215c:	014bc83a 	sub	r5,zero,r5
   42160:	39c0005c 	xori	r7,r7,1
   42164:	003fe706 	br	42104 <__alt_data_end+0xfffda104>
   42168:	0109c83a 	sub	r4,zero,r4
   4216c:	01c00044 	movi	r7,1
   42170:	003fe306 	br	42100 <__alt_data_end+0xfffda100>
   42174:	00c00044 	movi	r3,1
   42178:	003fee06 	br	42134 <__alt_data_end+0xfffda134>

0004217c <__modsi3>:
   4217c:	20001716 	blt	r4,zero,421dc <__modsi3+0x60>
   42180:	000f883a 	mov	r7,zero
   42184:	2005883a 	mov	r2,r4
   42188:	28001216 	blt	r5,zero,421d4 <__modsi3+0x58>
   4218c:	2900162e 	bgeu	r5,r4,421e8 <__modsi3+0x6c>
   42190:	01800804 	movi	r6,32
   42194:	00c00044 	movi	r3,1
   42198:	00000106 	br	421a0 <__modsi3+0x24>
   4219c:	30000a26 	beq	r6,zero,421c8 <__modsi3+0x4c>
   421a0:	294b883a 	add	r5,r5,r5
   421a4:	31bfffc4 	addi	r6,r6,-1
   421a8:	18c7883a 	add	r3,r3,r3
   421ac:	293ffb36 	bltu	r5,r4,4219c <__alt_data_end+0xfffda19c>
   421b0:	18000526 	beq	r3,zero,421c8 <__modsi3+0x4c>
   421b4:	1806d07a 	srli	r3,r3,1
   421b8:	11400136 	bltu	r2,r5,421c0 <__modsi3+0x44>
   421bc:	1145c83a 	sub	r2,r2,r5
   421c0:	280ad07a 	srli	r5,r5,1
   421c4:	183ffb1e 	bne	r3,zero,421b4 <__alt_data_end+0xfffda1b4>
   421c8:	38000126 	beq	r7,zero,421d0 <__modsi3+0x54>
   421cc:	0085c83a 	sub	r2,zero,r2
   421d0:	f800283a 	ret
   421d4:	014bc83a 	sub	r5,zero,r5
   421d8:	003fec06 	br	4218c <__alt_data_end+0xfffda18c>
   421dc:	0109c83a 	sub	r4,zero,r4
   421e0:	01c00044 	movi	r7,1
   421e4:	003fe706 	br	42184 <__alt_data_end+0xfffda184>
   421e8:	00c00044 	movi	r3,1
   421ec:	003ff106 	br	421b4 <__alt_data_end+0xfffda1b4>

000421f0 <__udivsi3>:
   421f0:	200d883a 	mov	r6,r4
   421f4:	2900152e 	bgeu	r5,r4,4224c <__udivsi3+0x5c>
   421f8:	28001416 	blt	r5,zero,4224c <__udivsi3+0x5c>
   421fc:	00800804 	movi	r2,32
   42200:	00c00044 	movi	r3,1
   42204:	00000206 	br	42210 <__udivsi3+0x20>
   42208:	10000e26 	beq	r2,zero,42244 <__udivsi3+0x54>
   4220c:	28000516 	blt	r5,zero,42224 <__udivsi3+0x34>
   42210:	294b883a 	add	r5,r5,r5
   42214:	10bfffc4 	addi	r2,r2,-1
   42218:	18c7883a 	add	r3,r3,r3
   4221c:	293ffa36 	bltu	r5,r4,42208 <__alt_data_end+0xfffda208>
   42220:	18000826 	beq	r3,zero,42244 <__udivsi3+0x54>
   42224:	0005883a 	mov	r2,zero
   42228:	31400236 	bltu	r6,r5,42234 <__udivsi3+0x44>
   4222c:	314dc83a 	sub	r6,r6,r5
   42230:	10c4b03a 	or	r2,r2,r3
   42234:	1806d07a 	srli	r3,r3,1
   42238:	280ad07a 	srli	r5,r5,1
   4223c:	183ffa1e 	bne	r3,zero,42228 <__alt_data_end+0xfffda228>
   42240:	f800283a 	ret
   42244:	0005883a 	mov	r2,zero
   42248:	f800283a 	ret
   4224c:	00c00044 	movi	r3,1
   42250:	003ff406 	br	42224 <__alt_data_end+0xfffda224>

00042254 <__umodsi3>:
   42254:	2005883a 	mov	r2,r4
   42258:	2900122e 	bgeu	r5,r4,422a4 <__umodsi3+0x50>
   4225c:	28001116 	blt	r5,zero,422a4 <__umodsi3+0x50>
   42260:	01800804 	movi	r6,32
   42264:	00c00044 	movi	r3,1
   42268:	00000206 	br	42274 <__umodsi3+0x20>
   4226c:	30000c26 	beq	r6,zero,422a0 <__umodsi3+0x4c>
   42270:	28000516 	blt	r5,zero,42288 <__umodsi3+0x34>
   42274:	294b883a 	add	r5,r5,r5
   42278:	31bfffc4 	addi	r6,r6,-1
   4227c:	18c7883a 	add	r3,r3,r3
   42280:	293ffa36 	bltu	r5,r4,4226c <__alt_data_end+0xfffda26c>
   42284:	18000626 	beq	r3,zero,422a0 <__umodsi3+0x4c>
   42288:	1806d07a 	srli	r3,r3,1
   4228c:	11400136 	bltu	r2,r5,42294 <__umodsi3+0x40>
   42290:	1145c83a 	sub	r2,r2,r5
   42294:	280ad07a 	srli	r5,r5,1
   42298:	183ffb1e 	bne	r3,zero,42288 <__alt_data_end+0xfffda288>
   4229c:	f800283a 	ret
   422a0:	f800283a 	ret
   422a4:	00c00044 	movi	r3,1
   422a8:	003ff706 	br	42288 <__alt_data_end+0xfffda288>

000422ac <_printf_r>:
   422ac:	defffd04 	addi	sp,sp,-12
   422b0:	dfc00015 	stw	ra,0(sp)
   422b4:	d9800115 	stw	r6,4(sp)
   422b8:	d9c00215 	stw	r7,8(sp)
   422bc:	20c00217 	ldw	r3,8(r4)
   422c0:	01800134 	movhi	r6,4
   422c4:	318a6404 	addi	r6,r6,10640
   422c8:	19800115 	stw	r6,4(r3)
   422cc:	280d883a 	mov	r6,r5
   422d0:	21400217 	ldw	r5,8(r4)
   422d4:	d9c00104 	addi	r7,sp,4
   422d8:	00424500 	call	42450 <___vfprintf_internal_r>
   422dc:	dfc00017 	ldw	ra,0(sp)
   422e0:	dec00304 	addi	sp,sp,12
   422e4:	f800283a 	ret

000422e8 <printf>:
   422e8:	defffc04 	addi	sp,sp,-16
   422ec:	dfc00015 	stw	ra,0(sp)
   422f0:	d9400115 	stw	r5,4(sp)
   422f4:	d9800215 	stw	r6,8(sp)
   422f8:	d9c00315 	stw	r7,12(sp)
   422fc:	00800134 	movhi	r2,4
   42300:	10914204 	addi	r2,r2,17672
   42304:	10800017 	ldw	r2,0(r2)
   42308:	01400134 	movhi	r5,4
   4230c:	294a6404 	addi	r5,r5,10640
   42310:	10c00217 	ldw	r3,8(r2)
   42314:	d9800104 	addi	r6,sp,4
   42318:	19400115 	stw	r5,4(r3)
   4231c:	200b883a 	mov	r5,r4
   42320:	11000217 	ldw	r4,8(r2)
   42324:	00429740 	call	42974 <__vfprintf_internal>
   42328:	dfc00017 	ldw	ra,0(sp)
   4232c:	dec00404 	addi	sp,sp,16
   42330:	f800283a 	ret

00042334 <_puts_r>:
   42334:	defffd04 	addi	sp,sp,-12
   42338:	dc000015 	stw	r16,0(sp)
   4233c:	2021883a 	mov	r16,r4
   42340:	2809883a 	mov	r4,r5
   42344:	dfc00215 	stw	ra,8(sp)
   42348:	dc400115 	stw	r17,4(sp)
   4234c:	2823883a 	mov	r17,r5
   42350:	00423c80 	call	423c8 <strlen>
   42354:	81400217 	ldw	r5,8(r16)
   42358:	01000134 	movhi	r4,4
   4235c:	210a6404 	addi	r4,r4,10640
   42360:	29000115 	stw	r4,4(r5)
   42364:	100f883a 	mov	r7,r2
   42368:	880d883a 	mov	r6,r17
   4236c:	8009883a 	mov	r4,r16
   42370:	00429900 	call	42990 <__sfvwrite_small_dev>
   42374:	00ffffc4 	movi	r3,-1
   42378:	10c00926 	beq	r2,r3,423a0 <_puts_r+0x6c>
   4237c:	81400217 	ldw	r5,8(r16)
   42380:	01800134 	movhi	r6,4
   42384:	01c00044 	movi	r7,1
   42388:	28800117 	ldw	r2,4(r5)
   4238c:	31908304 	addi	r6,r6,16908
   42390:	8009883a 	mov	r4,r16
   42394:	103ee83a 	callr	r2
   42398:	10bfffe0 	cmpeqi	r2,r2,-1
   4239c:	0085c83a 	sub	r2,zero,r2
   423a0:	dfc00217 	ldw	ra,8(sp)
   423a4:	dc400117 	ldw	r17,4(sp)
   423a8:	dc000017 	ldw	r16,0(sp)
   423ac:	dec00304 	addi	sp,sp,12
   423b0:	f800283a 	ret

000423b4 <puts>:
   423b4:	00800134 	movhi	r2,4
   423b8:	10914204 	addi	r2,r2,17672
   423bc:	200b883a 	mov	r5,r4
   423c0:	11000017 	ldw	r4,0(r2)
   423c4:	00423341 	jmpi	42334 <_puts_r>

000423c8 <strlen>:
   423c8:	2005883a 	mov	r2,r4
   423cc:	10c00007 	ldb	r3,0(r2)
   423d0:	18000226 	beq	r3,zero,423dc <strlen+0x14>
   423d4:	10800044 	addi	r2,r2,1
   423d8:	003ffc06 	br	423cc <__alt_data_end+0xfffda3cc>
   423dc:	1105c83a 	sub	r2,r2,r4
   423e0:	f800283a 	ret

000423e4 <print_repeat>:
   423e4:	defffb04 	addi	sp,sp,-20
   423e8:	dc800315 	stw	r18,12(sp)
   423ec:	dc400215 	stw	r17,8(sp)
   423f0:	dc000115 	stw	r16,4(sp)
   423f4:	dfc00415 	stw	ra,16(sp)
   423f8:	2025883a 	mov	r18,r4
   423fc:	2823883a 	mov	r17,r5
   42400:	d9800005 	stb	r6,0(sp)
   42404:	3821883a 	mov	r16,r7
   42408:	04000a0e 	bge	zero,r16,42434 <print_repeat+0x50>
   4240c:	88800117 	ldw	r2,4(r17)
   42410:	01c00044 	movi	r7,1
   42414:	d80d883a 	mov	r6,sp
   42418:	880b883a 	mov	r5,r17
   4241c:	9009883a 	mov	r4,r18
   42420:	103ee83a 	callr	r2
   42424:	843fffc4 	addi	r16,r16,-1
   42428:	103ff726 	beq	r2,zero,42408 <__alt_data_end+0xfffda408>
   4242c:	00bfffc4 	movi	r2,-1
   42430:	00000106 	br	42438 <print_repeat+0x54>
   42434:	0005883a 	mov	r2,zero
   42438:	dfc00417 	ldw	ra,16(sp)
   4243c:	dc800317 	ldw	r18,12(sp)
   42440:	dc400217 	ldw	r17,8(sp)
   42444:	dc000117 	ldw	r16,4(sp)
   42448:	dec00504 	addi	sp,sp,20
   4244c:	f800283a 	ret

00042450 <___vfprintf_internal_r>:
   42450:	deffe504 	addi	sp,sp,-108
   42454:	d8c00804 	addi	r3,sp,32
   42458:	df001915 	stw	fp,100(sp)
   4245c:	ddc01815 	stw	r23,96(sp)
   42460:	dd801715 	stw	r22,92(sp)
   42464:	dd401615 	stw	r21,88(sp)
   42468:	dd001515 	stw	r20,84(sp)
   4246c:	dcc01415 	stw	r19,80(sp)
   42470:	dc801315 	stw	r18,76(sp)
   42474:	dc401215 	stw	r17,72(sp)
   42478:	dc001115 	stw	r16,68(sp)
   4247c:	dfc01a15 	stw	ra,104(sp)
   42480:	2027883a 	mov	r19,r4
   42484:	2839883a 	mov	fp,r5
   42488:	382d883a 	mov	r22,r7
   4248c:	d9800f15 	stw	r6,60(sp)
   42490:	0021883a 	mov	r16,zero
   42494:	d8000e15 	stw	zero,56(sp)
   42498:	002f883a 	mov	r23,zero
   4249c:	002b883a 	mov	r21,zero
   424a0:	0025883a 	mov	r18,zero
   424a4:	0023883a 	mov	r17,zero
   424a8:	d8000c15 	stw	zero,48(sp)
   424ac:	d8000b15 	stw	zero,44(sp)
   424b0:	0029883a 	mov	r20,zero
   424b4:	d8c00915 	stw	r3,36(sp)
   424b8:	d8c00f17 	ldw	r3,60(sp)
   424bc:	19000003 	ldbu	r4,0(r3)
   424c0:	20803fcc 	andi	r2,r4,255
   424c4:	1080201c 	xori	r2,r2,128
   424c8:	10bfe004 	addi	r2,r2,-128
   424cc:	10011c26 	beq	r2,zero,42940 <___vfprintf_internal_r+0x4f0>
   424d0:	00c00044 	movi	r3,1
   424d4:	a0c01426 	beq	r20,r3,42528 <___vfprintf_internal_r+0xd8>
   424d8:	1d000216 	blt	r3,r20,424e4 <___vfprintf_internal_r+0x94>
   424dc:	a0000626 	beq	r20,zero,424f8 <___vfprintf_internal_r+0xa8>
   424e0:	00011306 	br	42930 <___vfprintf_internal_r+0x4e0>
   424e4:	01400084 	movi	r5,2
   424e8:	a1401d26 	beq	r20,r5,42560 <___vfprintf_internal_r+0x110>
   424ec:	014000c4 	movi	r5,3
   424f0:	a1402926 	beq	r20,r5,42598 <___vfprintf_internal_r+0x148>
   424f4:	00010e06 	br	42930 <___vfprintf_internal_r+0x4e0>
   424f8:	01400944 	movi	r5,37
   424fc:	1140fb26 	beq	r2,r5,428ec <___vfprintf_internal_r+0x49c>
   42500:	e0800117 	ldw	r2,4(fp)
   42504:	d9000005 	stb	r4,0(sp)
   42508:	01c00044 	movi	r7,1
   4250c:	d80d883a 	mov	r6,sp
   42510:	e00b883a 	mov	r5,fp
   42514:	9809883a 	mov	r4,r19
   42518:	103ee83a 	callr	r2
   4251c:	1000d61e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42520:	84000044 	addi	r16,r16,1
   42524:	00010206 	br	42930 <___vfprintf_internal_r+0x4e0>
   42528:	01400c04 	movi	r5,48
   4252c:	1140f826 	beq	r2,r5,42910 <___vfprintf_internal_r+0x4c0>
   42530:	01400944 	movi	r5,37
   42534:	11400a1e 	bne	r2,r5,42560 <___vfprintf_internal_r+0x110>
   42538:	d8800005 	stb	r2,0(sp)
   4253c:	e0800117 	ldw	r2,4(fp)
   42540:	a00f883a 	mov	r7,r20
   42544:	d80d883a 	mov	r6,sp
   42548:	e00b883a 	mov	r5,fp
   4254c:	9809883a 	mov	r4,r19
   42550:	103ee83a 	callr	r2
   42554:	1000c81e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42558:	84000044 	addi	r16,r16,1
   4255c:	0000f306 	br	4292c <___vfprintf_internal_r+0x4dc>
   42560:	217ff404 	addi	r5,r4,-48
   42564:	29403fcc 	andi	r5,r5,255
   42568:	00c00244 	movi	r3,9
   4256c:	19400736 	bltu	r3,r5,4258c <___vfprintf_internal_r+0x13c>
   42570:	00bfffc4 	movi	r2,-1
   42574:	88800226 	beq	r17,r2,42580 <___vfprintf_internal_r+0x130>
   42578:	8c4002a4 	muli	r17,r17,10
   4257c:	00000106 	br	42584 <___vfprintf_internal_r+0x134>
   42580:	0023883a 	mov	r17,zero
   42584:	2c63883a 	add	r17,r5,r17
   42588:	0000e206 	br	42914 <___vfprintf_internal_r+0x4c4>
   4258c:	01400b84 	movi	r5,46
   42590:	1140e426 	beq	r2,r5,42924 <___vfprintf_internal_r+0x4d4>
   42594:	05000084 	movi	r20,2
   42598:	213ff404 	addi	r4,r4,-48
   4259c:	21003fcc 	andi	r4,r4,255
   425a0:	00c00244 	movi	r3,9
   425a4:	19000736 	bltu	r3,r4,425c4 <___vfprintf_internal_r+0x174>
   425a8:	00bfffc4 	movi	r2,-1
   425ac:	90800226 	beq	r18,r2,425b8 <___vfprintf_internal_r+0x168>
   425b0:	948002a4 	muli	r18,r18,10
   425b4:	00000106 	br	425bc <___vfprintf_internal_r+0x16c>
   425b8:	0025883a 	mov	r18,zero
   425bc:	24a5883a 	add	r18,r4,r18
   425c0:	0000db06 	br	42930 <___vfprintf_internal_r+0x4e0>
   425c4:	00c01b04 	movi	r3,108
   425c8:	10c0d426 	beq	r2,r3,4291c <___vfprintf_internal_r+0x4cc>
   425cc:	013fffc4 	movi	r4,-1
   425d0:	91000226 	beq	r18,r4,425dc <___vfprintf_internal_r+0x18c>
   425d4:	d8000b15 	stw	zero,44(sp)
   425d8:	00000106 	br	425e0 <___vfprintf_internal_r+0x190>
   425dc:	04800044 	movi	r18,1
   425e0:	01001a44 	movi	r4,105
   425e4:	11001626 	beq	r2,r4,42640 <___vfprintf_internal_r+0x1f0>
   425e8:	20800916 	blt	r4,r2,42610 <___vfprintf_internal_r+0x1c0>
   425ec:	010018c4 	movi	r4,99
   425f0:	11008a26 	beq	r2,r4,4281c <___vfprintf_internal_r+0x3cc>
   425f4:	01001904 	movi	r4,100
   425f8:	11001126 	beq	r2,r4,42640 <___vfprintf_internal_r+0x1f0>
   425fc:	01001604 	movi	r4,88
   42600:	1100ca1e 	bne	r2,r4,4292c <___vfprintf_internal_r+0x4dc>
   42604:	00c00044 	movi	r3,1
   42608:	d8c00e15 	stw	r3,56(sp)
   4260c:	00001406 	br	42660 <___vfprintf_internal_r+0x210>
   42610:	01001cc4 	movi	r4,115
   42614:	11009a26 	beq	r2,r4,42880 <___vfprintf_internal_r+0x430>
   42618:	20800416 	blt	r4,r2,4262c <___vfprintf_internal_r+0x1dc>
   4261c:	01001bc4 	movi	r4,111
   42620:	1100c21e 	bne	r2,r4,4292c <___vfprintf_internal_r+0x4dc>
   42624:	05400204 	movi	r21,8
   42628:	00000e06 	br	42664 <___vfprintf_internal_r+0x214>
   4262c:	01001d44 	movi	r4,117
   42630:	11000c26 	beq	r2,r4,42664 <___vfprintf_internal_r+0x214>
   42634:	01001e04 	movi	r4,120
   42638:	11000926 	beq	r2,r4,42660 <___vfprintf_internal_r+0x210>
   4263c:	0000bb06 	br	4292c <___vfprintf_internal_r+0x4dc>
   42640:	b5000104 	addi	r20,r22,4
   42644:	b8000726 	beq	r23,zero,42664 <___vfprintf_internal_r+0x214>
   42648:	dd000d15 	stw	r20,52(sp)
   4264c:	b5800017 	ldw	r22,0(r22)
   42650:	b000080e 	bge	r22,zero,42674 <___vfprintf_internal_r+0x224>
   42654:	05adc83a 	sub	r22,zero,r22
   42658:	02800044 	movi	r10,1
   4265c:	00000606 	br	42678 <___vfprintf_internal_r+0x228>
   42660:	05400404 	movi	r21,16
   42664:	b0c00104 	addi	r3,r22,4
   42668:	d8c00d15 	stw	r3,52(sp)
   4266c:	b5800017 	ldw	r22,0(r22)
   42670:	002f883a 	mov	r23,zero
   42674:	0015883a 	mov	r10,zero
   42678:	d829883a 	mov	r20,sp
   4267c:	b0001426 	beq	r22,zero,426d0 <___vfprintf_internal_r+0x280>
   42680:	b009883a 	mov	r4,r22
   42684:	a80b883a 	mov	r5,r21
   42688:	da801015 	stw	r10,64(sp)
   4268c:	00421f00 	call	421f0 <__udivsi3>
   42690:	1549383a 	mul	r4,r2,r21
   42694:	00c00244 	movi	r3,9
   42698:	da801017 	ldw	r10,64(sp)
   4269c:	b12dc83a 	sub	r22,r22,r4
   426a0:	1d800216 	blt	r3,r22,426ac <___vfprintf_internal_r+0x25c>
   426a4:	b5800c04 	addi	r22,r22,48
   426a8:	00000506 	br	426c0 <___vfprintf_internal_r+0x270>
   426ac:	d8c00e17 	ldw	r3,56(sp)
   426b0:	18000226 	beq	r3,zero,426bc <___vfprintf_internal_r+0x26c>
   426b4:	b5800dc4 	addi	r22,r22,55
   426b8:	00000106 	br	426c0 <___vfprintf_internal_r+0x270>
   426bc:	b58015c4 	addi	r22,r22,87
   426c0:	a5800005 	stb	r22,0(r20)
   426c4:	a5000044 	addi	r20,r20,1
   426c8:	102d883a 	mov	r22,r2
   426cc:	003feb06 	br	4267c <__alt_data_end+0xfffda67c>
   426d0:	a6c7c83a 	sub	r3,r20,sp
   426d4:	d8c00a15 	stw	r3,40(sp)
   426d8:	90c5c83a 	sub	r2,r18,r3
   426dc:	00800a0e 	bge	zero,r2,42708 <___vfprintf_internal_r+0x2b8>
   426e0:	a085883a 	add	r2,r20,r2
   426e4:	01400c04 	movi	r5,48
   426e8:	d8c00917 	ldw	r3,36(sp)
   426ec:	a009883a 	mov	r4,r20
   426f0:	a0c0032e 	bgeu	r20,r3,42700 <___vfprintf_internal_r+0x2b0>
   426f4:	a5000044 	addi	r20,r20,1
   426f8:	21400005 	stb	r5,0(r4)
   426fc:	a0bffa1e 	bne	r20,r2,426e8 <__alt_data_end+0xfffda6e8>
   42700:	a6c7c83a 	sub	r3,r20,sp
   42704:	d8c00a15 	stw	r3,40(sp)
   42708:	d8c00a17 	ldw	r3,40(sp)
   4270c:	50d3883a 	add	r9,r10,r3
   42710:	d8c00b17 	ldw	r3,44(sp)
   42714:	8a6dc83a 	sub	r22,r17,r9
   42718:	18001726 	beq	r3,zero,42778 <___vfprintf_internal_r+0x328>
   4271c:	50000a26 	beq	r10,zero,42748 <___vfprintf_internal_r+0x2f8>
   42720:	00800b44 	movi	r2,45
   42724:	d8800805 	stb	r2,32(sp)
   42728:	e0800117 	ldw	r2,4(fp)
   4272c:	01c00044 	movi	r7,1
   42730:	d9800804 	addi	r6,sp,32
   42734:	e00b883a 	mov	r5,fp
   42738:	9809883a 	mov	r4,r19
   4273c:	103ee83a 	callr	r2
   42740:	10004d1e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42744:	84000044 	addi	r16,r16,1
   42748:	0580070e 	bge	zero,r22,42768 <___vfprintf_internal_r+0x318>
   4274c:	b00f883a 	mov	r7,r22
   42750:	01800c04 	movi	r6,48
   42754:	e00b883a 	mov	r5,fp
   42758:	9809883a 	mov	r4,r19
   4275c:	00423e40 	call	423e4 <print_repeat>
   42760:	1000451e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42764:	85a1883a 	add	r16,r16,r22
   42768:	d8c00a17 	ldw	r3,40(sp)
   4276c:	a013883a 	mov	r9,r20
   42770:	1d2dc83a 	sub	r22,r3,r20
   42774:	00002206 	br	42800 <___vfprintf_internal_r+0x3b0>
   42778:	0580090e 	bge	zero,r22,427a0 <___vfprintf_internal_r+0x350>
   4277c:	b00f883a 	mov	r7,r22
   42780:	01800804 	movi	r6,32
   42784:	e00b883a 	mov	r5,fp
   42788:	9809883a 	mov	r4,r19
   4278c:	da801015 	stw	r10,64(sp)
   42790:	00423e40 	call	423e4 <print_repeat>
   42794:	da801017 	ldw	r10,64(sp)
   42798:	1000371e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   4279c:	85a1883a 	add	r16,r16,r22
   427a0:	503ff126 	beq	r10,zero,42768 <__alt_data_end+0xfffda768>
   427a4:	00800b44 	movi	r2,45
   427a8:	d8800805 	stb	r2,32(sp)
   427ac:	e0800117 	ldw	r2,4(fp)
   427b0:	01c00044 	movi	r7,1
   427b4:	d9800804 	addi	r6,sp,32
   427b8:	e00b883a 	mov	r5,fp
   427bc:	9809883a 	mov	r4,r19
   427c0:	103ee83a 	callr	r2
   427c4:	10002c1e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   427c8:	84000044 	addi	r16,r16,1
   427cc:	003fe606 	br	42768 <__alt_data_end+0xfffda768>
   427d0:	4a7fffc4 	addi	r9,r9,-1
   427d4:	48800003 	ldbu	r2,0(r9)
   427d8:	01c00044 	movi	r7,1
   427dc:	d9800804 	addi	r6,sp,32
   427e0:	d8800805 	stb	r2,32(sp)
   427e4:	e0800117 	ldw	r2,4(fp)
   427e8:	e00b883a 	mov	r5,fp
   427ec:	da401015 	stw	r9,64(sp)
   427f0:	9809883a 	mov	r4,r19
   427f4:	103ee83a 	callr	r2
   427f8:	da401017 	ldw	r9,64(sp)
   427fc:	10001e1e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42800:	8245c83a 	sub	r2,r16,r9
   42804:	4d89883a 	add	r4,r9,r22
   42808:	a085883a 	add	r2,r20,r2
   4280c:	013ff016 	blt	zero,r4,427d0 <__alt_data_end+0xfffda7d0>
   42810:	1021883a 	mov	r16,r2
   42814:	dd800d17 	ldw	r22,52(sp)
   42818:	00004406 	br	4292c <___vfprintf_internal_r+0x4dc>
   4281c:	00800044 	movi	r2,1
   42820:	1440080e 	bge	r2,r17,42844 <___vfprintf_internal_r+0x3f4>
   42824:	8d3fffc4 	addi	r20,r17,-1
   42828:	a00f883a 	mov	r7,r20
   4282c:	01800804 	movi	r6,32
   42830:	e00b883a 	mov	r5,fp
   42834:	9809883a 	mov	r4,r19
   42838:	00423e40 	call	423e4 <print_repeat>
   4283c:	10000e1e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   42840:	8521883a 	add	r16,r16,r20
   42844:	b0800017 	ldw	r2,0(r22)
   42848:	01c00044 	movi	r7,1
   4284c:	d80d883a 	mov	r6,sp
   42850:	d8800005 	stb	r2,0(sp)
   42854:	e0800117 	ldw	r2,4(fp)
   42858:	e00b883a 	mov	r5,fp
   4285c:	9809883a 	mov	r4,r19
   42860:	b5000104 	addi	r20,r22,4
   42864:	103ee83a 	callr	r2
   42868:	1000031e 	bne	r2,zero,42878 <___vfprintf_internal_r+0x428>
   4286c:	84000044 	addi	r16,r16,1
   42870:	a02d883a 	mov	r22,r20
   42874:	00002d06 	br	4292c <___vfprintf_internal_r+0x4dc>
   42878:	00bfffc4 	movi	r2,-1
   4287c:	00003106 	br	42944 <___vfprintf_internal_r+0x4f4>
   42880:	b5000017 	ldw	r20,0(r22)
   42884:	b0c00104 	addi	r3,r22,4
   42888:	d8c00a15 	stw	r3,40(sp)
   4288c:	a009883a 	mov	r4,r20
   42890:	00423c80 	call	423c8 <strlen>
   42894:	8893c83a 	sub	r9,r17,r2
   42898:	102d883a 	mov	r22,r2
   4289c:	0240090e 	bge	zero,r9,428c4 <___vfprintf_internal_r+0x474>
   428a0:	480f883a 	mov	r7,r9
   428a4:	01800804 	movi	r6,32
   428a8:	e00b883a 	mov	r5,fp
   428ac:	9809883a 	mov	r4,r19
   428b0:	da401015 	stw	r9,64(sp)
   428b4:	00423e40 	call	423e4 <print_repeat>
   428b8:	da401017 	ldw	r9,64(sp)
   428bc:	103fee1e 	bne	r2,zero,42878 <__alt_data_end+0xfffda878>
   428c0:	8261883a 	add	r16,r16,r9
   428c4:	e0800117 	ldw	r2,4(fp)
   428c8:	b00f883a 	mov	r7,r22
   428cc:	a00d883a 	mov	r6,r20
   428d0:	e00b883a 	mov	r5,fp
   428d4:	9809883a 	mov	r4,r19
   428d8:	103ee83a 	callr	r2
   428dc:	103fe61e 	bne	r2,zero,42878 <__alt_data_end+0xfffda878>
   428e0:	85a1883a 	add	r16,r16,r22
   428e4:	dd800a17 	ldw	r22,40(sp)
   428e8:	00001006 	br	4292c <___vfprintf_internal_r+0x4dc>
   428ec:	05c00044 	movi	r23,1
   428f0:	04bfffc4 	movi	r18,-1
   428f4:	d8000e15 	stw	zero,56(sp)
   428f8:	05400284 	movi	r21,10
   428fc:	9023883a 	mov	r17,r18
   42900:	d8000c15 	stw	zero,48(sp)
   42904:	d8000b15 	stw	zero,44(sp)
   42908:	b829883a 	mov	r20,r23
   4290c:	00000806 	br	42930 <___vfprintf_internal_r+0x4e0>
   42910:	dd000b15 	stw	r20,44(sp)
   42914:	05000084 	movi	r20,2
   42918:	00000506 	br	42930 <___vfprintf_internal_r+0x4e0>
   4291c:	00c00044 	movi	r3,1
   42920:	d8c00c15 	stw	r3,48(sp)
   42924:	050000c4 	movi	r20,3
   42928:	00000106 	br	42930 <___vfprintf_internal_r+0x4e0>
   4292c:	0029883a 	mov	r20,zero
   42930:	d8c00f17 	ldw	r3,60(sp)
   42934:	18c00044 	addi	r3,r3,1
   42938:	d8c00f15 	stw	r3,60(sp)
   4293c:	003ede06 	br	424b8 <__alt_data_end+0xfffda4b8>
   42940:	8005883a 	mov	r2,r16
   42944:	dfc01a17 	ldw	ra,104(sp)
   42948:	df001917 	ldw	fp,100(sp)
   4294c:	ddc01817 	ldw	r23,96(sp)
   42950:	dd801717 	ldw	r22,92(sp)
   42954:	dd401617 	ldw	r21,88(sp)
   42958:	dd001517 	ldw	r20,84(sp)
   4295c:	dcc01417 	ldw	r19,80(sp)
   42960:	dc801317 	ldw	r18,76(sp)
   42964:	dc401217 	ldw	r17,72(sp)
   42968:	dc001117 	ldw	r16,68(sp)
   4296c:	dec01b04 	addi	sp,sp,108
   42970:	f800283a 	ret

00042974 <__vfprintf_internal>:
   42974:	00800134 	movhi	r2,4
   42978:	10914204 	addi	r2,r2,17672
   4297c:	300f883a 	mov	r7,r6
   42980:	280d883a 	mov	r6,r5
   42984:	200b883a 	mov	r5,r4
   42988:	11000017 	ldw	r4,0(r2)
   4298c:	00424501 	jmpi	42450 <___vfprintf_internal_r>

00042990 <__sfvwrite_small_dev>:
   42990:	2880000b 	ldhu	r2,0(r5)
   42994:	1080020c 	andi	r2,r2,8
   42998:	10002126 	beq	r2,zero,42a20 <__sfvwrite_small_dev+0x90>
   4299c:	2880008f 	ldh	r2,2(r5)
   429a0:	defffa04 	addi	sp,sp,-24
   429a4:	dc000015 	stw	r16,0(sp)
   429a8:	dfc00515 	stw	ra,20(sp)
   429ac:	dd000415 	stw	r20,16(sp)
   429b0:	dcc00315 	stw	r19,12(sp)
   429b4:	dc800215 	stw	r18,8(sp)
   429b8:	dc400115 	stw	r17,4(sp)
   429bc:	2821883a 	mov	r16,r5
   429c0:	10001216 	blt	r2,zero,42a0c <__sfvwrite_small_dev+0x7c>
   429c4:	2027883a 	mov	r19,r4
   429c8:	3025883a 	mov	r18,r6
   429cc:	3823883a 	mov	r17,r7
   429d0:	05010004 	movi	r20,1024
   429d4:	04400b0e 	bge	zero,r17,42a04 <__sfvwrite_small_dev+0x74>
   429d8:	880f883a 	mov	r7,r17
   429dc:	a440010e 	bge	r20,r17,429e4 <__sfvwrite_small_dev+0x54>
   429e0:	01c10004 	movi	r7,1024
   429e4:	8140008f 	ldh	r5,2(r16)
   429e8:	900d883a 	mov	r6,r18
   429ec:	9809883a 	mov	r4,r19
   429f0:	0042a480 	call	42a48 <_write_r>
   429f4:	0080050e 	bge	zero,r2,42a0c <__sfvwrite_small_dev+0x7c>
   429f8:	88a3c83a 	sub	r17,r17,r2
   429fc:	90a5883a 	add	r18,r18,r2
   42a00:	003ff406 	br	429d4 <__alt_data_end+0xfffda9d4>
   42a04:	0005883a 	mov	r2,zero
   42a08:	00000706 	br	42a28 <__sfvwrite_small_dev+0x98>
   42a0c:	8080000b 	ldhu	r2,0(r16)
   42a10:	10801014 	ori	r2,r2,64
   42a14:	8080000d 	sth	r2,0(r16)
   42a18:	00bfffc4 	movi	r2,-1
   42a1c:	00000206 	br	42a28 <__sfvwrite_small_dev+0x98>
   42a20:	00bfffc4 	movi	r2,-1
   42a24:	f800283a 	ret
   42a28:	dfc00517 	ldw	ra,20(sp)
   42a2c:	dd000417 	ldw	r20,16(sp)
   42a30:	dcc00317 	ldw	r19,12(sp)
   42a34:	dc800217 	ldw	r18,8(sp)
   42a38:	dc400117 	ldw	r17,4(sp)
   42a3c:	dc000017 	ldw	r16,0(sp)
   42a40:	dec00604 	addi	sp,sp,24
   42a44:	f800283a 	ret

00042a48 <_write_r>:
   42a48:	defffd04 	addi	sp,sp,-12
   42a4c:	dc000015 	stw	r16,0(sp)
   42a50:	04000134 	movhi	r16,4
   42a54:	dc400115 	stw	r17,4(sp)
   42a58:	84120804 	addi	r16,r16,18464
   42a5c:	2023883a 	mov	r17,r4
   42a60:	2809883a 	mov	r4,r5
   42a64:	300b883a 	mov	r5,r6
   42a68:	380d883a 	mov	r6,r7
   42a6c:	dfc00215 	stw	ra,8(sp)
   42a70:	80000015 	stw	zero,0(r16)
   42a74:	0042ed40 	call	42ed4 <write>
   42a78:	00ffffc4 	movi	r3,-1
   42a7c:	10c0031e 	bne	r2,r3,42a8c <_write_r+0x44>
   42a80:	80c00017 	ldw	r3,0(r16)
   42a84:	18000126 	beq	r3,zero,42a8c <_write_r+0x44>
   42a88:	88c00015 	stw	r3,0(r17)
   42a8c:	dfc00217 	ldw	ra,8(sp)
   42a90:	dc400117 	ldw	r17,4(sp)
   42a94:	dc000017 	ldw	r16,0(sp)
   42a98:	dec00304 	addi	sp,sp,12
   42a9c:	f800283a 	ret

00042aa0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42aa0:	defff904 	addi	sp,sp,-28
   42aa4:	dfc00615 	stw	ra,24(sp)
   42aa8:	df000515 	stw	fp,20(sp)
   42aac:	df000504 	addi	fp,sp,20
   42ab0:	e13ffc15 	stw	r4,-16(fp)
   42ab4:	e17ffd15 	stw	r5,-12(fp)
   42ab8:	e1bffe15 	stw	r6,-8(fp)
   42abc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   42ac0:	e0800217 	ldw	r2,8(fp)
   42ac4:	d8800015 	stw	r2,0(sp)
   42ac8:	e1ffff17 	ldw	r7,-4(fp)
   42acc:	e1bffe17 	ldw	r6,-8(fp)
   42ad0:	e17ffd17 	ldw	r5,-12(fp)
   42ad4:	e13ffc17 	ldw	r4,-16(fp)
   42ad8:	0042c500 	call	42c50 <alt_iic_isr_register>
}  
   42adc:	e037883a 	mov	sp,fp
   42ae0:	dfc00117 	ldw	ra,4(sp)
   42ae4:	df000017 	ldw	fp,0(sp)
   42ae8:	dec00204 	addi	sp,sp,8
   42aec:	f800283a 	ret

00042af0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   42af0:	defff904 	addi	sp,sp,-28
   42af4:	df000615 	stw	fp,24(sp)
   42af8:	df000604 	addi	fp,sp,24
   42afc:	e13ffe15 	stw	r4,-8(fp)
   42b00:	e17fff15 	stw	r5,-4(fp)
   42b04:	e0bfff17 	ldw	r2,-4(fp)
   42b08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42b0c:	0005303a 	rdctl	r2,status
   42b10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42b14:	e0fffb17 	ldw	r3,-20(fp)
   42b18:	00bfff84 	movi	r2,-2
   42b1c:	1884703a 	and	r2,r3,r2
   42b20:	1001703a 	wrctl	status,r2
  
  return context;
   42b24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42b28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   42b2c:	00c00044 	movi	r3,1
   42b30:	e0bffa17 	ldw	r2,-24(fp)
   42b34:	1884983a 	sll	r2,r3,r2
   42b38:	1007883a 	mov	r3,r2
   42b3c:	d0a0cb17 	ldw	r2,-31956(gp)
   42b40:	1884b03a 	or	r2,r3,r2
   42b44:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42b48:	d0a0cb17 	ldw	r2,-31956(gp)
   42b4c:	100170fa 	wrctl	ienable,r2
   42b50:	e0bffc17 	ldw	r2,-16(fp)
   42b54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42b58:	e0bffd17 	ldw	r2,-12(fp)
   42b5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42b60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   42b64:	0001883a 	nop
}
   42b68:	e037883a 	mov	sp,fp
   42b6c:	df000017 	ldw	fp,0(sp)
   42b70:	dec00104 	addi	sp,sp,4
   42b74:	f800283a 	ret

00042b78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   42b78:	defff904 	addi	sp,sp,-28
   42b7c:	df000615 	stw	fp,24(sp)
   42b80:	df000604 	addi	fp,sp,24
   42b84:	e13ffe15 	stw	r4,-8(fp)
   42b88:	e17fff15 	stw	r5,-4(fp)
   42b8c:	e0bfff17 	ldw	r2,-4(fp)
   42b90:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42b94:	0005303a 	rdctl	r2,status
   42b98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42b9c:	e0fffb17 	ldw	r3,-20(fp)
   42ba0:	00bfff84 	movi	r2,-2
   42ba4:	1884703a 	and	r2,r3,r2
   42ba8:	1001703a 	wrctl	status,r2
  
  return context;
   42bac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42bb0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   42bb4:	00c00044 	movi	r3,1
   42bb8:	e0bffa17 	ldw	r2,-24(fp)
   42bbc:	1884983a 	sll	r2,r3,r2
   42bc0:	0084303a 	nor	r2,zero,r2
   42bc4:	1007883a 	mov	r3,r2
   42bc8:	d0a0cb17 	ldw	r2,-31956(gp)
   42bcc:	1884703a 	and	r2,r3,r2
   42bd0:	d0a0cb15 	stw	r2,-31956(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   42bd4:	d0a0cb17 	ldw	r2,-31956(gp)
   42bd8:	100170fa 	wrctl	ienable,r2
   42bdc:	e0bffc17 	ldw	r2,-16(fp)
   42be0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42be4:	e0bffd17 	ldw	r2,-12(fp)
   42be8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42bec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   42bf0:	0001883a 	nop
}
   42bf4:	e037883a 	mov	sp,fp
   42bf8:	df000017 	ldw	fp,0(sp)
   42bfc:	dec00104 	addi	sp,sp,4
   42c00:	f800283a 	ret

00042c04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   42c04:	defffc04 	addi	sp,sp,-16
   42c08:	df000315 	stw	fp,12(sp)
   42c0c:	df000304 	addi	fp,sp,12
   42c10:	e13ffe15 	stw	r4,-8(fp)
   42c14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   42c18:	000530fa 	rdctl	r2,ienable
   42c1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   42c20:	00c00044 	movi	r3,1
   42c24:	e0bfff17 	ldw	r2,-4(fp)
   42c28:	1884983a 	sll	r2,r3,r2
   42c2c:	1007883a 	mov	r3,r2
   42c30:	e0bffd17 	ldw	r2,-12(fp)
   42c34:	1884703a 	and	r2,r3,r2
   42c38:	1004c03a 	cmpne	r2,r2,zero
   42c3c:	10803fcc 	andi	r2,r2,255
}
   42c40:	e037883a 	mov	sp,fp
   42c44:	df000017 	ldw	fp,0(sp)
   42c48:	dec00104 	addi	sp,sp,4
   42c4c:	f800283a 	ret

00042c50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42c50:	defff504 	addi	sp,sp,-44
   42c54:	dfc00a15 	stw	ra,40(sp)
   42c58:	df000915 	stw	fp,36(sp)
   42c5c:	df000904 	addi	fp,sp,36
   42c60:	e13ffc15 	stw	r4,-16(fp)
   42c64:	e17ffd15 	stw	r5,-12(fp)
   42c68:	e1bffe15 	stw	r6,-8(fp)
   42c6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   42c70:	00bffa84 	movi	r2,-22
   42c74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   42c78:	e0bffd17 	ldw	r2,-12(fp)
   42c7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   42c80:	e0bff817 	ldw	r2,-32(fp)
   42c84:	10800808 	cmpgei	r2,r2,32
   42c88:	1000271e 	bne	r2,zero,42d28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42c8c:	0005303a 	rdctl	r2,status
   42c90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42c94:	e0fffb17 	ldw	r3,-20(fp)
   42c98:	00bfff84 	movi	r2,-2
   42c9c:	1884703a 	and	r2,r3,r2
   42ca0:	1001703a 	wrctl	status,r2
  
  return context;
   42ca4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   42ca8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   42cac:	00800134 	movhi	r2,4
   42cb0:	10920e04 	addi	r2,r2,18488
   42cb4:	e0fff817 	ldw	r3,-32(fp)
   42cb8:	180690fa 	slli	r3,r3,3
   42cbc:	10c5883a 	add	r2,r2,r3
   42cc0:	e0fffe17 	ldw	r3,-8(fp)
   42cc4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   42cc8:	00800134 	movhi	r2,4
   42ccc:	10920e04 	addi	r2,r2,18488
   42cd0:	e0fff817 	ldw	r3,-32(fp)
   42cd4:	180690fa 	slli	r3,r3,3
   42cd8:	10c5883a 	add	r2,r2,r3
   42cdc:	10800104 	addi	r2,r2,4
   42ce0:	e0ffff17 	ldw	r3,-4(fp)
   42ce4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   42ce8:	e0bffe17 	ldw	r2,-8(fp)
   42cec:	10000526 	beq	r2,zero,42d04 <alt_iic_isr_register+0xb4>
   42cf0:	e0bff817 	ldw	r2,-32(fp)
   42cf4:	100b883a 	mov	r5,r2
   42cf8:	e13ffc17 	ldw	r4,-16(fp)
   42cfc:	0042af00 	call	42af0 <alt_ic_irq_enable>
   42d00:	00000406 	br	42d14 <alt_iic_isr_register+0xc4>
   42d04:	e0bff817 	ldw	r2,-32(fp)
   42d08:	100b883a 	mov	r5,r2
   42d0c:	e13ffc17 	ldw	r4,-16(fp)
   42d10:	0042b780 	call	42b78 <alt_ic_irq_disable>
   42d14:	e0bff715 	stw	r2,-36(fp)
   42d18:	e0bffa17 	ldw	r2,-24(fp)
   42d1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42d20:	e0bff917 	ldw	r2,-28(fp)
   42d24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   42d28:	e0bff717 	ldw	r2,-36(fp)
}
   42d2c:	e037883a 	mov	sp,fp
   42d30:	dfc00117 	ldw	ra,4(sp)
   42d34:	df000017 	ldw	fp,0(sp)
   42d38:	dec00204 	addi	sp,sp,8
   42d3c:	f800283a 	ret

00042d40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   42d40:	defffc04 	addi	sp,sp,-16
   42d44:	df000315 	stw	fp,12(sp)
   42d48:	df000304 	addi	fp,sp,12
   42d4c:	e13ffd15 	stw	r4,-12(fp)
   42d50:	e17ffe15 	stw	r5,-8(fp)
   42d54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   42d58:	e0fffe17 	ldw	r3,-8(fp)
   42d5c:	e0bffd17 	ldw	r2,-12(fp)
   42d60:	18800c26 	beq	r3,r2,42d94 <alt_load_section+0x54>
  {
    while( to != end )
   42d64:	00000806 	br	42d88 <alt_load_section+0x48>
    {
      *to++ = *from++;
   42d68:	e0bffe17 	ldw	r2,-8(fp)
   42d6c:	10c00104 	addi	r3,r2,4
   42d70:	e0fffe15 	stw	r3,-8(fp)
   42d74:	e0fffd17 	ldw	r3,-12(fp)
   42d78:	19000104 	addi	r4,r3,4
   42d7c:	e13ffd15 	stw	r4,-12(fp)
   42d80:	18c00017 	ldw	r3,0(r3)
   42d84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   42d88:	e0fffe17 	ldw	r3,-8(fp)
   42d8c:	e0bfff17 	ldw	r2,-4(fp)
   42d90:	18bff51e 	bne	r3,r2,42d68 <__alt_data_end+0xfffdad68>
    {
      *to++ = *from++;
    }
  }
}
   42d94:	0001883a 	nop
   42d98:	e037883a 	mov	sp,fp
   42d9c:	df000017 	ldw	fp,0(sp)
   42da0:	dec00104 	addi	sp,sp,4
   42da4:	f800283a 	ret

00042da8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   42da8:	defffe04 	addi	sp,sp,-8
   42dac:	dfc00115 	stw	ra,4(sp)
   42db0:	df000015 	stw	fp,0(sp)
   42db4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   42db8:	01800134 	movhi	r6,4
   42dbc:	31914a04 	addi	r6,r6,17704
   42dc0:	01400134 	movhi	r5,4
   42dc4:	29509104 	addi	r5,r5,16964
   42dc8:	01000134 	movhi	r4,4
   42dcc:	21114a04 	addi	r4,r4,17704
   42dd0:	0042d400 	call	42d40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   42dd4:	01800134 	movhi	r6,4
   42dd8:	31809104 	addi	r6,r6,580
   42ddc:	01400134 	movhi	r5,4
   42de0:	29400804 	addi	r5,r5,32
   42de4:	01000134 	movhi	r4,4
   42de8:	21000804 	addi	r4,r4,32
   42dec:	0042d400 	call	42d40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   42df0:	01800134 	movhi	r6,4
   42df4:	31909104 	addi	r6,r6,16964
   42df8:	01400134 	movhi	r5,4
   42dfc:	294fad04 	addi	r5,r5,16052
   42e00:	01000134 	movhi	r4,4
   42e04:	210fad04 	addi	r4,r4,16052
   42e08:	0042d400 	call	42d40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   42e0c:	00433bc0 	call	433bc <alt_dcache_flush_all>
  alt_icache_flush_all();
   42e10:	00434e80 	call	434e8 <alt_icache_flush_all>
}
   42e14:	0001883a 	nop
   42e18:	e037883a 	mov	sp,fp
   42e1c:	dfc00117 	ldw	ra,4(sp)
   42e20:	df000017 	ldw	fp,0(sp)
   42e24:	dec00204 	addi	sp,sp,8
   42e28:	f800283a 	ret

00042e2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   42e2c:	defffd04 	addi	sp,sp,-12
   42e30:	dfc00215 	stw	ra,8(sp)
   42e34:	df000115 	stw	fp,4(sp)
   42e38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   42e3c:	0009883a 	mov	r4,zero
   42e40:	00430000 	call	43000 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   42e44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   42e48:	00430380 	call	43038 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   42e4c:	01800134 	movhi	r6,4
   42e50:	31908404 	addi	r6,r6,16912
   42e54:	01400134 	movhi	r5,4
   42e58:	29508404 	addi	r5,r5,16912
   42e5c:	01000134 	movhi	r4,4
   42e60:	21108404 	addi	r4,r4,16912
   42e64:	004367c0 	call	4367c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   42e68:	d0a0cc17 	ldw	r2,-31952(gp)
   42e6c:	d0e0cd17 	ldw	r3,-31948(gp)
   42e70:	d120ce17 	ldw	r4,-31944(gp)
   42e74:	200d883a 	mov	r6,r4
   42e78:	180b883a 	mov	r5,r3
   42e7c:	1009883a 	mov	r4,r2
   42e80:	00408d00 	call	408d0 <main>
   42e84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   42e88:	01000044 	movi	r4,1
   42e8c:	00432ec0 	call	432ec <close>
  exit (result);
   42e90:	e13fff17 	ldw	r4,-4(fp)
   42e94:	0043ca00 	call	43ca0 <exit>

00042e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42e98:	defffe04 	addi	sp,sp,-8
   42e9c:	dfc00115 	stw	ra,4(sp)
   42ea0:	df000015 	stw	fp,0(sp)
   42ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42ea8:	d0a00b17 	ldw	r2,-32724(gp)
   42eac:	10000326 	beq	r2,zero,42ebc <alt_get_errno+0x24>
   42eb0:	d0a00b17 	ldw	r2,-32724(gp)
   42eb4:	103ee83a 	callr	r2
   42eb8:	00000106 	br	42ec0 <alt_get_errno+0x28>
   42ebc:	d0a0ca04 	addi	r2,gp,-31960
}
   42ec0:	e037883a 	mov	sp,fp
   42ec4:	dfc00117 	ldw	ra,4(sp)
   42ec8:	df000017 	ldw	fp,0(sp)
   42ecc:	dec00204 	addi	sp,sp,8
   42ed0:	f800283a 	ret

00042ed4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   42ed4:	defff904 	addi	sp,sp,-28
   42ed8:	dfc00615 	stw	ra,24(sp)
   42edc:	df000515 	stw	fp,20(sp)
   42ee0:	df000504 	addi	fp,sp,20
   42ee4:	e13ffd15 	stw	r4,-12(fp)
   42ee8:	e17ffe15 	stw	r5,-8(fp)
   42eec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42ef0:	e0bffd17 	ldw	r2,-12(fp)
   42ef4:	10000616 	blt	r2,zero,42f10 <write+0x3c>
   42ef8:	e0bffd17 	ldw	r2,-12(fp)
   42efc:	10c00324 	muli	r3,r2,12
   42f00:	00800134 	movhi	r2,4
   42f04:	1090de04 	addi	r2,r2,17272
   42f08:	1885883a 	add	r2,r3,r2
   42f0c:	00000106 	br	42f14 <write+0x40>
   42f10:	0005883a 	mov	r2,zero
   42f14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   42f18:	e0bffb17 	ldw	r2,-20(fp)
   42f1c:	10002126 	beq	r2,zero,42fa4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   42f20:	e0bffb17 	ldw	r2,-20(fp)
   42f24:	10800217 	ldw	r2,8(r2)
   42f28:	108000cc 	andi	r2,r2,3
   42f2c:	10001826 	beq	r2,zero,42f90 <write+0xbc>
   42f30:	e0bffb17 	ldw	r2,-20(fp)
   42f34:	10800017 	ldw	r2,0(r2)
   42f38:	10800617 	ldw	r2,24(r2)
   42f3c:	10001426 	beq	r2,zero,42f90 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   42f40:	e0bffb17 	ldw	r2,-20(fp)
   42f44:	10800017 	ldw	r2,0(r2)
   42f48:	10800617 	ldw	r2,24(r2)
   42f4c:	e0ffff17 	ldw	r3,-4(fp)
   42f50:	180d883a 	mov	r6,r3
   42f54:	e17ffe17 	ldw	r5,-8(fp)
   42f58:	e13ffb17 	ldw	r4,-20(fp)
   42f5c:	103ee83a 	callr	r2
   42f60:	e0bffc15 	stw	r2,-16(fp)
   42f64:	e0bffc17 	ldw	r2,-16(fp)
   42f68:	1000070e 	bge	r2,zero,42f88 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   42f6c:	0042e980 	call	42e98 <alt_get_errno>
   42f70:	1007883a 	mov	r3,r2
   42f74:	e0bffc17 	ldw	r2,-16(fp)
   42f78:	0085c83a 	sub	r2,zero,r2
   42f7c:	18800015 	stw	r2,0(r3)
        return -1;
   42f80:	00bfffc4 	movi	r2,-1
   42f84:	00000c06 	br	42fb8 <write+0xe4>
      }
      return rval;
   42f88:	e0bffc17 	ldw	r2,-16(fp)
   42f8c:	00000a06 	br	42fb8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   42f90:	0042e980 	call	42e98 <alt_get_errno>
   42f94:	1007883a 	mov	r3,r2
   42f98:	00800344 	movi	r2,13
   42f9c:	18800015 	stw	r2,0(r3)
   42fa0:	00000406 	br	42fb4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   42fa4:	0042e980 	call	42e98 <alt_get_errno>
   42fa8:	1007883a 	mov	r3,r2
   42fac:	00801444 	movi	r2,81
   42fb0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   42fb4:	00bfffc4 	movi	r2,-1
}
   42fb8:	e037883a 	mov	sp,fp
   42fbc:	dfc00117 	ldw	ra,4(sp)
   42fc0:	df000017 	ldw	fp,0(sp)
   42fc4:	dec00204 	addi	sp,sp,8
   42fc8:	f800283a 	ret

00042fcc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   42fcc:	defffd04 	addi	sp,sp,-12
   42fd0:	dfc00215 	stw	ra,8(sp)
   42fd4:	df000115 	stw	fp,4(sp)
   42fd8:	df000104 	addi	fp,sp,4
   42fdc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   42fe0:	d1600804 	addi	r5,gp,-32736
   42fe4:	e13fff17 	ldw	r4,-4(fp)
   42fe8:	00434440 	call	43444 <alt_dev_llist_insert>
}
   42fec:	e037883a 	mov	sp,fp
   42ff0:	dfc00117 	ldw	ra,4(sp)
   42ff4:	df000017 	ldw	fp,0(sp)
   42ff8:	dec00204 	addi	sp,sp,8
   42ffc:	f800283a 	ret

00043000 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43000:	defffd04 	addi	sp,sp,-12
   43004:	dfc00215 	stw	ra,8(sp)
   43008:	df000115 	stw	fp,4(sp)
   4300c:	df000104 	addi	fp,sp,4
   43010:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   43014:	00439b00 	call	439b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43018:	00800044 	movi	r2,1
   4301c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43020:	0001883a 	nop
   43024:	e037883a 	mov	sp,fp
   43028:	dfc00117 	ldw	ra,4(sp)
   4302c:	df000017 	ldw	fp,0(sp)
   43030:	dec00204 	addi	sp,sp,8
   43034:	f800283a 	ret

00043038 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43038:	defffe04 	addi	sp,sp,-8
   4303c:	dfc00115 	stw	ra,4(sp)
   43040:	df000015 	stw	fp,0(sp)
   43044:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_PWM, timer_pwm);
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43048:	01000134 	movhi	r4,4
   4304c:	2110c904 	addi	r4,r4,17188
   43050:	0042fcc0 	call	42fcc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   43054:	0001883a 	nop
}
   43058:	0001883a 	nop
   4305c:	e037883a 	mov	sp,fp
   43060:	dfc00117 	ldw	ra,4(sp)
   43064:	df000017 	ldw	fp,0(sp)
   43068:	dec00204 	addi	sp,sp,8
   4306c:	f800283a 	ret

00043070 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43070:	defffa04 	addi	sp,sp,-24
   43074:	dfc00515 	stw	ra,20(sp)
   43078:	df000415 	stw	fp,16(sp)
   4307c:	df000404 	addi	fp,sp,16
   43080:	e13ffd15 	stw	r4,-12(fp)
   43084:	e17ffe15 	stw	r5,-8(fp)
   43088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4308c:	e0bffd17 	ldw	r2,-12(fp)
   43090:	10800017 	ldw	r2,0(r2)
   43094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   43098:	e0bffc17 	ldw	r2,-16(fp)
   4309c:	10c00a04 	addi	r3,r2,40
   430a0:	e0bffd17 	ldw	r2,-12(fp)
   430a4:	10800217 	ldw	r2,8(r2)
   430a8:	100f883a 	mov	r7,r2
   430ac:	e1bfff17 	ldw	r6,-4(fp)
   430b0:	e17ffe17 	ldw	r5,-8(fp)
   430b4:	1809883a 	mov	r4,r3
   430b8:	00431300 	call	43130 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   430bc:	e037883a 	mov	sp,fp
   430c0:	dfc00117 	ldw	ra,4(sp)
   430c4:	df000017 	ldw	fp,0(sp)
   430c8:	dec00204 	addi	sp,sp,8
   430cc:	f800283a 	ret

000430d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   430d0:	defffa04 	addi	sp,sp,-24
   430d4:	dfc00515 	stw	ra,20(sp)
   430d8:	df000415 	stw	fp,16(sp)
   430dc:	df000404 	addi	fp,sp,16
   430e0:	e13ffd15 	stw	r4,-12(fp)
   430e4:	e17ffe15 	stw	r5,-8(fp)
   430e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   430ec:	e0bffd17 	ldw	r2,-12(fp)
   430f0:	10800017 	ldw	r2,0(r2)
   430f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   430f8:	e0bffc17 	ldw	r2,-16(fp)
   430fc:	10c00a04 	addi	r3,r2,40
   43100:	e0bffd17 	ldw	r2,-12(fp)
   43104:	10800217 	ldw	r2,8(r2)
   43108:	100f883a 	mov	r7,r2
   4310c:	e1bfff17 	ldw	r6,-4(fp)
   43110:	e17ffe17 	ldw	r5,-8(fp)
   43114:	1809883a 	mov	r4,r3
   43118:	004321c0 	call	4321c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4311c:	e037883a 	mov	sp,fp
   43120:	dfc00117 	ldw	ra,4(sp)
   43124:	df000017 	ldw	fp,0(sp)
   43128:	dec00204 	addi	sp,sp,8
   4312c:	f800283a 	ret

00043130 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   43130:	defff704 	addi	sp,sp,-36
   43134:	df000815 	stw	fp,32(sp)
   43138:	df000804 	addi	fp,sp,32
   4313c:	e13ffc15 	stw	r4,-16(fp)
   43140:	e17ffd15 	stw	r5,-12(fp)
   43144:	e1bffe15 	stw	r6,-8(fp)
   43148:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   4314c:	e0bffc17 	ldw	r2,-16(fp)
   43150:	10800017 	ldw	r2,0(r2)
   43154:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   43158:	e0bffd17 	ldw	r2,-12(fp)
   4315c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   43160:	e0bffe17 	ldw	r2,-8(fp)
   43164:	e0fffd17 	ldw	r3,-12(fp)
   43168:	1885883a 	add	r2,r3,r2
   4316c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   43170:	00001206 	br	431bc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43174:	e0bff917 	ldw	r2,-28(fp)
   43178:	10800037 	ldwio	r2,0(r2)
   4317c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   43180:	e0bffb17 	ldw	r2,-20(fp)
   43184:	10a0000c 	andi	r2,r2,32768
   43188:	10000626 	beq	r2,zero,431a4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4318c:	e0bff817 	ldw	r2,-32(fp)
   43190:	10c00044 	addi	r3,r2,1
   43194:	e0fff815 	stw	r3,-32(fp)
   43198:	e0fffb17 	ldw	r3,-20(fp)
   4319c:	10c00005 	stb	r3,0(r2)
   431a0:	00000606 	br	431bc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   431a4:	e0fff817 	ldw	r3,-32(fp)
   431a8:	e0bffd17 	ldw	r2,-12(fp)
   431ac:	1880071e 	bne	r3,r2,431cc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   431b0:	e0bfff17 	ldw	r2,-4(fp)
   431b4:	1090000c 	andi	r2,r2,16384
   431b8:	1000061e 	bne	r2,zero,431d4 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   431bc:	e0fff817 	ldw	r3,-32(fp)
   431c0:	e0bffa17 	ldw	r2,-24(fp)
   431c4:	18bfeb36 	bltu	r3,r2,43174 <__alt_data_end+0xfffdb174>
   431c8:	00000306 	br	431d8 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   431cc:	0001883a 	nop
   431d0:	00000106 	br	431d8 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   431d4:	0001883a 	nop
    
  }

  if (ptr != buffer)
   431d8:	e0fff817 	ldw	r3,-32(fp)
   431dc:	e0bffd17 	ldw	r2,-12(fp)
   431e0:	18800426 	beq	r3,r2,431f4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   431e4:	e0fff817 	ldw	r3,-32(fp)
   431e8:	e0bffd17 	ldw	r2,-12(fp)
   431ec:	1885c83a 	sub	r2,r3,r2
   431f0:	00000606 	br	4320c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   431f4:	e0bfff17 	ldw	r2,-4(fp)
   431f8:	1090000c 	andi	r2,r2,16384
   431fc:	10000226 	beq	r2,zero,43208 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   43200:	00bffd44 	movi	r2,-11
   43204:	00000106 	br	4320c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   43208:	00bffec4 	movi	r2,-5
}
   4320c:	e037883a 	mov	sp,fp
   43210:	df000017 	ldw	fp,0(sp)
   43214:	dec00104 	addi	sp,sp,4
   43218:	f800283a 	ret

0004321c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4321c:	defff904 	addi	sp,sp,-28
   43220:	df000615 	stw	fp,24(sp)
   43224:	df000604 	addi	fp,sp,24
   43228:	e13ffc15 	stw	r4,-16(fp)
   4322c:	e17ffd15 	stw	r5,-12(fp)
   43230:	e1bffe15 	stw	r6,-8(fp)
   43234:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   43238:	e0bffc17 	ldw	r2,-16(fp)
   4323c:	10800017 	ldw	r2,0(r2)
   43240:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   43244:	e0bffe17 	ldw	r2,-8(fp)
   43248:	e0fffd17 	ldw	r3,-12(fp)
   4324c:	1885883a 	add	r2,r3,r2
   43250:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   43254:	00000e06 	br	43290 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   43258:	e0bffa17 	ldw	r2,-24(fp)
   4325c:	10800104 	addi	r2,r2,4
   43260:	10800037 	ldwio	r2,0(r2)
   43264:	10bfffec 	andhi	r2,r2,65535
   43268:	10000926 	beq	r2,zero,43290 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   4326c:	e0fffa17 	ldw	r3,-24(fp)
   43270:	e0bffd17 	ldw	r2,-12(fp)
   43274:	11000044 	addi	r4,r2,1
   43278:	e13ffd15 	stw	r4,-12(fp)
   4327c:	10800003 	ldbu	r2,0(r2)
   43280:	10803fcc 	andi	r2,r2,255
   43284:	1080201c 	xori	r2,r2,128
   43288:	10bfe004 	addi	r2,r2,-128
   4328c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   43290:	e0fffd17 	ldw	r3,-12(fp)
   43294:	e0bffb17 	ldw	r2,-20(fp)
   43298:	18bfef36 	bltu	r3,r2,43258 <__alt_data_end+0xfffdb258>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   4329c:	e0bffe17 	ldw	r2,-8(fp)
}
   432a0:	e037883a 	mov	sp,fp
   432a4:	df000017 	ldw	fp,0(sp)
   432a8:	dec00104 	addi	sp,sp,4
   432ac:	f800283a 	ret

000432b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   432b0:	defffe04 	addi	sp,sp,-8
   432b4:	dfc00115 	stw	ra,4(sp)
   432b8:	df000015 	stw	fp,0(sp)
   432bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   432c0:	d0a00b17 	ldw	r2,-32724(gp)
   432c4:	10000326 	beq	r2,zero,432d4 <alt_get_errno+0x24>
   432c8:	d0a00b17 	ldw	r2,-32724(gp)
   432cc:	103ee83a 	callr	r2
   432d0:	00000106 	br	432d8 <alt_get_errno+0x28>
   432d4:	d0a0ca04 	addi	r2,gp,-31960
}
   432d8:	e037883a 	mov	sp,fp
   432dc:	dfc00117 	ldw	ra,4(sp)
   432e0:	df000017 	ldw	fp,0(sp)
   432e4:	dec00204 	addi	sp,sp,8
   432e8:	f800283a 	ret

000432ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   432ec:	defffb04 	addi	sp,sp,-20
   432f0:	dfc00415 	stw	ra,16(sp)
   432f4:	df000315 	stw	fp,12(sp)
   432f8:	df000304 	addi	fp,sp,12
   432fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   43300:	e0bfff17 	ldw	r2,-4(fp)
   43304:	10000616 	blt	r2,zero,43320 <close+0x34>
   43308:	e0bfff17 	ldw	r2,-4(fp)
   4330c:	10c00324 	muli	r3,r2,12
   43310:	00800134 	movhi	r2,4
   43314:	1090de04 	addi	r2,r2,17272
   43318:	1885883a 	add	r2,r3,r2
   4331c:	00000106 	br	43324 <close+0x38>
   43320:	0005883a 	mov	r2,zero
   43324:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   43328:	e0bffd17 	ldw	r2,-12(fp)
   4332c:	10001926 	beq	r2,zero,43394 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   43330:	e0bffd17 	ldw	r2,-12(fp)
   43334:	10800017 	ldw	r2,0(r2)
   43338:	10800417 	ldw	r2,16(r2)
   4333c:	10000626 	beq	r2,zero,43358 <close+0x6c>
   43340:	e0bffd17 	ldw	r2,-12(fp)
   43344:	10800017 	ldw	r2,0(r2)
   43348:	10800417 	ldw	r2,16(r2)
   4334c:	e13ffd17 	ldw	r4,-12(fp)
   43350:	103ee83a 	callr	r2
   43354:	00000106 	br	4335c <close+0x70>
   43358:	0005883a 	mov	r2,zero
   4335c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43360:	e13fff17 	ldw	r4,-4(fp)
   43364:	004394c0 	call	4394c <alt_release_fd>
    if (rval < 0)
   43368:	e0bffe17 	ldw	r2,-8(fp)
   4336c:	1000070e 	bge	r2,zero,4338c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43370:	00432b00 	call	432b0 <alt_get_errno>
   43374:	1007883a 	mov	r3,r2
   43378:	e0bffe17 	ldw	r2,-8(fp)
   4337c:	0085c83a 	sub	r2,zero,r2
   43380:	18800015 	stw	r2,0(r3)
      return -1;
   43384:	00bfffc4 	movi	r2,-1
   43388:	00000706 	br	433a8 <close+0xbc>
    }
    return 0;
   4338c:	0005883a 	mov	r2,zero
   43390:	00000506 	br	433a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43394:	00432b00 	call	432b0 <alt_get_errno>
   43398:	1007883a 	mov	r3,r2
   4339c:	00801444 	movi	r2,81
   433a0:	18800015 	stw	r2,0(r3)
    return -1;
   433a4:	00bfffc4 	movi	r2,-1
  }
}
   433a8:	e037883a 	mov	sp,fp
   433ac:	dfc00117 	ldw	ra,4(sp)
   433b0:	df000017 	ldw	fp,0(sp)
   433b4:	dec00204 	addi	sp,sp,8
   433b8:	f800283a 	ret

000433bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   433bc:	deffff04 	addi	sp,sp,-4
   433c0:	df000015 	stw	fp,0(sp)
   433c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   433c8:	0001883a 	nop
   433cc:	e037883a 	mov	sp,fp
   433d0:	df000017 	ldw	fp,0(sp)
   433d4:	dec00104 	addi	sp,sp,4
   433d8:	f800283a 	ret

000433dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   433dc:	defffc04 	addi	sp,sp,-16
   433e0:	df000315 	stw	fp,12(sp)
   433e4:	df000304 	addi	fp,sp,12
   433e8:	e13ffd15 	stw	r4,-12(fp)
   433ec:	e17ffe15 	stw	r5,-8(fp)
   433f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   433f4:	e0bfff17 	ldw	r2,-4(fp)
}
   433f8:	e037883a 	mov	sp,fp
   433fc:	df000017 	ldw	fp,0(sp)
   43400:	dec00104 	addi	sp,sp,4
   43404:	f800283a 	ret

00043408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43408:	defffe04 	addi	sp,sp,-8
   4340c:	dfc00115 	stw	ra,4(sp)
   43410:	df000015 	stw	fp,0(sp)
   43414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43418:	d0a00b17 	ldw	r2,-32724(gp)
   4341c:	10000326 	beq	r2,zero,4342c <alt_get_errno+0x24>
   43420:	d0a00b17 	ldw	r2,-32724(gp)
   43424:	103ee83a 	callr	r2
   43428:	00000106 	br	43430 <alt_get_errno+0x28>
   4342c:	d0a0ca04 	addi	r2,gp,-31960
}
   43430:	e037883a 	mov	sp,fp
   43434:	dfc00117 	ldw	ra,4(sp)
   43438:	df000017 	ldw	fp,0(sp)
   4343c:	dec00204 	addi	sp,sp,8
   43440:	f800283a 	ret

00043444 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   43444:	defffa04 	addi	sp,sp,-24
   43448:	dfc00515 	stw	ra,20(sp)
   4344c:	df000415 	stw	fp,16(sp)
   43450:	df000404 	addi	fp,sp,16
   43454:	e13ffe15 	stw	r4,-8(fp)
   43458:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4345c:	e0bffe17 	ldw	r2,-8(fp)
   43460:	10000326 	beq	r2,zero,43470 <alt_dev_llist_insert+0x2c>
   43464:	e0bffe17 	ldw	r2,-8(fp)
   43468:	10800217 	ldw	r2,8(r2)
   4346c:	1000061e 	bne	r2,zero,43488 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   43470:	00434080 	call	43408 <alt_get_errno>
   43474:	1007883a 	mov	r3,r2
   43478:	00800584 	movi	r2,22
   4347c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   43480:	00bffa84 	movi	r2,-22
   43484:	00001306 	br	434d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   43488:	e0bffe17 	ldw	r2,-8(fp)
   4348c:	e0ffff17 	ldw	r3,-4(fp)
   43490:	e0fffc15 	stw	r3,-16(fp)
   43494:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   43498:	e0bffd17 	ldw	r2,-12(fp)
   4349c:	e0fffc17 	ldw	r3,-16(fp)
   434a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   434a4:	e0bffc17 	ldw	r2,-16(fp)
   434a8:	10c00017 	ldw	r3,0(r2)
   434ac:	e0bffd17 	ldw	r2,-12(fp)
   434b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   434b4:	e0bffc17 	ldw	r2,-16(fp)
   434b8:	10800017 	ldw	r2,0(r2)
   434bc:	e0fffd17 	ldw	r3,-12(fp)
   434c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   434c4:	e0bffc17 	ldw	r2,-16(fp)
   434c8:	e0fffd17 	ldw	r3,-12(fp)
   434cc:	10c00015 	stw	r3,0(r2)

  return 0;  
   434d0:	0005883a 	mov	r2,zero
}
   434d4:	e037883a 	mov	sp,fp
   434d8:	dfc00117 	ldw	ra,4(sp)
   434dc:	df000017 	ldw	fp,0(sp)
   434e0:	dec00204 	addi	sp,sp,8
   434e4:	f800283a 	ret

000434e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   434e8:	defffe04 	addi	sp,sp,-8
   434ec:	dfc00115 	stw	ra,4(sp)
   434f0:	df000015 	stw	fp,0(sp)
   434f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   434f8:	01420004 	movi	r5,2048
   434fc:	0009883a 	mov	r4,zero
   43500:	0043c100 	call	43c10 <alt_icache_flush>
#endif
}
   43504:	0001883a 	nop
   43508:	e037883a 	mov	sp,fp
   4350c:	dfc00117 	ldw	ra,4(sp)
   43510:	df000017 	ldw	fp,0(sp)
   43514:	dec00204 	addi	sp,sp,8
   43518:	f800283a 	ret

0004351c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   4351c:	defffe04 	addi	sp,sp,-8
   43520:	df000115 	stw	fp,4(sp)
   43524:	df000104 	addi	fp,sp,4
   43528:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   4352c:	e0bfff17 	ldw	r2,-4(fp)
   43530:	10bffe84 	addi	r2,r2,-6
   43534:	10c00428 	cmpgeui	r3,r2,16
   43538:	18001a1e 	bne	r3,zero,435a4 <alt_exception_cause_generated_bad_addr+0x88>
   4353c:	100690ba 	slli	r3,r2,2
   43540:	00800134 	movhi	r2,4
   43544:	108d5504 	addi	r2,r2,13652
   43548:	1885883a 	add	r2,r3,r2
   4354c:	10800017 	ldw	r2,0(r2)
   43550:	1000683a 	jmp	r2
   43554:	00043594 	movui	zero,4310
   43558:	00043594 	movui	zero,4310
   4355c:	000435a4 	muli	zero,zero,4310
   43560:	000435a4 	muli	zero,zero,4310
   43564:	000435a4 	muli	zero,zero,4310
   43568:	00043594 	movui	zero,4310
   4356c:	0004359c 	xori	zero,zero,4310
   43570:	000435a4 	muli	zero,zero,4310
   43574:	00043594 	movui	zero,4310
   43578:	00043594 	movui	zero,4310
   4357c:	000435a4 	muli	zero,zero,4310
   43580:	00043594 	movui	zero,4310
   43584:	0004359c 	xori	zero,zero,4310
   43588:	000435a4 	muli	zero,zero,4310
   4358c:	000435a4 	muli	zero,zero,4310
   43590:	00043594 	movui	zero,4310
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   43594:	00800044 	movi	r2,1
   43598:	00000306 	br	435a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4359c:	0005883a 	mov	r2,zero
   435a0:	00000106 	br	435a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   435a4:	0005883a 	mov	r2,zero
  }
}
   435a8:	e037883a 	mov	sp,fp
   435ac:	df000017 	ldw	fp,0(sp)
   435b0:	dec00104 	addi	sp,sp,4
   435b4:	f800283a 	ret

000435b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   435b8:	defff904 	addi	sp,sp,-28
   435bc:	dfc00615 	stw	ra,24(sp)
   435c0:	df000515 	stw	fp,20(sp)
   435c4:	df000504 	addi	fp,sp,20
   435c8:	e13ffc15 	stw	r4,-16(fp)
   435cc:	e17ffd15 	stw	r5,-12(fp)
   435d0:	e1bffe15 	stw	r6,-8(fp)
   435d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   435d8:	e1bfff17 	ldw	r6,-4(fp)
   435dc:	e17ffe17 	ldw	r5,-8(fp)
   435e0:	e13ffd17 	ldw	r4,-12(fp)
   435e4:	00437f80 	call	437f8 <open>
   435e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   435ec:	e0bffb17 	ldw	r2,-20(fp)
   435f0:	10001c16 	blt	r2,zero,43664 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   435f4:	00800134 	movhi	r2,4
   435f8:	1090de04 	addi	r2,r2,17272
   435fc:	e0fffb17 	ldw	r3,-20(fp)
   43600:	18c00324 	muli	r3,r3,12
   43604:	10c5883a 	add	r2,r2,r3
   43608:	10c00017 	ldw	r3,0(r2)
   4360c:	e0bffc17 	ldw	r2,-16(fp)
   43610:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   43614:	00800134 	movhi	r2,4
   43618:	1090de04 	addi	r2,r2,17272
   4361c:	e0fffb17 	ldw	r3,-20(fp)
   43620:	18c00324 	muli	r3,r3,12
   43624:	10c5883a 	add	r2,r2,r3
   43628:	10800104 	addi	r2,r2,4
   4362c:	10c00017 	ldw	r3,0(r2)
   43630:	e0bffc17 	ldw	r2,-16(fp)
   43634:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   43638:	00800134 	movhi	r2,4
   4363c:	1090de04 	addi	r2,r2,17272
   43640:	e0fffb17 	ldw	r3,-20(fp)
   43644:	18c00324 	muli	r3,r3,12
   43648:	10c5883a 	add	r2,r2,r3
   4364c:	10800204 	addi	r2,r2,8
   43650:	10c00017 	ldw	r3,0(r2)
   43654:	e0bffc17 	ldw	r2,-16(fp)
   43658:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4365c:	e13ffb17 	ldw	r4,-20(fp)
   43660:	004394c0 	call	4394c <alt_release_fd>
  }
} 
   43664:	0001883a 	nop
   43668:	e037883a 	mov	sp,fp
   4366c:	dfc00117 	ldw	ra,4(sp)
   43670:	df000017 	ldw	fp,0(sp)
   43674:	dec00204 	addi	sp,sp,8
   43678:	f800283a 	ret

0004367c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4367c:	defffb04 	addi	sp,sp,-20
   43680:	dfc00415 	stw	ra,16(sp)
   43684:	df000315 	stw	fp,12(sp)
   43688:	df000304 	addi	fp,sp,12
   4368c:	e13ffd15 	stw	r4,-12(fp)
   43690:	e17ffe15 	stw	r5,-8(fp)
   43694:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   43698:	01c07fc4 	movi	r7,511
   4369c:	01800044 	movi	r6,1
   436a0:	e17ffd17 	ldw	r5,-12(fp)
   436a4:	01000134 	movhi	r4,4
   436a8:	2110e104 	addi	r4,r4,17284
   436ac:	00435b80 	call	435b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   436b0:	01c07fc4 	movi	r7,511
   436b4:	000d883a 	mov	r6,zero
   436b8:	e17ffe17 	ldw	r5,-8(fp)
   436bc:	01000134 	movhi	r4,4
   436c0:	2110de04 	addi	r4,r4,17272
   436c4:	00435b80 	call	435b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   436c8:	01c07fc4 	movi	r7,511
   436cc:	01800044 	movi	r6,1
   436d0:	e17fff17 	ldw	r5,-4(fp)
   436d4:	01000134 	movhi	r4,4
   436d8:	2110e404 	addi	r4,r4,17296
   436dc:	00435b80 	call	435b8 <alt_open_fd>
}  
   436e0:	0001883a 	nop
   436e4:	e037883a 	mov	sp,fp
   436e8:	dfc00117 	ldw	ra,4(sp)
   436ec:	df000017 	ldw	fp,0(sp)
   436f0:	dec00204 	addi	sp,sp,8
   436f4:	f800283a 	ret

000436f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   436f8:	defffe04 	addi	sp,sp,-8
   436fc:	dfc00115 	stw	ra,4(sp)
   43700:	df000015 	stw	fp,0(sp)
   43704:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43708:	d0a00b17 	ldw	r2,-32724(gp)
   4370c:	10000326 	beq	r2,zero,4371c <alt_get_errno+0x24>
   43710:	d0a00b17 	ldw	r2,-32724(gp)
   43714:	103ee83a 	callr	r2
   43718:	00000106 	br	43720 <alt_get_errno+0x28>
   4371c:	d0a0ca04 	addi	r2,gp,-31960
}
   43720:	e037883a 	mov	sp,fp
   43724:	dfc00117 	ldw	ra,4(sp)
   43728:	df000017 	ldw	fp,0(sp)
   4372c:	dec00204 	addi	sp,sp,8
   43730:	f800283a 	ret

00043734 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   43734:	defffd04 	addi	sp,sp,-12
   43738:	df000215 	stw	fp,8(sp)
   4373c:	df000204 	addi	fp,sp,8
   43740:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   43744:	e0bfff17 	ldw	r2,-4(fp)
   43748:	10800217 	ldw	r2,8(r2)
   4374c:	10d00034 	orhi	r3,r2,16384
   43750:	e0bfff17 	ldw	r2,-4(fp)
   43754:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   43758:	e03ffe15 	stw	zero,-8(fp)
   4375c:	00001d06 	br	437d4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   43760:	00800134 	movhi	r2,4
   43764:	1090de04 	addi	r2,r2,17272
   43768:	e0fffe17 	ldw	r3,-8(fp)
   4376c:	18c00324 	muli	r3,r3,12
   43770:	10c5883a 	add	r2,r2,r3
   43774:	10c00017 	ldw	r3,0(r2)
   43778:	e0bfff17 	ldw	r2,-4(fp)
   4377c:	10800017 	ldw	r2,0(r2)
   43780:	1880111e 	bne	r3,r2,437c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   43784:	00800134 	movhi	r2,4
   43788:	1090de04 	addi	r2,r2,17272
   4378c:	e0fffe17 	ldw	r3,-8(fp)
   43790:	18c00324 	muli	r3,r3,12
   43794:	10c5883a 	add	r2,r2,r3
   43798:	10800204 	addi	r2,r2,8
   4379c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   437a0:	1000090e 	bge	r2,zero,437c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   437a4:	e0bffe17 	ldw	r2,-8(fp)
   437a8:	10c00324 	muli	r3,r2,12
   437ac:	00800134 	movhi	r2,4
   437b0:	1090de04 	addi	r2,r2,17272
   437b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   437b8:	e0bfff17 	ldw	r2,-4(fp)
   437bc:	18800226 	beq	r3,r2,437c8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   437c0:	00bffcc4 	movi	r2,-13
   437c4:	00000806 	br	437e8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   437c8:	e0bffe17 	ldw	r2,-8(fp)
   437cc:	10800044 	addi	r2,r2,1
   437d0:	e0bffe15 	stw	r2,-8(fp)
   437d4:	d0a00a17 	ldw	r2,-32728(gp)
   437d8:	1007883a 	mov	r3,r2
   437dc:	e0bffe17 	ldw	r2,-8(fp)
   437e0:	18bfdf2e 	bgeu	r3,r2,43760 <__alt_data_end+0xfffdb760>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   437e4:	0005883a 	mov	r2,zero
}
   437e8:	e037883a 	mov	sp,fp
   437ec:	df000017 	ldw	fp,0(sp)
   437f0:	dec00104 	addi	sp,sp,4
   437f4:	f800283a 	ret

000437f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   437f8:	defff604 	addi	sp,sp,-40
   437fc:	dfc00915 	stw	ra,36(sp)
   43800:	df000815 	stw	fp,32(sp)
   43804:	df000804 	addi	fp,sp,32
   43808:	e13ffd15 	stw	r4,-12(fp)
   4380c:	e17ffe15 	stw	r5,-8(fp)
   43810:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   43814:	00bfffc4 	movi	r2,-1
   43818:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4381c:	00bffb44 	movi	r2,-19
   43820:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   43824:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   43828:	d1600804 	addi	r5,gp,-32736
   4382c:	e13ffd17 	ldw	r4,-12(fp)
   43830:	00439d40 	call	439d4 <alt_find_dev>
   43834:	e0bff815 	stw	r2,-32(fp)
   43838:	e0bff817 	ldw	r2,-32(fp)
   4383c:	1000051e 	bne	r2,zero,43854 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   43840:	e13ffd17 	ldw	r4,-12(fp)
   43844:	0043a640 	call	43a64 <alt_find_file>
   43848:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4384c:	00800044 	movi	r2,1
   43850:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   43854:	e0bff817 	ldw	r2,-32(fp)
   43858:	10002926 	beq	r2,zero,43900 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4385c:	e13ff817 	ldw	r4,-32(fp)
   43860:	0043b6c0 	call	43b6c <alt_get_fd>
   43864:	e0bff915 	stw	r2,-28(fp)
   43868:	e0bff917 	ldw	r2,-28(fp)
   4386c:	1000030e 	bge	r2,zero,4387c <open+0x84>
    {
      status = index;
   43870:	e0bff917 	ldw	r2,-28(fp)
   43874:	e0bffa15 	stw	r2,-24(fp)
   43878:	00002306 	br	43908 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4387c:	e0bff917 	ldw	r2,-28(fp)
   43880:	10c00324 	muli	r3,r2,12
   43884:	00800134 	movhi	r2,4
   43888:	1090de04 	addi	r2,r2,17272
   4388c:	1885883a 	add	r2,r3,r2
   43890:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   43894:	e0fffe17 	ldw	r3,-8(fp)
   43898:	00900034 	movhi	r2,16384
   4389c:	10bfffc4 	addi	r2,r2,-1
   438a0:	1886703a 	and	r3,r3,r2
   438a4:	e0bffc17 	ldw	r2,-16(fp)
   438a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   438ac:	e0bffb17 	ldw	r2,-20(fp)
   438b0:	1000051e 	bne	r2,zero,438c8 <open+0xd0>
   438b4:	e13ffc17 	ldw	r4,-16(fp)
   438b8:	00437340 	call	43734 <alt_file_locked>
   438bc:	e0bffa15 	stw	r2,-24(fp)
   438c0:	e0bffa17 	ldw	r2,-24(fp)
   438c4:	10001016 	blt	r2,zero,43908 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   438c8:	e0bff817 	ldw	r2,-32(fp)
   438cc:	10800317 	ldw	r2,12(r2)
   438d0:	10000826 	beq	r2,zero,438f4 <open+0xfc>
   438d4:	e0bff817 	ldw	r2,-32(fp)
   438d8:	10800317 	ldw	r2,12(r2)
   438dc:	e1ffff17 	ldw	r7,-4(fp)
   438e0:	e1bffe17 	ldw	r6,-8(fp)
   438e4:	e17ffd17 	ldw	r5,-12(fp)
   438e8:	e13ffc17 	ldw	r4,-16(fp)
   438ec:	103ee83a 	callr	r2
   438f0:	00000106 	br	438f8 <open+0x100>
   438f4:	0005883a 	mov	r2,zero
   438f8:	e0bffa15 	stw	r2,-24(fp)
   438fc:	00000206 	br	43908 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   43900:	00bffb44 	movi	r2,-19
   43904:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   43908:	e0bffa17 	ldw	r2,-24(fp)
   4390c:	1000090e 	bge	r2,zero,43934 <open+0x13c>
  {
    alt_release_fd (index);  
   43910:	e13ff917 	ldw	r4,-28(fp)
   43914:	004394c0 	call	4394c <alt_release_fd>
    ALT_ERRNO = -status;
   43918:	00436f80 	call	436f8 <alt_get_errno>
   4391c:	1007883a 	mov	r3,r2
   43920:	e0bffa17 	ldw	r2,-24(fp)
   43924:	0085c83a 	sub	r2,zero,r2
   43928:	18800015 	stw	r2,0(r3)
    return -1;
   4392c:	00bfffc4 	movi	r2,-1
   43930:	00000106 	br	43938 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   43934:	e0bff917 	ldw	r2,-28(fp)
}
   43938:	e037883a 	mov	sp,fp
   4393c:	dfc00117 	ldw	ra,4(sp)
   43940:	df000017 	ldw	fp,0(sp)
   43944:	dec00204 	addi	sp,sp,8
   43948:	f800283a 	ret

0004394c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4394c:	defffe04 	addi	sp,sp,-8
   43950:	df000115 	stw	fp,4(sp)
   43954:	df000104 	addi	fp,sp,4
   43958:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4395c:	e0bfff17 	ldw	r2,-4(fp)
   43960:	108000d0 	cmplti	r2,r2,3
   43964:	10000d1e 	bne	r2,zero,4399c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43968:	00800134 	movhi	r2,4
   4396c:	1090de04 	addi	r2,r2,17272
   43970:	e0ffff17 	ldw	r3,-4(fp)
   43974:	18c00324 	muli	r3,r3,12
   43978:	10c5883a 	add	r2,r2,r3
   4397c:	10800204 	addi	r2,r2,8
   43980:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   43984:	00800134 	movhi	r2,4
   43988:	1090de04 	addi	r2,r2,17272
   4398c:	e0ffff17 	ldw	r3,-4(fp)
   43990:	18c00324 	muli	r3,r3,12
   43994:	10c5883a 	add	r2,r2,r3
   43998:	10000015 	stw	zero,0(r2)
  }
}
   4399c:	0001883a 	nop
   439a0:	e037883a 	mov	sp,fp
   439a4:	df000017 	ldw	fp,0(sp)
   439a8:	dec00104 	addi	sp,sp,4
   439ac:	f800283a 	ret

000439b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   439b0:	deffff04 	addi	sp,sp,-4
   439b4:	df000015 	stw	fp,0(sp)
   439b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   439bc:	000170fa 	wrctl	ienable,zero
}
   439c0:	0001883a 	nop
   439c4:	e037883a 	mov	sp,fp
   439c8:	df000017 	ldw	fp,0(sp)
   439cc:	dec00104 	addi	sp,sp,4
   439d0:	f800283a 	ret

000439d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   439d4:	defffa04 	addi	sp,sp,-24
   439d8:	dfc00515 	stw	ra,20(sp)
   439dc:	df000415 	stw	fp,16(sp)
   439e0:	df000404 	addi	fp,sp,16
   439e4:	e13ffe15 	stw	r4,-8(fp)
   439e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   439ec:	e0bfff17 	ldw	r2,-4(fp)
   439f0:	10800017 	ldw	r2,0(r2)
   439f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   439f8:	e13ffe17 	ldw	r4,-8(fp)
   439fc:	00423c80 	call	423c8 <strlen>
   43a00:	10800044 	addi	r2,r2,1
   43a04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43a08:	00000d06 	br	43a40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43a0c:	e0bffc17 	ldw	r2,-16(fp)
   43a10:	10800217 	ldw	r2,8(r2)
   43a14:	e0fffd17 	ldw	r3,-12(fp)
   43a18:	180d883a 	mov	r6,r3
   43a1c:	e17ffe17 	ldw	r5,-8(fp)
   43a20:	1009883a 	mov	r4,r2
   43a24:	0043cc00 	call	43cc0 <memcmp>
   43a28:	1000021e 	bne	r2,zero,43a34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   43a2c:	e0bffc17 	ldw	r2,-16(fp)
   43a30:	00000706 	br	43a50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   43a34:	e0bffc17 	ldw	r2,-16(fp)
   43a38:	10800017 	ldw	r2,0(r2)
   43a3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43a40:	e0fffc17 	ldw	r3,-16(fp)
   43a44:	e0bfff17 	ldw	r2,-4(fp)
   43a48:	18bff01e 	bne	r3,r2,43a0c <__alt_data_end+0xfffdba0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   43a4c:	0005883a 	mov	r2,zero
}
   43a50:	e037883a 	mov	sp,fp
   43a54:	dfc00117 	ldw	ra,4(sp)
   43a58:	df000017 	ldw	fp,0(sp)
   43a5c:	dec00204 	addi	sp,sp,8
   43a60:	f800283a 	ret

00043a64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   43a64:	defffb04 	addi	sp,sp,-20
   43a68:	dfc00415 	stw	ra,16(sp)
   43a6c:	df000315 	stw	fp,12(sp)
   43a70:	df000304 	addi	fp,sp,12
   43a74:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   43a78:	d0a00617 	ldw	r2,-32744(gp)
   43a7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43a80:	00003106 	br	43b48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   43a84:	e0bffd17 	ldw	r2,-12(fp)
   43a88:	10800217 	ldw	r2,8(r2)
   43a8c:	1009883a 	mov	r4,r2
   43a90:	00423c80 	call	423c8 <strlen>
   43a94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   43a98:	e0bffd17 	ldw	r2,-12(fp)
   43a9c:	10c00217 	ldw	r3,8(r2)
   43aa0:	e0bffe17 	ldw	r2,-8(fp)
   43aa4:	10bfffc4 	addi	r2,r2,-1
   43aa8:	1885883a 	add	r2,r3,r2
   43aac:	10800003 	ldbu	r2,0(r2)
   43ab0:	10803fcc 	andi	r2,r2,255
   43ab4:	1080201c 	xori	r2,r2,128
   43ab8:	10bfe004 	addi	r2,r2,-128
   43abc:	10800bd8 	cmpnei	r2,r2,47
   43ac0:	1000031e 	bne	r2,zero,43ad0 <alt_find_file+0x6c>
    {
      len -= 1;
   43ac4:	e0bffe17 	ldw	r2,-8(fp)
   43ac8:	10bfffc4 	addi	r2,r2,-1
   43acc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43ad0:	e0bffe17 	ldw	r2,-8(fp)
   43ad4:	e0ffff17 	ldw	r3,-4(fp)
   43ad8:	1885883a 	add	r2,r3,r2
   43adc:	10800003 	ldbu	r2,0(r2)
   43ae0:	10803fcc 	andi	r2,r2,255
   43ae4:	1080201c 	xori	r2,r2,128
   43ae8:	10bfe004 	addi	r2,r2,-128
   43aec:	10800be0 	cmpeqi	r2,r2,47
   43af0:	1000081e 	bne	r2,zero,43b14 <alt_find_file+0xb0>
   43af4:	e0bffe17 	ldw	r2,-8(fp)
   43af8:	e0ffff17 	ldw	r3,-4(fp)
   43afc:	1885883a 	add	r2,r3,r2
   43b00:	10800003 	ldbu	r2,0(r2)
   43b04:	10803fcc 	andi	r2,r2,255
   43b08:	1080201c 	xori	r2,r2,128
   43b0c:	10bfe004 	addi	r2,r2,-128
   43b10:	10000a1e 	bne	r2,zero,43b3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   43b14:	e0bffd17 	ldw	r2,-12(fp)
   43b18:	10800217 	ldw	r2,8(r2)
   43b1c:	e0fffe17 	ldw	r3,-8(fp)
   43b20:	180d883a 	mov	r6,r3
   43b24:	e17fff17 	ldw	r5,-4(fp)
   43b28:	1009883a 	mov	r4,r2
   43b2c:	0043cc00 	call	43cc0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43b30:	1000021e 	bne	r2,zero,43b3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   43b34:	e0bffd17 	ldw	r2,-12(fp)
   43b38:	00000706 	br	43b58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   43b3c:	e0bffd17 	ldw	r2,-12(fp)
   43b40:	10800017 	ldw	r2,0(r2)
   43b44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43b48:	e0fffd17 	ldw	r3,-12(fp)
   43b4c:	d0a00604 	addi	r2,gp,-32744
   43b50:	18bfcc1e 	bne	r3,r2,43a84 <__alt_data_end+0xfffdba84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   43b54:	0005883a 	mov	r2,zero
}
   43b58:	e037883a 	mov	sp,fp
   43b5c:	dfc00117 	ldw	ra,4(sp)
   43b60:	df000017 	ldw	fp,0(sp)
   43b64:	dec00204 	addi	sp,sp,8
   43b68:	f800283a 	ret

00043b6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43b6c:	defffc04 	addi	sp,sp,-16
   43b70:	df000315 	stw	fp,12(sp)
   43b74:	df000304 	addi	fp,sp,12
   43b78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   43b7c:	00bffa04 	movi	r2,-24
   43b80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43b84:	e03ffd15 	stw	zero,-12(fp)
   43b88:	00001906 	br	43bf0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   43b8c:	00800134 	movhi	r2,4
   43b90:	1090de04 	addi	r2,r2,17272
   43b94:	e0fffd17 	ldw	r3,-12(fp)
   43b98:	18c00324 	muli	r3,r3,12
   43b9c:	10c5883a 	add	r2,r2,r3
   43ba0:	10800017 	ldw	r2,0(r2)
   43ba4:	10000f1e 	bne	r2,zero,43be4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   43ba8:	00800134 	movhi	r2,4
   43bac:	1090de04 	addi	r2,r2,17272
   43bb0:	e0fffd17 	ldw	r3,-12(fp)
   43bb4:	18c00324 	muli	r3,r3,12
   43bb8:	10c5883a 	add	r2,r2,r3
   43bbc:	e0ffff17 	ldw	r3,-4(fp)
   43bc0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   43bc4:	d0e00a17 	ldw	r3,-32728(gp)
   43bc8:	e0bffd17 	ldw	r2,-12(fp)
   43bcc:	1880020e 	bge	r3,r2,43bd8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   43bd0:	e0bffd17 	ldw	r2,-12(fp)
   43bd4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   43bd8:	e0bffd17 	ldw	r2,-12(fp)
   43bdc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   43be0:	00000606 	br	43bfc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   43be4:	e0bffd17 	ldw	r2,-12(fp)
   43be8:	10800044 	addi	r2,r2,1
   43bec:	e0bffd15 	stw	r2,-12(fp)
   43bf0:	e0bffd17 	ldw	r2,-12(fp)
   43bf4:	10800810 	cmplti	r2,r2,32
   43bf8:	103fe41e 	bne	r2,zero,43b8c <__alt_data_end+0xfffdbb8c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   43bfc:	e0bffe17 	ldw	r2,-8(fp)
}
   43c00:	e037883a 	mov	sp,fp
   43c04:	df000017 	ldw	fp,0(sp)
   43c08:	dec00104 	addi	sp,sp,4
   43c0c:	f800283a 	ret

00043c10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   43c10:	defffb04 	addi	sp,sp,-20
   43c14:	df000415 	stw	fp,16(sp)
   43c18:	df000404 	addi	fp,sp,16
   43c1c:	e13ffe15 	stw	r4,-8(fp)
   43c20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   43c24:	e0bfff17 	ldw	r2,-4(fp)
   43c28:	10820070 	cmpltui	r2,r2,2049
   43c2c:	1000021e 	bne	r2,zero,43c38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   43c30:	00820004 	movi	r2,2048
   43c34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   43c38:	e0fffe17 	ldw	r3,-8(fp)
   43c3c:	e0bfff17 	ldw	r2,-4(fp)
   43c40:	1885883a 	add	r2,r3,r2
   43c44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43c48:	e0bffe17 	ldw	r2,-8(fp)
   43c4c:	e0bffc15 	stw	r2,-16(fp)
   43c50:	00000506 	br	43c68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   43c54:	e0bffc17 	ldw	r2,-16(fp)
   43c58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43c5c:	e0bffc17 	ldw	r2,-16(fp)
   43c60:	10800804 	addi	r2,r2,32
   43c64:	e0bffc15 	stw	r2,-16(fp)
   43c68:	e0fffc17 	ldw	r3,-16(fp)
   43c6c:	e0bffd17 	ldw	r2,-12(fp)
   43c70:	18bff836 	bltu	r3,r2,43c54 <__alt_data_end+0xfffdbc54>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   43c74:	e0bffe17 	ldw	r2,-8(fp)
   43c78:	108007cc 	andi	r2,r2,31
   43c7c:	10000226 	beq	r2,zero,43c88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   43c80:	e0bffc17 	ldw	r2,-16(fp)
   43c84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   43c88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   43c8c:	0001883a 	nop
   43c90:	e037883a 	mov	sp,fp
   43c94:	df000017 	ldw	fp,0(sp)
   43c98:	dec00104 	addi	sp,sp,4
   43c9c:	f800283a 	ret

00043ca0 <exit>:
   43ca0:	defffe04 	addi	sp,sp,-8
   43ca4:	000b883a 	mov	r5,zero
   43ca8:	dc000015 	stw	r16,0(sp)
   43cac:	dfc00115 	stw	ra,4(sp)
   43cb0:	2021883a 	mov	r16,r4
   43cb4:	0043cf00 	call	43cf0 <__call_exitprocs>
   43cb8:	8009883a 	mov	r4,r16
   43cbc:	0043e800 	call	43e80 <_exit>

00043cc0 <memcmp>:
   43cc0:	218d883a 	add	r6,r4,r6
   43cc4:	21800826 	beq	r4,r6,43ce8 <memcmp+0x28>
   43cc8:	20800003 	ldbu	r2,0(r4)
   43ccc:	28c00003 	ldbu	r3,0(r5)
   43cd0:	10c00226 	beq	r2,r3,43cdc <memcmp+0x1c>
   43cd4:	10c5c83a 	sub	r2,r2,r3
   43cd8:	f800283a 	ret
   43cdc:	21000044 	addi	r4,r4,1
   43ce0:	29400044 	addi	r5,r5,1
   43ce4:	003ff706 	br	43cc4 <__alt_data_end+0xfffdbcc4>
   43ce8:	0005883a 	mov	r2,zero
   43cec:	f800283a 	ret

00043cf0 <__call_exitprocs>:
   43cf0:	defff504 	addi	sp,sp,-44
   43cf4:	dd000515 	stw	r20,20(sp)
   43cf8:	05000134 	movhi	r20,4
   43cfc:	dc800315 	stw	r18,12(sp)
   43d00:	dfc00a15 	stw	ra,40(sp)
   43d04:	df000915 	stw	fp,36(sp)
   43d08:	ddc00815 	stw	r23,32(sp)
   43d0c:	dd800715 	stw	r22,28(sp)
   43d10:	dd400615 	stw	r21,24(sp)
   43d14:	dcc00415 	stw	r19,16(sp)
   43d18:	dc400215 	stw	r17,8(sp)
   43d1c:	dc000115 	stw	r16,4(sp)
   43d20:	d9000015 	stw	r4,0(sp)
   43d24:	2825883a 	mov	r18,r5
   43d28:	a5114104 	addi	r20,r20,17668
   43d2c:	a4400017 	ldw	r17,0(r20)
   43d30:	8cc00c17 	ldw	r19,48(r17)
   43d34:	8c400c04 	addi	r17,r17,48
   43d38:	98004526 	beq	r19,zero,43e50 <__call_exitprocs+0x160>
   43d3c:	9c000117 	ldw	r16,4(r19)
   43d40:	00900034 	movhi	r2,16384
   43d44:	10bfffc4 	addi	r2,r2,-1
   43d48:	9d402217 	ldw	r21,136(r19)
   43d4c:	85bfffc4 	addi	r22,r16,-1
   43d50:	80a1883a 	add	r16,r16,r2
   43d54:	8421883a 	add	r16,r16,r16
   43d58:	8421883a 	add	r16,r16,r16
   43d5c:	ac2f883a 	add	r23,r21,r16
   43d60:	84000204 	addi	r16,r16,8
   43d64:	9c21883a 	add	r16,r19,r16
   43d68:	b0002716 	blt	r22,zero,43e08 <__call_exitprocs+0x118>
   43d6c:	90000726 	beq	r18,zero,43d8c <__call_exitprocs+0x9c>
   43d70:	a800041e 	bne	r21,zero,43d84 <__call_exitprocs+0x94>
   43d74:	b5bfffc4 	addi	r22,r22,-1
   43d78:	bdffff04 	addi	r23,r23,-4
   43d7c:	843fff04 	addi	r16,r16,-4
   43d80:	003ff906 	br	43d68 <__alt_data_end+0xfffdbd68>
   43d84:	b9002017 	ldw	r4,128(r23)
   43d88:	913ffa1e 	bne	r18,r4,43d74 <__alt_data_end+0xfffdbd74>
   43d8c:	99000117 	ldw	r4,4(r19)
   43d90:	82000017 	ldw	r8,0(r16)
   43d94:	213fffc4 	addi	r4,r4,-1
   43d98:	b100021e 	bne	r22,r4,43da4 <__call_exitprocs+0xb4>
   43d9c:	9d800115 	stw	r22,4(r19)
   43da0:	00000106 	br	43da8 <__call_exitprocs+0xb8>
   43da4:	80000015 	stw	zero,0(r16)
   43da8:	403ff226 	beq	r8,zero,43d74 <__alt_data_end+0xfffdbd74>
   43dac:	9f000117 	ldw	fp,4(r19)
   43db0:	a8000526 	beq	r21,zero,43dc8 <__call_exitprocs+0xd8>
   43db4:	00800044 	movi	r2,1
   43db8:	1592983a 	sll	r9,r2,r22
   43dbc:	a9404017 	ldw	r5,256(r21)
   43dc0:	494a703a 	and	r5,r9,r5
   43dc4:	2800021e 	bne	r5,zero,43dd0 <__call_exitprocs+0xe0>
   43dc8:	403ee83a 	callr	r8
   43dcc:	00000906 	br	43df4 <__call_exitprocs+0x104>
   43dd0:	a9004117 	ldw	r4,260(r21)
   43dd4:	4908703a 	and	r4,r9,r4
   43dd8:	2000041e 	bne	r4,zero,43dec <__call_exitprocs+0xfc>
   43ddc:	b9400017 	ldw	r5,0(r23)
   43de0:	d9000017 	ldw	r4,0(sp)
   43de4:	403ee83a 	callr	r8
   43de8:	00000206 	br	43df4 <__call_exitprocs+0x104>
   43dec:	b9000017 	ldw	r4,0(r23)
   43df0:	403ee83a 	callr	r8
   43df4:	99000117 	ldw	r4,4(r19)
   43df8:	e13fcc1e 	bne	fp,r4,43d2c <__alt_data_end+0xfffdbd2c>
   43dfc:	89000017 	ldw	r4,0(r17)
   43e00:	993fdc26 	beq	r19,r4,43d74 <__alt_data_end+0xfffdbd74>
   43e04:	003fc906 	br	43d2c <__alt_data_end+0xfffdbd2c>
   43e08:	00800034 	movhi	r2,0
   43e0c:	10800004 	addi	r2,r2,0
   43e10:	10000f26 	beq	r2,zero,43e50 <__call_exitprocs+0x160>
   43e14:	99400117 	ldw	r5,4(r19)
   43e18:	99000017 	ldw	r4,0(r19)
   43e1c:	2800091e 	bne	r5,zero,43e44 <__call_exitprocs+0x154>
   43e20:	20000826 	beq	r4,zero,43e44 <__call_exitprocs+0x154>
   43e24:	89000015 	stw	r4,0(r17)
   43e28:	a8000226 	beq	r21,zero,43e34 <__call_exitprocs+0x144>
   43e2c:	a809883a 	mov	r4,r21
   43e30:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   43e34:	9809883a 	mov	r4,r19
   43e38:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   43e3c:	8cc00017 	ldw	r19,0(r17)
   43e40:	003fbd06 	br	43d38 <__alt_data_end+0xfffdbd38>
   43e44:	9823883a 	mov	r17,r19
   43e48:	2027883a 	mov	r19,r4
   43e4c:	003fba06 	br	43d38 <__alt_data_end+0xfffdbd38>
   43e50:	dfc00a17 	ldw	ra,40(sp)
   43e54:	df000917 	ldw	fp,36(sp)
   43e58:	ddc00817 	ldw	r23,32(sp)
   43e5c:	dd800717 	ldw	r22,28(sp)
   43e60:	dd400617 	ldw	r21,24(sp)
   43e64:	dd000517 	ldw	r20,20(sp)
   43e68:	dcc00417 	ldw	r19,16(sp)
   43e6c:	dc800317 	ldw	r18,12(sp)
   43e70:	dc400217 	ldw	r17,8(sp)
   43e74:	dc000117 	ldw	r16,4(sp)
   43e78:	dec00b04 	addi	sp,sp,44
   43e7c:	f800283a 	ret

00043e80 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   43e80:	defffd04 	addi	sp,sp,-12
   43e84:	df000215 	stw	fp,8(sp)
   43e88:	df000204 	addi	fp,sp,8
   43e8c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   43e90:	0001883a 	nop
   43e94:	e0bfff17 	ldw	r2,-4(fp)
   43e98:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   43e9c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   43ea0:	10000226 	beq	r2,zero,43eac <_exit+0x2c>
    ALT_SIM_FAIL();
   43ea4:	002af070 	cmpltui	zero,zero,43969
   43ea8:	00000106 	br	43eb0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   43eac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   43eb0:	003fff06 	br	43eb0 <__alt_data_end+0xfffdbeb0>
