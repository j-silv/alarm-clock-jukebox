
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00007260 memsz 0x00007260 flags r-x
    LOAD off    0x00008280 vaddr 0x00047280 paddr 0x0004761c align 2**12
         filesz 0x0000039c memsz 0x0000039c flags rw-
    LOAD off    0x000089b8 vaddr 0x000479b8 paddr 0x000479b8 align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005538  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b04  0004577c  0004577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000039c  00047280  0004761c  00008280  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  000479b8  000479b8  000089b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00047af0  00047af0  0000861c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000861c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000790  00000000  00000000  00008640  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009512  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000361a  00000000  00000000  000122e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000406a  00000000  00000000  000158fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001410  00000000  00000000  00019968  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002458  00000000  00000000  0001ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000297e  00000000  00000000  0001d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001fb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005a0  00000000  00000000  0001fb70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022506  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00022509  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022513  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022514  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00022515  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022519  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002251d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00022521  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0002252c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00022537  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00022542  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0002254d  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  000225ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000856a0  00000000  00000000  00027f48  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004577c l    d  .rodata	00000000 .rodata
00047280 l    d  .rwdata	00000000 .rwdata
000479b8 l    d  .bss	00000000 .bss
00047af0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_pwm_routines.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
000479cc l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00043cac l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00047328 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00044608 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00044760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00044894 l     F .text	00000034 alt_dev_reg
00047408 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00044b78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00044ca4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044cd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044e80 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00044fc0 l     F .text	0000003c alt_get_errno
00044ffc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000479ec g     O .bss	00000004 alt_instruction_exception_handler
00041398 g     F .text	000000e4 writePWM
00040824 g     F .text	00000048 timerPWMRegisterISR
00041210 g     F .text	000000a8 timerPWMISR
000446f4 g     F .text	0000006c alt_main
00043bfc g     F .text	00000080 _puts_r
00041760 g     F .text	00000020 getSongIndex
000479f0 g     O .bss	00000100 alt_irq
0004761c g       *ABS*	00000000 __flash_rwdata_start
00043bb0 g     F .text	0000004c printf
00042594 g     F .text	00000084 getClockTime
000427ac g     F .text	000000b0 upClockHour
000479c8 g     O .bss	00000004 p
000439b0 g     F .text	00000070 .hidden __fixsfsi
0004075c g     F .text	00000048 buttonsRegisterISR
00041314 g     F .text	00000038 downVolume
00045278 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
000479d8 g     O .bss	00000004 errno
000479e4 g     O .bss	00000004 alt_argv
0004f5dc g       *ABS*	00000000 _gp
000434cc g     F .text	000004e4 .hidden __subsf3
000475f5 g     O .rwdata	00000001 time_format
00040938 g     F .text	00000030 alarmLEDon
0004745c g     O .rwdata	00000180 alt_fd_list
0004529c g     F .text	00000090 alt_find_dev
00044f44 g     F .text	0000007c alt_io_redirect
00043c7c g     F .text	00000014 puts
00044de4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000449f8 g     F .text	000000ec altera_avalon_jtag_uart_read
00043b74 g     F .text	0000003c _printf_r
00042f58 g     F .text	00000064 .hidden __udivsi3
000454d8 g     F .text	00000090 alt_icache_flush
000475dc g     O .rwdata	00000001 volume
00047280 g     O .rwdata	00000078 song
00040714 g     F .text	00000048 switchesRegisterISR
00047614 g     O .rwdata	00000004 alt_max_fd
000475ec g     O .rwdata	00000006 unused_switches
00042d54 g     F .text	000000ac downAlarmHour
00041630 g     F .text	00000044 check_return_code
00042928 g     F .text	000000c8 downClockMinute
000475f8 g     O .rwdata	00000004 _global_impure_ptr
00042ad0 g     F .text	00000084 getAlarmTime
00041808 g     F .text	0000008c note2freq
00047af0 g       *ABS*	00000000 __bss_end
00044518 g     F .text	000000f0 alt_iic_isr_register
00040bf0 g     F .text	00000238 switchesISR
000444cc g     F .text	0000004c alt_ic_irq_enabled
000479d2 g     O .bss	00000003 alarm
0004134c g     F .text	0000004c stopPWM
000479dc g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00047434 g     O .rwdata	00000028 alt_dev_null
00044c84 g     F .text	00000020 alt_dcache_flush_all
00040a44 g     F .text	000001ac timerSecondISR
0004761c g       *ABS*	00000000 __ram_rwdata_end
00042b54 g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
0004760c g     O .rwdata	00000008 alt_dev_list
0004479c g     F .text	000000f8 write
000429f0 g     F .text	000000ac downClockHour
00043014 g     F .text	000000bc .hidden __gtsf2
00047280 g       *ABS*	00000000 __ram_rodata_end
000408d8 g     F .text	00000030 timerPWMDisableInterrupt
0004577c g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00042618 g     F .text	000000cc upClockSecond
00042fbc g     F .text	00000058 .hidden __umodsi3
00040908 g     F .text	00000030 alarmLEDoff
00040968 g     F .text	0000004c alarmLEDtoggle
00047af0 g       *ABS*	00000000 end
000479b8 g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00042cac g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00043b10 g     F .text	00000064 .hidden __clzsi2
00044ae4 g     F .text	00000094 altera_avalon_jtag_uart_write
00043d18 g     F .text	00000524 ___vfprintf_internal_r
000455b8 g     F .text	00000190 __call_exitprocs
00041780 g     F .text	00000044 upSong
00040244 g     F .text	0000003c _start
00040280 g     F .text	00000064 altera_avalon_pwm_init
00044900 g     F .text	00000038 alt_sys_init
000475e0 g     O .rwdata	00000004 defdur
0004247c g     F .text	0000009c checkInvalidMode
00047280 g       *ABS*	00000000 __ram_rwdata_start
0004577c g       *ABS*	00000000 __ram_rodata_start
000475f2 g     O .rwdata	00000003 reset_clock_value
000407a4 g     F .text	00000040 switchesEnableInterrupt
000412d8 g     F .text	0000003c upVolume
00044938 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045434 g     F .text	000000a4 alt_get_fd
00045588 g     F .text	00000030 memcmp
00047af0 g       *ABS*	00000000 __alt_stack_base
00041b4c g     F .text	000006b4 nextSongNote
00041674 g     F .text	000000ec print_error
00042518 g     F .text	00000044 isPowerOfTwoOrZero
0004532c g     F .text	00000108 alt_find_file
00044d0c g     F .text	000000a4 alt_dev_llist_insert
0004255c g     F .text	00000038 resetClockTime
00041894 g     F .text	000002b8 initializeSong
000475e8 g     O .rwdata	00000004 bpm
000402e4 g     F .text	00000054 altera_avalon_pwm_enable
00044258 g     F .text	000000b8 __sfvwrite_small_dev
000479b8 g       *ABS*	00000000 __bss_start
000409b4 g     F .text	00000090 main
000472f8 g     O .rwdata	00000030 notefreq
000479e8 g     O .bss	00000004 alt_envp
00044998 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004086c g     F .text	0000006c timerPWMEnableInterrupt
000403e0 g     F .text	00000080 resetDisplay
00047618 g     O .rwdata	00000004 alt_errno
00042e60 g     F .text	00000084 .hidden __divsi3
000430d0 g     F .text	000003fc .hidden __mulsf3
0004285c g     F .text	000000cc downClockSecond
0004577c g       *ABS*	00000000 __flash_rodata_start
00040388 g     F .text	00000058 altera_avalon_pwm_change_duty_cycle
000448c8 g     F .text	00000038 alt_irq_init
00045214 g     F .text	00000064 alt_release_fd
00047146 g     O .rodata	00000100 .hidden __clz_tab
00043014 g     F .text	000000bc .hidden __gesf2
000479c0 g     O .bss	00000001 song_index
00044310 g     F .text	00000058 _write_r
000426e4 g     F .text	000000c8 upClockMinute
000475fc g     O .rwdata	00000004 _impure_ptr
000479e0 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
000406e4 g     F .text	00000030 timerSecondEnableInterrupt
00047604 g     O .rwdata	00000008 alt_fs_list
00042200 g     F .text	0000027c determineMode
00040338 g     F .text	00000050 altera_avalon_pwm_disable
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044368 g     F .text	00000050 alt_ic_isr_register
0004761c g       *ABS*	00000000 _edata
00047af0 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000407e4 g     F .text	00000040 buttonsEnableInterrupt
00044440 g     F .text	0000008c alt_ic_irq_disable
00045568 g     F .text	00000020 exit
00043a20 g     F .text	000000f0 .hidden __floatunsisf
00042ee4 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004069c g     F .text	00000048 timerSecondRegisterISR
00042bfc g     F .text	000000b0 upAlarmHour
00042e00 g     F .text	00000060 .hidden __fixunssfsi
00045748 g     F .text	00000034 _exit
000417c4 g     F .text	00000044 downSong
00043c90 g     F .text	0000001c strlen
000450c0 g     F .text	00000154 open
000479d5 g     O .bss	00000003 clock
000470e6 g     O .rodata	00000060 mode_lookup_table
00044db0 g     F .text	00000034 alt_icache_flush_all
00040e28 g     F .text	000003e8 buttonsISR
00047600 g     O .rwdata	00000004 alt_priority_mask
000457f0 g     O .rodata	00000034 duty_cycle_lookup_table
000443b8 g     F .text	00000088 alt_ic_irq_enable
0004423c g     F .text	0000001c __vfprintf_internal
00044bb4 g     F .text	000000d0 close
00041504 g     F .text	0000012c testPWM
000475e4 g     O .rwdata	00000004 defscale
000412b8 g     F .text	00000020 getVolume
000479c4 g     O .bss	00000004 silence
00042a9c g     F .text	00000034 resetAlarmTime
00044670 g     F .text	00000084 alt_load
00040460 g     F .text	0000023c updateDisplay
0004147c g     F .text	00000088 default500HzSquareWave



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	109e7c04 	addi	r2,r2,31216
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	109e7c04 	addi	r2,r2,31216
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a10417 	ldw	r2,-31728(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a10417 	ldw	r2,-31728(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6bd7714 	ori	gp,gp,62940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	109e6e14 	ori	r2,r2,31160

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18debc14 	ori	r3,r3,31472

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	00446700 	call	44670 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	00446f40 	call	446f4 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <altera_avalon_pwm_init>:

#include "altera_avalon_pwm_routines.h"


int altera_avalon_pwm_init(unsigned int address, unsigned int clock_divider, unsigned int duty_cycle)
{
   40280:	defffc04 	addi	sp,sp,-16
   40284:	df000315 	stw	fp,12(sp)
   40288:	df000304 	addi	fp,sp,12
   4028c:	e13ffd15 	stw	r4,-12(fp)
   40290:	e17ffe15 	stw	r5,-8(fp)
   40294:	e1bfff15 	stw	r6,-4(fp)
	if(duty_cycle > clock_divider)  //duty cycle reg must be less than or equal to clock divider
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	e0fffe17 	ldw	r3,-8(fp)
   402a0:	1880022e 	bgeu	r3,r2,402ac <altera_avalon_pwm_init+0x2c>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	00000a06 	br	402d4 <altera_avalon_pwm_init+0x54>
	}
	else
	{
		IOWR_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address, clock_divider - 1);
   402ac:	e0bffd17 	ldw	r2,-12(fp)
   402b0:	e0fffe17 	ldw	r3,-8(fp)
   402b4:	18ffffc4 	addi	r3,r3,-1
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800104 	addi	r2,r2,4
   402c4:	1007883a 	mov	r3,r2
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	18800035 	stwio	r2,0(r3)
	}
	 return ALTERA_AVALON_PWM_OK;
   402d0:	0005883a 	mov	r2,zero
}
   402d4:	e037883a 	mov	sp,fp
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00104 	addi	sp,sp,4
   402e0:	f800283a 	ret

000402e4 <altera_avalon_pwm_enable>:

int altera_avalon_pwm_enable(unsigned int address)
{
   402e4:	defffe04 	addi	sp,sp,-8
   402e8:	df000115 	stw	fp,4(sp)
   402ec:	df000104 	addi	fp,sp,4
   402f0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ALTERA_AVALON_PWM_ENABLE_MSK);
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	10800204 	addi	r2,r2,8
   402fc:	1007883a 	mov	r3,r2
   40300:	00800044 	movi	r2,1
   40304:	18800035 	stwio	r2,0(r3)
  
  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_ENABLED) //Confirm PWM is enabled
   40308:	e0bfff17 	ldw	r2,-4(fp)
   4030c:	10800204 	addi	r2,r2,8
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	10800060 	cmpeqi	r2,r2,1
   40318:	1000021e 	bne	r2,zero,40324 <altera_avalon_pwm_enable+0x40>
  {
  	return ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR;
   4031c:	00bfff84 	movi	r2,-2
   40320:	00000106 	br	40328 <altera_avalon_pwm_enable+0x44>
  }
  return ALTERA_AVALON_PWM_OK;
   40324:	0005883a 	mov	r2,zero
}
   40328:	e037883a 	mov	sp,fp
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00104 	addi	sp,sp,4
   40334:	f800283a 	ret

00040338 <altera_avalon_pwm_disable>:

int altera_avalon_pwm_disable(unsigned int address)
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
   40344:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ~ALTERA_AVALON_PWM_ENABLE_MSK);
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800204 	addi	r2,r2,8
   40350:	1007883a 	mov	r3,r2
   40354:	00bfff84 	movi	r2,-2
   40358:	18800035 	stwio	r2,0(r3)

  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_DISABLED)  //Confirm PWM is disabled 
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10800204 	addi	r2,r2,8
   40364:	10800037 	ldwio	r2,0(r2)
   40368:	10000226 	beq	r2,zero,40374 <altera_avalon_pwm_disable+0x3c>
  {
  	return ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR;
   4036c:	00bfff44 	movi	r2,-3
   40370:	00000106 	br	40378 <altera_avalon_pwm_disable+0x40>
  }
  return ALTERA_AVALON_PWM_OK;
   40374:	0005883a 	mov	r2,zero
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <altera_avalon_pwm_change_duty_cycle>:


int altera_avalon_pwm_change_duty_cycle(unsigned int address, unsigned int duty_cycle)
{
   40388:	defffd04 	addi	sp,sp,-12
   4038c:	df000215 	stw	fp,8(sp)
   40390:	df000204 	addi	fp,sp,8
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
	if(duty_cycle > IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address))  //duty cycle reg must be less than or equal to clock divider
   4039c:	e0bffe17 	ldw	r2,-8(fp)
   403a0:	10800037 	ldwio	r2,0(r2)
   403a4:	1007883a 	mov	r3,r2
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	1880022e 	bgeu	r3,r2,403b8 <altera_avalon_pwm_change_duty_cycle+0x30>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	00000606 	br	403d0 <altera_avalon_pwm_change_duty_cycle+0x48>
	}
	else
	{
    IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	10800104 	addi	r2,r2,4
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	18800035 	stwio	r2,0(r3)
	}
  return ALTERA_AVALON_PWM_OK;
   403cc:	0005883a 	mov	r2,zero
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00104 	addi	sp,sp,4
   403dc:	f800283a 	ret

000403e0 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   403e0:	deffff04 	addi	sp,sp,-4
   403e4:	df000015 	stw	fp,0(sp)
   403e8:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   403ec:	00c03004 	movi	r3,192
   403f0:	00800234 	movhi	r2,8
   403f4:	10841004 	addi	r2,r2,4160
   403f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   403fc:	00c03004 	movi	r3,192
   40400:	00800234 	movhi	r2,8
   40404:	10843004 	addi	r2,r2,4288
   40408:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   4040c:	00c03004 	movi	r3,192
   40410:	00800234 	movhi	r2,8
   40414:	10841404 	addi	r2,r2,4176
   40418:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   4041c:	00c03004 	movi	r3,192
   40420:	00800234 	movhi	r2,8
   40424:	10842c04 	addi	r2,r2,4272
   40428:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   4042c:	00c03004 	movi	r3,192
   40430:	00800234 	movhi	r2,8
   40434:	10841804 	addi	r2,r2,4192
   40438:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   4043c:	00c03004 	movi	r3,192
   40440:	00800234 	movhi	r2,8
   40444:	10842804 	addi	r2,r2,4256
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40460:	defffa04 	addi	sp,sp,-24
   40464:	dfc00515 	stw	ra,20(sp)
   40468:	df000415 	stw	fp,16(sp)
   4046c:	df000404 	addi	fp,sp,16
   40470:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40474:	e0bfff03 	ldbu	r2,-4(fp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	10801918 	cmpnei	r2,r2,100
   40480:	1000051e 	bne	r2,zero,40498 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40484:	00800284 	movi	r2,10
   40488:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4048c:	00800284 	movi	r2,10
   40490:	e0bffd05 	stb	r2,-12(fp)
   40494:	00000b06 	br	404c4 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40498:	e0bfff03 	ldbu	r2,-4(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	01400284 	movi	r5,10
   404a4:	1009883a 	mov	r4,r2
   404a8:	0042f580 	call	42f58 <__udivsi3>
   404ac:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   404b0:	e0bfff03 	ldbu	r2,-4(fp)
   404b4:	e0fffd43 	ldbu	r3,-11(fp)
   404b8:	18fffda4 	muli	r3,r3,-10
   404bc:	10c5883a 	add	r2,r2,r3
   404c0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   404c4:	e0bfff43 	ldbu	r2,-3(fp)
   404c8:	10803fcc 	andi	r2,r2,255
   404cc:	10801918 	cmpnei	r2,r2,100
   404d0:	1000051e 	bne	r2,zero,404e8 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   404d4:	00800284 	movi	r2,10
   404d8:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   404dc:	00800284 	movi	r2,10
   404e0:	e0bffc85 	stb	r2,-14(fp)
   404e4:	00000b06 	br	40514 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   404e8:	e0bfff43 	ldbu	r2,-3(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	0042f580 	call	42f58 <__udivsi3>
   404fc:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   40500:	e0bfff43 	ldbu	r2,-3(fp)
   40504:	e0fffcc3 	ldbu	r3,-13(fp)
   40508:	18fffda4 	muli	r3,r3,-10
   4050c:	10c5883a 	add	r2,r2,r3
   40510:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   40514:	e0bfff83 	ldbu	r2,-2(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	10801918 	cmpnei	r2,r2,100
   40520:	1000051e 	bne	r2,zero,40538 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   40524:	00800284 	movi	r2,10
   40528:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   4052c:	00800284 	movi	r2,10
   40530:	e0bffc05 	stb	r2,-16(fp)
   40534:	00000b06 	br	40564 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   40538:	e0bfff83 	ldbu	r2,-2(fp)
   4053c:	10803fcc 	andi	r2,r2,255
   40540:	01400284 	movi	r5,10
   40544:	1009883a 	mov	r4,r2
   40548:	0042f580 	call	42f58 <__udivsi3>
   4054c:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   40550:	e0bfff83 	ldbu	r2,-2(fp)
   40554:	e0fffc43 	ldbu	r3,-15(fp)
   40558:	18fffda4 	muli	r3,r3,-10
   4055c:	10c5883a 	add	r2,r2,r3
   40560:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40564:	e0bffd43 	ldbu	r2,-11(fp)
   40568:	10c03fcc 	andi	r3,r2,255
   4056c:	00800134 	movhi	r2,4
   40570:	1095df04 	addi	r2,r2,22396
   40574:	10c5883a 	add	r2,r2,r3
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40580:	e0bffd03 	ldbu	r2,-12(fp)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	00800134 	movhi	r2,4
   4058c:	1095df04 	addi	r2,r2,22396
   40590:	10c5883a 	add	r2,r2,r3
   40594:	10800003 	ldbu	r2,0(r2)
   40598:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4059c:	e0bffcc3 	ldbu	r2,-13(fp)
   405a0:	10c03fcc 	andi	r3,r2,255
   405a4:	00800134 	movhi	r2,4
   405a8:	1095df04 	addi	r2,r2,22396
   405ac:	10c5883a 	add	r2,r2,r3
   405b0:	10800003 	ldbu	r2,0(r2)
   405b4:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   405b8:	e0bffc83 	ldbu	r2,-14(fp)
   405bc:	10c03fcc 	andi	r3,r2,255
   405c0:	00800134 	movhi	r2,4
   405c4:	1095df04 	addi	r2,r2,22396
   405c8:	10c5883a 	add	r2,r2,r3
   405cc:	10800003 	ldbu	r2,0(r2)
   405d0:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   405d4:	e0bffc43 	ldbu	r2,-15(fp)
   405d8:	10c03fcc 	andi	r3,r2,255
   405dc:	00800134 	movhi	r2,4
   405e0:	1095df04 	addi	r2,r2,22396
   405e4:	10c5883a 	add	r2,r2,r3
   405e8:	10800003 	ldbu	r2,0(r2)
   405ec:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   405f0:	e0bffc03 	ldbu	r2,-16(fp)
   405f4:	10c03fcc 	andi	r3,r2,255
   405f8:	00800134 	movhi	r2,4
   405fc:	1095df04 	addi	r2,r2,22396
   40600:	10c5883a 	add	r2,r2,r3
   40604:	10800003 	ldbu	r2,0(r2)
   40608:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   4060c:	e0bffec3 	ldbu	r2,-5(fp)
   40610:	10c03fcc 	andi	r3,r2,255
   40614:	00800234 	movhi	r2,8
   40618:	10841004 	addi	r2,r2,4160
   4061c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   40620:	e0bffe83 	ldbu	r2,-6(fp)
   40624:	10c03fcc 	andi	r3,r2,255
   40628:	00800234 	movhi	r2,8
   4062c:	10843004 	addi	r2,r2,4288
   40630:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   40634:	e0bffe43 	ldbu	r2,-7(fp)
   40638:	10c03fcc 	andi	r3,r2,255
   4063c:	00800234 	movhi	r2,8
   40640:	10841404 	addi	r2,r2,4176
   40644:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   40648:	e0bffe03 	ldbu	r2,-8(fp)
   4064c:	10c03fcc 	andi	r3,r2,255
   40650:	00800234 	movhi	r2,8
   40654:	10842c04 	addi	r2,r2,4272
   40658:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   4065c:	e0bffdc3 	ldbu	r2,-9(fp)
   40660:	10c03fcc 	andi	r3,r2,255
   40664:	00800234 	movhi	r2,8
   40668:	10841804 	addi	r2,r2,4192
   4066c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40670:	e0bffd83 	ldbu	r2,-10(fp)
   40674:	10c03fcc 	andi	r3,r2,255
   40678:	00800234 	movhi	r2,8
   4067c:	10842804 	addi	r2,r2,4256
   40680:	10c00035 	stwio	r3,0(r2)
   40684:	0001883a 	nop
   40688:	e037883a 	mov	sp,fp
   4068c:	dfc00117 	ldw	ra,4(sp)
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00204 	addi	sp,sp,8
   40698:	f800283a 	ret

0004069c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4069c:	defffb04 	addi	sp,sp,-20
   406a0:	dfc00415 	stw	ra,16(sp)
   406a4:	df000315 	stw	fp,12(sp)
   406a8:	df000304 	addi	fp,sp,12
   406ac:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   406b0:	d8000015 	stw	zero,0(sp)
   406b4:	000f883a 	mov	r7,zero
   406b8:	e1bfff17 	ldw	r6,-4(fp)
   406bc:	01400044 	movi	r5,1
   406c0:	0009883a 	mov	r4,zero
   406c4:	00443680 	call	44368 <alt_ic_isr_register>
   406c8:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   406cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   406d0:	e037883a 	mov	sp,fp
   406d4:	dfc00117 	ldw	ra,4(sp)
   406d8:	df000017 	ldw	fp,0(sp)
   406dc:	dec00204 	addi	sp,sp,8
   406e0:	f800283a 	ret

000406e4 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   406e4:	deffff04 	addi	sp,sp,-4
   406e8:	df000015 	stw	fp,0(sp)
   406ec:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   406f0:	00c001c4 	movi	r3,7
   406f4:	00800234 	movhi	r2,8
   406f8:	10840904 	addi	r2,r2,4132
   406fc:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40700:	0001883a 	nop
   40704:	e037883a 	mov	sp,fp
   40708:	df000017 	ldw	fp,0(sp)
   4070c:	dec00104 	addi	sp,sp,4
   40710:	f800283a 	ret

00040714 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   40714:	defffb04 	addi	sp,sp,-20
   40718:	dfc00415 	stw	ra,16(sp)
   4071c:	df000315 	stw	fp,12(sp)
   40720:	df000304 	addi	fp,sp,12
   40724:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	000f883a 	mov	r7,zero
   40730:	e1bfff17 	ldw	r6,-4(fp)
   40734:	01400084 	movi	r5,2
   40738:	0009883a 	mov	r4,zero
   4073c:	00443680 	call	44368 <alt_ic_isr_register>
   40740:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40744:	e0bffe03 	ldbu	r2,-8(fp)
}
   40748:	e037883a 	mov	sp,fp
   4074c:	dfc00117 	ldw	ra,4(sp)
   40750:	df000017 	ldw	fp,0(sp)
   40754:	dec00204 	addi	sp,sp,8
   40758:	f800283a 	ret

0004075c <buttonsRegisterISR>:


uint8_t buttonsRegisterISR(void (*buttonsISR)(void *isr_context)) {
   4075c:	defffb04 	addi	sp,sp,-20
   40760:	dfc00415 	stw	ra,16(sp)
   40764:	df000315 	stw	fp,12(sp)
   40768:	df000304 	addi	fp,sp,12
   4076c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
   40770:	d8000015 	stw	zero,0(sp)
   40774:	000f883a 	mov	r7,zero
   40778:	e1bfff17 	ldw	r6,-4(fp)
   4077c:	014000c4 	movi	r5,3
   40780:	0009883a 	mov	r4,zero
   40784:	00443680 	call	44368 <alt_ic_isr_register>
   40788:	e0bffe05 	stb	r2,-8(fp)
                                            BUTTONS_IRQ,
                                            buttonsISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4078c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40790:	e037883a 	mov	sp,fp
   40794:	dfc00117 	ldw	ra,4(sp)
   40798:	df000017 	ldw	fp,0(sp)
   4079c:	dec00204 	addi	sp,sp,8
   407a0:	f800283a 	ret

000407a4 <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   407a4:	deffff04 	addi	sp,sp,-4
   407a8:	df000015 	stw	fp,0(sp)
   407ac:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   407b0:	00ffffd4 	movui	r3,65535
   407b4:	00800234 	movhi	r2,8
   407b8:	10843a04 	addi	r2,r2,4328
   407bc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   407c0:	0007883a 	mov	r3,zero
   407c4:	00800234 	movhi	r2,8
   407c8:	10843b04 	addi	r2,r2,4332
   407cc:	10c00035 	stwio	r3,0(r2)
}
   407d0:	0001883a 	nop
   407d4:	e037883a 	mov	sp,fp
   407d8:	df000017 	ldw	fp,0(sp)
   407dc:	dec00104 	addi	sp,sp,4
   407e0:	f800283a 	ret

000407e4 <buttonsEnableInterrupt>:

void buttonsEnableInterrupt(void) {
   407e4:	deffff04 	addi	sp,sp,-4
   407e8:	df000015 	stw	fp,0(sp)
   407ec:	d839883a 	mov	fp,sp
  // enable all buttons to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, BUTTONS_INTERRUPT_MASK);
   407f0:	00c000c4 	movi	r3,3
   407f4:	00800234 	movhi	r2,8
   407f8:	10841e04 	addi	r2,r2,4216
   407fc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40800:	0007883a 	mov	r3,zero
   40804:	00800234 	movhi	r2,8
   40808:	10841f04 	addi	r2,r2,4220
   4080c:	10c00035 	stwio	r3,0(r2)
}
   40810:	0001883a 	nop
   40814:	e037883a 	mov	sp,fp
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00104 	addi	sp,sp,4
   40820:	f800283a 	ret

00040824 <timerPWMRegisterISR>:


uint8_t timerPWMRegisterISR(void (*timerPWMISR)(void *isr_context)) {
   40824:	defffb04 	addi	sp,sp,-20
   40828:	dfc00415 	stw	ra,16(sp)
   4082c:	df000315 	stw	fp,12(sp)
   40830:	df000304 	addi	fp,sp,12
   40834:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_PWM_IRQ_INTERRUPT_CONTROLLER_ID,
   40838:	d8000015 	stw	zero,0(sp)
   4083c:	000f883a 	mov	r7,zero
   40840:	e1bfff17 	ldw	r6,-4(fp)
   40844:	01400104 	movi	r5,4
   40848:	0009883a 	mov	r4,zero
   4084c:	00443680 	call	44368 <alt_ic_isr_register>
   40850:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_PWM_IRQ,
                                            timerPWMISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40854:	e0bffe03 	ldbu	r2,-8(fp)
}
   40858:	e037883a 	mov	sp,fp
   4085c:	dfc00117 	ldw	ra,4(sp)
   40860:	df000017 	ldw	fp,0(sp)
   40864:	dec00204 	addi	sp,sp,8
   40868:	f800283a 	ret

0004086c <timerPWMEnableInterrupt>:

void timerPWMEnableInterrupt(int timeout) {
   4086c:	defffd04 	addi	sp,sp,-12
   40870:	df000215 	stw	fp,8(sp)
   40874:	df000204 	addi	fp,sp,8
   40878:	e13fff15 	stw	r4,-4(fp)
  // timeout is in miliseconds -> convert to seconds
  // set period based on input timeout variable; writing to the period 
  // registers stops the counter which automatically loads reigster value
  uint32_t period = (NIOS_CLOCK_FREQ/1000)*timeout;
   4087c:	e0ffff17 	ldw	r3,-4(fp)
   40880:	00b0d414 	movui	r2,50000
   40884:	1885383a 	mul	r2,r3,r2
   40888:	e0bffe15 	stw	r2,-8(fp)

  //write to high and low registers
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_PWM_BASE, period);
   4088c:	e0fffe17 	ldw	r3,-8(fp)
   40890:	00800234 	movhi	r2,8
   40894:	10840204 	addi	r2,r2,4104
   40898:	10c00035 	stwio	r3,0(r2)
  // shift by 16 to take into account high bits
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_PWM_BASE, (period >> AVALON_TIMER_PERIOD_WIDTH));
   4089c:	e0bffe17 	ldw	r2,-8(fp)
   408a0:	1004d43a 	srli	r2,r2,16
   408a4:	1007883a 	mov	r3,r2
   408a8:	00800234 	movhi	r2,8
   408ac:	10840304 	addi	r2,r2,4108
   408b0:	10c00035 	stwio	r3,0(r2)

  // start timer and enable interrupt
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 
   408b4:	00c00144 	movi	r3,5
   408b8:	00800234 	movhi	r2,8
   408bc:	10840104 	addi	r2,r2,4100
   408c0:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   408c4:	0001883a 	nop
   408c8:	e037883a 	mov	sp,fp
   408cc:	df000017 	ldw	fp,0(sp)
   408d0:	dec00104 	addi	sp,sp,4
   408d4:	f800283a 	ret

000408d8 <timerPWMDisableInterrupt>:

void timerPWMDisableInterrupt(void) {
   408d8:	deffff04 	addi	sp,sp,-4
   408dc:	df000015 	stw	fp,0(sp)
   408e0:	d839883a 	mov	fp,sp
  // set ITO to 0 (thus disabling interrupts)
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 0);
   408e4:	0007883a 	mov	r3,zero
   408e8:	00800234 	movhi	r2,8
   408ec:	10840104 	addi	r2,r2,4100
   408f0:	10c00035 	stwio	r3,0(r2)
}
   408f4:	0001883a 	nop
   408f8:	e037883a 	mov	sp,fp
   408fc:	df000017 	ldw	fp,0(sp)
   40900:	dec00104 	addi	sp,sp,4
   40904:	f800283a 	ret

00040908 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40908:	deffff04 	addi	sp,sp,-4
   4090c:	df000015 	stw	fp,0(sp)
   40910:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40914:	0007883a 	mov	r3,zero
   40918:	00800234 	movhi	r2,8
   4091c:	10842404 	addi	r2,r2,4240
   40920:	10c00035 	stwio	r3,0(r2)
}
   40924:	0001883a 	nop
   40928:	e037883a 	mov	sp,fp
   4092c:	df000017 	ldw	fp,0(sp)
   40930:	dec00104 	addi	sp,sp,4
   40934:	f800283a 	ret

00040938 <alarmLEDon>:

void alarmLEDon(void) {
   40938:	deffff04 	addi	sp,sp,-4
   4093c:	df000015 	stw	fp,0(sp)
   40940:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40944:	00c00044 	movi	r3,1
   40948:	00800234 	movhi	r2,8
   4094c:	10842404 	addi	r2,r2,4240
   40950:	10c00035 	stwio	r3,0(r2)
}
   40954:	0001883a 	nop
   40958:	e037883a 	mov	sp,fp
   4095c:	df000017 	ldw	fp,0(sp)
   40960:	dec00104 	addi	sp,sp,4
   40964:	f800283a 	ret

00040968 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40968:	defffe04 	addi	sp,sp,-8
   4096c:	df000115 	stw	fp,4(sp)
   40970:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40974:	00800234 	movhi	r2,8
   40978:	10842404 	addi	r2,r2,4240
   4097c:	10800037 	ldwio	r2,0(r2)
   40980:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   40984:	e0bfff03 	ldbu	r2,-4(fp)
   40988:	10803fcc 	andi	r2,r2,255
   4098c:	1005003a 	cmpeq	r2,r2,zero
   40990:	10c03fcc 	andi	r3,r2,255
   40994:	00800234 	movhi	r2,8
   40998:	10842404 	addi	r2,r2,4240
   4099c:	10c00035 	stwio	r3,0(r2)
   409a0:	0001883a 	nop
   409a4:	e037883a 	mov	sp,fp
   409a8:	df000017 	ldw	fp,0(sp)
   409ac:	dec00104 	addi	sp,sp,4
   409b0:	f800283a 	ret

000409b4 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   409b4:	defffe04 	addi	sp,sp,-8
   409b8:	dfc00115 	stw	ra,4(sp)
   409bc:	df000015 	stw	fp,0(sp)
   409c0:	d839883a 	mov	fp,sp

  // modde initialization: free running clock mode
  mode.invalid = FALSE;
   409c4:	d020f705 	stb	zero,-31780(gp)
  mode.display = DISP_CLOCK;
   409c8:	d020f745 	stb	zero,-31779(gp)
  mode.alarm = OFF;
   409cc:	d020f785 	stb	zero,-31778(gp)
  mode.config.on = FALSE;
   409d0:	d020f7c5 	stb	zero,-31777(gp)
  mode.config.hour = FALSE;
   409d4:	d020f805 	stb	zero,-31776(gp)
  mode.config.minute = FALSE;
   409d8:	d020f845 	stb	zero,-31775(gp)

  // module intialization
  alarmLEDoff();
   409dc:	00409080 	call	40908 <alarmLEDoff>
  resetClockTime();
   409e0:	004255c0 	call	4255c <resetClockTime>
  resetAlarmTime();
   409e4:	0042a9c0 	call	42a9c <resetAlarmTime>
  resetDisplay();
   409e8:	00403e00 	call	403e0 <resetDisplay>

  // ISR registration
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   409ec:	01000134 	movhi	r4,4
   409f0:	21029104 	addi	r4,r4,2628
   409f4:	004069c0 	call	4069c <timerSecondRegisterISR>
   409f8:	10803fcc 	andi	r2,r2,255
   409fc:	1000011e 	bne	r2,zero,40a04 <main+0x50>
    //printf("timerSecondISR successively registered!\n");
    timerSecondEnableInterrupt();
   40a00:	00406e40 	call	406e4 <timerSecondEnableInterrupt>
  }
  else {
   //printf("ERROR: timerSecondISR unsuccessively registered!\n");
  }

  if (switchesRegisterISR(&switchesISR) == ISR_REGISTRATION_SUCCESS) {
   40a04:	01000134 	movhi	r4,4
   40a08:	2102fc04 	addi	r4,r4,3056
   40a0c:	00407140 	call	40714 <switchesRegisterISR>
   40a10:	10803fcc 	andi	r2,r2,255
   40a14:	1000011e 	bne	r2,zero,40a1c <main+0x68>
    //printf("switchesISR successively registered!\n");
    switchesEnableInterrupt();
   40a18:	00407a40 	call	407a4 <switchesEnableInterrupt>
  }
  else {
   //printf("ERROR: switchesISR unsuccessively registered!\n");
  }

  if (buttonsRegisterISR(&buttonsISR) == ISR_REGISTRATION_SUCCESS) {
   40a1c:	01000134 	movhi	r4,4
   40a20:	21038a04 	addi	r4,r4,3624
   40a24:	004075c0 	call	4075c <buttonsRegisterISR>
   40a28:	10803fcc 	andi	r2,r2,255
   40a2c:	1000011e 	bne	r2,zero,40a34 <main+0x80>
    //printf("buttonsISR successively registered!\n");
    buttonsEnableInterrupt();
   40a30:	00407e40 	call	407e4 <buttonsEnableInterrupt>
  }
  else {
   //printf("ERROR: buttonsISR unsuccessively registered!\n");
  }

  if (timerPWMRegisterISR(&timerPWMISR) == ISR_REGISTRATION_SUCCESS) {
   40a34:	01000134 	movhi	r4,4
   40a38:	21048404 	addi	r4,r4,4624
   40a3c:	00408240 	call	40824 <timerPWMRegisterISR>
  }
  else {
   //printf("ERROR: timerPWMISR unsuccessively registered!\n");
  }

  while(1) {}  
   40a40:	003fff06 	br	40a40 <__alt_data_end+0xfffd8a40>

00040a44 <timerSecondISR>:

// -------------- ISR callbacks -------------------

/* ISR: update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   40a44:	defff704 	addi	sp,sp,-36
   40a48:	dfc00815 	stw	ra,32(sp)
   40a4c:	df000715 	stw	fp,28(sp)
   40a50:	df000704 	addi	fp,sp,28
   40a54:	e13fff15 	stw	r4,-4(fp)

  // clear timeout bit because the internal counter for the timer reached zero
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   40a58:	0007883a 	mov	r3,zero
   40a5c:	00800234 	movhi	r2,8
   40a60:	10840804 	addi	r2,r2,4128
   40a64:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and for //printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   40a68:	d0a0f743 	ldbu	r2,-31779(gp)
   40a6c:	10803fcc 	andi	r2,r2,255
   40a70:	10004c1e 	bne	r2,zero,40ba4 <timerSecondISR+0x160>
    if (mode.config.on == TRUE) {
   40a74:	d0a0f7c3 	ldbu	r2,-31777(gp)
   40a78:	10803fcc 	andi	r2,r2,255
   40a7c:	10800058 	cmpnei	r2,r2,1
   40a80:	10000e1e 	bne	r2,zero,40abc <timerSecondISR+0x78>

      // digits should not carry over while configuring the time
      clock = upClockSecond(CARRY_OFF);
   40a84:	0009883a 	mov	r4,zero
   40a88:	00426180 	call	42618 <upClockSecond>
   40a8c:	e0bff905 	stb	r2,-28(fp)
   40a90:	1006d23a 	srli	r3,r2,8
   40a94:	1809883a 	mov	r4,r3
   40a98:	00ffffc4 	movi	r3,-1
   40a9c:	20c6703a 	and	r3,r4,r3
   40aa0:	e0fff945 	stb	r3,-27(fp)
   40aa4:	1004d43a 	srli	r2,r2,16
   40aa8:	1007883a 	mov	r3,r2
   40aac:	00bfffc4 	movi	r2,-1
   40ab0:	1884703a 	and	r2,r3,r2
   40ab4:	e0bff985 	stb	r2,-26(fp)
   40ab8:	00003706 	br	40b98 <timerSecondISR+0x154>

    }
    else if (mode.config.on == FALSE) {
   40abc:	d0a0f7c3 	ldbu	r2,-31777(gp)
   40ac0:	10803fcc 	andi	r2,r2,255
   40ac4:	1000341e 	bne	r2,zero,40b98 <timerSecondISR+0x154>

      // since we're not in config mode, the time 
      // should normally count and carry.
      clock = upClockSecond(CARRY_ON);
   40ac8:	01000044 	movi	r4,1
   40acc:	00426180 	call	42618 <upClockSecond>
   40ad0:	e0bff905 	stb	r2,-28(fp)
   40ad4:	1006d23a 	srli	r3,r2,8
   40ad8:	1809883a 	mov	r4,r3
   40adc:	00ffffc4 	movi	r3,-1
   40ae0:	20c6703a 	and	r3,r4,r3
   40ae4:	e0fff945 	stb	r3,-27(fp)
   40ae8:	1004d43a 	srli	r2,r2,16
   40aec:	1007883a 	mov	r3,r2
   40af0:	00bfffc4 	movi	r2,-1
   40af4:	1884703a 	and	r2,r3,r2
   40af8:	e0bff985 	stb	r2,-26(fp)

      // check the alarm
      if (mode.alarm == ON) {
   40afc:	d0a0f783 	ldbu	r2,-31778(gp)
   40b00:	10803fcc 	andi	r2,r2,255
   40b04:	10800058 	cmpnei	r2,r2,1
   40b08:	1000231e 	bne	r2,zero,40b98 <timerSecondISR+0x154>

        struct time alarm;
        alarm = getAlarmTime();
   40b0c:	0042ad00 	call	42ad0 <getAlarmTime>
   40b10:	e0bff9c5 	stb	r2,-25(fp)
   40b14:	1006d23a 	srli	r3,r2,8
   40b18:	1809883a 	mov	r4,r3
   40b1c:	00ffffc4 	movi	r3,-1
   40b20:	20c6703a 	and	r3,r4,r3
   40b24:	e0fffa05 	stb	r3,-24(fp)
   40b28:	1004d43a 	srli	r2,r2,16
   40b2c:	1007883a 	mov	r3,r2
   40b30:	00bfffc4 	movi	r2,-1
   40b34:	1884703a 	and	r2,r3,r2
   40b38:	e0bffa45 	stb	r2,-23(fp)

        /* to avoid executing the following block of code everytime and to only call initializeSong() once, 
        we have to check whether or not the time is currently at XX:XX:00. 
        --> at 0 seconds, thats when the alarm will be activated */
        if ( (clock.second == 0) && (alarm.hour == clock.hour) && (alarm.minute == clock.minute) ) {
   40b3c:	e0bff983 	ldbu	r2,-26(fp)
   40b40:	10803fcc 	andi	r2,r2,255
   40b44:	1000141e 	bne	r2,zero,40b98 <timerSecondISR+0x154>
   40b48:	e0fff9c3 	ldbu	r3,-25(fp)
   40b4c:	e0bff903 	ldbu	r2,-28(fp)
   40b50:	18c03fcc 	andi	r3,r3,255
   40b54:	10803fcc 	andi	r2,r2,255
   40b58:	18800f1e 	bne	r3,r2,40b98 <timerSecondISR+0x154>
   40b5c:	e0fffa03 	ldbu	r3,-24(fp)
   40b60:	e0bff943 	ldbu	r2,-27(fp)
   40b64:	18c03fcc 	andi	r3,r3,255
   40b68:	10803fcc 	andi	r2,r2,255
   40b6c:	18800a1e 	bne	r3,r2,40b98 <timerSecondISR+0x154>

          // immediately start the alarm after initializing the song
          initializeSong();
   40b70:	00418940 	call	41894 <initializeSong>
          struct note_info note;
          note = nextSongNote();
   40b74:	e0bffb04 	addi	r2,fp,-20
   40b78:	1009883a 	mov	r4,r2
   40b7c:	0041b4c0 	call	41b4c <nextSongNote>
          //printf("BEEP! BEEP! BEEP! Alarm has gone off...\n");
          //printf("note.frequency == %d\n",note.frequency);
          //printf("note.duration == %d\n",note.duration);
          //printf("note.endofsong == %d\n",note.endofsong);

          writePWM(note.frequency);
   40b80:	e0bffc17 	ldw	r2,-16(fp)
   40b84:	1009883a 	mov	r4,r2
   40b88:	00413980 	call	41398 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   40b8c:	e0bffd17 	ldw	r2,-12(fp)
   40b90:	1009883a 	mov	r4,r2
   40b94:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      //printf("ERROR: mode.config.on has an invalid value\n");
    }

    // since we're currently in clock mode, 
    // we have to update the display after every second tick
    updateDisplay(clock);
   40b98:	e13ff917 	ldw	r4,-28(fp)
   40b9c:	00404600 	call	40460 <updateDisplay>
    clock = upClockSecond(CARRY_ON);
  }

  //printf("CLOCK TIME: %d:%d:%d\n",clock.hour,clock.minute,clock.second);

}
   40ba0:	00000d06 	br	40bd8 <timerSecondISR+0x194>

  }
  else {
    // since the current time is not being displayed, 
    // we don't update the display
    clock = upClockSecond(CARRY_ON);
   40ba4:	01000044 	movi	r4,1
   40ba8:	00426180 	call	42618 <upClockSecond>
   40bac:	e0bff905 	stb	r2,-28(fp)
   40bb0:	1006d23a 	srli	r3,r2,8
   40bb4:	1809883a 	mov	r4,r3
   40bb8:	00ffffc4 	movi	r3,-1
   40bbc:	20c6703a 	and	r3,r4,r3
   40bc0:	e0fff945 	stb	r3,-27(fp)
   40bc4:	1004d43a 	srli	r2,r2,16
   40bc8:	1007883a 	mov	r3,r2
   40bcc:	00bfffc4 	movi	r2,-1
   40bd0:	1884703a 	and	r2,r3,r2
   40bd4:	e0bff985 	stb	r2,-26(fp)
  }

  //printf("CLOCK TIME: %d:%d:%d\n",clock.hour,clock.minute,clock.second);

}
   40bd8:	0001883a 	nop
   40bdc:	e037883a 	mov	sp,fp
   40be0:	dfc00117 	ldw	ra,4(sp)
   40be4:	df000017 	ldw	fp,0(sp)
   40be8:	dec00204 	addi	sp,sp,8
   40bec:	f800283a 	ret

00040bf0 <switchesISR>:


/* ISR determines user requested mode
Once determined, the system will update the display to match what was requested, 
and perform other actions such as turn on/off the alarm (for example)*/
void switchesISR(void* isr_context) {
   40bf0:	defffa04 	addi	sp,sp,-24
   40bf4:	dfc00515 	stw	ra,20(sp)
   40bf8:	df000415 	stw	fp,16(sp)
   40bfc:	df000404 	addi	fp,sp,16
   40c00:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40c04:	0007883a 	mov	r3,zero
   40c08:	00800234 	movhi	r2,8
   40c0c:	10843b04 	addi	r2,r2,4332
   40c10:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40c14:	00422000 	call	42200 <determineMode>
   40c18:	1009883a 	mov	r4,r2
   40c1c:	180b883a 	mov	r5,r3
   40c20:	e13ffc05 	stb	r4,-16(fp)
   40c24:	2004d23a 	srli	r2,r4,8
   40c28:	1007883a 	mov	r3,r2
   40c2c:	00bfffc4 	movi	r2,-1
   40c30:	1884703a 	and	r2,r3,r2
   40c34:	e0bffc45 	stb	r2,-15(fp)
   40c38:	2004d43a 	srli	r2,r4,16
   40c3c:	1007883a 	mov	r3,r2
   40c40:	00bfffc4 	movi	r2,-1
   40c44:	1884703a 	and	r2,r3,r2
   40c48:	e0bffc85 	stb	r2,-14(fp)
   40c4c:	2004d63a 	srli	r2,r4,24
   40c50:	e0bffcc5 	stb	r2,-13(fp)
   40c54:	e17ffd05 	stb	r5,-12(fp)
   40c58:	2804d23a 	srli	r2,r5,8
   40c5c:	1007883a 	mov	r3,r2
   40c60:	00bfffc4 	movi	r2,-1
   40c64:	1884703a 	and	r2,r3,r2
   40c68:	e0bffd45 	stb	r2,-11(fp)

  /* if an invalid mode is requested, nothing needs to change except for the mode struct.
  if a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40c6c:	e0bffc03 	ldbu	r2,-16(fp)
   40c70:	10803fcc 	andi	r2,r2,255
   40c74:	10005a1e 	bne	r2,zero,40de0 <switchesISR+0x1f0>

    /* don't need to update the display if we're currently displaying the 
    the same mode that was requested */
    if (mode_request.display != mode.display) {
   40c78:	e0fffc43 	ldbu	r3,-15(fp)
   40c7c:	d0a0f743 	ldbu	r2,-31779(gp)
   40c80:	18c03fcc 	andi	r3,r3,255
   40c84:	10803fcc 	andi	r2,r2,255
   40c88:	18804926 	beq	r3,r2,40db0 <switchesISR+0x1c0>
      *** although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well depending on the switch resolution. */
      struct time display;

      switch(mode_request.display) {
   40c8c:	e0bffc43 	ldbu	r2,-15(fp)
   40c90:	10803fcc 	andi	r2,r2,255
   40c94:	10c00060 	cmpeqi	r3,r2,1
   40c98:	1800161e 	bne	r3,zero,40cf4 <switchesISR+0x104>
   40c9c:	10c00088 	cmpgei	r3,r2,2
   40ca0:	1800021e 	bne	r3,zero,40cac <switchesISR+0xbc>
   40ca4:	10000626 	beq	r2,zero,40cc0 <switchesISR+0xd0>
   40ca8:	00003006 	br	40d6c <switchesISR+0x17c>
   40cac:	10c000a0 	cmpeqi	r3,r2,2
   40cb0:	18001d1e 	bne	r3,zero,40d28 <switchesISR+0x138>
   40cb4:	108000e0 	cmpeqi	r2,r2,3
   40cb8:	1000221e 	bne	r2,zero,40d44 <switchesISR+0x154>
   40cbc:	00002b06 	br	40d6c <switchesISR+0x17c>
        case DISP_CLOCK: 
          display = getClockTime();
   40cc0:	00425940 	call	42594 <getClockTime>
   40cc4:	e0bffd85 	stb	r2,-10(fp)
   40cc8:	1006d23a 	srli	r3,r2,8
   40ccc:	1809883a 	mov	r4,r3
   40cd0:	00ffffc4 	movi	r3,-1
   40cd4:	20c6703a 	and	r3,r4,r3
   40cd8:	e0fffdc5 	stb	r3,-9(fp)
   40cdc:	1004d43a 	srli	r2,r2,16
   40ce0:	1007883a 	mov	r3,r2
   40ce4:	00bfffc4 	movi	r2,-1
   40ce8:	1884703a 	and	r2,r3,r2
   40cec:	e0bffe05 	stb	r2,-8(fp)
          break;
   40cf0:	00002106 	br	40d78 <switchesISR+0x188>

        case DISP_ALARM:
          display = getAlarmTime();
   40cf4:	0042ad00 	call	42ad0 <getAlarmTime>
   40cf8:	e0bffd85 	stb	r2,-10(fp)
   40cfc:	1006d23a 	srli	r3,r2,8
   40d00:	1809883a 	mov	r4,r3
   40d04:	00ffffc4 	movi	r3,-1
   40d08:	20c6703a 	and	r3,r4,r3
   40d0c:	e0fffdc5 	stb	r3,-9(fp)
   40d10:	1004d43a 	srli	r2,r2,16
   40d14:	1007883a 	mov	r3,r2
   40d18:	00bfffc4 	movi	r2,-1
   40d1c:	1884703a 	and	r2,r3,r2
   40d20:	e0bffe05 	stb	r2,-8(fp)
          break;
   40d24:	00001406 	br	40d78 <switchesISR+0x188>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" digits for the 7 seg display.
          For the moment this means that we're not going to check if the volume exceeds 99 */
          display.hour = DONT_DISPLAY;
   40d28:	00801904 	movi	r2,100
   40d2c:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40d30:	00801904 	movi	r2,100
   40d34:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getVolume();
   40d38:	00412b80 	call	412b8 <getVolume>
   40d3c:	e0bffe05 	stb	r2,-8(fp)
          break;
   40d40:	00000d06 	br	40d78 <switchesISR+0x188>
          //printf("switch to song display mode...\n");

          /* the current song will be displayed on the "second" digits for the 7 seg display.
          7 segment displays. For the moment this means that we're not going to check 
          if the song index exceeds 99  */
          display.hour = DONT_DISPLAY;
   40d44:	00801904 	movi	r2,100
   40d48:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40d4c:	00801904 	movi	r2,100
   40d50:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getSongIndex();
   40d54:	00417600 	call	41760 <getSongIndex>
   40d58:	e0bffe05 	stb	r2,-8(fp)

          initializeSong();
   40d5c:	00418940 	call	41894 <initializeSong>
          timerPWMEnableInterrupt(PAUSE_DURATION_MS);
   40d60:	0100fa04 	movi	r4,1000
   40d64:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   40d68:	00000306 	br	40d78 <switchesISR+0x188>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40d6c:	01000134 	movhi	r4,4
   40d70:	2115e204 	addi	r4,r4,22408
   40d74:	0043c7c0 	call	43c7c <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40d78:	e0bffd8b 	ldhu	r2,-10(fp)
   40d7c:	e0fffe0b 	ldhu	r3,-8(fp)
   40d80:	18c03fcc 	andi	r3,r3,255
   40d84:	1806943a 	slli	r3,r3,16
   40d88:	1888b03a 	or	r4,r3,r2
   40d8c:	0007883a 	mov	r3,zero
   40d90:	00804034 	movhi	r2,256
   40d94:	10bfffc4 	addi	r2,r2,-1
   40d98:	2084703a 	and	r2,r4,r2
   40d9c:	18ffc02c 	andhi	r3,r3,65280
   40da0:	1884b03a 	or	r2,r3,r2
   40da4:	1007883a 	mov	r3,r2
   40da8:	1809883a 	mov	r4,r3
   40dac:	00404600 	call	40460 <updateDisplay>
    else { 
      //printf("The requested display mode is already active\n");
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40db0:	e0bffc83 	ldbu	r2,-14(fp)
   40db4:	10803fcc 	andi	r2,r2,255
   40db8:	1000081e 	bne	r2,zero,40ddc <switchesISR+0x1ec>
      alarmLEDoff();
   40dbc:	00409080 	call	40908 <alarmLEDoff>
      /* only stop the song if we're not in the song selection display.
      otherwise, the song that is being sampled while on this display will suddenly
      stop playing. A song should only stop playing if an armed alarm went off,
      and then a user decides to turn off said alarm, OR if a user changes from
      the song display menu to any other menu */
      if (mode_request.display != DISP_SONG) {
   40dc0:	e0bffc43 	ldbu	r2,-15(fp)
   40dc4:	10803fcc 	andi	r2,r2,255
   40dc8:	108000e0 	cmpeqi	r2,r2,3
   40dcc:	1000041e 	bne	r2,zero,40de0 <switchesISR+0x1f0>
          //printf("song stopped because alarm is off and system is not currently in song display mode!\n");

        stopPWM();
   40dd0:	004134c0 	call	4134c <stopPWM>
        timerPWMDisableInterrupt();
   40dd4:	00408d80 	call	408d8 <timerPWMDisableInterrupt>
   40dd8:	00000106 	br	40de0 <switchesISR+0x1f0>
      }
    }

    // occurs when mode_request.alarm == ON
    else {
      alarmLEDon();
   40ddc:	00409380 	call	40938 <alarmLEDon>
  else {
    //printf("ERROR: An invalid mode was requested\n");
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40de0:	e0bffc03 	ldbu	r2,-16(fp)
   40de4:	d0a0f705 	stb	r2,-31780(gp)
   40de8:	e0bffc43 	ldbu	r2,-15(fp)
   40dec:	d0a0f745 	stb	r2,-31779(gp)
   40df0:	e0bffc83 	ldbu	r2,-14(fp)
   40df4:	d0a0f785 	stb	r2,-31778(gp)
   40df8:	e0bffcc3 	ldbu	r2,-13(fp)
   40dfc:	d0a0f7c5 	stb	r2,-31777(gp)
   40e00:	e0bffd03 	ldbu	r2,-12(fp)
   40e04:	d0a0f805 	stb	r2,-31776(gp)
   40e08:	e0bffd43 	ldbu	r2,-11(fp)
   40e0c:	d0a0f845 	stb	r2,-31775(gp)
  return;
   40e10:	0001883a 	nop
}
   40e14:	e037883a 	mov	sp,fp
   40e18:	dfc00117 	ldw	ra,4(sp)
   40e1c:	df000017 	ldw	fp,0(sp)
   40e20:	dec00204 	addi	sp,sp,8
   40e24:	f800283a 	ret

00040e28 <buttonsISR>:

/* ISR determines what sort of operation the user wants to perform for the
correctly active display mode (increase/decrease clock time, song select, etc.).
Once the requested operation is determined, the system will 
update the display to match what was requested */
void buttonsISR(void* isr_context) {
   40e28:	defffc04 	addi	sp,sp,-16
   40e2c:	dfc00315 	stw	ra,12(sp)
   40e30:	df000215 	stw	fp,8(sp)
   40e34:	df000204 	addi	fp,sp,8
   40e38:	e13fff15 	stw	r4,-4(fp)

  /* if the user is not currently configuring something (time, alarm, etc), 
  then a button press won't do anything */
  if (mode.config.on == FALSE) {
   40e3c:	d0a0f7c3 	ldbu	r2,-31777(gp)
   40e40:	10803fcc 	andi	r2,r2,255
   40e44:	1000051e 	bne	r2,zero,40e5c <buttonsISR+0x34>
    //printf("ERROR: Not currently in config mode! Button press ignored\n");

    /* don't forget to reset edge capture register by writing to it and before
    exiting ISR */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40e48:	0007883a 	mov	r3,zero
   40e4c:	00800234 	movhi	r2,8
   40e50:	10841f04 	addi	r2,r2,4220
   40e54:	10c00035 	stwio	r3,0(r2)

    return;
   40e58:	0000e806 	br	411fc <buttonsISR+0x3d4>
  }
  else {
    // determine the operation requested based on the button's state
    uint8_t buttons_state = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
   40e5c:	00800234 	movhi	r2,8
   40e60:	10841f04 	addi	r2,r2,4220
   40e64:	10800037 	ldwio	r2,0(r2)
   40e68:	e0bffe05 	stb	r2,-8(fp)
      struct time display;

      /* what happens next is entirely dependant on what the current display mode is, whether or not 
      the button press was an UP or DOWN operation, and finally if the config was for the 
      minute or hour time units. This scary case statement figures it out */
      switch(mode.display) {
   40e6c:	d0a0f743 	ldbu	r2,-31779(gp)
   40e70:	10803fcc 	andi	r2,r2,255
   40e74:	10c00060 	cmpeqi	r3,r2,1
   40e78:	1800551e 	bne	r3,zero,40fd0 <buttonsISR+0x1a8>
   40e7c:	10c00088 	cmpgei	r3,r2,2
   40e80:	1800021e 	bne	r3,zero,40e8c <buttonsISR+0x64>
   40e84:	10000626 	beq	r2,zero,40ea0 <buttonsISR+0x78>
   40e88:	0000bf06 	br	41188 <buttonsISR+0x360>
   40e8c:	10c000a0 	cmpeqi	r3,r2,2
   40e90:	1800991e 	bne	r3,zero,410f8 <buttonsISR+0x2d0>
   40e94:	108000e0 	cmpeqi	r2,r2,3
   40e98:	1000a71e 	bne	r2,zero,41138 <buttonsISR+0x310>
   40e9c:	0000ba06 	br	41188 <buttonsISR+0x360>

        case DISP_CLOCK: 

          if (buttons_state == UP) {
   40ea0:	e0bffe03 	ldbu	r2,-8(fp)
   40ea4:	10800098 	cmpnei	r2,r2,2
   40ea8:	1000231e 	bne	r2,zero,40f38 <buttonsISR+0x110>
            if (mode.config.hour == TRUE) {
   40eac:	d0a0f803 	ldbu	r2,-31776(gp)
   40eb0:	10803fcc 	andi	r2,r2,255
   40eb4:	10800058 	cmpnei	r2,r2,1
   40eb8:	10000d1e 	bne	r2,zero,40ef0 <buttonsISR+0xc8>
              display = upClockHour();
   40ebc:	00427ac0 	call	427ac <upClockHour>
   40ec0:	e0bffe45 	stb	r2,-7(fp)
   40ec4:	1006d23a 	srli	r3,r2,8
   40ec8:	1809883a 	mov	r4,r3
   40ecc:	00ffffc4 	movi	r3,-1
   40ed0:	20c6703a 	and	r3,r4,r3
   40ed4:	e0fffe85 	stb	r3,-6(fp)
   40ed8:	1004d43a 	srli	r2,r2,16
   40edc:	1007883a 	mov	r3,r2
   40ee0:	00bfffc4 	movi	r2,-1
   40ee4:	1884703a 	and	r2,r3,r2
   40ee8:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40eec:	0000aa06 	br	41198 <buttonsISR+0x370>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40ef0:	d0a0f843 	ldbu	r2,-31775(gp)
   40ef4:	10803fcc 	andi	r2,r2,255
   40ef8:	10800058 	cmpnei	r2,r2,1
   40efc:	1000a61e 	bne	r2,zero,41198 <buttonsISR+0x370>
              display = upClockMinute(CARRY_OFF);
   40f00:	0009883a 	mov	r4,zero
   40f04:	00426e40 	call	426e4 <upClockMinute>
   40f08:	e0bffe45 	stb	r2,-7(fp)
   40f0c:	1006d23a 	srli	r3,r2,8
   40f10:	1809883a 	mov	r4,r3
   40f14:	00ffffc4 	movi	r3,-1
   40f18:	20c6703a 	and	r3,r4,r3
   40f1c:	e0fffe85 	stb	r3,-6(fp)
   40f20:	1004d43a 	srli	r2,r2,16
   40f24:	1007883a 	mov	r3,r2
   40f28:	00bfffc4 	movi	r2,-1
   40f2c:	1884703a 	and	r2,r3,r2
   40f30:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40f34:	00009806 	br	41198 <buttonsISR+0x370>
            }
            else if (mode.config.minute == TRUE) {
              display = upClockMinute(CARRY_OFF);
            }
          }
          else if (buttons_state == DOWN) {
   40f38:	e0bffe03 	ldbu	r2,-8(fp)
   40f3c:	10800058 	cmpnei	r2,r2,1
   40f40:	1000951e 	bne	r2,zero,41198 <buttonsISR+0x370>
            if (mode.config.hour == TRUE) {
   40f44:	d0a0f803 	ldbu	r2,-31776(gp)
   40f48:	10803fcc 	andi	r2,r2,255
   40f4c:	10800058 	cmpnei	r2,r2,1
   40f50:	10000d1e 	bne	r2,zero,40f88 <buttonsISR+0x160>
              display = downClockHour();
   40f54:	00429f00 	call	429f0 <downClockHour>
   40f58:	e0bffe45 	stb	r2,-7(fp)
   40f5c:	1006d23a 	srli	r3,r2,8
   40f60:	1809883a 	mov	r4,r3
   40f64:	00ffffc4 	movi	r3,-1
   40f68:	20c6703a 	and	r3,r4,r3
   40f6c:	e0fffe85 	stb	r3,-6(fp)
   40f70:	1004d43a 	srli	r2,r2,16
   40f74:	1007883a 	mov	r3,r2
   40f78:	00bfffc4 	movi	r2,-1
   40f7c:	1884703a 	and	r2,r3,r2
   40f80:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40f84:	00008406 	br	41198 <buttonsISR+0x370>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40f88:	d0a0f843 	ldbu	r2,-31775(gp)
   40f8c:	10803fcc 	andi	r2,r2,255
   40f90:	10800058 	cmpnei	r2,r2,1
   40f94:	1000801e 	bne	r2,zero,41198 <buttonsISR+0x370>
              display = downClockMinute(CARRY_OFF);
   40f98:	0009883a 	mov	r4,zero
   40f9c:	00429280 	call	42928 <downClockMinute>
   40fa0:	e0bffe45 	stb	r2,-7(fp)
   40fa4:	1006d23a 	srli	r3,r2,8
   40fa8:	1809883a 	mov	r4,r3
   40fac:	00ffffc4 	movi	r3,-1
   40fb0:	20c6703a 	and	r3,r4,r3
   40fb4:	e0fffe85 	stb	r3,-6(fp)
   40fb8:	1004d43a 	srli	r2,r2,16
   40fbc:	1007883a 	mov	r3,r2
   40fc0:	00bfffc4 	movi	r2,-1
   40fc4:	1884703a 	and	r2,r3,r2
   40fc8:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   40fcc:	00007206 	br	41198 <buttonsISR+0x370>

        case DISP_ALARM:

          if (buttons_state == UP) {
   40fd0:	e0bffe03 	ldbu	r2,-8(fp)
   40fd4:	10800098 	cmpnei	r2,r2,2
   40fd8:	1000221e 	bne	r2,zero,41064 <buttonsISR+0x23c>
            if (mode.config.hour == TRUE) {
   40fdc:	d0a0f803 	ldbu	r2,-31776(gp)
   40fe0:	10803fcc 	andi	r2,r2,255
   40fe4:	10800058 	cmpnei	r2,r2,1
   40fe8:	10000d1e 	bne	r2,zero,41020 <buttonsISR+0x1f8>
              display = upAlarmHour();
   40fec:	0042bfc0 	call	42bfc <upAlarmHour>
   40ff0:	e0bffe45 	stb	r2,-7(fp)
   40ff4:	1006d23a 	srli	r3,r2,8
   40ff8:	1809883a 	mov	r4,r3
   40ffc:	00ffffc4 	movi	r3,-1
   41000:	20c6703a 	and	r3,r4,r3
   41004:	e0fffe85 	stb	r3,-6(fp)
   41008:	1004d43a 	srli	r2,r2,16
   4100c:	1007883a 	mov	r3,r2
   41010:	00bfffc4 	movi	r2,-1
   41014:	1884703a 	and	r2,r3,r2
   41018:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   4101c:	00006006 	br	411a0 <buttonsISR+0x378>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   41020:	d0a0f843 	ldbu	r2,-31775(gp)
   41024:	10803fcc 	andi	r2,r2,255
   41028:	10800058 	cmpnei	r2,r2,1
   4102c:	10005c1e 	bne	r2,zero,411a0 <buttonsISR+0x378>
              display = upAlarmMinute();
   41030:	0042b540 	call	42b54 <upAlarmMinute>
   41034:	e0bffe45 	stb	r2,-7(fp)
   41038:	1006d23a 	srli	r3,r2,8
   4103c:	1809883a 	mov	r4,r3
   41040:	00ffffc4 	movi	r3,-1
   41044:	20c6703a 	and	r3,r4,r3
   41048:	e0fffe85 	stb	r3,-6(fp)
   4104c:	1004d43a 	srli	r2,r2,16
   41050:	1007883a 	mov	r3,r2
   41054:	00bfffc4 	movi	r2,-1
   41058:	1884703a 	and	r2,r3,r2
   4105c:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41060:	00004f06 	br	411a0 <buttonsISR+0x378>
            }
            else if (mode.config.minute == TRUE) {
              display = upAlarmMinute();
            }
          }
          else if (buttons_state == DOWN) {
   41064:	e0bffe03 	ldbu	r2,-8(fp)
   41068:	10800058 	cmpnei	r2,r2,1
   4106c:	10004c1e 	bne	r2,zero,411a0 <buttonsISR+0x378>
            if (mode.config.hour == TRUE) {
   41070:	d0a0f803 	ldbu	r2,-31776(gp)
   41074:	10803fcc 	andi	r2,r2,255
   41078:	10800058 	cmpnei	r2,r2,1
   4107c:	10000d1e 	bne	r2,zero,410b4 <buttonsISR+0x28c>
              display = downAlarmHour();
   41080:	0042d540 	call	42d54 <downAlarmHour>
   41084:	e0bffe45 	stb	r2,-7(fp)
   41088:	1006d23a 	srli	r3,r2,8
   4108c:	1809883a 	mov	r4,r3
   41090:	00ffffc4 	movi	r3,-1
   41094:	20c6703a 	and	r3,r4,r3
   41098:	e0fffe85 	stb	r3,-6(fp)
   4109c:	1004d43a 	srli	r2,r2,16
   410a0:	1007883a 	mov	r3,r2
   410a4:	00bfffc4 	movi	r2,-1
   410a8:	1884703a 	and	r2,r3,r2
   410ac:	e0bffec5 	stb	r2,-5(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   410b0:	00003b06 	br	411a0 <buttonsISR+0x378>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   410b4:	d0a0f843 	ldbu	r2,-31775(gp)
   410b8:	10803fcc 	andi	r2,r2,255
   410bc:	10800058 	cmpnei	r2,r2,1
   410c0:	1000371e 	bne	r2,zero,411a0 <buttonsISR+0x378>
              display = downAlarmMinute();
   410c4:	0042cac0 	call	42cac <downAlarmMinute>
   410c8:	e0bffe45 	stb	r2,-7(fp)
   410cc:	1006d23a 	srli	r3,r2,8
   410d0:	1809883a 	mov	r4,r3
   410d4:	00ffffc4 	movi	r3,-1
   410d8:	20c6703a 	and	r3,r4,r3
   410dc:	e0fffe85 	stb	r3,-6(fp)
   410e0:	1004d43a 	srli	r2,r2,16
   410e4:	1007883a 	mov	r3,r2
   410e8:	00bfffc4 	movi	r2,-1
   410ec:	1884703a 	and	r2,r3,r2
   410f0:	e0bffec5 	stb	r2,-5(fp)
            }
          }
          break;
   410f4:	00002a06 	br	411a0 <buttonsISR+0x378>


        case DISP_VOLUME:

          display.hour = DONT_DISPLAY;
   410f8:	00801904 	movi	r2,100
   410fc:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   41100:	00801904 	movi	r2,100
   41104:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   41108:	e0bffe03 	ldbu	r2,-8(fp)
   4110c:	10800098 	cmpnei	r2,r2,2
   41110:	1000031e 	bne	r2,zero,41120 <buttonsISR+0x2f8>
            display.second = upVolume();
   41114:	00412d80 	call	412d8 <upVolume>
   41118:	e0bffec5 	stb	r2,-5(fp)
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   4111c:	00002206 	br	411a8 <buttonsISR+0x380>
          display.hour = DONT_DISPLAY;
          display.minute = DONT_DISPLAY;
          if (buttons_state == UP) {
            display.second = upVolume();
          }
          else if (buttons_state == DOWN) {
   41120:	e0bffe03 	ldbu	r2,-8(fp)
   41124:	10800058 	cmpnei	r2,r2,1
   41128:	10001f1e 	bne	r2,zero,411a8 <buttonsISR+0x380>
            display.second = downVolume();
   4112c:	00413140 	call	41314 <downVolume>
   41130:	e0bffec5 	stb	r2,-5(fp)
          }
          
          break;
   41134:	00001c06 	br	411a8 <buttonsISR+0x380>

        case DISP_SONG:

          // immediately cut the PWM in case a song is currently being played
          stopPWM();
   41138:	004134c0 	call	4134c <stopPWM>

          //printf("button input while in display song mode...\n");

          display.hour = DONT_DISPLAY;
   4113c:	00801904 	movi	r2,100
   41140:	e0bffe45 	stb	r2,-7(fp)
          display.minute = DONT_DISPLAY;
   41144:	00801904 	movi	r2,100
   41148:	e0bffe85 	stb	r2,-6(fp)
          if (buttons_state == UP) {
   4114c:	e0bffe03 	ldbu	r2,-8(fp)
   41150:	10800098 	cmpnei	r2,r2,2
   41154:	1000031e 	bne	r2,zero,41164 <buttonsISR+0x33c>
            display.second = upSong();
   41158:	00417800 	call	41780 <upSong>
   4115c:	e0bffec5 	stb	r2,-5(fp)
   41160:	00000506 	br	41178 <buttonsISR+0x350>
          }
          else if (buttons_state == DOWN) {
   41164:	e0bffe03 	ldbu	r2,-8(fp)
   41168:	10800058 	cmpnei	r2,r2,1
   4116c:	1000021e 	bne	r2,zero,41178 <buttonsISR+0x350>
            display.second = downSong();
   41170:	00417c40 	call	417c4 <downSong>
   41174:	e0bffec5 	stb	r2,-5(fp)
          }

          // intialize song, but add a pause before song starts
          initializeSong();
   41178:	00418940 	call	41894 <initializeSong>

          timerPWMEnableInterrupt(PAUSE_DURATION_MS);
   4117c:	0100fa04 	movi	r4,1000
   41180:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   41184:	00000906 	br	411ac <buttonsISR+0x384>

        default:
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
   41188:	01000134 	movhi	r4,4
   4118c:	2115ed04 	addi	r4,r4,22452
   41190:	0043c7c0 	call	43c7c <puts>
   41194:	00000506 	br	411ac <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41198:	0001883a 	nop
   4119c:	00000306 	br	411ac <buttonsISR+0x384>
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   411a0:	0001883a 	nop
   411a4:	00000106 	br	411ac <buttonsISR+0x384>
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   411a8:	0001883a 	nop
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   411ac:	e0bffe43 	ldbu	r2,-7(fp)
   411b0:	e0fffe83 	ldbu	r3,-6(fp)
   411b4:	1806923a 	slli	r3,r3,8
   411b8:	1884b03a 	or	r2,r3,r2
   411bc:	e0fffec3 	ldbu	r3,-5(fp)
   411c0:	1806943a 	slli	r3,r3,16
   411c4:	1888b03a 	or	r4,r3,r2
   411c8:	0007883a 	mov	r3,zero
   411cc:	00804034 	movhi	r2,256
   411d0:	10bfffc4 	addi	r2,r2,-1
   411d4:	2084703a 	and	r2,r4,r2
   411d8:	18ffc02c 	andhi	r3,r3,65280
   411dc:	1884b03a 	or	r2,r3,r2
   411e0:	1007883a 	mov	r3,r2
   411e4:	1809883a 	mov	r4,r3
   411e8:	00404600 	call	40460 <updateDisplay>
    }

  // we can't forget to reset edge capture register by writing to it!
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   411ec:	0007883a 	mov	r3,zero
   411f0:	00800234 	movhi	r2,8
   411f4:	10841f04 	addi	r2,r2,4220
   411f8:	10c00035 	stwio	r3,0(r2)

}
   411fc:	e037883a 	mov	sp,fp
   41200:	dfc00117 	ldw	ra,4(sp)
   41204:	df000017 	ldw	fp,0(sp)
   41208:	dec00204 	addi	sp,sp,8
   4120c:	f800283a 	ret

00041210 <timerPWMISR>:


void timerPWMISR(void* isr_context) {
   41210:	defff904 	addi	sp,sp,-28
   41214:	dfc00615 	stw	ra,24(sp)
   41218:	df000515 	stw	fp,20(sp)
   4121c:	df000504 	addi	fp,sp,20
   41220:	e13fff15 	stw	r4,-4(fp)
  //printf("timerPWMISR has fired!\n");

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_PWM_BASE, 0);
   41224:	0007883a 	mov	r3,zero
   41228:	00800234 	movhi	r2,8
   4122c:	10840004 	addi	r2,r2,4096
   41230:	10c00035 	stwio	r3,0(r2)

  struct note_info note;

  note = nextSongNote();
   41234:	e13ffb04 	addi	r4,fp,-20
   41238:	0041b4c0 	call	41b4c <nextSongNote>
  //printf("note.frequency == %d\n",note.frequency);
  //printf("note.duration == %d\n",note.duration);
  //printf("note.endofsong == %d\n",note.endofsong);

  if (note.endofsong == FALSE) {
   4123c:	e0bffe17 	ldw	r2,-8(fp)
   41240:	1000071e 	bne	r2,zero,41260 <timerPWMISR+0x50>
    writePWM(note.frequency);
   41244:	e0bffc17 	ldw	r2,-16(fp)
   41248:	1009883a 	mov	r4,r2
   4124c:	00413980 	call	41398 <writePWM>
    timerPWMEnableInterrupt(note.duration);
   41250:	e0bffd17 	ldw	r2,-12(fp)
   41254:	1009883a 	mov	r4,r2
   41258:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      initializeSong();
      timerPWMEnableInterrupt(PAUSE_DURATION_MS);  
    }
  }

}
   4125c:	00001006 	br	412a0 <timerPWMISR+0x90>

  if (note.endofsong == FALSE) {
    writePWM(note.frequency);
    timerPWMEnableInterrupt(note.duration);
  }
  else if (note.endofsong == TRUE) {
   41260:	e0bffe17 	ldw	r2,-8(fp)
   41264:	10800058 	cmpnei	r2,r2,1
   41268:	10000d1e 	bne	r2,zero,412a0 <timerPWMISR+0x90>

    if (mode.display == DISP_SONG) {
   4126c:	d0a0f743 	ldbu	r2,-31779(gp)
   41270:	10803fcc 	andi	r2,r2,255
   41274:	108000d8 	cmpnei	r2,r2,3
   41278:	1000051e 	bne	r2,zero,41290 <timerPWMISR+0x80>
      
      #ifdef REPEAT_SONG_PREVIEW
        //printf("repeating song preview while in display song mode...\n");
        stopPWM();   
   4127c:	004134c0 	call	4134c <stopPWM>
        initializeSong();
   41280:	00418940 	call	41894 <initializeSong>
        timerPWMEnableInterrupt(PAUSE_DURATION_MS);  
   41284:	0100fa04 	movi	r4,1000
   41288:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      initializeSong();
      timerPWMEnableInterrupt(PAUSE_DURATION_MS);  
    }
  }

}
   4128c:	00000406 	br	412a0 <timerPWMISR+0x90>
      #endif

    }

    else {
      stopPWM();
   41290:	004134c0 	call	4134c <stopPWM>
      //printf("repeating song while alarm is currently going off\n");
      initializeSong();
   41294:	00418940 	call	41894 <initializeSong>
      timerPWMEnableInterrupt(PAUSE_DURATION_MS);  
   41298:	0100fa04 	movi	r4,1000
   4129c:	004086c0 	call	4086c <timerPWMEnableInterrupt>
    }
  }

}
   412a0:	0001883a 	nop
   412a4:	e037883a 	mov	sp,fp
   412a8:	dfc00117 	ldw	ra,4(sp)
   412ac:	df000017 	ldw	fp,0(sp)
   412b0:	dec00204 	addi	sp,sp,8
   412b4:	f800283a 	ret

000412b8 <getVolume>:
#include "pwm.h"

uint8_t volume = 1;

uint8_t getVolume(void) {
   412b8:	deffff04 	addi	sp,sp,-4
   412bc:	df000015 	stw	fp,0(sp)
   412c0:	d839883a 	mov	fp,sp
  return volume;
   412c4:	d0a00003 	ldbu	r2,-32768(gp)
}
   412c8:	e037883a 	mov	sp,fp
   412cc:	df000017 	ldw	fp,0(sp)
   412d0:	dec00104 	addi	sp,sp,4
   412d4:	f800283a 	ret

000412d8 <upVolume>:

uint8_t upVolume(void) {
   412d8:	deffff04 	addi	sp,sp,-4
   412dc:	df000015 	stw	fp,0(sp)
   412e0:	d839883a 	mov	fp,sp
  if (volume != MAX_VOLUME) {
   412e4:	d0a00003 	ldbu	r2,-32768(gp)
   412e8:	10803fcc 	andi	r2,r2,255
   412ec:	10800320 	cmpeqi	r2,r2,12
   412f0:	1000031e 	bne	r2,zero,41300 <upVolume+0x28>
    volume++;
   412f4:	d0a00003 	ldbu	r2,-32768(gp)
   412f8:	10800044 	addi	r2,r2,1
   412fc:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   41300:	d0a00003 	ldbu	r2,-32768(gp)
}
   41304:	e037883a 	mov	sp,fp
   41308:	df000017 	ldw	fp,0(sp)
   4130c:	dec00104 	addi	sp,sp,4
   41310:	f800283a 	ret

00041314 <downVolume>:
uint8_t downVolume(void) {
   41314:	deffff04 	addi	sp,sp,-4
   41318:	df000015 	stw	fp,0(sp)
   4131c:	d839883a 	mov	fp,sp
  if (volume != 0) {
   41320:	d0a00003 	ldbu	r2,-32768(gp)
   41324:	10803fcc 	andi	r2,r2,255
   41328:	10000326 	beq	r2,zero,41338 <downVolume+0x24>
    volume--;
   4132c:	d0a00003 	ldbu	r2,-32768(gp)
   41330:	10bfffc4 	addi	r2,r2,-1
   41334:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   41338:	d0a00003 	ldbu	r2,-32768(gp)
}
   4133c:	e037883a 	mov	sp,fp
   41340:	df000017 	ldw	fp,0(sp)
   41344:	dec00104 	addi	sp,sp,4
   41348:	f800283a 	ret

0004134c <stopPWM>:

void stopPWM(void) {
   4134c:	defffd04 	addi	sp,sp,-12
   41350:	dfc00215 	stw	ra,8(sp)
   41354:	df000115 	stw	fp,4(sp)
   41358:	df000104 	addi	fp,sp,4
  int return_code = ALTERA_AVALON_PWM_OK;
   4135c:	e03fff15 	stw	zero,-4(fp)

  //Disable PWM and Check Return Code
  return_code = altera_avalon_pwm_disable(PWM_BASE); 
   41360:	01000234 	movhi	r4,8
   41364:	21043c04 	addi	r4,r4,4336
   41368:	00403380 	call	40338 <altera_avalon_pwm_disable>
   4136c:	e0bfff15 	stw	r2,-4(fp)
  check_return_code(PWM_BASE, return_code);
   41370:	e17fff17 	ldw	r5,-4(fp)
   41374:	01000234 	movhi	r4,8
   41378:	21043c04 	addi	r4,r4,4336
   4137c:	00416300 	call	41630 <check_return_code>
}
   41380:	0001883a 	nop
   41384:	e037883a 	mov	sp,fp
   41388:	dfc00117 	ldw	ra,4(sp)
   4138c:	df000017 	ldw	fp,0(sp)
   41390:	dec00204 	addi	sp,sp,8
   41394:	f800283a 	ret

00041398 <writePWM>:

void writePWM(int frequency) {
   41398:	defffa04 	addi	sp,sp,-24
   4139c:	dfc00515 	stw	ra,20(sp)
   413a0:	df000415 	stw	fp,16(sp)
   413a4:	df000404 	addi	fp,sp,16
   413a8:	e13fff15 	stw	r4,-4(fp)

  if (frequency == 0) {
   413ac:	e0bfff17 	ldw	r2,-4(fp)
   413b0:	1000021e 	bne	r2,zero,413bc <writePWM+0x24>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
   413b4:	004134c0 	call	4134c <stopPWM>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
    check_return_code(PWM_BASE, return_code);
  }
}
   413b8:	00002a06 	br	41464 <writePWM+0xcc>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
  }
  else {
    // conversion of input frequency to PWM clock cycle divide value
    unsigned int clock_divide = NIOS_CLOCK_FREQ/frequency;
   413bc:	e17fff17 	ldw	r5,-4(fp)
   413c0:	0100bef4 	movhi	r4,763
   413c4:	213c2004 	addi	r4,r4,-3968
   413c8:	0042e600 	call	42e60 <__divsi3>
   413cc:	e0bffc15 	stw	r2,-16(fp)

    unsigned int duty_cycle = clock_divide*duty_cycle_lookup_table[volume];
   413d0:	e13ffc17 	ldw	r4,-16(fp)
   413d4:	0043a200 	call	43a20 <__floatunsisf>
   413d8:	1009883a 	mov	r4,r2
   413dc:	d0a00003 	ldbu	r2,-32768(gp)
   413e0:	10c03fcc 	andi	r3,r2,255
   413e4:	00800134 	movhi	r2,4
   413e8:	1095fc04 	addi	r2,r2,22512
   413ec:	18c7883a 	add	r3,r3,r3
   413f0:	18c7883a 	add	r3,r3,r3
   413f4:	10c5883a 	add	r2,r2,r3
   413f8:	10c00017 	ldw	r3,0(r2)
   413fc:	180b883a 	mov	r5,r3
   41400:	00430d00 	call	430d0 <__mulsf3>
   41404:	1007883a 	mov	r3,r2
   41408:	1805883a 	mov	r2,r3
   4140c:	1009883a 	mov	r4,r2
   41410:	0042e000 	call	42e00 <__fixunssfsi>
   41414:	e0bffd15 	stw	r2,-12(fp)

    int return_code = ALTERA_AVALON_PWM_OK;
   41418:	e03ffe15 	stw	zero,-8(fp)
    
    //Initialize PWM and Check Return Code
    return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   4141c:	e1bffd17 	ldw	r6,-12(fp)
   41420:	e17ffc17 	ldw	r5,-16(fp)
   41424:	01000234 	movhi	r4,8
   41428:	21043c04 	addi	r4,r4,4336
   4142c:	00402800 	call	40280 <altera_avalon_pwm_init>
   41430:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   41434:	e17ffe17 	ldw	r5,-8(fp)
   41438:	01000234 	movhi	r4,8
   4143c:	21043c04 	addi	r4,r4,4336
   41440:	00416300 	call	41630 <check_return_code>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
   41444:	01000234 	movhi	r4,8
   41448:	21043c04 	addi	r4,r4,4336
   4144c:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41450:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   41454:	e17ffe17 	ldw	r5,-8(fp)
   41458:	01000234 	movhi	r4,8
   4145c:	21043c04 	addi	r4,r4,4336
   41460:	00416300 	call	41630 <check_return_code>
  }
}
   41464:	0001883a 	nop
   41468:	e037883a 	mov	sp,fp
   4146c:	dfc00117 	ldw	ra,4(sp)
   41470:	df000017 	ldw	fp,0(sp)
   41474:	dec00204 	addi	sp,sp,8
   41478:	f800283a 	ret

0004147c <default500HzSquareWave>:

void default500HzSquareWave(void) {
   4147c:	defffb04 	addi	sp,sp,-20
   41480:	dfc00415 	stw	ra,16(sp)
   41484:	df000315 	stw	fp,12(sp)
   41488:	df000304 	addi	fp,sp,12

 unsigned int clock_divide = 100000;
   4148c:	008000b4 	movhi	r2,2
   41490:	10a1a804 	addi	r2,r2,-31072
   41494:	e0bffd15 	stw	r2,-12(fp)
 unsigned int duty_cycle =    50000;
   41498:	00b0d414 	movui	r2,50000
   4149c:	e0bffe15 	stw	r2,-8(fp)
 int return_code = ALTERA_AVALON_PWM_OK;
   414a0:	e03fff15 	stw	zero,-4(fp)
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   414a4:	e1bffe17 	ldw	r6,-8(fp)
   414a8:	e17ffd17 	ldw	r5,-12(fp)
   414ac:	01000234 	movhi	r4,8
   414b0:	21043c04 	addi	r4,r4,4336
   414b4:	00402800 	call	40280 <altera_avalon_pwm_init>
   414b8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   414bc:	e17fff17 	ldw	r5,-4(fp)
   414c0:	01000234 	movhi	r4,8
   414c4:	21043c04 	addi	r4,r4,4336
   414c8:	00416300 	call	41630 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   414cc:	01000234 	movhi	r4,8
   414d0:	21043c04 	addi	r4,r4,4336
   414d4:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   414d8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   414dc:	e17fff17 	ldw	r5,-4(fp)
   414e0:	01000234 	movhi	r4,8
   414e4:	21043c04 	addi	r4,r4,4336
   414e8:	00416300 	call	41630 <check_return_code>
}
   414ec:	0001883a 	nop
   414f0:	e037883a 	mov	sp,fp
   414f4:	dfc00117 	ldw	ra,4(sp)
   414f8:	df000017 	ldw	fp,0(sp)
   414fc:	dec00204 	addi	sp,sp,8
   41500:	f800283a 	ret

00041504 <testPWM>:



void testPWM(void) {
   41504:	defffc04 	addi	sp,sp,-16
   41508:	dfc00315 	stw	ra,12(sp)
   4150c:	df000215 	stw	fp,8(sp)
   41510:	df000204 	addi	fp,sp,8
 
 unsigned int duty_cycle;
 int return_code = ALTERA_AVALON_PWM_OK;
   41514:	e03fff15 	stw	zero,-4(fp)
 
 printf("Period = %u\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE) );
   41518:	00800234 	movhi	r2,8
   4151c:	10843c04 	addi	r2,r2,4336
   41520:	10800037 	ldwio	r2,0(r2)
   41524:	100b883a 	mov	r5,r2
   41528:	01000134 	movhi	r4,4
   4152c:	21160904 	addi	r4,r4,22564
   41530:	0043bb00 	call	43bb0 <printf>
 printf("Duty cycle = %u\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE) );
   41534:	00800234 	movhi	r2,8
   41538:	10843d04 	addi	r2,r2,4340
   4153c:	10800037 	ldwio	r2,0(r2)
   41540:	100b883a 	mov	r5,r2
   41544:	01000134 	movhi	r4,4
   41548:	21160d04 	addi	r4,r4,22580
   4154c:	0043bb00 	call	43bb0 <printf>
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, 500000, 1);  
   41550:	01800044 	movi	r6,1
   41554:	01400234 	movhi	r5,8
   41558:	29684804 	addi	r5,r5,-24288
   4155c:	01000234 	movhi	r4,8
   41560:	21043c04 	addi	r4,r4,4336
   41564:	00402800 	call	40280 <altera_avalon_pwm_init>
   41568:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4156c:	e17fff17 	ldw	r5,-4(fp)
   41570:	01000234 	movhi	r4,8
   41574:	21043c04 	addi	r4,r4,4336
   41578:	00416300 	call	41630 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   4157c:	01000234 	movhi	r4,8
   41580:	21043c04 	addi	r4,r4,4336
   41584:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41588:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4158c:	e17fff17 	ldw	r5,-4(fp)
   41590:	01000234 	movhi	r4,8
   41594:	21043c04 	addi	r4,r4,4336
   41598:	00416300 	call	41630 <check_return_code>

//init duty_cycle with the value written to duty_cycle register during initialization
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
   4159c:	00800234 	movhi	r2,8
   415a0:	10843d04 	addi	r2,r2,4340
   415a4:	10800037 	ldwio	r2,0(r2)
   415a8:	e0bffe15 	stw	r2,-8(fp)
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   415ac:	00000906 	br	415d4 <testPWM+0xd0>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   415b0:	e17ffe17 	ldw	r5,-8(fp)
   415b4:	01000234 	movhi	r4,8
   415b8:	21043c04 	addi	r4,r4,4336
   415bc:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
   415c0:	e0bfff15 	stw	r2,-4(fp)
      	check_return_code(PWM_BASE, return_code);
   415c4:	e17fff17 	ldw	r5,-4(fp)
   415c8:	01000234 	movhi	r4,8
   415cc:	21043c04 	addi	r4,r4,4336
   415d0:	00416300 	call	41630 <check_return_code>
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   415d4:	e0fffe17 	ldw	r3,-8(fp)
   415d8:	18800044 	addi	r2,r3,1
   415dc:	e0bffe15 	stw	r2,-8(fp)
   415e0:	00800234 	movhi	r2,8
   415e4:	10843c04 	addi	r2,r2,4336
   415e8:	10800037 	ldwio	r2,0(r2)
   415ec:	18bff036 	bltu	r3,r2,415b0 <__alt_data_end+0xfffd95b0>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   415f0:	00000406 	br	41604 <testPWM+0x100>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   415f4:	e17ffe17 	ldw	r5,-8(fp)
   415f8:	01000234 	movhi	r4,8
   415fc:	21043c04 	addi	r4,r4,4336
   41600:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   41604:	e0bffe17 	ldw	r2,-8(fp)
   41608:	10bfffc4 	addi	r2,r2,-1
   4160c:	e0bffe15 	stw	r2,-8(fp)
   41610:	e0bffe17 	ldw	r2,-8(fp)
   41614:	108000a8 	cmpgeui	r2,r2,2
   41618:	103ff61e 	bne	r2,zero,415f4 <__alt_data_end+0xfffd95f4>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
        check_return_code(PWM_BASE, return_code);
   4161c:	e17fff17 	ldw	r5,-4(fp)
   41620:	01000234 	movhi	r4,8
   41624:	21043c04 	addi	r4,r4,4336
   41628:	00416300 	call	41630 <check_return_code>
   }
   4162c:	003fdf06 	br	415ac <__alt_data_end+0xfffd95ac>

00041630 <check_return_code>:
}

void check_return_code(unsigned int address, int return_code)
{
   41630:	defffc04 	addi	sp,sp,-16
   41634:	dfc00315 	stw	ra,12(sp)
   41638:	df000215 	stw	fp,8(sp)
   4163c:	df000204 	addi	fp,sp,8
   41640:	e13ffe15 	stw	r4,-8(fp)
   41644:	e17fff15 	stw	r5,-4(fp)
	if(return_code != ALTERA_AVALON_PWM_OK)
   41648:	e0bfff17 	ldw	r2,-4(fp)
   4164c:	10000326 	beq	r2,zero,4165c <check_return_code+0x2c>
      		print_error(address, return_code);	
   41650:	e17fff17 	ldw	r5,-4(fp)
   41654:	e13ffe17 	ldw	r4,-8(fp)
   41658:	00416740 	call	41674 <print_error>
}
   4165c:	0001883a 	nop
   41660:	e037883a 	mov	sp,fp
   41664:	dfc00117 	ldw	ra,4(sp)
   41668:	df000017 	ldw	fp,0(sp)
   4166c:	dec00204 	addi	sp,sp,8
   41670:	f800283a 	ret

00041674 <print_error>:

void print_error(unsigned int address, int return_code)
{
   41674:	defffc04 	addi	sp,sp,-16
   41678:	dfc00315 	stw	ra,12(sp)
   4167c:	df000215 	stw	fp,8(sp)
   41680:	df000204 	addi	fp,sp,8
   41684:	e13ffe15 	stw	r4,-8(fp)
   41688:	e17fff15 	stw	r5,-4(fp)
	printf("Program Terminated Due to an error with Avalon PWM located at 0x%x:\n", address);
   4168c:	e17ffe17 	ldw	r5,-8(fp)
   41690:	01000134 	movhi	r4,4
   41694:	21161204 	addi	r4,r4,22600
   41698:	0043bb00 	call	43bb0 <printf>
	switch(return_code)
   4169c:	e0bfff17 	ldw	r2,-4(fp)
   416a0:	10ffffa0 	cmpeqi	r3,r2,-2
   416a4:	1800161e 	bne	r3,zero,41700 <print_error+0x8c>
   416a8:	10ffffe0 	cmpeqi	r3,r2,-1
   416ac:	1800031e 	bne	r3,zero,416bc <print_error+0x48>
   416b0:	10bfff60 	cmpeqi	r2,r2,-3
   416b4:	10001d1e 	bne	r2,zero,4172c <print_error+0xb8>
   416b8:	00002706 	br	41758 <print_error+0xe4>
	{
	case ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR:
		printf("The value in the clock cycle register must be greater than the value in the duty cycle register\n");
   416bc:	01000134 	movhi	r4,4
   416c0:	21162404 	addi	r4,r4,22672
   416c4:	0043c7c0 	call	43c7c <puts>
		printf("Value in the Clock Divide Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address)); 
   416c8:	e0bffe17 	ldw	r2,-8(fp)
   416cc:	10800037 	ldwio	r2,0(r2)
   416d0:	100b883a 	mov	r5,r2
   416d4:	01000134 	movhi	r4,4
   416d8:	21163c04 	addi	r4,r4,22768
   416dc:	0043bb00 	call	43bb0 <printf>
		printf("Value in the Duty Cycle Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(address));
   416e0:	e0bffe17 	ldw	r2,-8(fp)
   416e4:	10800104 	addi	r2,r2,4
   416e8:	10800037 	ldwio	r2,0(r2)
   416ec:	100b883a 	mov	r5,r2
   416f0:	01000134 	movhi	r4,4
   416f4:	21164704 	addi	r4,r4,22812
   416f8:	0043bb00 	call	43bb0 <printf>
		break;
   416fc:	00001706 	br	4175c <print_error+0xe8>
  case ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR:
    printf("Unable to confirm that the PWM is enabled\n");
   41700:	01000134 	movhi	r4,4
   41704:	21165104 	addi	r4,r4,22852
   41708:	0043c7c0 	call	43c7c <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   4170c:	e0bffe17 	ldw	r2,-8(fp)
   41710:	10800204 	addi	r2,r2,8
   41714:	10800037 	ldwio	r2,0(r2)
   41718:	100b883a 	mov	r5,r2
   4171c:	01000134 	movhi	r4,4
   41720:	21165c04 	addi	r4,r4,22896
   41724:	0043bb00 	call	43bb0 <printf>
    break;
   41728:	00000c06 	br	4175c <print_error+0xe8>
  case ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR:
  	printf("Unable to confirm that the PWM is disabled\n");
   4172c:	01000134 	movhi	r4,4
   41730:	21166504 	addi	r4,r4,22932
   41734:	0043c7c0 	call	43c7c <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   41738:	e0bffe17 	ldw	r2,-8(fp)
   4173c:	10800204 	addi	r2,r2,8
   41740:	10800037 	ldwio	r2,0(r2)
   41744:	100b883a 	mov	r5,r2
   41748:	01000134 	movhi	r4,4
   4174c:	21165c04 	addi	r4,r4,22896
   41750:	0043bb00 	call	43bb0 <printf>
  	break;
   41754:	00000106 	br	4175c <print_error+0xe8>
  default:
  	break; 		     
   41758:	0001883a 	nop
	}
while(1);
   4175c:	003fff06 	br	4175c <__alt_data_end+0xfffd975c>

00041760 <getSongIndex>:

/* p is a pointer to a const char -> we can change what to point at
but we can't change the actual value of the object that we're pointing at */
const char *p;

uint8_t getSongIndex(void) {
   41760:	deffff04 	addi	sp,sp,-4
   41764:	df000015 	stw	fp,0(sp)
   41768:	d839883a 	mov	fp,sp
  return song_index;
   4176c:	d0a0f903 	ldbu	r2,-31772(gp)
}
   41770:	e037883a 	mov	sp,fp
   41774:	df000017 	ldw	fp,0(sp)
   41778:	dec00104 	addi	sp,sp,4
   4177c:	f800283a 	ret

00041780 <upSong>:

uint8_t upSong(void) {
   41780:	deffff04 	addi	sp,sp,-4
   41784:	df000015 	stw	fp,0(sp)
   41788:	d839883a 	mov	fp,sp
  /* song is an array of pointers of type const char. Since each pointer has the same
  size in memory (char* takes up 1 byte) if we divide the size of the entire array by the size
  of 1 char pointer, we'll get the number char pointers and thus the number of songs */
  if (song_index == sizeof(song)/sizeof(song[0])){
   4178c:	d0a0f903 	ldbu	r2,-31772(gp)
   41790:	10803fcc 	andi	r2,r2,255
   41794:	10800798 	cmpnei	r2,r2,30
   41798:	1000021e 	bne	r2,zero,417a4 <upSong+0x24>

    // wrap around when scrolling through songs
    song_index = 0;
   4179c:	d020f905 	stb	zero,-31772(gp)
   417a0:	00000306 	br	417b0 <upSong+0x30>
  }
  else {
    song_index++;
   417a4:	d0a0f903 	ldbu	r2,-31772(gp)
   417a8:	10800044 	addi	r2,r2,1
   417ac:	d0a0f905 	stb	r2,-31772(gp)
  }
  return song_index;
   417b0:	d0a0f903 	ldbu	r2,-31772(gp)
}
   417b4:	e037883a 	mov	sp,fp
   417b8:	df000017 	ldw	fp,0(sp)
   417bc:	dec00104 	addi	sp,sp,4
   417c0:	f800283a 	ret

000417c4 <downSong>:

uint8_t downSong(void) {
   417c4:	deffff04 	addi	sp,sp,-4
   417c8:	df000015 	stw	fp,0(sp)
   417cc:	d839883a 	mov	fp,sp
  if (song_index == 0) {
   417d0:	d0a0f903 	ldbu	r2,-31772(gp)
   417d4:	10803fcc 	andi	r2,r2,255
   417d8:	1000031e 	bne	r2,zero,417e8 <downSong+0x24>

    // wrap around when scrolling through songs
    song_index = sizeof(song)/sizeof(song[0]);
   417dc:	00800784 	movi	r2,30
   417e0:	d0a0f905 	stb	r2,-31772(gp)
   417e4:	00000306 	br	417f4 <downSong+0x30>
  }
  else {
    song_index--;
   417e8:	d0a0f903 	ldbu	r2,-31772(gp)
   417ec:	10bfffc4 	addi	r2,r2,-1
   417f0:	d0a0f905 	stb	r2,-31772(gp)
  }
  return song_index;
   417f4:	d0a0f903 	ldbu	r2,-31772(gp)
}
   417f8:	e037883a 	mov	sp,fp
   417fc:	df000017 	ldw	fp,0(sp)
   41800:	dec00104 	addi	sp,sp,4
   41804:	f800283a 	ret

00041808 <note2freq>:

int note2freq(int note) {
   41808:	defffc04 	addi	sp,sp,-16
   4180c:	dfc00315 	stw	ra,12(sp)
   41810:	df000215 	stw	fp,8(sp)
   41814:	dc000115 	stw	r16,4(sp)
   41818:	df000204 	addi	fp,sp,8
   4181c:	e13ffe15 	stw	r4,-8(fp)
  return notefreq[note % 12] / (1 << (9 - (note / 12)));
   41820:	e0bffe17 	ldw	r2,-8(fp)
   41824:	01400304 	movi	r5,12
   41828:	1009883a 	mov	r4,r2
   4182c:	0042ee40 	call	42ee4 <__modsi3>
   41830:	1007883a 	mov	r3,r2
   41834:	00800134 	movhi	r2,4
   41838:	109cbe04 	addi	r2,r2,29432
   4183c:	18c7883a 	add	r3,r3,r3
   41840:	18c7883a 	add	r3,r3,r3
   41844:	10c5883a 	add	r2,r2,r3
   41848:	14000017 	ldw	r16,0(r2)
   4184c:	e0bffe17 	ldw	r2,-8(fp)
   41850:	01400304 	movi	r5,12
   41854:	1009883a 	mov	r4,r2
   41858:	0042e600 	call	42e60 <__divsi3>
   4185c:	1007883a 	mov	r3,r2
   41860:	00800244 	movi	r2,9
   41864:	10c5c83a 	sub	r2,r2,r3
   41868:	00c00044 	movi	r3,1
   4186c:	1884983a 	sll	r2,r3,r2
   41870:	100b883a 	mov	r5,r2
   41874:	8009883a 	mov	r4,r16
   41878:	0042e600 	call	42e60 <__divsi3>
}
   4187c:	e6ffff04 	addi	sp,fp,-4
   41880:	dfc00217 	ldw	ra,8(sp)
   41884:	df000117 	ldw	fp,4(sp)
   41888:	dc000017 	ldw	r16,0(sp)
   4188c:	dec00304 	addi	sp,sp,12
   41890:	f800283a 	ret

00041894 <initializeSong>:

void initializeSong(void) {
   41894:	defffc04 	addi	sp,sp,-16
   41898:	dfc00315 	stw	ra,12(sp)
   4189c:	df000215 	stw	fp,8(sp)
   418a0:	df000204 	addi	fp,sp,8

  p = song[song_index];
   418a4:	d0a0f903 	ldbu	r2,-31772(gp)
   418a8:	10c03fcc 	andi	r3,r2,255
   418ac:	00800134 	movhi	r2,4
   418b0:	109ca004 	addi	r2,r2,29312
   418b4:	18c7883a 	add	r3,r3,r3
   418b8:	18c7883a 	add	r3,r3,r3
   418bc:	10c5883a 	add	r2,r2,r3
   418c0:	10800017 	ldw	r2,0(r2)
   418c4:	d0a0fb15 	stw	r2,-31764(gp)
  
  // Skip name
  while (*p && *p != ':') p++;
   418c8:	00000306 	br	418d8 <initializeSong+0x44>
   418cc:	d0a0fb17 	ldw	r2,-31764(gp)
   418d0:	10800044 	addi	r2,r2,1
   418d4:	d0a0fb15 	stw	r2,-31764(gp)
   418d8:	d0a0fb17 	ldw	r2,-31764(gp)
   418dc:	10800003 	ldbu	r2,0(r2)
   418e0:	10803fcc 	andi	r2,r2,255
   418e4:	1080201c 	xori	r2,r2,128
   418e8:	10bfe004 	addi	r2,r2,-128
   418ec:	10000726 	beq	r2,zero,4190c <initializeSong+0x78>
   418f0:	d0a0fb17 	ldw	r2,-31764(gp)
   418f4:	10800003 	ldbu	r2,0(r2)
   418f8:	10803fcc 	andi	r2,r2,255
   418fc:	1080201c 	xori	r2,r2,128
   41900:	10bfe004 	addi	r2,r2,-128
   41904:	10800e98 	cmpnei	r2,r2,58
   41908:	103ff01e 	bne	r2,zero,418cc <__alt_data_end+0xfffd98cc>
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
   4190c:	d0a0fb17 	ldw	r2,-31764(gp)
   41910:	10800003 	ldbu	r2,0(r2)
   41914:	10803fcc 	andi	r2,r2,255
   41918:	1080201c 	xori	r2,r2,128
   4191c:	10bfe004 	addi	r2,r2,-128
   41920:	1000041e 	bne	r2,zero,41934 <initializeSong+0xa0>
   41924:	01000134 	movhi	r4,4
   41928:	211c1004 	addi	r4,r4,28736
   4192c:	0043c7c0 	call	43c7c <puts>
   41930:	00008106 	br	41b38 <initializeSong+0x2a4>
  p++;
   41934:	d0a0fb17 	ldw	r2,-31764(gp)
   41938:	10800044 	addi	r2,r2,1
   4193c:	d0a0fb15 	stw	r2,-31764(gp)

  // Parse defaults
  while (*p) {
   41940:	00007206 	br	41b0c <initializeSong+0x278>
    char param;
    int value;

    while (*p == ' ') p++;
   41944:	d0a0fb17 	ldw	r2,-31764(gp)
   41948:	10800044 	addi	r2,r2,1
   4194c:	d0a0fb15 	stw	r2,-31764(gp)
   41950:	d0a0fb17 	ldw	r2,-31764(gp)
   41954:	10800003 	ldbu	r2,0(r2)
   41958:	10803fcc 	andi	r2,r2,255
   4195c:	1080201c 	xori	r2,r2,128
   41960:	10bfe004 	addi	r2,r2,-128
   41964:	10800820 	cmpeqi	r2,r2,32
   41968:	103ff61e 	bne	r2,zero,41944 <__alt_data_end+0xfffd9944>
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
   4196c:	d0a0fb17 	ldw	r2,-31764(gp)
   41970:	10800003 	ldbu	r2,0(r2)
   41974:	10803fcc 	andi	r2,r2,255
   41978:	1080201c 	xori	r2,r2,128
   4197c:	10bfe004 	addi	r2,r2,-128
   41980:	1000041e 	bne	r2,zero,41994 <initializeSong+0x100>
   41984:	01000134 	movhi	r4,4
   41988:	211c1804 	addi	r4,r4,28768
   4198c:	0043c7c0 	call	43c7c <puts>
   41990:	00006906 	br	41b38 <initializeSong+0x2a4>
    if (*p == ':') break;
   41994:	d0a0fb17 	ldw	r2,-31764(gp)
   41998:	10800003 	ldbu	r2,0(r2)
   4199c:	10803fcc 	andi	r2,r2,255
   419a0:	1080201c 	xori	r2,r2,128
   419a4:	10bfe004 	addi	r2,r2,-128
   419a8:	10800e98 	cmpnei	r2,r2,58
   419ac:	10005e26 	beq	r2,zero,41b28 <initializeSong+0x294>

    param = *p++;
   419b0:	d0a0fb17 	ldw	r2,-31764(gp)
   419b4:	10c00044 	addi	r3,r2,1
   419b8:	d0e0fb15 	stw	r3,-31764(gp)
   419bc:	10800003 	ldbu	r2,0(r2)
   419c0:	e0bfff05 	stb	r2,-4(fp)
    if (*p != '=') {printf("ERROR in rtttl.c: = never found\n"); return;}
   419c4:	d0a0fb17 	ldw	r2,-31764(gp)
   419c8:	10800003 	ldbu	r2,0(r2)
   419cc:	10803fcc 	andi	r2,r2,255
   419d0:	1080201c 	xori	r2,r2,128
   419d4:	10bfe004 	addi	r2,r2,-128
   419d8:	10800f60 	cmpeqi	r2,r2,61
   419dc:	1000041e 	bne	r2,zero,419f0 <initializeSong+0x15c>
   419e0:	01000134 	movhi	r4,4
   419e4:	211c2204 	addi	r4,r4,28808
   419e8:	0043c7c0 	call	43c7c <puts>
   419ec:	00005206 	br	41b38 <initializeSong+0x2a4>
    
    p++;
   419f0:	d0a0fb17 	ldw	r2,-31764(gp)
   419f4:	10800044 	addi	r2,r2,1
   419f8:	d0a0fb15 	stw	r2,-31764(gp)
    value = 0;
   419fc:	e03ffe15 	stw	zero,-8(fp)
    while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41a00:	00000c06 	br	41a34 <initializeSong+0x1a0>
   41a04:	e0bffe17 	ldw	r2,-8(fp)
   41a08:	10c002a4 	muli	r3,r2,10
   41a0c:	d0a0fb17 	ldw	r2,-31764(gp)
   41a10:	11000044 	addi	r4,r2,1
   41a14:	d120fb15 	stw	r4,-31764(gp)
   41a18:	10800003 	ldbu	r2,0(r2)
   41a1c:	10803fcc 	andi	r2,r2,255
   41a20:	1080201c 	xori	r2,r2,128
   41a24:	10bfe004 	addi	r2,r2,-128
   41a28:	10bff404 	addi	r2,r2,-48
   41a2c:	1885883a 	add	r2,r3,r2
   41a30:	e0bffe15 	stw	r2,-8(fp)
   41a34:	d0a0fb17 	ldw	r2,-31764(gp)
   41a38:	10800003 	ldbu	r2,0(r2)
   41a3c:	10803fcc 	andi	r2,r2,255
   41a40:	1080201c 	xori	r2,r2,128
   41a44:	10bfe004 	addi	r2,r2,-128
   41a48:	10800c10 	cmplti	r2,r2,48
   41a4c:	1000071e 	bne	r2,zero,41a6c <initializeSong+0x1d8>
   41a50:	d0a0fb17 	ldw	r2,-31764(gp)
   41a54:	10800003 	ldbu	r2,0(r2)
   41a58:	10803fcc 	andi	r2,r2,255
   41a5c:	1080201c 	xori	r2,r2,128
   41a60:	10bfe004 	addi	r2,r2,-128
   41a64:	10800e90 	cmplti	r2,r2,58
   41a68:	103fe61e 	bne	r2,zero,41a04 <__alt_data_end+0xfffd9a04>

    switch (param) {
   41a6c:	e0bfff07 	ldb	r2,-4(fp)
   41a70:	10c01920 	cmpeqi	r3,r2,100
   41a74:	1800051e 	bne	r3,zero,41a8c <initializeSong+0x1f8>
   41a78:	10c01be0 	cmpeqi	r3,r2,111
   41a7c:	1800081e 	bne	r3,zero,41aa0 <initializeSong+0x20c>
   41a80:	108018a0 	cmpeqi	r2,r2,98
   41a84:	1000091e 	bne	r2,zero,41aac <initializeSong+0x218>
   41a88:	00000b06 	br	41ab8 <initializeSong+0x224>
      case 'd': defdur = 32 / value; break;
   41a8c:	e17ffe17 	ldw	r5,-8(fp)
   41a90:	01000804 	movi	r4,32
   41a94:	0042e600 	call	42e60 <__divsi3>
   41a98:	d0a00115 	stw	r2,-32764(gp)
   41a9c:	00000606 	br	41ab8 <initializeSong+0x224>
      case 'o': defscale = value; break;
   41aa0:	e0bffe17 	ldw	r2,-8(fp)
   41aa4:	d0a00215 	stw	r2,-32760(gp)
   41aa8:	00000306 	br	41ab8 <initializeSong+0x224>
      case 'b': bpm = value; break;
   41aac:	e0bffe17 	ldw	r2,-8(fp)
   41ab0:	d0a00315 	stw	r2,-32756(gp)
   41ab4:	0001883a 	nop
    }

    while (*p == ' ') p++;
   41ab8:	00000306 	br	41ac8 <initializeSong+0x234>
   41abc:	d0a0fb17 	ldw	r2,-31764(gp)
   41ac0:	10800044 	addi	r2,r2,1
   41ac4:	d0a0fb15 	stw	r2,-31764(gp)
   41ac8:	d0a0fb17 	ldw	r2,-31764(gp)
   41acc:	10800003 	ldbu	r2,0(r2)
   41ad0:	10803fcc 	andi	r2,r2,255
   41ad4:	1080201c 	xori	r2,r2,128
   41ad8:	10bfe004 	addi	r2,r2,-128
   41adc:	10800820 	cmpeqi	r2,r2,32
   41ae0:	103ff61e 	bne	r2,zero,41abc <__alt_data_end+0xfffd9abc>
    if (*p == ',') p++;
   41ae4:	d0a0fb17 	ldw	r2,-31764(gp)
   41ae8:	10800003 	ldbu	r2,0(r2)
   41aec:	10803fcc 	andi	r2,r2,255
   41af0:	1080201c 	xori	r2,r2,128
   41af4:	10bfe004 	addi	r2,r2,-128
   41af8:	10800b18 	cmpnei	r2,r2,44
   41afc:	1000031e 	bne	r2,zero,41b0c <initializeSong+0x278>
   41b00:	d0a0fb17 	ldw	r2,-31764(gp)
   41b04:	10800044 	addi	r2,r2,1
   41b08:	d0a0fb15 	stw	r2,-31764(gp)
  while (*p && *p != ':') p++;
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
  p++;

  // Parse defaults
  while (*p) {
   41b0c:	d0a0fb17 	ldw	r2,-31764(gp)
   41b10:	10800003 	ldbu	r2,0(r2)
   41b14:	10803fcc 	andi	r2,r2,255
   41b18:	1080201c 	xori	r2,r2,128
   41b1c:	10bfe004 	addi	r2,r2,-128
   41b20:	103f8b1e 	bne	r2,zero,41950 <__alt_data_end+0xfffd9950>
   41b24:	00000106 	br	41b2c <initializeSong+0x298>
    char param;
    int value;

    while (*p == ' ') p++;
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
    if (*p == ':') break;
   41b28:	0001883a 	nop
    }

    while (*p == ' ') p++;
    if (*p == ',') p++;
  }
  p++;
   41b2c:	d0a0fb17 	ldw	r2,-31764(gp)
   41b30:	10800044 	addi	r2,r2,1
   41b34:	d0a0fb15 	stw	r2,-31764(gp)

}
   41b38:	e037883a 	mov	sp,fp
   41b3c:	dfc00117 	ldw	ra,4(sp)
   41b40:	df000017 	ldw	fp,0(sp)
   41b44:	dec00204 	addi	sp,sp,8
   41b48:	f800283a 	ret

00041b4c <nextSongNote>:

// used to get the first note of the song and the subsequent ones
struct note_info nextSongNote(void) {
   41b4c:	defff304 	addi	sp,sp,-52
   41b50:	dfc00c15 	stw	ra,48(sp)
   41b54:	df000b15 	stw	fp,44(sp)
   41b58:	df000b04 	addi	fp,sp,44
   41b5c:	e13fff15 	stw	r4,-4(fp)

  int note = -1;
   41b60:	00bfffc4 	movi	r2,-1
   41b64:	e0bff515 	stw	r2,-44(fp)
  int scale = defscale;
   41b68:	d0a00217 	ldw	r2,-32760(gp)
   41b6c:	e0bff615 	stw	r2,-40(fp)
  int dur = defdur;
   41b70:	d0a00117 	ldw	r2,-32764(gp)
   41b74:	e0bff715 	stw	r2,-36(fp)
  int ms;
  int freq;
  struct note_info payload;

  if (!*p) {printf("End of song!\n");payload.endofsong = TRUE; return payload;}
   41b78:	d0a0fb17 	ldw	r2,-31764(gp)
   41b7c:	10800003 	ldbu	r2,0(r2)
   41b80:	10803fcc 	andi	r2,r2,255
   41b84:	1080201c 	xori	r2,r2,128
   41b88:	10bfe004 	addi	r2,r2,-128
   41b8c:	1000121e 	bne	r2,zero,41bd8 <nextSongNote+0x8c>
   41b90:	01000134 	movhi	r4,4
   41b94:	211c2a04 	addi	r4,r4,28840
   41b98:	0043c7c0 	call	43c7c <puts>
   41b9c:	00800044 	movi	r2,1
   41ba0:	e0bffe15 	stw	r2,-8(fp)
   41ba4:	e0bfff17 	ldw	r2,-4(fp)
   41ba8:	e0fffb17 	ldw	r3,-20(fp)
   41bac:	10c00015 	stw	r3,0(r2)
   41bb0:	e0fffc17 	ldw	r3,-16(fp)
   41bb4:	10c00115 	stw	r3,4(r2)
   41bb8:	e0fffd17 	ldw	r3,-12(fp)
   41bbc:	10c00215 	stw	r3,8(r2)
   41bc0:	e0fffe17 	ldw	r3,-8(fp)
   41bc4:	10c00315 	stw	r3,12(r2)
   41bc8:	00018706 	br	421e8 <nextSongNote+0x69c>

  else {

    // Skip whitespace
    while (*p == ' ') p++;
   41bcc:	d0a0fb17 	ldw	r2,-31764(gp)
   41bd0:	10800044 	addi	r2,r2,1
   41bd4:	d0a0fb15 	stw	r2,-31764(gp)
   41bd8:	d0a0fb17 	ldw	r2,-31764(gp)
   41bdc:	10800003 	ldbu	r2,0(r2)
   41be0:	10803fcc 	andi	r2,r2,255
   41be4:	1080201c 	xori	r2,r2,128
   41be8:	10bfe004 	addi	r2,r2,-128
   41bec:	10800820 	cmpeqi	r2,r2,32
   41bf0:	103ff61e 	bne	r2,zero,41bcc <__alt_data_end+0xfffd9bcc>
    if (!*p) {printf("ERROR in rtttl.c: 0 found during nextSongNote\n");payload.letter = ERROR_CHAR; return payload;}
   41bf4:	d0a0fb17 	ldw	r2,-31764(gp)
   41bf8:	10800003 	ldbu	r2,0(r2)
   41bfc:	10803fcc 	andi	r2,r2,255
   41c00:	1080201c 	xori	r2,r2,128
   41c04:	10bfe004 	addi	r2,r2,-128
   41c08:	10000f1e 	bne	r2,zero,41c48 <nextSongNote+0xfc>
   41c0c:	01000134 	movhi	r4,4
   41c10:	211c2e04 	addi	r4,r4,28856
   41c14:	0043c7c0 	call	43c7c <puts>
   41c18:	00801604 	movi	r2,88
   41c1c:	e0bffb05 	stb	r2,-20(fp)
   41c20:	e0bfff17 	ldw	r2,-4(fp)
   41c24:	e0fffb17 	ldw	r3,-20(fp)
   41c28:	10c00015 	stw	r3,0(r2)
   41c2c:	e0fffc17 	ldw	r3,-16(fp)
   41c30:	10c00115 	stw	r3,4(r2)
   41c34:	e0fffd17 	ldw	r3,-12(fp)
   41c38:	10c00215 	stw	r3,8(r2)
   41c3c:	e0fffe17 	ldw	r3,-8(fp)
   41c40:	10c00315 	stw	r3,12(r2)
   41c44:	00016806 	br	421e8 <nextSongNote+0x69c>

    // Parse duration
    if (*p >= '0' && *p <= '9') {
   41c48:	d0a0fb17 	ldw	r2,-31764(gp)
   41c4c:	10800003 	ldbu	r2,0(r2)
   41c50:	10803fcc 	andi	r2,r2,255
   41c54:	1080201c 	xori	r2,r2,128
   41c58:	10bfe004 	addi	r2,r2,-128
   41c5c:	10800c10 	cmplti	r2,r2,48
   41c60:	1000271e 	bne	r2,zero,41d00 <nextSongNote+0x1b4>
   41c64:	d0a0fb17 	ldw	r2,-31764(gp)
   41c68:	10800003 	ldbu	r2,0(r2)
   41c6c:	10803fcc 	andi	r2,r2,255
   41c70:	1080201c 	xori	r2,r2,128
   41c74:	10bfe004 	addi	r2,r2,-128
   41c78:	10800e88 	cmpgei	r2,r2,58
   41c7c:	1000201e 	bne	r2,zero,41d00 <nextSongNote+0x1b4>
      int value = 0;
   41c80:	e03ff915 	stw	zero,-28(fp)
      while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41c84:	00000c06 	br	41cb8 <nextSongNote+0x16c>
   41c88:	e0bff917 	ldw	r2,-28(fp)
   41c8c:	10c002a4 	muli	r3,r2,10
   41c90:	d0a0fb17 	ldw	r2,-31764(gp)
   41c94:	11000044 	addi	r4,r2,1
   41c98:	d120fb15 	stw	r4,-31764(gp)
   41c9c:	10800003 	ldbu	r2,0(r2)
   41ca0:	10803fcc 	andi	r2,r2,255
   41ca4:	1080201c 	xori	r2,r2,128
   41ca8:	10bfe004 	addi	r2,r2,-128
   41cac:	10bff404 	addi	r2,r2,-48
   41cb0:	1885883a 	add	r2,r3,r2
   41cb4:	e0bff915 	stw	r2,-28(fp)
   41cb8:	d0a0fb17 	ldw	r2,-31764(gp)
   41cbc:	10800003 	ldbu	r2,0(r2)
   41cc0:	10803fcc 	andi	r2,r2,255
   41cc4:	1080201c 	xori	r2,r2,128
   41cc8:	10bfe004 	addi	r2,r2,-128
   41ccc:	10800c10 	cmplti	r2,r2,48
   41cd0:	1000071e 	bne	r2,zero,41cf0 <nextSongNote+0x1a4>
   41cd4:	d0a0fb17 	ldw	r2,-31764(gp)
   41cd8:	10800003 	ldbu	r2,0(r2)
   41cdc:	10803fcc 	andi	r2,r2,255
   41ce0:	1080201c 	xori	r2,r2,128
   41ce4:	10bfe004 	addi	r2,r2,-128
   41ce8:	10800e90 	cmplti	r2,r2,58
   41cec:	103fe61e 	bne	r2,zero,41c88 <__alt_data_end+0xfffd9c88>

      dur = 32 / value;
   41cf0:	e17ff917 	ldw	r5,-28(fp)
   41cf4:	01000804 	movi	r4,32
   41cf8:	0042e600 	call	42e60 <__divsi3>
   41cfc:	e0bff715 	stw	r2,-36(fp)
    }

    // Parse note
    switch (*p) {
   41d00:	d0a0fb17 	ldw	r2,-31764(gp)
   41d04:	10800003 	ldbu	r2,0(r2)
   41d08:	10803fcc 	andi	r2,r2,255
   41d0c:	1080201c 	xori	r2,r2,128
   41d10:	10bfe004 	addi	r2,r2,-128
   41d14:	10c01c68 	cmpgeui	r3,r2,113
   41d18:	1800a01e 	bne	r3,zero,41f9c <nextSongNote+0x450>
   41d1c:	100690ba 	slli	r3,r2,2
   41d20:	00800134 	movhi	r2,4
   41d24:	10874d04 	addi	r2,r2,7476
   41d28:	1885883a 	add	r2,r3,r2
   41d2c:	10800017 	ldw	r2,0(r2)
   41d30:	1000683a 	jmp	r2
   41d34:	00041ef8 	rdprs	zero,zero,4219
   41d38:	00041f9c 	xori	zero,zero,4222
   41d3c:	00041f9c 	xori	zero,zero,4222
   41d40:	00041f9c 	xori	zero,zero,4222
   41d44:	00041f9c 	xori	zero,zero,4222
   41d48:	00041f9c 	xori	zero,zero,4222
   41d4c:	00041f9c 	xori	zero,zero,4222
   41d50:	00041f9c 	xori	zero,zero,4222
   41d54:	00041f9c 	xori	zero,zero,4222
   41d58:	00041f9c 	xori	zero,zero,4222
   41d5c:	00041f9c 	xori	zero,zero,4222
   41d60:	00041f9c 	xori	zero,zero,4222
   41d64:	00041f9c 	xori	zero,zero,4222
   41d68:	00041f9c 	xori	zero,zero,4222
   41d6c:	00041f9c 	xori	zero,zero,4222
   41d70:	00041f9c 	xori	zero,zero,4222
   41d74:	00041f9c 	xori	zero,zero,4222
   41d78:	00041f9c 	xori	zero,zero,4222
   41d7c:	00041f9c 	xori	zero,zero,4222
   41d80:	00041f9c 	xori	zero,zero,4222
   41d84:	00041f9c 	xori	zero,zero,4222
   41d88:	00041f9c 	xori	zero,zero,4222
   41d8c:	00041f9c 	xori	zero,zero,4222
   41d90:	00041f9c 	xori	zero,zero,4222
   41d94:	00041f9c 	xori	zero,zero,4222
   41d98:	00041f9c 	xori	zero,zero,4222
   41d9c:	00041f9c 	xori	zero,zero,4222
   41da0:	00041f9c 	xori	zero,zero,4222
   41da4:	00041f9c 	xori	zero,zero,4222
   41da8:	00041f9c 	xori	zero,zero,4222
   41dac:	00041f9c 	xori	zero,zero,4222
   41db0:	00041f9c 	xori	zero,zero,4222
   41db4:	00041f9c 	xori	zero,zero,4222
   41db8:	00041f9c 	xori	zero,zero,4222
   41dbc:	00041f9c 	xori	zero,zero,4222
   41dc0:	00041f9c 	xori	zero,zero,4222
   41dc4:	00041f9c 	xori	zero,zero,4222
   41dc8:	00041f9c 	xori	zero,zero,4222
   41dcc:	00041f9c 	xori	zero,zero,4222
   41dd0:	00041f9c 	xori	zero,zero,4222
   41dd4:	00041f9c 	xori	zero,zero,4222
   41dd8:	00041f9c 	xori	zero,zero,4222
   41ddc:	00041f9c 	xori	zero,zero,4222
   41de0:	00041f9c 	xori	zero,zero,4222
   41de4:	00041f9c 	xori	zero,zero,4222
   41de8:	00041f9c 	xori	zero,zero,4222
   41dec:	00041f9c 	xori	zero,zero,4222
   41df0:	00041f9c 	xori	zero,zero,4222
   41df4:	00041f9c 	xori	zero,zero,4222
   41df8:	00041f9c 	xori	zero,zero,4222
   41dfc:	00041f9c 	xori	zero,zero,4222
   41e00:	00041f9c 	xori	zero,zero,4222
   41e04:	00041f9c 	xori	zero,zero,4222
   41e08:	00041f9c 	xori	zero,zero,4222
   41e0c:	00041f9c 	xori	zero,zero,4222
   41e10:	00041f9c 	xori	zero,zero,4222
   41e14:	00041f9c 	xori	zero,zero,4222
   41e18:	00041f9c 	xori	zero,zero,4222
   41e1c:	00041f9c 	xori	zero,zero,4222
   41e20:	00041f9c 	xori	zero,zero,4222
   41e24:	00041f9c 	xori	zero,zero,4222
   41e28:	00041f9c 	xori	zero,zero,4222
   41e2c:	00041f9c 	xori	zero,zero,4222
   41e30:	00041f9c 	xori	zero,zero,4222
   41e34:	00041f9c 	xori	zero,zero,4222
   41e38:	00041f6c 	andhi	zero,zero,4221
   41e3c:	00041f84 	movi	zero,4222
   41e40:	00041f34 	movhi	zero,4220
   41e44:	00041f3c 	xorhi	zero,zero,4220
   41e48:	00041f48 	cmpgei	zero,zero,4221
   41e4c:	00041f54 	movui	zero,4221
   41e50:	00041f60 	cmpeqi	zero,zero,4221
   41e54:	00041f78 	rdprs	zero,zero,4221
   41e58:	00041f9c 	xori	zero,zero,4222
   41e5c:	00041f9c 	xori	zero,zero,4222
   41e60:	00041f9c 	xori	zero,zero,4222
   41e64:	00041f9c 	xori	zero,zero,4222
   41e68:	00041f9c 	xori	zero,zero,4222
   41e6c:	00041f9c 	xori	zero,zero,4222
   41e70:	00041f9c 	xori	zero,zero,4222
   41e74:	00041f90 	cmplti	zero,zero,4222
   41e78:	00041f9c 	xori	zero,zero,4222
   41e7c:	00041f9c 	xori	zero,zero,4222
   41e80:	00041f9c 	xori	zero,zero,4222
   41e84:	00041f9c 	xori	zero,zero,4222
   41e88:	00041f9c 	xori	zero,zero,4222
   41e8c:	00041f9c 	xori	zero,zero,4222
   41e90:	00041f9c 	xori	zero,zero,4222
   41e94:	00041f9c 	xori	zero,zero,4222
   41e98:	00041f9c 	xori	zero,zero,4222
   41e9c:	00041f9c 	xori	zero,zero,4222
   41ea0:	00041f9c 	xori	zero,zero,4222
   41ea4:	00041f9c 	xori	zero,zero,4222
   41ea8:	00041f9c 	xori	zero,zero,4222
   41eac:	00041f9c 	xori	zero,zero,4222
   41eb0:	00041f9c 	xori	zero,zero,4222
   41eb4:	00041f9c 	xori	zero,zero,4222
   41eb8:	00041f6c 	andhi	zero,zero,4221
   41ebc:	00041f84 	movi	zero,4222
   41ec0:	00041f34 	movhi	zero,4220
   41ec4:	00041f3c 	xorhi	zero,zero,4220
   41ec8:	00041f48 	cmpgei	zero,zero,4221
   41ecc:	00041f54 	movui	zero,4221
   41ed0:	00041f60 	cmpeqi	zero,zero,4221
   41ed4:	00041f78 	rdprs	zero,zero,4221
   41ed8:	00041f9c 	xori	zero,zero,4222
   41edc:	00041f9c 	xori	zero,zero,4222
   41ee0:	00041f9c 	xori	zero,zero,4222
   41ee4:	00041f9c 	xori	zero,zero,4222
   41ee8:	00041f9c 	xori	zero,zero,4222
   41eec:	00041f9c 	xori	zero,zero,4222
   41ef0:	00041f9c 	xori	zero,zero,4222
   41ef4:	00041f90 	cmplti	zero,zero,4222
      case 0: printf("End of song!\n"); payload.endofsong = TRUE; return payload; // i *think* means the null-terminated character is reached
   41ef8:	01000134 	movhi	r4,4
   41efc:	211c2a04 	addi	r4,r4,28840
   41f00:	0043c7c0 	call	43c7c <puts>
   41f04:	00800044 	movi	r2,1
   41f08:	e0bffe15 	stw	r2,-8(fp)
   41f0c:	e0bfff17 	ldw	r2,-4(fp)
   41f10:	e0fffb17 	ldw	r3,-20(fp)
   41f14:	10c00015 	stw	r3,0(r2)
   41f18:	e0fffc17 	ldw	r3,-16(fp)
   41f1c:	10c00115 	stw	r3,4(r2)
   41f20:	e0fffd17 	ldw	r3,-12(fp)
   41f24:	10c00215 	stw	r3,8(r2)
   41f28:	e0fffe17 	ldw	r3,-8(fp)
   41f2c:	10c00315 	stw	r3,12(r2)
   41f30:	0000ad06 	br	421e8 <nextSongNote+0x69c>
      case 'C': case 'c': note = 0; break;
   41f34:	e03ff515 	stw	zero,-44(fp)
   41f38:	00001806 	br	41f9c <nextSongNote+0x450>
      case 'D': case 'd': note = 2; break;
   41f3c:	00800084 	movi	r2,2
   41f40:	e0bff515 	stw	r2,-44(fp)
   41f44:	00001506 	br	41f9c <nextSongNote+0x450>
      case 'E': case 'e': note = 4; break;
   41f48:	00800104 	movi	r2,4
   41f4c:	e0bff515 	stw	r2,-44(fp)
   41f50:	00001206 	br	41f9c <nextSongNote+0x450>
      case 'F': case 'f': note = 5; break;
   41f54:	00800144 	movi	r2,5
   41f58:	e0bff515 	stw	r2,-44(fp)
   41f5c:	00000f06 	br	41f9c <nextSongNote+0x450>
      case 'G': case 'g': note = 7; break;
   41f60:	008001c4 	movi	r2,7
   41f64:	e0bff515 	stw	r2,-44(fp)
   41f68:	00000c06 	br	41f9c <nextSongNote+0x450>
      case 'A': case 'a': note = 9; break;
   41f6c:	00800244 	movi	r2,9
   41f70:	e0bff515 	stw	r2,-44(fp)
   41f74:	00000906 	br	41f9c <nextSongNote+0x450>
      case 'H': case 'h': note = 11; break;
   41f78:	008002c4 	movi	r2,11
   41f7c:	e0bff515 	stw	r2,-44(fp)
   41f80:	00000606 	br	41f9c <nextSongNote+0x450>
      case 'B': case 'b': note = 11; break;
   41f84:	008002c4 	movi	r2,11
   41f88:	e0bff515 	stw	r2,-44(fp)
   41f8c:	00000306 	br	41f9c <nextSongNote+0x450>
      case 'P': case 'p': note = -1; break;
   41f90:	00bfffc4 	movi	r2,-1
   41f94:	e0bff515 	stw	r2,-44(fp)
   41f98:	0001883a 	nop
    }

    // this info is picked up for the LED piano module
    payload.letter = note;
   41f9c:	e0bff517 	ldw	r2,-44(fp)
   41fa0:	e0bffb05 	stb	r2,-20(fp)

    p++;
   41fa4:	d0a0fb17 	ldw	r2,-31764(gp)
   41fa8:	10800044 	addi	r2,r2,1
   41fac:	d0a0fb15 	stw	r2,-31764(gp)
    if (*p == '#') {
   41fb0:	d0a0fb17 	ldw	r2,-31764(gp)
   41fb4:	10800003 	ldbu	r2,0(r2)
   41fb8:	10803fcc 	andi	r2,r2,255
   41fbc:	1080201c 	xori	r2,r2,128
   41fc0:	10bfe004 	addi	r2,r2,-128
   41fc4:	108008d8 	cmpnei	r2,r2,35
   41fc8:	1000061e 	bne	r2,zero,41fe4 <nextSongNote+0x498>
      note++;
   41fcc:	e0bff517 	ldw	r2,-44(fp)
   41fd0:	10800044 	addi	r2,r2,1
   41fd4:	e0bff515 	stw	r2,-44(fp)
      p++;
   41fd8:	d0a0fb17 	ldw	r2,-31764(gp)
   41fdc:	10800044 	addi	r2,r2,1
   41fe0:	d0a0fb15 	stw	r2,-31764(gp)
    }
    if (*p == 'b') {
   41fe4:	d0a0fb17 	ldw	r2,-31764(gp)
   41fe8:	10800003 	ldbu	r2,0(r2)
   41fec:	10803fcc 	andi	r2,r2,255
   41ff0:	1080201c 	xori	r2,r2,128
   41ff4:	10bfe004 	addi	r2,r2,-128
   41ff8:	10801898 	cmpnei	r2,r2,98
   41ffc:	1000061e 	bne	r2,zero,42018 <nextSongNote+0x4cc>
      note--;
   42000:	e0bff517 	ldw	r2,-44(fp)
   42004:	10bfffc4 	addi	r2,r2,-1
   42008:	e0bff515 	stw	r2,-44(fp)
      p++;
   4200c:	d0a0fb17 	ldw	r2,-31764(gp)
   42010:	10800044 	addi	r2,r2,1
   42014:	d0a0fb15 	stw	r2,-31764(gp)
    }

    // Parse special duration
    if (*p == '.') {
   42018:	d0a0fb17 	ldw	r2,-31764(gp)
   4201c:	10800003 	ldbu	r2,0(r2)
   42020:	10803fcc 	andi	r2,r2,255
   42024:	1080201c 	xori	r2,r2,128
   42028:	10bfe004 	addi	r2,r2,-128
   4202c:	10800b98 	cmpnei	r2,r2,46
   42030:	10000b1e 	bne	r2,zero,42060 <nextSongNote+0x514>
      dur += dur / 2;
   42034:	e0bff717 	ldw	r2,-36(fp)
   42038:	1006d7fa 	srli	r3,r2,31
   4203c:	1885883a 	add	r2,r3,r2
   42040:	1005d07a 	srai	r2,r2,1
   42044:	1007883a 	mov	r3,r2
   42048:	e0bff717 	ldw	r2,-36(fp)
   4204c:	10c5883a 	add	r2,r2,r3
   42050:	e0bff715 	stw	r2,-36(fp)
      p++;
   42054:	d0a0fb17 	ldw	r2,-31764(gp)
   42058:	10800044 	addi	r2,r2,1
   4205c:	d0a0fb15 	stw	r2,-31764(gp)
    }

    // Parse scale
    if (*p >= '0' && *p <= '9') scale = (*p++ - '0');
   42060:	d0a0fb17 	ldw	r2,-31764(gp)
   42064:	10800003 	ldbu	r2,0(r2)
   42068:	10803fcc 	andi	r2,r2,255
   4206c:	1080201c 	xori	r2,r2,128
   42070:	10bfe004 	addi	r2,r2,-128
   42074:	10800c10 	cmplti	r2,r2,48
   42078:	1000101e 	bne	r2,zero,420bc <nextSongNote+0x570>
   4207c:	d0a0fb17 	ldw	r2,-31764(gp)
   42080:	10800003 	ldbu	r2,0(r2)
   42084:	10803fcc 	andi	r2,r2,255
   42088:	1080201c 	xori	r2,r2,128
   4208c:	10bfe004 	addi	r2,r2,-128
   42090:	10800e88 	cmpgei	r2,r2,58
   42094:	1000091e 	bne	r2,zero,420bc <nextSongNote+0x570>
   42098:	d0a0fb17 	ldw	r2,-31764(gp)
   4209c:	10c00044 	addi	r3,r2,1
   420a0:	d0e0fb15 	stw	r3,-31764(gp)
   420a4:	10800003 	ldbu	r2,0(r2)
   420a8:	10803fcc 	andi	r2,r2,255
   420ac:	1080201c 	xori	r2,r2,128
   420b0:	10bfe004 	addi	r2,r2,-128
   420b4:	10bff404 	addi	r2,r2,-48
   420b8:	e0bff615 	stw	r2,-40(fp)

    // Parse special duration (again...)
    if (*p == '.') {
   420bc:	d0a0fb17 	ldw	r2,-31764(gp)
   420c0:	10800003 	ldbu	r2,0(r2)
   420c4:	10803fcc 	andi	r2,r2,255
   420c8:	1080201c 	xori	r2,r2,128
   420cc:	10bfe004 	addi	r2,r2,-128
   420d0:	10800b98 	cmpnei	r2,r2,46
   420d4:	10000f1e 	bne	r2,zero,42114 <nextSongNote+0x5c8>
      dur += dur / 2;
   420d8:	e0bff717 	ldw	r2,-36(fp)
   420dc:	1006d7fa 	srli	r3,r2,31
   420e0:	1885883a 	add	r2,r3,r2
   420e4:	1005d07a 	srai	r2,r2,1
   420e8:	1007883a 	mov	r3,r2
   420ec:	e0bff717 	ldw	r2,-36(fp)
   420f0:	10c5883a 	add	r2,r2,r3
   420f4:	e0bff715 	stw	r2,-36(fp)
      p++;
   420f8:	d0a0fb17 	ldw	r2,-31764(gp)
   420fc:	10800044 	addi	r2,r2,1
   42100:	d0a0fb15 	stw	r2,-31764(gp)
    }

    // Skip delimiter
    while (*p == ' ') p++;
   42104:	00000306 	br	42114 <nextSongNote+0x5c8>
   42108:	d0a0fb17 	ldw	r2,-31764(gp)
   4210c:	10800044 	addi	r2,r2,1
   42110:	d0a0fb15 	stw	r2,-31764(gp)
   42114:	d0a0fb17 	ldw	r2,-31764(gp)
   42118:	10800003 	ldbu	r2,0(r2)
   4211c:	10803fcc 	andi	r2,r2,255
   42120:	1080201c 	xori	r2,r2,128
   42124:	10bfe004 	addi	r2,r2,-128
   42128:	10800820 	cmpeqi	r2,r2,32
   4212c:	103ff61e 	bne	r2,zero,42108 <__alt_data_end+0xfffda108>
    if (*p == ',') p++;
   42130:	d0a0fb17 	ldw	r2,-31764(gp)
   42134:	10800003 	ldbu	r2,0(r2)
   42138:	10803fcc 	andi	r2,r2,255
   4213c:	1080201c 	xori	r2,r2,128
   42140:	10bfe004 	addi	r2,r2,-128
   42144:	10800b18 	cmpnei	r2,r2,44
   42148:	1000031e 	bne	r2,zero,42158 <nextSongNote+0x60c>
   4214c:	d0a0fb17 	ldw	r2,-31764(gp)
   42150:	10800044 	addi	r2,r2,1
   42154:	d0a0fb15 	stw	r2,-31764(gp)

    // Play note
    ms = dur * 60000 / (bpm * 8);
   42158:	e0fff717 	ldw	r3,-36(fp)
   4215c:	00ba9814 	movui	r2,60000
   42160:	1887383a 	mul	r3,r3,r2
   42164:	d0a00317 	ldw	r2,-32756(gp)
   42168:	100490fa 	slli	r2,r2,3
   4216c:	100b883a 	mov	r5,r2
   42170:	1809883a 	mov	r4,r3
   42174:	0042e600 	call	42e60 <__divsi3>
   42178:	e0bffa15 	stw	r2,-24(fp)
    if (note == -1) {
   4217c:	e0bff517 	ldw	r2,-44(fp)
   42180:	10bfffd8 	cmpnei	r2,r2,-1
   42184:	1000021e 	bne	r2,zero,42190 <nextSongNote+0x644>
      freq = 0;
   42188:	e03ff815 	stw	zero,-32(fp)
   4218c:	00000806 	br	421b0 <nextSongNote+0x664>
    } else {
      freq = note2freq((scale + 1) * 12 + note);
   42190:	e0bff617 	ldw	r2,-40(fp)
   42194:	10800044 	addi	r2,r2,1
   42198:	10c00324 	muli	r3,r2,12
   4219c:	e0bff517 	ldw	r2,-44(fp)
   421a0:	1885883a 	add	r2,r3,r2
   421a4:	1009883a 	mov	r4,r2
   421a8:	00418080 	call	41808 <note2freq>
   421ac:	e0bff815 	stw	r2,-32(fp)
    }


    payload.frequency = freq;
   421b0:	e0bff817 	ldw	r2,-32(fp)
   421b4:	e0bffc15 	stw	r2,-16(fp)
    payload.duration = ms;
   421b8:	e0bffa17 	ldw	r2,-24(fp)
   421bc:	e0bffd15 	stw	r2,-12(fp)
    payload.endofsong = FALSE;
   421c0:	e03ffe15 	stw	zero,-8(fp)
    
    return payload;   
   421c4:	e0bfff17 	ldw	r2,-4(fp)
   421c8:	e0fffb17 	ldw	r3,-20(fp)
   421cc:	10c00015 	stw	r3,0(r2)
   421d0:	e0fffc17 	ldw	r3,-16(fp)
   421d4:	10c00115 	stw	r3,4(r2)
   421d8:	e0fffd17 	ldw	r3,-12(fp)
   421dc:	10c00215 	stw	r3,8(r2)
   421e0:	e0fffe17 	ldw	r3,-8(fp)
   421e4:	10c00315 	stw	r3,12(r2)
    
  }
   421e8:	e0bfff17 	ldw	r2,-4(fp)
   421ec:	e037883a 	mov	sp,fp
   421f0:	dfc00117 	ldw	ra,4(sp)
   421f4:	df000017 	ldw	fp,0(sp)
   421f8:	dec00204 	addi	sp,sp,8
   421fc:	f800283a 	ret

00042200 <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   42200:	defff904 	addi	sp,sp,-28
   42204:	dfc00615 	stw	ra,24(sp)
   42208:	df000515 	stw	fp,20(sp)
   4220c:	dc400415 	stw	r17,16(sp)
   42210:	dc000315 	stw	r16,12(sp)
   42214:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   42218:	00800234 	movhi	r2,8
   4221c:	10843804 	addi	r2,r2,4320
   42220:	10800037 	ldwio	r2,0(r2)
   42224:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   42228:	e0bffd0b 	ldhu	r2,-12(fp)
   4222c:	10bfffcc 	andi	r2,r2,65535
   42230:	1009883a 	mov	r4,r2
   42234:	004247c0 	call	4247c <checkInvalidMode>
   42238:	10803fcc 	andi	r2,r2,255
   4223c:	10800058 	cmpnei	r2,r2,1
   42240:	10000f1e 	bne	r2,zero,42280 <determineMode+0x80>
    mode.invalid = TRUE;
   42244:	00800044 	movi	r2,1
   42248:	d0a0fc05 	stb	r2,-31760(gp)
    return mode;
   4224c:	d0a0fc03 	ldbu	r2,-31760(gp)
   42250:	e0bffb45 	stb	r2,-19(fp)
   42254:	d0a0fc43 	ldbu	r2,-31759(gp)
   42258:	e0bffb85 	stb	r2,-18(fp)
   4225c:	d0a0fc83 	ldbu	r2,-31758(gp)
   42260:	e0bffbc5 	stb	r2,-17(fp)
   42264:	d0a0fcc3 	ldbu	r2,-31757(gp)
   42268:	e0bffc05 	stb	r2,-16(fp)
   4226c:	d0a0fd03 	ldbu	r2,-31756(gp)
   42270:	e0bffc45 	stb	r2,-15(fp)
   42274:	d0a0fd43 	ldbu	r2,-31755(gp)
   42278:	e0bffc85 	stb	r2,-14(fp)
   4227c:	00004906 	br	423a4 <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   42280:	d020fc05 	stb	zero,-31760(gp)

    uint8_t i = 0;
   42284:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   42288:	00000606 	br	422a4 <determineMode+0xa4>
      i++;
   4228c:	e0bffb03 	ldbu	r2,-20(fp)
   42290:	10800044 	addi	r2,r2,1
   42294:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   42298:	e0bffb03 	ldbu	r2,-20(fp)
   4229c:	10800218 	cmpnei	r2,r2,8
   422a0:	10000b26 	beq	r2,zero,422d0 <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   422a4:	e0fffb03 	ldbu	r3,-20(fp)
   422a8:	00800134 	movhi	r2,4
   422ac:	109c3984 	addi	r2,r2,28902
   422b0:	18c00324 	muli	r3,r3,12
   422b4:	10c5883a 	add	r2,r2,r3
   422b8:	10c0000b 	ldhu	r3,0(r2)
   422bc:	e0bffd0b 	ldhu	r2,-12(fp)
   422c0:	18ffffcc 	andi	r3,r3,65535
   422c4:	10bfffcc 	andi	r2,r2,65535
   422c8:	18bff01e 	bne	r3,r2,4228c <__alt_data_end+0xfffda28c>
   422cc:	00000106 	br	422d4 <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   422d0:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   422d4:	e0fffb03 	ldbu	r3,-20(fp)
   422d8:	00800134 	movhi	r2,4
   422dc:	109c3984 	addi	r2,r2,28902
   422e0:	18c00324 	muli	r3,r3,12
   422e4:	10c5883a 	add	r2,r2,r3
   422e8:	10800084 	addi	r2,r2,2
   422ec:	1080000b 	ldhu	r2,0(r2)
   422f0:	d0a0fc45 	stb	r2,-31759(gp)
    mode.config.on = mode_lookup_table[i][2];
   422f4:	e0fffb03 	ldbu	r3,-20(fp)
   422f8:	00800134 	movhi	r2,4
   422fc:	109c3984 	addi	r2,r2,28902
   42300:	18c00324 	muli	r3,r3,12
   42304:	10c5883a 	add	r2,r2,r3
   42308:	10800104 	addi	r2,r2,4
   4230c:	1080000b 	ldhu	r2,0(r2)
   42310:	d0a0fcc5 	stb	r2,-31757(gp)
    mode.config.hour = mode_lookup_table[i][3];
   42314:	e0fffb03 	ldbu	r3,-20(fp)
   42318:	00800134 	movhi	r2,4
   4231c:	109c3984 	addi	r2,r2,28902
   42320:	18c00324 	muli	r3,r3,12
   42324:	10c5883a 	add	r2,r2,r3
   42328:	10800184 	addi	r2,r2,6
   4232c:	1080000b 	ldhu	r2,0(r2)
   42330:	d0a0fd05 	stb	r2,-31756(gp)
    mode.config.minute = mode_lookup_table[i][4];
   42334:	e0fffb03 	ldbu	r3,-20(fp)
   42338:	00800134 	movhi	r2,4
   4233c:	109c3984 	addi	r2,r2,28902
   42340:	18c00324 	muli	r3,r3,12
   42344:	10c5883a 	add	r2,r2,r3
   42348:	10800204 	addi	r2,r2,8
   4234c:	1080000b 	ldhu	r2,0(r2)
   42350:	d0a0fd45 	stb	r2,-31755(gp)
    mode.alarm = mode_lookup_table[i][5];
   42354:	e0fffb03 	ldbu	r3,-20(fp)
   42358:	00800134 	movhi	r2,4
   4235c:	109c3984 	addi	r2,r2,28902
   42360:	18c00324 	muli	r3,r3,12
   42364:	10c5883a 	add	r2,r2,r3
   42368:	10800284 	addi	r2,r2,10
   4236c:	1080000b 	ldhu	r2,0(r2)
   42370:	d0a0fc85 	stb	r2,-31758(gp)

    return mode;
   42374:	d0a0fc03 	ldbu	r2,-31760(gp)
   42378:	e0bffb45 	stb	r2,-19(fp)
   4237c:	d0a0fc43 	ldbu	r2,-31759(gp)
   42380:	e0bffb85 	stb	r2,-18(fp)
   42384:	d0a0fc83 	ldbu	r2,-31758(gp)
   42388:	e0bffbc5 	stb	r2,-17(fp)
   4238c:	d0a0fcc3 	ldbu	r2,-31757(gp)
   42390:	e0bffc05 	stb	r2,-16(fp)
   42394:	d0a0fd03 	ldbu	r2,-31756(gp)
   42398:	e0bffc45 	stb	r2,-15(fp)
   4239c:	d0a0fd43 	ldbu	r2,-31755(gp)
   423a0:	e0bffc85 	stb	r2,-14(fp)
   423a4:	0005883a 	mov	r2,zero
   423a8:	e0fffb43 	ldbu	r3,-19(fp)
   423ac:	18c03fcc 	andi	r3,r3,255
   423b0:	013fc004 	movi	r4,-256
   423b4:	1104703a 	and	r2,r2,r4
   423b8:	10c4b03a 	or	r2,r2,r3
   423bc:	e0fffb83 	ldbu	r3,-18(fp)
   423c0:	18c03fcc 	andi	r3,r3,255
   423c4:	1808923a 	slli	r4,r3,8
   423c8:	00fffff4 	movhi	r3,65535
   423cc:	18c03fc4 	addi	r3,r3,255
   423d0:	10c4703a 	and	r2,r2,r3
   423d4:	1104b03a 	or	r2,r2,r4
   423d8:	e0fffbc3 	ldbu	r3,-17(fp)
   423dc:	18c03fcc 	andi	r3,r3,255
   423e0:	1808943a 	slli	r4,r3,16
   423e4:	00ffc074 	movhi	r3,65281
   423e8:	18ffffc4 	addi	r3,r3,-1
   423ec:	10c4703a 	and	r2,r2,r3
   423f0:	1104b03a 	or	r2,r2,r4
   423f4:	e0fffc03 	ldbu	r3,-16(fp)
   423f8:	1808963a 	slli	r4,r3,24
   423fc:	00c04034 	movhi	r3,256
   42400:	18ffffc4 	addi	r3,r3,-1
   42404:	10c4703a 	and	r2,r2,r3
   42408:	1104b03a 	or	r2,r2,r4
   4240c:	0009883a 	mov	r4,zero
   42410:	e0fffc43 	ldbu	r3,-15(fp)
   42414:	18c03fcc 	andi	r3,r3,255
   42418:	017fc004 	movi	r5,-256
   4241c:	2148703a 	and	r4,r4,r5
   42420:	20c6b03a 	or	r3,r4,r3
   42424:	1809883a 	mov	r4,r3
   42428:	e0fffc83 	ldbu	r3,-14(fp)
   4242c:	18c03fcc 	andi	r3,r3,255
   42430:	180a923a 	slli	r5,r3,8
   42434:	00fffff4 	movhi	r3,65535
   42438:	18c03fc4 	addi	r3,r3,255
   4243c:	20c6703a 	and	r3,r4,r3
   42440:	1946b03a 	or	r3,r3,r5
   42444:	1809883a 	mov	r4,r3
   42448:	1021883a 	mov	r16,r2
   4244c:	2023883a 	mov	r17,r4
   42450:	8007883a 	mov	r3,r16
   42454:	8809883a 	mov	r4,r17
  }

}
   42458:	1805883a 	mov	r2,r3
   4245c:	2007883a 	mov	r3,r4
   42460:	e6fffe04 	addi	sp,fp,-8
   42464:	dfc00317 	ldw	ra,12(sp)
   42468:	df000217 	ldw	fp,8(sp)
   4246c:	dc400117 	ldw	r17,4(sp)
   42470:	dc000017 	ldw	r16,0(sp)
   42474:	dec00404 	addi	sp,sp,16
   42478:	f800283a 	ret

0004247c <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   4247c:	defffc04 	addi	sp,sp,-16
   42480:	dfc00315 	stw	ra,12(sp)
   42484:	df000215 	stw	fp,8(sp)
   42488:	df000204 	addi	fp,sp,8
   4248c:	2005883a 	mov	r2,r4
   42490:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   42494:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   42498:	e0bffe03 	ldbu	r2,-8(fp)
   4249c:	108000d8 	cmpnei	r2,r2,3
   424a0:	10000e26 	beq	r2,zero,424dc <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   424a4:	e0bffe03 	ldbu	r2,-8(fp)
   424a8:	1087883a 	add	r3,r2,r2
   424ac:	d0a00404 	addi	r2,gp,-32752
   424b0:	1885883a 	add	r2,r3,r2
   424b4:	1080000b 	ldhu	r2,0(r2)
   424b8:	10ffffcc 	andi	r3,r2,65535
   424bc:	e0bfff0b 	ldhu	r2,-4(fp)
   424c0:	1880021e 	bne	r3,r2,424cc <checkInvalidMode+0x50>
      return INVALID;
   424c4:	00800044 	movi	r2,1
   424c8:	00000e06 	br	42504 <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   424cc:	e0bffe03 	ldbu	r2,-8(fp)
   424d0:	10800044 	addi	r2,r2,1
   424d4:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   424d8:	003fef06 	br	42498 <__alt_data_end+0xfffda498>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   424dc:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   424e0:	e0bfff0b 	ldhu	r2,-4(fp)
   424e4:	1009883a 	mov	r4,r2
   424e8:	00425180 	call	42518 <isPowerOfTwoOrZero>
   424ec:	10803fcc 	andi	r2,r2,255
   424f0:	10800058 	cmpnei	r2,r2,1
   424f4:	1000021e 	bne	r2,zero,42500 <checkInvalidMode+0x84>
    return VALID;
   424f8:	0005883a 	mov	r2,zero
   424fc:	00000106 	br	42504 <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   42500:	00800044 	movi	r2,1
  }
}
   42504:	e037883a 	mov	sp,fp
   42508:	dfc00117 	ldw	ra,4(sp)
   4250c:	df000017 	ldw	fp,0(sp)
   42510:	dec00204 	addi	sp,sp,8
   42514:	f800283a 	ret

00042518 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   42518:	defffe04 	addi	sp,sp,-8
   4251c:	df000115 	stw	fp,4(sp)
   42520:	df000104 	addi	fp,sp,4
   42524:	2005883a 	mov	r2,r4
   42528:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   4252c:	e0ffff0b 	ldhu	r3,-4(fp)
   42530:	e0bfff0b 	ldhu	r2,-4(fp)
   42534:	10bfffc4 	addi	r2,r2,-1
   42538:	1884703a 	and	r2,r3,r2
   4253c:	1000021e 	bne	r2,zero,42548 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   42540:	00800044 	movi	r2,1
   42544:	00000106 	br	4254c <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   42548:	0005883a 	mov	r2,zero
  }
   4254c:	e037883a 	mov	sp,fp
   42550:	df000017 	ldw	fp,0(sp)
   42554:	dec00104 	addi	sp,sp,4
   42558:	f800283a 	ret

0004255c <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   4255c:	deffff04 	addi	sp,sp,-4
   42560:	df000015 	stw	fp,0(sp)
   42564:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   42568:	008002c4 	movi	r2,11
   4256c:	d0a0fe45 	stb	r2,-31751(gp)
  clock.minute = reset_clock_value[1];
   42570:	00800ec4 	movi	r2,59
   42574:	d0a0fe85 	stb	r2,-31750(gp)
  clock.second = reset_clock_value[2];
   42578:	0005883a 	mov	r2,zero
   4257c:	d0a0fec5 	stb	r2,-31749(gp)
}
   42580:	0001883a 	nop
   42584:	e037883a 	mov	sp,fp
   42588:	df000017 	ldw	fp,0(sp)
   4258c:	dec00104 	addi	sp,sp,4
   42590:	f800283a 	ret

00042594 <getClockTime>:

struct time getClockTime(void) {
   42594:	defffe04 	addi	sp,sp,-8
   42598:	df000115 	stw	fp,4(sp)
   4259c:	df000104 	addi	fp,sp,4
  return clock;
   425a0:	d0a0fe43 	ldbu	r2,-31751(gp)
   425a4:	e0bfff05 	stb	r2,-4(fp)
   425a8:	d0a0fe83 	ldbu	r2,-31750(gp)
   425ac:	e0bfff45 	stb	r2,-3(fp)
   425b0:	d0a0fec3 	ldbu	r2,-31749(gp)
   425b4:	e0bfff85 	stb	r2,-2(fp)
   425b8:	0005883a 	mov	r2,zero
   425bc:	e0ffff03 	ldbu	r3,-4(fp)
   425c0:	18c03fcc 	andi	r3,r3,255
   425c4:	013fc004 	movi	r4,-256
   425c8:	1104703a 	and	r2,r2,r4
   425cc:	10c4b03a 	or	r2,r2,r3
   425d0:	e0ffff43 	ldbu	r3,-3(fp)
   425d4:	18c03fcc 	andi	r3,r3,255
   425d8:	1808923a 	slli	r4,r3,8
   425dc:	00fffff4 	movhi	r3,65535
   425e0:	18c03fc4 	addi	r3,r3,255
   425e4:	10c4703a 	and	r2,r2,r3
   425e8:	1104b03a 	or	r2,r2,r4
   425ec:	e0ffff83 	ldbu	r3,-2(fp)
   425f0:	18c03fcc 	andi	r3,r3,255
   425f4:	1808943a 	slli	r4,r3,16
   425f8:	00ffc074 	movhi	r3,65281
   425fc:	18ffffc4 	addi	r3,r3,-1
   42600:	10c4703a 	and	r2,r2,r3
   42604:	1104b03a 	or	r2,r2,r4
}
   42608:	e037883a 	mov	sp,fp
   4260c:	df000017 	ldw	fp,0(sp)
   42610:	dec00104 	addi	sp,sp,4
   42614:	f800283a 	ret

00042618 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   42618:	defffc04 	addi	sp,sp,-16
   4261c:	dfc00315 	stw	ra,12(sp)
   42620:	df000215 	stw	fp,8(sp)
   42624:	df000204 	addi	fp,sp,8
   42628:	2005883a 	mov	r2,r4
   4262c:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   42630:	d0a0fec3 	ldbu	r2,-31749(gp)
   42634:	10803fcc 	andi	r2,r2,255
   42638:	10800ed8 	cmpnei	r2,r2,59
   4263c:	1000071e 	bne	r2,zero,4265c <upClockSecond+0x44>
    clock.second = 0;
   42640:	d020fec5 	stb	zero,-31749(gp)
    
    if (carry_setting == CARRY_ON) {
   42644:	e0bfff03 	ldbu	r2,-4(fp)
   42648:	10800058 	cmpnei	r2,r2,1
   4264c:	1000061e 	bne	r2,zero,42668 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   42650:	01000044 	movi	r4,1
   42654:	00426e40 	call	426e4 <upClockMinute>
   42658:	00000306 	br	42668 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   4265c:	d0a0fec3 	ldbu	r2,-31749(gp)
   42660:	10800044 	addi	r2,r2,1
   42664:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return clock;
   42668:	d0a0fe43 	ldbu	r2,-31751(gp)
   4266c:	e0bffe05 	stb	r2,-8(fp)
   42670:	d0a0fe83 	ldbu	r2,-31750(gp)
   42674:	e0bffe45 	stb	r2,-7(fp)
   42678:	d0a0fec3 	ldbu	r2,-31749(gp)
   4267c:	e0bffe85 	stb	r2,-6(fp)
   42680:	0005883a 	mov	r2,zero
   42684:	e0fffe03 	ldbu	r3,-8(fp)
   42688:	18c03fcc 	andi	r3,r3,255
   4268c:	013fc004 	movi	r4,-256
   42690:	1104703a 	and	r2,r2,r4
   42694:	10c4b03a 	or	r2,r2,r3
   42698:	e0fffe43 	ldbu	r3,-7(fp)
   4269c:	18c03fcc 	andi	r3,r3,255
   426a0:	1808923a 	slli	r4,r3,8
   426a4:	00fffff4 	movhi	r3,65535
   426a8:	18c03fc4 	addi	r3,r3,255
   426ac:	10c4703a 	and	r2,r2,r3
   426b0:	1104b03a 	or	r2,r2,r4
   426b4:	e0fffe83 	ldbu	r3,-6(fp)
   426b8:	18c03fcc 	andi	r3,r3,255
   426bc:	1808943a 	slli	r4,r3,16
   426c0:	00ffc074 	movhi	r3,65281
   426c4:	18ffffc4 	addi	r3,r3,-1
   426c8:	10c4703a 	and	r2,r2,r3
   426cc:	1104b03a 	or	r2,r2,r4
}
   426d0:	e037883a 	mov	sp,fp
   426d4:	dfc00117 	ldw	ra,4(sp)
   426d8:	df000017 	ldw	fp,0(sp)
   426dc:	dec00204 	addi	sp,sp,8
   426e0:	f800283a 	ret

000426e4 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   426e4:	defffc04 	addi	sp,sp,-16
   426e8:	dfc00315 	stw	ra,12(sp)
   426ec:	df000215 	stw	fp,8(sp)
   426f0:	df000204 	addi	fp,sp,8
   426f4:	2005883a 	mov	r2,r4
   426f8:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   426fc:	d0a0fe83 	ldbu	r2,-31750(gp)
   42700:	10803fcc 	andi	r2,r2,255
   42704:	10800ed8 	cmpnei	r2,r2,59
   42708:	1000061e 	bne	r2,zero,42724 <upClockMinute+0x40>
    clock.minute = 0;
   4270c:	d020fe85 	stb	zero,-31750(gp)
    
    if (carry_setting == CARRY_ON) {
   42710:	e0bfff03 	ldbu	r2,-4(fp)
   42714:	10800058 	cmpnei	r2,r2,1
   42718:	1000051e 	bne	r2,zero,42730 <upClockMinute+0x4c>
      upClockHour();
   4271c:	00427ac0 	call	427ac <upClockHour>
   42720:	00000306 	br	42730 <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   42724:	d0a0fe83 	ldbu	r2,-31750(gp)
   42728:	10800044 	addi	r2,r2,1
   4272c:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return clock;
   42730:	d0a0fe43 	ldbu	r2,-31751(gp)
   42734:	e0bffe05 	stb	r2,-8(fp)
   42738:	d0a0fe83 	ldbu	r2,-31750(gp)
   4273c:	e0bffe45 	stb	r2,-7(fp)
   42740:	d0a0fec3 	ldbu	r2,-31749(gp)
   42744:	e0bffe85 	stb	r2,-6(fp)
   42748:	0005883a 	mov	r2,zero
   4274c:	e0fffe03 	ldbu	r3,-8(fp)
   42750:	18c03fcc 	andi	r3,r3,255
   42754:	013fc004 	movi	r4,-256
   42758:	1104703a 	and	r2,r2,r4
   4275c:	10c4b03a 	or	r2,r2,r3
   42760:	e0fffe43 	ldbu	r3,-7(fp)
   42764:	18c03fcc 	andi	r3,r3,255
   42768:	1808923a 	slli	r4,r3,8
   4276c:	00fffff4 	movhi	r3,65535
   42770:	18c03fc4 	addi	r3,r3,255
   42774:	10c4703a 	and	r2,r2,r3
   42778:	1104b03a 	or	r2,r2,r4
   4277c:	e0fffe83 	ldbu	r3,-6(fp)
   42780:	18c03fcc 	andi	r3,r3,255
   42784:	1808943a 	slli	r4,r3,16
   42788:	00ffc074 	movhi	r3,65281
   4278c:	18ffffc4 	addi	r3,r3,-1
   42790:	10c4703a 	and	r2,r2,r3
   42794:	1104b03a 	or	r2,r2,r4
}
   42798:	e037883a 	mov	sp,fp
   4279c:	dfc00117 	ldw	ra,4(sp)
   427a0:	df000017 	ldw	fp,0(sp)
   427a4:	dec00204 	addi	sp,sp,8
   427a8:	f800283a 	ret

000427ac <upClockHour>:

// HOURS
struct time upClockHour(void) {
   427ac:	defffe04 	addi	sp,sp,-8
   427b0:	df000115 	stw	fp,4(sp)
   427b4:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   427b8:	d0a0fe43 	ldbu	r2,-31751(gp)
   427bc:	10c03fcc 	andi	r3,r2,255
   427c0:	d0a00643 	ldbu	r2,-32743(gp)
   427c4:	10803fcc 	andi	r2,r2,255
   427c8:	10bfffc4 	addi	r2,r2,-1
   427cc:	1880021e 	bne	r3,r2,427d8 <upClockHour+0x2c>
    clock.hour = 0;
   427d0:	d020fe45 	stb	zero,-31751(gp)
   427d4:	00000306 	br	427e4 <upClockHour+0x38>
  }
  else {
    clock.hour++;
   427d8:	d0a0fe43 	ldbu	r2,-31751(gp)
   427dc:	10800044 	addi	r2,r2,1
   427e0:	d0a0fe45 	stb	r2,-31751(gp)
  }
  return clock;
   427e4:	d0a0fe43 	ldbu	r2,-31751(gp)
   427e8:	e0bfff05 	stb	r2,-4(fp)
   427ec:	d0a0fe83 	ldbu	r2,-31750(gp)
   427f0:	e0bfff45 	stb	r2,-3(fp)
   427f4:	d0a0fec3 	ldbu	r2,-31749(gp)
   427f8:	e0bfff85 	stb	r2,-2(fp)
   427fc:	0005883a 	mov	r2,zero
   42800:	e0ffff03 	ldbu	r3,-4(fp)
   42804:	18c03fcc 	andi	r3,r3,255
   42808:	013fc004 	movi	r4,-256
   4280c:	1104703a 	and	r2,r2,r4
   42810:	10c4b03a 	or	r2,r2,r3
   42814:	e0ffff43 	ldbu	r3,-3(fp)
   42818:	18c03fcc 	andi	r3,r3,255
   4281c:	1808923a 	slli	r4,r3,8
   42820:	00fffff4 	movhi	r3,65535
   42824:	18c03fc4 	addi	r3,r3,255
   42828:	10c4703a 	and	r2,r2,r3
   4282c:	1104b03a 	or	r2,r2,r4
   42830:	e0ffff83 	ldbu	r3,-2(fp)
   42834:	18c03fcc 	andi	r3,r3,255
   42838:	1808943a 	slli	r4,r3,16
   4283c:	00ffc074 	movhi	r3,65281
   42840:	18ffffc4 	addi	r3,r3,-1
   42844:	10c4703a 	and	r2,r2,r3
   42848:	1104b03a 	or	r2,r2,r4
}
   4284c:	e037883a 	mov	sp,fp
   42850:	df000017 	ldw	fp,0(sp)
   42854:	dec00104 	addi	sp,sp,4
   42858:	f800283a 	ret

0004285c <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   4285c:	defffc04 	addi	sp,sp,-16
   42860:	dfc00315 	stw	ra,12(sp)
   42864:	df000215 	stw	fp,8(sp)
   42868:	df000204 	addi	fp,sp,8
   4286c:	2005883a 	mov	r2,r4
   42870:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   42874:	d0a0fec3 	ldbu	r2,-31749(gp)
   42878:	10803fcc 	andi	r2,r2,255
   4287c:	1000081e 	bne	r2,zero,428a0 <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   42880:	00800ec4 	movi	r2,59
   42884:	d0a0fec5 	stb	r2,-31749(gp)
    
    if (carry_setting == CARRY_ON) {
   42888:	e0bfff03 	ldbu	r2,-4(fp)
   4288c:	10800058 	cmpnei	r2,r2,1
   42890:	1000061e 	bne	r2,zero,428ac <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   42894:	01000044 	movi	r4,1
   42898:	00429280 	call	42928 <downClockMinute>
   4289c:	00000306 	br	428ac <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   428a0:	d0a0fec3 	ldbu	r2,-31749(gp)
   428a4:	10bfffc4 	addi	r2,r2,-1
   428a8:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return clock;
   428ac:	d0a0fe43 	ldbu	r2,-31751(gp)
   428b0:	e0bffe05 	stb	r2,-8(fp)
   428b4:	d0a0fe83 	ldbu	r2,-31750(gp)
   428b8:	e0bffe45 	stb	r2,-7(fp)
   428bc:	d0a0fec3 	ldbu	r2,-31749(gp)
   428c0:	e0bffe85 	stb	r2,-6(fp)
   428c4:	0005883a 	mov	r2,zero
   428c8:	e0fffe03 	ldbu	r3,-8(fp)
   428cc:	18c03fcc 	andi	r3,r3,255
   428d0:	013fc004 	movi	r4,-256
   428d4:	1104703a 	and	r2,r2,r4
   428d8:	10c4b03a 	or	r2,r2,r3
   428dc:	e0fffe43 	ldbu	r3,-7(fp)
   428e0:	18c03fcc 	andi	r3,r3,255
   428e4:	1808923a 	slli	r4,r3,8
   428e8:	00fffff4 	movhi	r3,65535
   428ec:	18c03fc4 	addi	r3,r3,255
   428f0:	10c4703a 	and	r2,r2,r3
   428f4:	1104b03a 	or	r2,r2,r4
   428f8:	e0fffe83 	ldbu	r3,-6(fp)
   428fc:	18c03fcc 	andi	r3,r3,255
   42900:	1808943a 	slli	r4,r3,16
   42904:	00ffc074 	movhi	r3,65281
   42908:	18ffffc4 	addi	r3,r3,-1
   4290c:	10c4703a 	and	r2,r2,r3
   42910:	1104b03a 	or	r2,r2,r4
}
   42914:	e037883a 	mov	sp,fp
   42918:	dfc00117 	ldw	ra,4(sp)
   4291c:	df000017 	ldw	fp,0(sp)
   42920:	dec00204 	addi	sp,sp,8
   42924:	f800283a 	ret

00042928 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   42928:	defffc04 	addi	sp,sp,-16
   4292c:	dfc00315 	stw	ra,12(sp)
   42930:	df000215 	stw	fp,8(sp)
   42934:	df000204 	addi	fp,sp,8
   42938:	2005883a 	mov	r2,r4
   4293c:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   42940:	d0a0fe83 	ldbu	r2,-31750(gp)
   42944:	10803fcc 	andi	r2,r2,255
   42948:	1000071e 	bne	r2,zero,42968 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   4294c:	00800ec4 	movi	r2,59
   42950:	d0a0fe85 	stb	r2,-31750(gp)
    
    if (carry_setting == CARRY_ON) {
   42954:	e0bfff03 	ldbu	r2,-4(fp)
   42958:	10800058 	cmpnei	r2,r2,1
   4295c:	1000051e 	bne	r2,zero,42974 <downClockMinute+0x4c>
      downClockHour();
   42960:	00429f00 	call	429f0 <downClockHour>
   42964:	00000306 	br	42974 <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   42968:	d0a0fe83 	ldbu	r2,-31750(gp)
   4296c:	10bfffc4 	addi	r2,r2,-1
   42970:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return clock;
   42974:	d0a0fe43 	ldbu	r2,-31751(gp)
   42978:	e0bffe05 	stb	r2,-8(fp)
   4297c:	d0a0fe83 	ldbu	r2,-31750(gp)
   42980:	e0bffe45 	stb	r2,-7(fp)
   42984:	d0a0fec3 	ldbu	r2,-31749(gp)
   42988:	e0bffe85 	stb	r2,-6(fp)
   4298c:	0005883a 	mov	r2,zero
   42990:	e0fffe03 	ldbu	r3,-8(fp)
   42994:	18c03fcc 	andi	r3,r3,255
   42998:	013fc004 	movi	r4,-256
   4299c:	1104703a 	and	r2,r2,r4
   429a0:	10c4b03a 	or	r2,r2,r3
   429a4:	e0fffe43 	ldbu	r3,-7(fp)
   429a8:	18c03fcc 	andi	r3,r3,255
   429ac:	1808923a 	slli	r4,r3,8
   429b0:	00fffff4 	movhi	r3,65535
   429b4:	18c03fc4 	addi	r3,r3,255
   429b8:	10c4703a 	and	r2,r2,r3
   429bc:	1104b03a 	or	r2,r2,r4
   429c0:	e0fffe83 	ldbu	r3,-6(fp)
   429c4:	18c03fcc 	andi	r3,r3,255
   429c8:	1808943a 	slli	r4,r3,16
   429cc:	00ffc074 	movhi	r3,65281
   429d0:	18ffffc4 	addi	r3,r3,-1
   429d4:	10c4703a 	and	r2,r2,r3
   429d8:	1104b03a 	or	r2,r2,r4
}
   429dc:	e037883a 	mov	sp,fp
   429e0:	dfc00117 	ldw	ra,4(sp)
   429e4:	df000017 	ldw	fp,0(sp)
   429e8:	dec00204 	addi	sp,sp,8
   429ec:	f800283a 	ret

000429f0 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   429f0:	defffe04 	addi	sp,sp,-8
   429f4:	df000115 	stw	fp,4(sp)
   429f8:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   429fc:	d0a0fe43 	ldbu	r2,-31751(gp)
   42a00:	10803fcc 	andi	r2,r2,255
   42a04:	1000041e 	bne	r2,zero,42a18 <downClockHour+0x28>
    clock.hour = (time_format-1);
   42a08:	d0a00643 	ldbu	r2,-32743(gp)
   42a0c:	10bfffc4 	addi	r2,r2,-1
   42a10:	d0a0fe45 	stb	r2,-31751(gp)
   42a14:	00000306 	br	42a24 <downClockHour+0x34>
  }
  else {
    clock.hour--;
   42a18:	d0a0fe43 	ldbu	r2,-31751(gp)
   42a1c:	10bfffc4 	addi	r2,r2,-1
   42a20:	d0a0fe45 	stb	r2,-31751(gp)
  }
  return clock;
   42a24:	d0a0fe43 	ldbu	r2,-31751(gp)
   42a28:	e0bfff05 	stb	r2,-4(fp)
   42a2c:	d0a0fe83 	ldbu	r2,-31750(gp)
   42a30:	e0bfff45 	stb	r2,-3(fp)
   42a34:	d0a0fec3 	ldbu	r2,-31749(gp)
   42a38:	e0bfff85 	stb	r2,-2(fp)
   42a3c:	0005883a 	mov	r2,zero
   42a40:	e0ffff03 	ldbu	r3,-4(fp)
   42a44:	18c03fcc 	andi	r3,r3,255
   42a48:	013fc004 	movi	r4,-256
   42a4c:	1104703a 	and	r2,r2,r4
   42a50:	10c4b03a 	or	r2,r2,r3
   42a54:	e0ffff43 	ldbu	r3,-3(fp)
   42a58:	18c03fcc 	andi	r3,r3,255
   42a5c:	1808923a 	slli	r4,r3,8
   42a60:	00fffff4 	movhi	r3,65535
   42a64:	18c03fc4 	addi	r3,r3,255
   42a68:	10c4703a 	and	r2,r2,r3
   42a6c:	1104b03a 	or	r2,r2,r4
   42a70:	e0ffff83 	ldbu	r3,-2(fp)
   42a74:	18c03fcc 	andi	r3,r3,255
   42a78:	1808943a 	slli	r4,r3,16
   42a7c:	00ffc074 	movhi	r3,65281
   42a80:	18ffffc4 	addi	r3,r3,-1
   42a84:	10c4703a 	and	r2,r2,r3
   42a88:	1104b03a 	or	r2,r2,r4
}
   42a8c:	e037883a 	mov	sp,fp
   42a90:	df000017 	ldw	fp,0(sp)
   42a94:	dec00104 	addi	sp,sp,4
   42a98:	f800283a 	ret

00042a9c <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   42a9c:	deffff04 	addi	sp,sp,-4
   42aa0:	df000015 	stw	fp,0(sp)
   42aa4:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   42aa8:	d020fd85 	stb	zero,-31754(gp)
   42aac:	d020fdc5 	stb	zero,-31753(gp)
   42ab0:	d020fe05 	stb	zero,-31752(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   42ab4:	00801904 	movi	r2,100
   42ab8:	d0a0fe05 	stb	r2,-31752(gp)
}
   42abc:	0001883a 	nop
   42ac0:	e037883a 	mov	sp,fp
   42ac4:	df000017 	ldw	fp,0(sp)
   42ac8:	dec00104 	addi	sp,sp,4
   42acc:	f800283a 	ret

00042ad0 <getAlarmTime>:

struct time getAlarmTime(void) {
   42ad0:	defffe04 	addi	sp,sp,-8
   42ad4:	df000115 	stw	fp,4(sp)
   42ad8:	df000104 	addi	fp,sp,4
  return alarm;
   42adc:	d0a0fd83 	ldbu	r2,-31754(gp)
   42ae0:	e0bfff05 	stb	r2,-4(fp)
   42ae4:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42ae8:	e0bfff45 	stb	r2,-3(fp)
   42aec:	d0a0fe03 	ldbu	r2,-31752(gp)
   42af0:	e0bfff85 	stb	r2,-2(fp)
   42af4:	0005883a 	mov	r2,zero
   42af8:	e0ffff03 	ldbu	r3,-4(fp)
   42afc:	18c03fcc 	andi	r3,r3,255
   42b00:	013fc004 	movi	r4,-256
   42b04:	1104703a 	and	r2,r2,r4
   42b08:	10c4b03a 	or	r2,r2,r3
   42b0c:	e0ffff43 	ldbu	r3,-3(fp)
   42b10:	18c03fcc 	andi	r3,r3,255
   42b14:	1808923a 	slli	r4,r3,8
   42b18:	00fffff4 	movhi	r3,65535
   42b1c:	18c03fc4 	addi	r3,r3,255
   42b20:	10c4703a 	and	r2,r2,r3
   42b24:	1104b03a 	or	r2,r2,r4
   42b28:	e0ffff83 	ldbu	r3,-2(fp)
   42b2c:	18c03fcc 	andi	r3,r3,255
   42b30:	1808943a 	slli	r4,r3,16
   42b34:	00ffc074 	movhi	r3,65281
   42b38:	18ffffc4 	addi	r3,r3,-1
   42b3c:	10c4703a 	and	r2,r2,r3
   42b40:	1104b03a 	or	r2,r2,r4
}
   42b44:	e037883a 	mov	sp,fp
   42b48:	df000017 	ldw	fp,0(sp)
   42b4c:	dec00104 	addi	sp,sp,4
   42b50:	f800283a 	ret

00042b54 <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute(void) {
   42b54:	defffe04 	addi	sp,sp,-8
   42b58:	df000115 	stw	fp,4(sp)
   42b5c:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   42b60:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42b64:	10803fcc 	andi	r2,r2,255
   42b68:	10800ed8 	cmpnei	r2,r2,59
   42b6c:	1000021e 	bne	r2,zero,42b78 <upAlarmMinute+0x24>
    alarm.minute = 0;
   42b70:	d020fdc5 	stb	zero,-31753(gp)
   42b74:	00000306 	br	42b84 <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   42b78:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42b7c:	10800044 	addi	r2,r2,1
   42b80:	d0a0fdc5 	stb	r2,-31753(gp)
  }
  return alarm;
   42b84:	d0a0fd83 	ldbu	r2,-31754(gp)
   42b88:	e0bfff05 	stb	r2,-4(fp)
   42b8c:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42b90:	e0bfff45 	stb	r2,-3(fp)
   42b94:	d0a0fe03 	ldbu	r2,-31752(gp)
   42b98:	e0bfff85 	stb	r2,-2(fp)
   42b9c:	0005883a 	mov	r2,zero
   42ba0:	e0ffff03 	ldbu	r3,-4(fp)
   42ba4:	18c03fcc 	andi	r3,r3,255
   42ba8:	013fc004 	movi	r4,-256
   42bac:	1104703a 	and	r2,r2,r4
   42bb0:	10c4b03a 	or	r2,r2,r3
   42bb4:	e0ffff43 	ldbu	r3,-3(fp)
   42bb8:	18c03fcc 	andi	r3,r3,255
   42bbc:	1808923a 	slli	r4,r3,8
   42bc0:	00fffff4 	movhi	r3,65535
   42bc4:	18c03fc4 	addi	r3,r3,255
   42bc8:	10c4703a 	and	r2,r2,r3
   42bcc:	1104b03a 	or	r2,r2,r4
   42bd0:	e0ffff83 	ldbu	r3,-2(fp)
   42bd4:	18c03fcc 	andi	r3,r3,255
   42bd8:	1808943a 	slli	r4,r3,16
   42bdc:	00ffc074 	movhi	r3,65281
   42be0:	18ffffc4 	addi	r3,r3,-1
   42be4:	10c4703a 	and	r2,r2,r3
   42be8:	1104b03a 	or	r2,r2,r4
}
   42bec:	e037883a 	mov	sp,fp
   42bf0:	df000017 	ldw	fp,0(sp)
   42bf4:	dec00104 	addi	sp,sp,4
   42bf8:	f800283a 	ret

00042bfc <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   42bfc:	defffe04 	addi	sp,sp,-8
   42c00:	df000115 	stw	fp,4(sp)
   42c04:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   42c08:	d0a0fd83 	ldbu	r2,-31754(gp)
   42c0c:	10c03fcc 	andi	r3,r2,255
   42c10:	d0a00643 	ldbu	r2,-32743(gp)
   42c14:	10803fcc 	andi	r2,r2,255
   42c18:	10bfffc4 	addi	r2,r2,-1
   42c1c:	1880021e 	bne	r3,r2,42c28 <upAlarmHour+0x2c>
    alarm.hour = 0;
   42c20:	d020fd85 	stb	zero,-31754(gp)
   42c24:	00000306 	br	42c34 <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   42c28:	d0a0fd83 	ldbu	r2,-31754(gp)
   42c2c:	10800044 	addi	r2,r2,1
   42c30:	d0a0fd85 	stb	r2,-31754(gp)
  }
  return alarm;
   42c34:	d0a0fd83 	ldbu	r2,-31754(gp)
   42c38:	e0bfff05 	stb	r2,-4(fp)
   42c3c:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42c40:	e0bfff45 	stb	r2,-3(fp)
   42c44:	d0a0fe03 	ldbu	r2,-31752(gp)
   42c48:	e0bfff85 	stb	r2,-2(fp)
   42c4c:	0005883a 	mov	r2,zero
   42c50:	e0ffff03 	ldbu	r3,-4(fp)
   42c54:	18c03fcc 	andi	r3,r3,255
   42c58:	013fc004 	movi	r4,-256
   42c5c:	1104703a 	and	r2,r2,r4
   42c60:	10c4b03a 	or	r2,r2,r3
   42c64:	e0ffff43 	ldbu	r3,-3(fp)
   42c68:	18c03fcc 	andi	r3,r3,255
   42c6c:	1808923a 	slli	r4,r3,8
   42c70:	00fffff4 	movhi	r3,65535
   42c74:	18c03fc4 	addi	r3,r3,255
   42c78:	10c4703a 	and	r2,r2,r3
   42c7c:	1104b03a 	or	r2,r2,r4
   42c80:	e0ffff83 	ldbu	r3,-2(fp)
   42c84:	18c03fcc 	andi	r3,r3,255
   42c88:	1808943a 	slli	r4,r3,16
   42c8c:	00ffc074 	movhi	r3,65281
   42c90:	18ffffc4 	addi	r3,r3,-1
   42c94:	10c4703a 	and	r2,r2,r3
   42c98:	1104b03a 	or	r2,r2,r4
}
   42c9c:	e037883a 	mov	sp,fp
   42ca0:	df000017 	ldw	fp,0(sp)
   42ca4:	dec00104 	addi	sp,sp,4
   42ca8:	f800283a 	ret

00042cac <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute(void) {
   42cac:	defffe04 	addi	sp,sp,-8
   42cb0:	df000115 	stw	fp,4(sp)
   42cb4:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   42cb8:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42cbc:	10803fcc 	andi	r2,r2,255
   42cc0:	1000031e 	bne	r2,zero,42cd0 <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   42cc4:	00800ec4 	movi	r2,59
   42cc8:	d0a0fdc5 	stb	r2,-31753(gp)
   42ccc:	00000306 	br	42cdc <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   42cd0:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42cd4:	10bfffc4 	addi	r2,r2,-1
   42cd8:	d0a0fdc5 	stb	r2,-31753(gp)
  }
  return alarm;
   42cdc:	d0a0fd83 	ldbu	r2,-31754(gp)
   42ce0:	e0bfff05 	stb	r2,-4(fp)
   42ce4:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42ce8:	e0bfff45 	stb	r2,-3(fp)
   42cec:	d0a0fe03 	ldbu	r2,-31752(gp)
   42cf0:	e0bfff85 	stb	r2,-2(fp)
   42cf4:	0005883a 	mov	r2,zero
   42cf8:	e0ffff03 	ldbu	r3,-4(fp)
   42cfc:	18c03fcc 	andi	r3,r3,255
   42d00:	013fc004 	movi	r4,-256
   42d04:	1104703a 	and	r2,r2,r4
   42d08:	10c4b03a 	or	r2,r2,r3
   42d0c:	e0ffff43 	ldbu	r3,-3(fp)
   42d10:	18c03fcc 	andi	r3,r3,255
   42d14:	1808923a 	slli	r4,r3,8
   42d18:	00fffff4 	movhi	r3,65535
   42d1c:	18c03fc4 	addi	r3,r3,255
   42d20:	10c4703a 	and	r2,r2,r3
   42d24:	1104b03a 	or	r2,r2,r4
   42d28:	e0ffff83 	ldbu	r3,-2(fp)
   42d2c:	18c03fcc 	andi	r3,r3,255
   42d30:	1808943a 	slli	r4,r3,16
   42d34:	00ffc074 	movhi	r3,65281
   42d38:	18ffffc4 	addi	r3,r3,-1
   42d3c:	10c4703a 	and	r2,r2,r3
   42d40:	1104b03a 	or	r2,r2,r4
}
   42d44:	e037883a 	mov	sp,fp
   42d48:	df000017 	ldw	fp,0(sp)
   42d4c:	dec00104 	addi	sp,sp,4
   42d50:	f800283a 	ret

00042d54 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   42d54:	defffe04 	addi	sp,sp,-8
   42d58:	df000115 	stw	fp,4(sp)
   42d5c:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   42d60:	d0a0fd83 	ldbu	r2,-31754(gp)
   42d64:	10803fcc 	andi	r2,r2,255
   42d68:	1000041e 	bne	r2,zero,42d7c <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   42d6c:	d0a00643 	ldbu	r2,-32743(gp)
   42d70:	10bfffc4 	addi	r2,r2,-1
   42d74:	d0a0fd85 	stb	r2,-31754(gp)
   42d78:	00000306 	br	42d88 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   42d7c:	d0a0fd83 	ldbu	r2,-31754(gp)
   42d80:	10bfffc4 	addi	r2,r2,-1
   42d84:	d0a0fd85 	stb	r2,-31754(gp)
  }
  return alarm;
   42d88:	d0a0fd83 	ldbu	r2,-31754(gp)
   42d8c:	e0bfff05 	stb	r2,-4(fp)
   42d90:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42d94:	e0bfff45 	stb	r2,-3(fp)
   42d98:	d0a0fe03 	ldbu	r2,-31752(gp)
   42d9c:	e0bfff85 	stb	r2,-2(fp)
   42da0:	0005883a 	mov	r2,zero
   42da4:	e0ffff03 	ldbu	r3,-4(fp)
   42da8:	18c03fcc 	andi	r3,r3,255
   42dac:	013fc004 	movi	r4,-256
   42db0:	1104703a 	and	r2,r2,r4
   42db4:	10c4b03a 	or	r2,r2,r3
   42db8:	e0ffff43 	ldbu	r3,-3(fp)
   42dbc:	18c03fcc 	andi	r3,r3,255
   42dc0:	1808923a 	slli	r4,r3,8
   42dc4:	00fffff4 	movhi	r3,65535
   42dc8:	18c03fc4 	addi	r3,r3,255
   42dcc:	10c4703a 	and	r2,r2,r3
   42dd0:	1104b03a 	or	r2,r2,r4
   42dd4:	e0ffff83 	ldbu	r3,-2(fp)
   42dd8:	18c03fcc 	andi	r3,r3,255
   42ddc:	1808943a 	slli	r4,r3,16
   42de0:	00ffc074 	movhi	r3,65281
   42de4:	18ffffc4 	addi	r3,r3,-1
   42de8:	10c4703a 	and	r2,r2,r3
   42dec:	1104b03a 	or	r2,r2,r4
}
   42df0:	e037883a 	mov	sp,fp
   42df4:	df000017 	ldw	fp,0(sp)
   42df8:	dec00104 	addi	sp,sp,4
   42dfc:	f800283a 	ret

00042e00 <__fixunssfsi>:
   42e00:	defffd04 	addi	sp,sp,-12
   42e04:	dc000015 	stw	r16,0(sp)
   42e08:	0413c034 	movhi	r16,20224
   42e0c:	800b883a 	mov	r5,r16
   42e10:	dc400115 	stw	r17,4(sp)
   42e14:	dfc00215 	stw	ra,8(sp)
   42e18:	2023883a 	mov	r17,r4
   42e1c:	00430140 	call	43014 <__gesf2>
   42e20:	1000070e 	bge	r2,zero,42e40 <__fixunssfsi+0x40>
   42e24:	8809883a 	mov	r4,r17
   42e28:	00439b00 	call	439b0 <__fixsfsi>
   42e2c:	dfc00217 	ldw	ra,8(sp)
   42e30:	dc400117 	ldw	r17,4(sp)
   42e34:	dc000017 	ldw	r16,0(sp)
   42e38:	dec00304 	addi	sp,sp,12
   42e3c:	f800283a 	ret
   42e40:	800b883a 	mov	r5,r16
   42e44:	8809883a 	mov	r4,r17
   42e48:	00434cc0 	call	434cc <__subsf3>
   42e4c:	1009883a 	mov	r4,r2
   42e50:	00439b00 	call	439b0 <__fixsfsi>
   42e54:	00e00034 	movhi	r3,32768
   42e58:	10c5883a 	add	r2,r2,r3
   42e5c:	003ff306 	br	42e2c <__alt_data_end+0xfffdae2c>

00042e60 <__divsi3>:
   42e60:	20001b16 	blt	r4,zero,42ed0 <__divsi3+0x70>
   42e64:	000f883a 	mov	r7,zero
   42e68:	28001616 	blt	r5,zero,42ec4 <__divsi3+0x64>
   42e6c:	200d883a 	mov	r6,r4
   42e70:	29001a2e 	bgeu	r5,r4,42edc <__divsi3+0x7c>
   42e74:	00800804 	movi	r2,32
   42e78:	00c00044 	movi	r3,1
   42e7c:	00000106 	br	42e84 <__divsi3+0x24>
   42e80:	10000d26 	beq	r2,zero,42eb8 <__divsi3+0x58>
   42e84:	294b883a 	add	r5,r5,r5
   42e88:	10bfffc4 	addi	r2,r2,-1
   42e8c:	18c7883a 	add	r3,r3,r3
   42e90:	293ffb36 	bltu	r5,r4,42e80 <__alt_data_end+0xfffdae80>
   42e94:	0005883a 	mov	r2,zero
   42e98:	18000726 	beq	r3,zero,42eb8 <__divsi3+0x58>
   42e9c:	0005883a 	mov	r2,zero
   42ea0:	31400236 	bltu	r6,r5,42eac <__divsi3+0x4c>
   42ea4:	314dc83a 	sub	r6,r6,r5
   42ea8:	10c4b03a 	or	r2,r2,r3
   42eac:	1806d07a 	srli	r3,r3,1
   42eb0:	280ad07a 	srli	r5,r5,1
   42eb4:	183ffa1e 	bne	r3,zero,42ea0 <__alt_data_end+0xfffdaea0>
   42eb8:	38000126 	beq	r7,zero,42ec0 <__divsi3+0x60>
   42ebc:	0085c83a 	sub	r2,zero,r2
   42ec0:	f800283a 	ret
   42ec4:	014bc83a 	sub	r5,zero,r5
   42ec8:	39c0005c 	xori	r7,r7,1
   42ecc:	003fe706 	br	42e6c <__alt_data_end+0xfffdae6c>
   42ed0:	0109c83a 	sub	r4,zero,r4
   42ed4:	01c00044 	movi	r7,1
   42ed8:	003fe306 	br	42e68 <__alt_data_end+0xfffdae68>
   42edc:	00c00044 	movi	r3,1
   42ee0:	003fee06 	br	42e9c <__alt_data_end+0xfffdae9c>

00042ee4 <__modsi3>:
   42ee4:	20001716 	blt	r4,zero,42f44 <__modsi3+0x60>
   42ee8:	000f883a 	mov	r7,zero
   42eec:	2005883a 	mov	r2,r4
   42ef0:	28001216 	blt	r5,zero,42f3c <__modsi3+0x58>
   42ef4:	2900162e 	bgeu	r5,r4,42f50 <__modsi3+0x6c>
   42ef8:	01800804 	movi	r6,32
   42efc:	00c00044 	movi	r3,1
   42f00:	00000106 	br	42f08 <__modsi3+0x24>
   42f04:	30000a26 	beq	r6,zero,42f30 <__modsi3+0x4c>
   42f08:	294b883a 	add	r5,r5,r5
   42f0c:	31bfffc4 	addi	r6,r6,-1
   42f10:	18c7883a 	add	r3,r3,r3
   42f14:	293ffb36 	bltu	r5,r4,42f04 <__alt_data_end+0xfffdaf04>
   42f18:	18000526 	beq	r3,zero,42f30 <__modsi3+0x4c>
   42f1c:	1806d07a 	srli	r3,r3,1
   42f20:	11400136 	bltu	r2,r5,42f28 <__modsi3+0x44>
   42f24:	1145c83a 	sub	r2,r2,r5
   42f28:	280ad07a 	srli	r5,r5,1
   42f2c:	183ffb1e 	bne	r3,zero,42f1c <__alt_data_end+0xfffdaf1c>
   42f30:	38000126 	beq	r7,zero,42f38 <__modsi3+0x54>
   42f34:	0085c83a 	sub	r2,zero,r2
   42f38:	f800283a 	ret
   42f3c:	014bc83a 	sub	r5,zero,r5
   42f40:	003fec06 	br	42ef4 <__alt_data_end+0xfffdaef4>
   42f44:	0109c83a 	sub	r4,zero,r4
   42f48:	01c00044 	movi	r7,1
   42f4c:	003fe706 	br	42eec <__alt_data_end+0xfffdaeec>
   42f50:	00c00044 	movi	r3,1
   42f54:	003ff106 	br	42f1c <__alt_data_end+0xfffdaf1c>

00042f58 <__udivsi3>:
   42f58:	200d883a 	mov	r6,r4
   42f5c:	2900152e 	bgeu	r5,r4,42fb4 <__udivsi3+0x5c>
   42f60:	28001416 	blt	r5,zero,42fb4 <__udivsi3+0x5c>
   42f64:	00800804 	movi	r2,32
   42f68:	00c00044 	movi	r3,1
   42f6c:	00000206 	br	42f78 <__udivsi3+0x20>
   42f70:	10000e26 	beq	r2,zero,42fac <__udivsi3+0x54>
   42f74:	28000516 	blt	r5,zero,42f8c <__udivsi3+0x34>
   42f78:	294b883a 	add	r5,r5,r5
   42f7c:	10bfffc4 	addi	r2,r2,-1
   42f80:	18c7883a 	add	r3,r3,r3
   42f84:	293ffa36 	bltu	r5,r4,42f70 <__alt_data_end+0xfffdaf70>
   42f88:	18000826 	beq	r3,zero,42fac <__udivsi3+0x54>
   42f8c:	0005883a 	mov	r2,zero
   42f90:	31400236 	bltu	r6,r5,42f9c <__udivsi3+0x44>
   42f94:	314dc83a 	sub	r6,r6,r5
   42f98:	10c4b03a 	or	r2,r2,r3
   42f9c:	1806d07a 	srli	r3,r3,1
   42fa0:	280ad07a 	srli	r5,r5,1
   42fa4:	183ffa1e 	bne	r3,zero,42f90 <__alt_data_end+0xfffdaf90>
   42fa8:	f800283a 	ret
   42fac:	0005883a 	mov	r2,zero
   42fb0:	f800283a 	ret
   42fb4:	00c00044 	movi	r3,1
   42fb8:	003ff406 	br	42f8c <__alt_data_end+0xfffdaf8c>

00042fbc <__umodsi3>:
   42fbc:	2005883a 	mov	r2,r4
   42fc0:	2900122e 	bgeu	r5,r4,4300c <__umodsi3+0x50>
   42fc4:	28001116 	blt	r5,zero,4300c <__umodsi3+0x50>
   42fc8:	01800804 	movi	r6,32
   42fcc:	00c00044 	movi	r3,1
   42fd0:	00000206 	br	42fdc <__umodsi3+0x20>
   42fd4:	30000c26 	beq	r6,zero,43008 <__umodsi3+0x4c>
   42fd8:	28000516 	blt	r5,zero,42ff0 <__umodsi3+0x34>
   42fdc:	294b883a 	add	r5,r5,r5
   42fe0:	31bfffc4 	addi	r6,r6,-1
   42fe4:	18c7883a 	add	r3,r3,r3
   42fe8:	293ffa36 	bltu	r5,r4,42fd4 <__alt_data_end+0xfffdafd4>
   42fec:	18000626 	beq	r3,zero,43008 <__umodsi3+0x4c>
   42ff0:	1806d07a 	srli	r3,r3,1
   42ff4:	11400136 	bltu	r2,r5,42ffc <__umodsi3+0x40>
   42ff8:	1145c83a 	sub	r2,r2,r5
   42ffc:	280ad07a 	srli	r5,r5,1
   43000:	183ffb1e 	bne	r3,zero,42ff0 <__alt_data_end+0xfffdaff0>
   43004:	f800283a 	ret
   43008:	f800283a 	ret
   4300c:	00c00044 	movi	r3,1
   43010:	003ff706 	br	42ff0 <__alt_data_end+0xfffdaff0>

00043014 <__gesf2>:
   43014:	2004d5fa 	srli	r2,r4,23
   43018:	2806d5fa 	srli	r3,r5,23
   4301c:	01802034 	movhi	r6,128
   43020:	31bfffc4 	addi	r6,r6,-1
   43024:	10803fcc 	andi	r2,r2,255
   43028:	01c03fc4 	movi	r7,255
   4302c:	3110703a 	and	r8,r6,r4
   43030:	18c03fcc 	andi	r3,r3,255
   43034:	314c703a 	and	r6,r6,r5
   43038:	2008d7fa 	srli	r4,r4,31
   4303c:	280ad7fa 	srli	r5,r5,31
   43040:	11c01926 	beq	r2,r7,430a8 <__gesf2+0x94>
   43044:	01c03fc4 	movi	r7,255
   43048:	19c00f26 	beq	r3,r7,43088 <__gesf2+0x74>
   4304c:	1000061e 	bne	r2,zero,43068 <__gesf2+0x54>
   43050:	400f003a 	cmpeq	r7,r8,zero
   43054:	1800071e 	bne	r3,zero,43074 <__gesf2+0x60>
   43058:	3000061e 	bne	r6,zero,43074 <__gesf2+0x60>
   4305c:	0005883a 	mov	r2,zero
   43060:	40000e1e 	bne	r8,zero,4309c <__gesf2+0x88>
   43064:	f800283a 	ret
   43068:	18000a1e 	bne	r3,zero,43094 <__gesf2+0x80>
   4306c:	30000b26 	beq	r6,zero,4309c <__gesf2+0x88>
   43070:	000f883a 	mov	r7,zero
   43074:	29403fcc 	andi	r5,r5,255
   43078:	38000726 	beq	r7,zero,43098 <__gesf2+0x84>
   4307c:	28000826 	beq	r5,zero,430a0 <__gesf2+0x8c>
   43080:	00800044 	movi	r2,1
   43084:	f800283a 	ret
   43088:	303ff026 	beq	r6,zero,4304c <__alt_data_end+0xfffdb04c>
   4308c:	00bfff84 	movi	r2,-2
   43090:	f800283a 	ret
   43094:	29403fcc 	andi	r5,r5,255
   43098:	21400526 	beq	r4,r5,430b0 <__gesf2+0x9c>
   4309c:	203ff826 	beq	r4,zero,43080 <__alt_data_end+0xfffdb080>
   430a0:	00bfffc4 	movi	r2,-1
   430a4:	f800283a 	ret
   430a8:	403fe626 	beq	r8,zero,43044 <__alt_data_end+0xfffdb044>
   430ac:	003ff706 	br	4308c <__alt_data_end+0xfffdb08c>
   430b0:	18bffa16 	blt	r3,r2,4309c <__alt_data_end+0xfffdb09c>
   430b4:	10c00216 	blt	r2,r3,430c0 <__gesf2+0xac>
   430b8:	323ff836 	bltu	r6,r8,4309c <__alt_data_end+0xfffdb09c>
   430bc:	4180022e 	bgeu	r8,r6,430c8 <__gesf2+0xb4>
   430c0:	203fef1e 	bne	r4,zero,43080 <__alt_data_end+0xfffdb080>
   430c4:	003ff606 	br	430a0 <__alt_data_end+0xfffdb0a0>
   430c8:	0005883a 	mov	r2,zero
   430cc:	f800283a 	ret

000430d0 <__mulsf3>:
   430d0:	defff504 	addi	sp,sp,-44
   430d4:	dc000115 	stw	r16,4(sp)
   430d8:	2020d5fa 	srli	r16,r4,23
   430dc:	dd400615 	stw	r21,24(sp)
   430e0:	202ad7fa 	srli	r21,r4,31
   430e4:	dc800315 	stw	r18,12(sp)
   430e8:	04802034 	movhi	r18,128
   430ec:	df000915 	stw	fp,36(sp)
   430f0:	dd000515 	stw	r20,20(sp)
   430f4:	94bfffc4 	addi	r18,r18,-1
   430f8:	dfc00a15 	stw	ra,40(sp)
   430fc:	ddc00815 	stw	r23,32(sp)
   43100:	dd800715 	stw	r22,28(sp)
   43104:	dcc00415 	stw	r19,16(sp)
   43108:	dc400215 	stw	r17,8(sp)
   4310c:	84003fcc 	andi	r16,r16,255
   43110:	9124703a 	and	r18,r18,r4
   43114:	a829883a 	mov	r20,r21
   43118:	af003fcc 	andi	fp,r21,255
   4311c:	80005426 	beq	r16,zero,43270 <__mulsf3+0x1a0>
   43120:	00803fc4 	movi	r2,255
   43124:	80802f26 	beq	r16,r2,431e4 <__mulsf3+0x114>
   43128:	91002034 	orhi	r4,r18,128
   4312c:	202490fa 	slli	r18,r4,3
   43130:	843fe044 	addi	r16,r16,-127
   43134:	0023883a 	mov	r17,zero
   43138:	002f883a 	mov	r23,zero
   4313c:	2804d5fa 	srli	r2,r5,23
   43140:	282cd7fa 	srli	r22,r5,31
   43144:	01002034 	movhi	r4,128
   43148:	213fffc4 	addi	r4,r4,-1
   4314c:	10803fcc 	andi	r2,r2,255
   43150:	2166703a 	and	r19,r4,r5
   43154:	b1803fcc 	andi	r6,r22,255
   43158:	10004c26 	beq	r2,zero,4328c <__mulsf3+0x1bc>
   4315c:	00c03fc4 	movi	r3,255
   43160:	10c04726 	beq	r2,r3,43280 <__mulsf3+0x1b0>
   43164:	99002034 	orhi	r4,r19,128
   43168:	202690fa 	slli	r19,r4,3
   4316c:	10bfe044 	addi	r2,r2,-127
   43170:	0007883a 	mov	r3,zero
   43174:	80a1883a 	add	r16,r16,r2
   43178:	010003c4 	movi	r4,15
   4317c:	1c44b03a 	or	r2,r3,r17
   43180:	b56af03a 	xor	r21,r22,r21
   43184:	81c00044 	addi	r7,r16,1
   43188:	20806b36 	bltu	r4,r2,43338 <__mulsf3+0x268>
   4318c:	100490ba 	slli	r2,r2,2
   43190:	01000134 	movhi	r4,4
   43194:	210c6904 	addi	r4,r4,12708
   43198:	1105883a 	add	r2,r2,r4
   4319c:	10800017 	ldw	r2,0(r2)
   431a0:	1000683a 	jmp	r2
   431a4:	00043338 	rdprs	zero,zero,4300
   431a8:	000431f8 	rdprs	zero,zero,4295
   431ac:	000431f8 	rdprs	zero,zero,4295
   431b0:	000431f4 	movhi	zero,4295
   431b4:	0004331c 	xori	zero,zero,4300
   431b8:	0004331c 	xori	zero,zero,4300
   431bc:	00043308 	cmpgei	zero,zero,4300
   431c0:	000431f4 	movhi	zero,4295
   431c4:	0004331c 	xori	zero,zero,4300
   431c8:	00043308 	cmpgei	zero,zero,4300
   431cc:	0004331c 	xori	zero,zero,4300
   431d0:	000431f4 	movhi	zero,4295
   431d4:	00043328 	cmpgeui	zero,zero,4300
   431d8:	00043328 	cmpgeui	zero,zero,4300
   431dc:	00043328 	cmpgeui	zero,zero,4300
   431e0:	00043404 	movi	zero,4304
   431e4:	90003b1e 	bne	r18,zero,432d4 <__mulsf3+0x204>
   431e8:	04400204 	movi	r17,8
   431ec:	05c00084 	movi	r23,2
   431f0:	003fd206 	br	4313c <__alt_data_end+0xfffdb13c>
   431f4:	302b883a 	mov	r21,r6
   431f8:	00800084 	movi	r2,2
   431fc:	18802626 	beq	r3,r2,43298 <__mulsf3+0x1c8>
   43200:	008000c4 	movi	r2,3
   43204:	1880ab26 	beq	r3,r2,434b4 <__mulsf3+0x3e4>
   43208:	00800044 	movi	r2,1
   4320c:	1880a21e 	bne	r3,r2,43498 <__mulsf3+0x3c8>
   43210:	a829883a 	mov	r20,r21
   43214:	0007883a 	mov	r3,zero
   43218:	0009883a 	mov	r4,zero
   4321c:	18803fcc 	andi	r2,r3,255
   43220:	100695fa 	slli	r3,r2,23
   43224:	a0803fcc 	andi	r2,r20,255
   43228:	100a97fa 	slli	r5,r2,31
   4322c:	00802034 	movhi	r2,128
   43230:	10bfffc4 	addi	r2,r2,-1
   43234:	2084703a 	and	r2,r4,r2
   43238:	10c4b03a 	or	r2,r2,r3
   4323c:	1144b03a 	or	r2,r2,r5
   43240:	dfc00a17 	ldw	ra,40(sp)
   43244:	df000917 	ldw	fp,36(sp)
   43248:	ddc00817 	ldw	r23,32(sp)
   4324c:	dd800717 	ldw	r22,28(sp)
   43250:	dd400617 	ldw	r21,24(sp)
   43254:	dd000517 	ldw	r20,20(sp)
   43258:	dcc00417 	ldw	r19,16(sp)
   4325c:	dc800317 	ldw	r18,12(sp)
   43260:	dc400217 	ldw	r17,8(sp)
   43264:	dc000117 	ldw	r16,4(sp)
   43268:	dec00b04 	addi	sp,sp,44
   4326c:	f800283a 	ret
   43270:	90000d1e 	bne	r18,zero,432a8 <__mulsf3+0x1d8>
   43274:	04400104 	movi	r17,4
   43278:	05c00044 	movi	r23,1
   4327c:	003faf06 	br	4313c <__alt_data_end+0xfffdb13c>
   43280:	9806c03a 	cmpne	r3,r19,zero
   43284:	18c00084 	addi	r3,r3,2
   43288:	003fba06 	br	43174 <__alt_data_end+0xfffdb174>
   4328c:	9800141e 	bne	r19,zero,432e0 <__mulsf3+0x210>
   43290:	00c00044 	movi	r3,1
   43294:	003fb706 	br	43174 <__alt_data_end+0xfffdb174>
   43298:	a829883a 	mov	r20,r21
   4329c:	00ffffc4 	movi	r3,-1
   432a0:	0009883a 	mov	r4,zero
   432a4:	003fdd06 	br	4321c <__alt_data_end+0xfffdb21c>
   432a8:	9009883a 	mov	r4,r18
   432ac:	d9400015 	stw	r5,0(sp)
   432b0:	0043b100 	call	43b10 <__clzsi2>
   432b4:	10fffec4 	addi	r3,r2,-5
   432b8:	10801d84 	addi	r2,r2,118
   432bc:	90e4983a 	sll	r18,r18,r3
   432c0:	00a1c83a 	sub	r16,zero,r2
   432c4:	0023883a 	mov	r17,zero
   432c8:	002f883a 	mov	r23,zero
   432cc:	d9400017 	ldw	r5,0(sp)
   432d0:	003f9a06 	br	4313c <__alt_data_end+0xfffdb13c>
   432d4:	04400304 	movi	r17,12
   432d8:	05c000c4 	movi	r23,3
   432dc:	003f9706 	br	4313c <__alt_data_end+0xfffdb13c>
   432e0:	9809883a 	mov	r4,r19
   432e4:	d9800015 	stw	r6,0(sp)
   432e8:	0043b100 	call	43b10 <__clzsi2>
   432ec:	10fffec4 	addi	r3,r2,-5
   432f0:	10801d84 	addi	r2,r2,118
   432f4:	98e6983a 	sll	r19,r19,r3
   432f8:	0085c83a 	sub	r2,zero,r2
   432fc:	0007883a 	mov	r3,zero
   43300:	d9800017 	ldw	r6,0(sp)
   43304:	003f9b06 	br	43174 <__alt_data_end+0xfffdb174>
   43308:	01002034 	movhi	r4,128
   4330c:	0029883a 	mov	r20,zero
   43310:	213fffc4 	addi	r4,r4,-1
   43314:	00ffffc4 	movi	r3,-1
   43318:	003fc006 	br	4321c <__alt_data_end+0xfffdb21c>
   4331c:	9027883a 	mov	r19,r18
   43320:	b807883a 	mov	r3,r23
   43324:	003fb406 	br	431f8 <__alt_data_end+0xfffdb1f8>
   43328:	9027883a 	mov	r19,r18
   4332c:	e02b883a 	mov	r21,fp
   43330:	b807883a 	mov	r3,r23
   43334:	003fb006 	br	431f8 <__alt_data_end+0xfffdb1f8>
   43338:	9004d43a 	srli	r2,r18,16
   4333c:	9810d43a 	srli	r8,r19,16
   43340:	94bfffcc 	andi	r18,r18,65535
   43344:	993fffcc 	andi	r4,r19,65535
   43348:	910d383a 	mul	r6,r18,r4
   4334c:	20a7383a 	mul	r19,r4,r2
   43350:	9225383a 	mul	r18,r18,r8
   43354:	3006d43a 	srli	r3,r6,16
   43358:	1211383a 	mul	r8,r2,r8
   4335c:	94e5883a 	add	r18,r18,r19
   43360:	1c87883a 	add	r3,r3,r18
   43364:	1cc0022e 	bgeu	r3,r19,43370 <__mulsf3+0x2a0>
   43368:	00800074 	movhi	r2,1
   4336c:	4091883a 	add	r8,r8,r2
   43370:	1804943a 	slli	r2,r3,16
   43374:	31bfffcc 	andi	r6,r6,65535
   43378:	1806d43a 	srli	r3,r3,16
   4337c:	1185883a 	add	r2,r2,r6
   43380:	102691ba 	slli	r19,r2,6
   43384:	1a07883a 	add	r3,r3,r8
   43388:	1004d6ba 	srli	r2,r2,26
   4338c:	180891ba 	slli	r4,r3,6
   43390:	9826c03a 	cmpne	r19,r19,zero
   43394:	9884b03a 	or	r2,r19,r2
   43398:	1126b03a 	or	r19,r2,r4
   4339c:	9882002c 	andhi	r2,r19,2048
   433a0:	10000426 	beq	r2,zero,433b4 <__mulsf3+0x2e4>
   433a4:	9804d07a 	srli	r2,r19,1
   433a8:	9900004c 	andi	r4,r19,1
   433ac:	3821883a 	mov	r16,r7
   433b0:	1126b03a 	or	r19,r2,r4
   433b4:	80c01fc4 	addi	r3,r16,127
   433b8:	00c0210e 	bge	zero,r3,43440 <__mulsf3+0x370>
   433bc:	988001cc 	andi	r2,r19,7
   433c0:	10000426 	beq	r2,zero,433d4 <__mulsf3+0x304>
   433c4:	988003cc 	andi	r2,r19,15
   433c8:	01000104 	movi	r4,4
   433cc:	11000126 	beq	r2,r4,433d4 <__mulsf3+0x304>
   433d0:	9927883a 	add	r19,r19,r4
   433d4:	9882002c 	andhi	r2,r19,2048
   433d8:	10000426 	beq	r2,zero,433ec <__mulsf3+0x31c>
   433dc:	00be0034 	movhi	r2,63488
   433e0:	10bfffc4 	addi	r2,r2,-1
   433e4:	80c02004 	addi	r3,r16,128
   433e8:	98a6703a 	and	r19,r19,r2
   433ec:	00803f84 	movi	r2,254
   433f0:	10ffa916 	blt	r2,r3,43298 <__alt_data_end+0xfffdb298>
   433f4:	980891ba 	slli	r4,r19,6
   433f8:	a829883a 	mov	r20,r21
   433fc:	2008d27a 	srli	r4,r4,9
   43400:	003f8606 	br	4321c <__alt_data_end+0xfffdb21c>
   43404:	9080102c 	andhi	r2,r18,64
   43408:	10000826 	beq	r2,zero,4342c <__mulsf3+0x35c>
   4340c:	9880102c 	andhi	r2,r19,64
   43410:	1000061e 	bne	r2,zero,4342c <__mulsf3+0x35c>
   43414:	00802034 	movhi	r2,128
   43418:	99001034 	orhi	r4,r19,64
   4341c:	10bfffc4 	addi	r2,r2,-1
   43420:	b029883a 	mov	r20,r22
   43424:	2088703a 	and	r4,r4,r2
   43428:	003fba06 	br	43314 <__alt_data_end+0xfffdb314>
   4342c:	00802034 	movhi	r2,128
   43430:	91001034 	orhi	r4,r18,64
   43434:	10bfffc4 	addi	r2,r2,-1
   43438:	2088703a 	and	r4,r4,r2
   4343c:	003fb506 	br	43314 <__alt_data_end+0xfffdb314>
   43440:	00800044 	movi	r2,1
   43444:	10c7c83a 	sub	r3,r2,r3
   43448:	008006c4 	movi	r2,27
   4344c:	10ff7016 	blt	r2,r3,43210 <__alt_data_end+0xfffdb210>
   43450:	00800804 	movi	r2,32
   43454:	10c5c83a 	sub	r2,r2,r3
   43458:	9884983a 	sll	r2,r19,r2
   4345c:	98c6d83a 	srl	r3,r19,r3
   43460:	1004c03a 	cmpne	r2,r2,zero
   43464:	1884b03a 	or	r2,r3,r2
   43468:	10c001cc 	andi	r3,r2,7
   4346c:	18000426 	beq	r3,zero,43480 <__mulsf3+0x3b0>
   43470:	10c003cc 	andi	r3,r2,15
   43474:	01000104 	movi	r4,4
   43478:	19000126 	beq	r3,r4,43480 <__mulsf3+0x3b0>
   4347c:	1105883a 	add	r2,r2,r4
   43480:	10c1002c 	andhi	r3,r2,1024
   43484:	18000626 	beq	r3,zero,434a0 <__mulsf3+0x3d0>
   43488:	a829883a 	mov	r20,r21
   4348c:	00c00044 	movi	r3,1
   43490:	0009883a 	mov	r4,zero
   43494:	003f6106 	br	4321c <__alt_data_end+0xfffdb21c>
   43498:	3821883a 	mov	r16,r7
   4349c:	003fc506 	br	433b4 <__alt_data_end+0xfffdb3b4>
   434a0:	100491ba 	slli	r2,r2,6
   434a4:	a829883a 	mov	r20,r21
   434a8:	0007883a 	mov	r3,zero
   434ac:	1008d27a 	srli	r4,r2,9
   434b0:	003f5a06 	br	4321c <__alt_data_end+0xfffdb21c>
   434b4:	00802034 	movhi	r2,128
   434b8:	99001034 	orhi	r4,r19,64
   434bc:	10bfffc4 	addi	r2,r2,-1
   434c0:	a829883a 	mov	r20,r21
   434c4:	2088703a 	and	r4,r4,r2
   434c8:	003f9206 	br	43314 <__alt_data_end+0xfffdb314>

000434cc <__subsf3>:
   434cc:	defffc04 	addi	sp,sp,-16
   434d0:	280cd5fa 	srli	r6,r5,23
   434d4:	dc000015 	stw	r16,0(sp)
   434d8:	01c02034 	movhi	r7,128
   434dc:	2020d5fa 	srli	r16,r4,23
   434e0:	39ffffc4 	addi	r7,r7,-1
   434e4:	3906703a 	and	r3,r7,r4
   434e8:	dc400115 	stw	r17,4(sp)
   434ec:	394e703a 	and	r7,r7,r5
   434f0:	2022d7fa 	srli	r17,r4,31
   434f4:	dfc00315 	stw	ra,12(sp)
   434f8:	dc800215 	stw	r18,8(sp)
   434fc:	31803fcc 	andi	r6,r6,255
   43500:	01003fc4 	movi	r4,255
   43504:	84003fcc 	andi	r16,r16,255
   43508:	180690fa 	slli	r3,r3,3
   4350c:	2804d7fa 	srli	r2,r5,31
   43510:	380e90fa 	slli	r7,r7,3
   43514:	31006d26 	beq	r6,r4,436cc <__subsf3+0x200>
   43518:	1080005c 	xori	r2,r2,1
   4351c:	8189c83a 	sub	r4,r16,r6
   43520:	14404f26 	beq	r2,r17,43660 <__subsf3+0x194>
   43524:	0100770e 	bge	zero,r4,43704 <__subsf3+0x238>
   43528:	30001e1e 	bne	r6,zero,435a4 <__subsf3+0xd8>
   4352c:	38006a1e 	bne	r7,zero,436d8 <__subsf3+0x20c>
   43530:	188001cc 	andi	r2,r3,7
   43534:	10000426 	beq	r2,zero,43548 <__subsf3+0x7c>
   43538:	188003cc 	andi	r2,r3,15
   4353c:	01000104 	movi	r4,4
   43540:	11000126 	beq	r2,r4,43548 <__subsf3+0x7c>
   43544:	1907883a 	add	r3,r3,r4
   43548:	1881002c 	andhi	r2,r3,1024
   4354c:	10003926 	beq	r2,zero,43634 <__subsf3+0x168>
   43550:	84000044 	addi	r16,r16,1
   43554:	00803fc4 	movi	r2,255
   43558:	80807526 	beq	r16,r2,43730 <__subsf3+0x264>
   4355c:	180691ba 	slli	r3,r3,6
   43560:	8880004c 	andi	r2,r17,1
   43564:	180ad27a 	srli	r5,r3,9
   43568:	84003fcc 	andi	r16,r16,255
   4356c:	800695fa 	slli	r3,r16,23
   43570:	10803fcc 	andi	r2,r2,255
   43574:	01002034 	movhi	r4,128
   43578:	213fffc4 	addi	r4,r4,-1
   4357c:	100497fa 	slli	r2,r2,31
   43580:	2920703a 	and	r16,r5,r4
   43584:	80e0b03a 	or	r16,r16,r3
   43588:	8084b03a 	or	r2,r16,r2
   4358c:	dfc00317 	ldw	ra,12(sp)
   43590:	dc800217 	ldw	r18,8(sp)
   43594:	dc400117 	ldw	r17,4(sp)
   43598:	dc000017 	ldw	r16,0(sp)
   4359c:	dec00404 	addi	sp,sp,16
   435a0:	f800283a 	ret
   435a4:	00803fc4 	movi	r2,255
   435a8:	80bfe126 	beq	r16,r2,43530 <__alt_data_end+0xfffdb530>
   435ac:	39c10034 	orhi	r7,r7,1024
   435b0:	008006c4 	movi	r2,27
   435b4:	11007416 	blt	r2,r4,43788 <__subsf3+0x2bc>
   435b8:	00800804 	movi	r2,32
   435bc:	1105c83a 	sub	r2,r2,r4
   435c0:	3884983a 	sll	r2,r7,r2
   435c4:	390ed83a 	srl	r7,r7,r4
   435c8:	1008c03a 	cmpne	r4,r2,zero
   435cc:	390eb03a 	or	r7,r7,r4
   435d0:	19c7c83a 	sub	r3,r3,r7
   435d4:	1881002c 	andhi	r2,r3,1024
   435d8:	10001426 	beq	r2,zero,4362c <__subsf3+0x160>
   435dc:	04810034 	movhi	r18,1024
   435e0:	94bfffc4 	addi	r18,r18,-1
   435e4:	1ca4703a 	and	r18,r3,r18
   435e8:	9009883a 	mov	r4,r18
   435ec:	0043b100 	call	43b10 <__clzsi2>
   435f0:	10bffec4 	addi	r2,r2,-5
   435f4:	90a4983a 	sll	r18,r18,r2
   435f8:	14005116 	blt	r2,r16,43740 <__subsf3+0x274>
   435fc:	1405c83a 	sub	r2,r2,r16
   43600:	10c00044 	addi	r3,r2,1
   43604:	00800804 	movi	r2,32
   43608:	10c5c83a 	sub	r2,r2,r3
   4360c:	9084983a 	sll	r2,r18,r2
   43610:	90e4d83a 	srl	r18,r18,r3
   43614:	0021883a 	mov	r16,zero
   43618:	1006c03a 	cmpne	r3,r2,zero
   4361c:	90c6b03a 	or	r3,r18,r3
   43620:	003fc306 	br	43530 <__alt_data_end+0xfffdb530>
   43624:	2000e026 	beq	r4,zero,439a8 <__subsf3+0x4dc>
   43628:	2007883a 	mov	r3,r4
   4362c:	188001cc 	andi	r2,r3,7
   43630:	103fc11e 	bne	r2,zero,43538 <__alt_data_end+0xfffdb538>
   43634:	180ad0fa 	srli	r5,r3,3
   43638:	00c03fc4 	movi	r3,255
   4363c:	8880004c 	andi	r2,r17,1
   43640:	80c0031e 	bne	r16,r3,43650 <__subsf3+0x184>
   43644:	28006d26 	beq	r5,zero,437fc <__subsf3+0x330>
   43648:	29401034 	orhi	r5,r5,64
   4364c:	043fffc4 	movi	r16,-1
   43650:	00c02034 	movhi	r3,128
   43654:	18ffffc4 	addi	r3,r3,-1
   43658:	28ca703a 	and	r5,r5,r3
   4365c:	003fc206 	br	43568 <__alt_data_end+0xfffdb568>
   43660:	01003c0e 	bge	zero,r4,43754 <__subsf3+0x288>
   43664:	30002126 	beq	r6,zero,436ec <__subsf3+0x220>
   43668:	01403fc4 	movi	r5,255
   4366c:	817fb026 	beq	r16,r5,43530 <__alt_data_end+0xfffdb530>
   43670:	39c10034 	orhi	r7,r7,1024
   43674:	014006c4 	movi	r5,27
   43678:	29007416 	blt	r5,r4,4384c <__subsf3+0x380>
   4367c:	01400804 	movi	r5,32
   43680:	290bc83a 	sub	r5,r5,r4
   43684:	394a983a 	sll	r5,r7,r5
   43688:	390ed83a 	srl	r7,r7,r4
   4368c:	2808c03a 	cmpne	r4,r5,zero
   43690:	390eb03a 	or	r7,r7,r4
   43694:	19c7883a 	add	r3,r3,r7
   43698:	1901002c 	andhi	r4,r3,1024
   4369c:	20003826 	beq	r4,zero,43780 <__subsf3+0x2b4>
   436a0:	84000044 	addi	r16,r16,1
   436a4:	01003fc4 	movi	r4,255
   436a8:	81005426 	beq	r16,r4,437fc <__subsf3+0x330>
   436ac:	1023883a 	mov	r17,r2
   436b0:	00bf0034 	movhi	r2,64512
   436b4:	10bfffc4 	addi	r2,r2,-1
   436b8:	1900004c 	andi	r4,r3,1
   436bc:	1886703a 	and	r3,r3,r2
   436c0:	1806d07a 	srli	r3,r3,1
   436c4:	1906b03a 	or	r3,r3,r4
   436c8:	003f9906 	br	43530 <__alt_data_end+0xfffdb530>
   436cc:	383f9226 	beq	r7,zero,43518 <__alt_data_end+0xfffdb518>
   436d0:	10803fcc 	andi	r2,r2,255
   436d4:	003f9106 	br	4351c <__alt_data_end+0xfffdb51c>
   436d8:	213fffc4 	addi	r4,r4,-1
   436dc:	203fbc26 	beq	r4,zero,435d0 <__alt_data_end+0xfffdb5d0>
   436e0:	00803fc4 	movi	r2,255
   436e4:	80bfb21e 	bne	r16,r2,435b0 <__alt_data_end+0xfffdb5b0>
   436e8:	003f9106 	br	43530 <__alt_data_end+0xfffdb530>
   436ec:	383f9026 	beq	r7,zero,43530 <__alt_data_end+0xfffdb530>
   436f0:	213fffc4 	addi	r4,r4,-1
   436f4:	203fe726 	beq	r4,zero,43694 <__alt_data_end+0xfffdb694>
   436f8:	01403fc4 	movi	r5,255
   436fc:	817fdd1e 	bne	r16,r5,43674 <__alt_data_end+0xfffdb674>
   43700:	003f8b06 	br	43530 <__alt_data_end+0xfffdb530>
   43704:	2000221e 	bne	r4,zero,43790 <__subsf3+0x2c4>
   43708:	81000044 	addi	r4,r16,1
   4370c:	21003fcc 	andi	r4,r4,255
   43710:	01400044 	movi	r5,1
   43714:	2900470e 	bge	r5,r4,43834 <__subsf3+0x368>
   43718:	19e5c83a 	sub	r18,r3,r7
   4371c:	9141002c 	andhi	r5,r18,1024
   43720:	28002d26 	beq	r5,zero,437d8 <__subsf3+0x30c>
   43724:	38e5c83a 	sub	r18,r7,r3
   43728:	1023883a 	mov	r17,r2
   4372c:	003fae06 	br	435e8 <__alt_data_end+0xfffdb5e8>
   43730:	8880004c 	andi	r2,r17,1
   43734:	043fffc4 	movi	r16,-1
   43738:	000b883a 	mov	r5,zero
   4373c:	003f8a06 	br	43568 <__alt_data_end+0xfffdb568>
   43740:	00ff0034 	movhi	r3,64512
   43744:	18ffffc4 	addi	r3,r3,-1
   43748:	80a1c83a 	sub	r16,r16,r2
   4374c:	90c6703a 	and	r3,r18,r3
   43750:	003f7706 	br	43530 <__alt_data_end+0xfffdb530>
   43754:	2000431e 	bne	r4,zero,43864 <__subsf3+0x398>
   43758:	81000044 	addi	r4,r16,1
   4375c:	21803fcc 	andi	r6,r4,255
   43760:	01400044 	movi	r5,1
   43764:	2980280e 	bge	r5,r6,43808 <__subsf3+0x33c>
   43768:	01403fc4 	movi	r5,255
   4376c:	21402326 	beq	r4,r5,437fc <__subsf3+0x330>
   43770:	19c7883a 	add	r3,r3,r7
   43774:	1806d07a 	srli	r3,r3,1
   43778:	2021883a 	mov	r16,r4
   4377c:	003f6c06 	br	43530 <__alt_data_end+0xfffdb530>
   43780:	1023883a 	mov	r17,r2
   43784:	003fa906 	br	4362c <__alt_data_end+0xfffdb62c>
   43788:	01c00044 	movi	r7,1
   4378c:	003f9006 	br	435d0 <__alt_data_end+0xfffdb5d0>
   43790:	8000151e 	bne	r16,zero,437e8 <__subsf3+0x31c>
   43794:	18002f26 	beq	r3,zero,43854 <__subsf3+0x388>
   43798:	0108303a 	nor	r4,zero,r4
   4379c:	20000a26 	beq	r4,zero,437c8 <__subsf3+0x2fc>
   437a0:	01403fc4 	movi	r5,255
   437a4:	31402b26 	beq	r6,r5,43854 <__subsf3+0x388>
   437a8:	014006c4 	movi	r5,27
   437ac:	29006e16 	blt	r5,r4,43968 <__subsf3+0x49c>
   437b0:	01400804 	movi	r5,32
   437b4:	290bc83a 	sub	r5,r5,r4
   437b8:	194a983a 	sll	r5,r3,r5
   437bc:	1908d83a 	srl	r4,r3,r4
   437c0:	2806c03a 	cmpne	r3,r5,zero
   437c4:	20c6b03a 	or	r3,r4,r3
   437c8:	38c7c83a 	sub	r3,r7,r3
   437cc:	3021883a 	mov	r16,r6
   437d0:	1023883a 	mov	r17,r2
   437d4:	003f7f06 	br	435d4 <__alt_data_end+0xfffdb5d4>
   437d8:	903f831e 	bne	r18,zero,435e8 <__alt_data_end+0xfffdb5e8>
   437dc:	0005883a 	mov	r2,zero
   437e0:	0021883a 	mov	r16,zero
   437e4:	003f9a06 	br	43650 <__alt_data_end+0xfffdb650>
   437e8:	01403fc4 	movi	r5,255
   437ec:	31401926 	beq	r6,r5,43854 <__subsf3+0x388>
   437f0:	0109c83a 	sub	r4,zero,r4
   437f4:	18c10034 	orhi	r3,r3,1024
   437f8:	003feb06 	br	437a8 <__alt_data_end+0xfffdb7a8>
   437fc:	043fffc4 	movi	r16,-1
   43800:	000b883a 	mov	r5,zero
   43804:	003f5806 	br	43568 <__alt_data_end+0xfffdb568>
   43808:	8000481e 	bne	r16,zero,4392c <__subsf3+0x460>
   4380c:	18006226 	beq	r3,zero,43998 <__subsf3+0x4cc>
   43810:	383f4726 	beq	r7,zero,43530 <__alt_data_end+0xfffdb530>
   43814:	19c7883a 	add	r3,r3,r7
   43818:	1881002c 	andhi	r2,r3,1024
   4381c:	103f8326 	beq	r2,zero,4362c <__alt_data_end+0xfffdb62c>
   43820:	00bf0034 	movhi	r2,64512
   43824:	10bfffc4 	addi	r2,r2,-1
   43828:	2821883a 	mov	r16,r5
   4382c:	1886703a 	and	r3,r3,r2
   43830:	003f3f06 	br	43530 <__alt_data_end+0xfffdb530>
   43834:	80001c1e 	bne	r16,zero,438a8 <__subsf3+0x3dc>
   43838:	1800261e 	bne	r3,zero,438d4 <__subsf3+0x408>
   4383c:	38004c26 	beq	r7,zero,43970 <__subsf3+0x4a4>
   43840:	3807883a 	mov	r3,r7
   43844:	1023883a 	mov	r17,r2
   43848:	003f3906 	br	43530 <__alt_data_end+0xfffdb530>
   4384c:	01c00044 	movi	r7,1
   43850:	003f9006 	br	43694 <__alt_data_end+0xfffdb694>
   43854:	3807883a 	mov	r3,r7
   43858:	3021883a 	mov	r16,r6
   4385c:	1023883a 	mov	r17,r2
   43860:	003f3306 	br	43530 <__alt_data_end+0xfffdb530>
   43864:	8000161e 	bne	r16,zero,438c0 <__subsf3+0x3f4>
   43868:	18002d26 	beq	r3,zero,43920 <__subsf3+0x454>
   4386c:	0108303a 	nor	r4,zero,r4
   43870:	20000a26 	beq	r4,zero,4389c <__subsf3+0x3d0>
   43874:	01403fc4 	movi	r5,255
   43878:	31402926 	beq	r6,r5,43920 <__subsf3+0x454>
   4387c:	014006c4 	movi	r5,27
   43880:	29004716 	blt	r5,r4,439a0 <__subsf3+0x4d4>
   43884:	01400804 	movi	r5,32
   43888:	290bc83a 	sub	r5,r5,r4
   4388c:	194a983a 	sll	r5,r3,r5
   43890:	1908d83a 	srl	r4,r3,r4
   43894:	2806c03a 	cmpne	r3,r5,zero
   43898:	20c6b03a 	or	r3,r4,r3
   4389c:	19c7883a 	add	r3,r3,r7
   438a0:	3021883a 	mov	r16,r6
   438a4:	003f7c06 	br	43698 <__alt_data_end+0xfffdb698>
   438a8:	1800111e 	bne	r3,zero,438f0 <__subsf3+0x424>
   438ac:	38003326 	beq	r7,zero,4397c <__subsf3+0x4b0>
   438b0:	3807883a 	mov	r3,r7
   438b4:	1023883a 	mov	r17,r2
   438b8:	04003fc4 	movi	r16,255
   438bc:	003f1c06 	br	43530 <__alt_data_end+0xfffdb530>
   438c0:	01403fc4 	movi	r5,255
   438c4:	31401626 	beq	r6,r5,43920 <__subsf3+0x454>
   438c8:	0109c83a 	sub	r4,zero,r4
   438cc:	18c10034 	orhi	r3,r3,1024
   438d0:	003fea06 	br	4387c <__alt_data_end+0xfffdb87c>
   438d4:	383f1626 	beq	r7,zero,43530 <__alt_data_end+0xfffdb530>
   438d8:	19c9c83a 	sub	r4,r3,r7
   438dc:	2141002c 	andhi	r5,r4,1024
   438e0:	283f5026 	beq	r5,zero,43624 <__alt_data_end+0xfffdb624>
   438e4:	38c7c83a 	sub	r3,r7,r3
   438e8:	1023883a 	mov	r17,r2
   438ec:	003f1006 	br	43530 <__alt_data_end+0xfffdb530>
   438f0:	38001b26 	beq	r7,zero,43960 <__subsf3+0x494>
   438f4:	1806d0fa 	srli	r3,r3,3
   438f8:	1900102c 	andhi	r4,r3,64
   438fc:	20000526 	beq	r4,zero,43914 <__subsf3+0x448>
   43900:	380ed0fa 	srli	r7,r7,3
   43904:	3900102c 	andhi	r4,r7,64
   43908:	2000021e 	bne	r4,zero,43914 <__subsf3+0x448>
   4390c:	3807883a 	mov	r3,r7
   43910:	1023883a 	mov	r17,r2
   43914:	180690fa 	slli	r3,r3,3
   43918:	04003fc4 	movi	r16,255
   4391c:	003f0406 	br	43530 <__alt_data_end+0xfffdb530>
   43920:	3807883a 	mov	r3,r7
   43924:	3021883a 	mov	r16,r6
   43928:	003f0106 	br	43530 <__alt_data_end+0xfffdb530>
   4392c:	18001726 	beq	r3,zero,4398c <__subsf3+0x4c0>
   43930:	38000b26 	beq	r7,zero,43960 <__subsf3+0x494>
   43934:	1806d0fa 	srli	r3,r3,3
   43938:	1900102c 	andhi	r4,r3,64
   4393c:	20000426 	beq	r4,zero,43950 <__subsf3+0x484>
   43940:	380ed0fa 	srli	r7,r7,3
   43944:	3900102c 	andhi	r4,r7,64
   43948:	2000011e 	bne	r4,zero,43950 <__subsf3+0x484>
   4394c:	3807883a 	mov	r3,r7
   43950:	180690fa 	slli	r3,r3,3
   43954:	1023883a 	mov	r17,r2
   43958:	04003fc4 	movi	r16,255
   4395c:	003ef406 	br	43530 <__alt_data_end+0xfffdb530>
   43960:	04003fc4 	movi	r16,255
   43964:	003ef206 	br	43530 <__alt_data_end+0xfffdb530>
   43968:	00c00044 	movi	r3,1
   4396c:	003f9606 	br	437c8 <__alt_data_end+0xfffdb7c8>
   43970:	000b883a 	mov	r5,zero
   43974:	0005883a 	mov	r2,zero
   43978:	003f3506 	br	43650 <__alt_data_end+0xfffdb650>
   4397c:	01402034 	movhi	r5,128
   43980:	297fffc4 	addi	r5,r5,-1
   43984:	0005883a 	mov	r2,zero
   43988:	003f2f06 	br	43648 <__alt_data_end+0xfffdb648>
   4398c:	3807883a 	mov	r3,r7
   43990:	04003fc4 	movi	r16,255
   43994:	003ee606 	br	43530 <__alt_data_end+0xfffdb530>
   43998:	3807883a 	mov	r3,r7
   4399c:	003ee406 	br	43530 <__alt_data_end+0xfffdb530>
   439a0:	00c00044 	movi	r3,1
   439a4:	003fbd06 	br	4389c <__alt_data_end+0xfffdb89c>
   439a8:	0005883a 	mov	r2,zero
   439ac:	003f2806 	br	43650 <__alt_data_end+0xfffdb650>

000439b0 <__fixsfsi>:
   439b0:	200ad5fa 	srli	r5,r4,23
   439b4:	00c02034 	movhi	r3,128
   439b8:	18ffffc4 	addi	r3,r3,-1
   439bc:	29403fcc 	andi	r5,r5,255
   439c0:	00801f84 	movi	r2,126
   439c4:	1906703a 	and	r3,r3,r4
   439c8:	2008d7fa 	srli	r4,r4,31
   439cc:	11400e0e 	bge	r2,r5,43a08 <__fixsfsi+0x58>
   439d0:	00802744 	movi	r2,157
   439d4:	11400816 	blt	r2,r5,439f8 <__fixsfsi+0x48>
   439d8:	00802544 	movi	r2,149
   439dc:	18c02034 	orhi	r3,r3,128
   439e0:	11400b0e 	bge	r2,r5,43a10 <__fixsfsi+0x60>
   439e4:	28bfda84 	addi	r2,r5,-150
   439e8:	1884983a 	sll	r2,r3,r2
   439ec:	20000726 	beq	r4,zero,43a0c <__fixsfsi+0x5c>
   439f0:	0085c83a 	sub	r2,zero,r2
   439f4:	f800283a 	ret
   439f8:	00a00034 	movhi	r2,32768
   439fc:	10bfffc4 	addi	r2,r2,-1
   43a00:	2085883a 	add	r2,r4,r2
   43a04:	f800283a 	ret
   43a08:	0005883a 	mov	r2,zero
   43a0c:	f800283a 	ret
   43a10:	00802584 	movi	r2,150
   43a14:	1145c83a 	sub	r2,r2,r5
   43a18:	1884d83a 	srl	r2,r3,r2
   43a1c:	003ff306 	br	439ec <__alt_data_end+0xfffdb9ec>

00043a20 <__floatunsisf>:
   43a20:	defffe04 	addi	sp,sp,-8
   43a24:	dfc00115 	stw	ra,4(sp)
   43a28:	dc000015 	stw	r16,0(sp)
   43a2c:	20002c26 	beq	r4,zero,43ae0 <__floatunsisf+0xc0>
   43a30:	2021883a 	mov	r16,r4
   43a34:	0043b100 	call	43b10 <__clzsi2>
   43a38:	00c02784 	movi	r3,158
   43a3c:	1887c83a 	sub	r3,r3,r2
   43a40:	01002584 	movi	r4,150
   43a44:	20c00f16 	blt	r4,r3,43a84 <__floatunsisf+0x64>
   43a48:	20c9c83a 	sub	r4,r4,r3
   43a4c:	8108983a 	sll	r4,r16,r4
   43a50:	00802034 	movhi	r2,128
   43a54:	10bfffc4 	addi	r2,r2,-1
   43a58:	2088703a 	and	r4,r4,r2
   43a5c:	18803fcc 	andi	r2,r3,255
   43a60:	100695fa 	slli	r3,r2,23
   43a64:	00802034 	movhi	r2,128
   43a68:	10bfffc4 	addi	r2,r2,-1
   43a6c:	2084703a 	and	r2,r4,r2
   43a70:	10c4b03a 	or	r2,r2,r3
   43a74:	dfc00117 	ldw	ra,4(sp)
   43a78:	dc000017 	ldw	r16,0(sp)
   43a7c:	dec00204 	addi	sp,sp,8
   43a80:	f800283a 	ret
   43a84:	01002644 	movi	r4,153
   43a88:	20c01816 	blt	r4,r3,43aec <__floatunsisf+0xcc>
   43a8c:	20c9c83a 	sub	r4,r4,r3
   43a90:	8108983a 	sll	r4,r16,r4
   43a94:	017f0034 	movhi	r5,64512
   43a98:	297fffc4 	addi	r5,r5,-1
   43a9c:	218001cc 	andi	r6,r4,7
   43aa0:	214a703a 	and	r5,r4,r5
   43aa4:	30000426 	beq	r6,zero,43ab8 <__floatunsisf+0x98>
   43aa8:	210003cc 	andi	r4,r4,15
   43aac:	01800104 	movi	r6,4
   43ab0:	21800126 	beq	r4,r6,43ab8 <__floatunsisf+0x98>
   43ab4:	298b883a 	add	r5,r5,r6
   43ab8:	2901002c 	andhi	r4,r5,1024
   43abc:	20000526 	beq	r4,zero,43ad4 <__floatunsisf+0xb4>
   43ac0:	00c027c4 	movi	r3,159
   43ac4:	1887c83a 	sub	r3,r3,r2
   43ac8:	00bf0034 	movhi	r2,64512
   43acc:	10bfffc4 	addi	r2,r2,-1
   43ad0:	288a703a 	and	r5,r5,r2
   43ad4:	280891ba 	slli	r4,r5,6
   43ad8:	2008d27a 	srli	r4,r4,9
   43adc:	003fdf06 	br	43a5c <__alt_data_end+0xfffdba5c>
   43ae0:	0007883a 	mov	r3,zero
   43ae4:	0009883a 	mov	r4,zero
   43ae8:	003fdc06 	br	43a5c <__alt_data_end+0xfffdba5c>
   43aec:	01402e44 	movi	r5,185
   43af0:	28cbc83a 	sub	r5,r5,r3
   43af4:	01000144 	movi	r4,5
   43af8:	2089c83a 	sub	r4,r4,r2
   43afc:	814a983a 	sll	r5,r16,r5
   43b00:	8108d83a 	srl	r4,r16,r4
   43b04:	2820c03a 	cmpne	r16,r5,zero
   43b08:	2408b03a 	or	r4,r4,r16
   43b0c:	003fe106 	br	43a94 <__alt_data_end+0xfffdba94>

00043b10 <__clzsi2>:
   43b10:	00bfffd4 	movui	r2,65535
   43b14:	11000536 	bltu	r2,r4,43b2c <__clzsi2+0x1c>
   43b18:	00803fc4 	movi	r2,255
   43b1c:	11000f36 	bltu	r2,r4,43b5c <__clzsi2+0x4c>
   43b20:	00800804 	movi	r2,32
   43b24:	0007883a 	mov	r3,zero
   43b28:	00000506 	br	43b40 <__clzsi2+0x30>
   43b2c:	00804034 	movhi	r2,256
   43b30:	10bfffc4 	addi	r2,r2,-1
   43b34:	11000c2e 	bgeu	r2,r4,43b68 <__clzsi2+0x58>
   43b38:	00800204 	movi	r2,8
   43b3c:	00c00604 	movi	r3,24
   43b40:	20c8d83a 	srl	r4,r4,r3
   43b44:	00c00134 	movhi	r3,4
   43b48:	18dc5184 	addi	r3,r3,28998
   43b4c:	1909883a 	add	r4,r3,r4
   43b50:	20c00003 	ldbu	r3,0(r4)
   43b54:	10c5c83a 	sub	r2,r2,r3
   43b58:	f800283a 	ret
   43b5c:	00800604 	movi	r2,24
   43b60:	00c00204 	movi	r3,8
   43b64:	003ff606 	br	43b40 <__alt_data_end+0xfffdbb40>
   43b68:	00800404 	movi	r2,16
   43b6c:	1007883a 	mov	r3,r2
   43b70:	003ff306 	br	43b40 <__alt_data_end+0xfffdbb40>

00043b74 <_printf_r>:
   43b74:	defffd04 	addi	sp,sp,-12
   43b78:	dfc00015 	stw	ra,0(sp)
   43b7c:	d9800115 	stw	r6,4(sp)
   43b80:	d9c00215 	stw	r7,8(sp)
   43b84:	20c00217 	ldw	r3,8(r4)
   43b88:	01800134 	movhi	r6,4
   43b8c:	31909604 	addi	r6,r6,16984
   43b90:	19800115 	stw	r6,4(r3)
   43b94:	280d883a 	mov	r6,r5
   43b98:	21400217 	ldw	r5,8(r4)
   43b9c:	d9c00104 	addi	r7,sp,4
   43ba0:	0043d180 	call	43d18 <___vfprintf_internal_r>
   43ba4:	dfc00017 	ldw	ra,0(sp)
   43ba8:	dec00304 	addi	sp,sp,12
   43bac:	f800283a 	ret

00043bb0 <printf>:
   43bb0:	defffc04 	addi	sp,sp,-16
   43bb4:	dfc00015 	stw	ra,0(sp)
   43bb8:	d9400115 	stw	r5,4(sp)
   43bbc:	d9800215 	stw	r6,8(sp)
   43bc0:	d9c00315 	stw	r7,12(sp)
   43bc4:	00800134 	movhi	r2,4
   43bc8:	109d7f04 	addi	r2,r2,30204
   43bcc:	10800017 	ldw	r2,0(r2)
   43bd0:	01400134 	movhi	r5,4
   43bd4:	29509604 	addi	r5,r5,16984
   43bd8:	10c00217 	ldw	r3,8(r2)
   43bdc:	d9800104 	addi	r6,sp,4
   43be0:	19400115 	stw	r5,4(r3)
   43be4:	200b883a 	mov	r5,r4
   43be8:	11000217 	ldw	r4,8(r2)
   43bec:	004423c0 	call	4423c <__vfprintf_internal>
   43bf0:	dfc00017 	ldw	ra,0(sp)
   43bf4:	dec00404 	addi	sp,sp,16
   43bf8:	f800283a 	ret

00043bfc <_puts_r>:
   43bfc:	defffd04 	addi	sp,sp,-12
   43c00:	dc000015 	stw	r16,0(sp)
   43c04:	2021883a 	mov	r16,r4
   43c08:	2809883a 	mov	r4,r5
   43c0c:	dfc00215 	stw	ra,8(sp)
   43c10:	dc400115 	stw	r17,4(sp)
   43c14:	2823883a 	mov	r17,r5
   43c18:	0043c900 	call	43c90 <strlen>
   43c1c:	81400217 	ldw	r5,8(r16)
   43c20:	01000134 	movhi	r4,4
   43c24:	21109604 	addi	r4,r4,16984
   43c28:	29000115 	stw	r4,4(r5)
   43c2c:	100f883a 	mov	r7,r2
   43c30:	880d883a 	mov	r6,r17
   43c34:	8009883a 	mov	r4,r16
   43c38:	00442580 	call	44258 <__sfvwrite_small_dev>
   43c3c:	00ffffc4 	movi	r3,-1
   43c40:	10c00926 	beq	r2,r3,43c68 <_puts_r+0x6c>
   43c44:	81400217 	ldw	r5,8(r16)
   43c48:	01800134 	movhi	r6,4
   43c4c:	01c00044 	movi	r7,1
   43c50:	28800117 	ldw	r2,4(r5)
   43c54:	319c9204 	addi	r6,r6,29256
   43c58:	8009883a 	mov	r4,r16
   43c5c:	103ee83a 	callr	r2
   43c60:	10bfffe0 	cmpeqi	r2,r2,-1
   43c64:	0085c83a 	sub	r2,zero,r2
   43c68:	dfc00217 	ldw	ra,8(sp)
   43c6c:	dc400117 	ldw	r17,4(sp)
   43c70:	dc000017 	ldw	r16,0(sp)
   43c74:	dec00304 	addi	sp,sp,12
   43c78:	f800283a 	ret

00043c7c <puts>:
   43c7c:	00800134 	movhi	r2,4
   43c80:	109d7f04 	addi	r2,r2,30204
   43c84:	200b883a 	mov	r5,r4
   43c88:	11000017 	ldw	r4,0(r2)
   43c8c:	0043bfc1 	jmpi	43bfc <_puts_r>

00043c90 <strlen>:
   43c90:	2005883a 	mov	r2,r4
   43c94:	10c00007 	ldb	r3,0(r2)
   43c98:	18000226 	beq	r3,zero,43ca4 <strlen+0x14>
   43c9c:	10800044 	addi	r2,r2,1
   43ca0:	003ffc06 	br	43c94 <__alt_data_end+0xfffdbc94>
   43ca4:	1105c83a 	sub	r2,r2,r4
   43ca8:	f800283a 	ret

00043cac <print_repeat>:
   43cac:	defffb04 	addi	sp,sp,-20
   43cb0:	dc800315 	stw	r18,12(sp)
   43cb4:	dc400215 	stw	r17,8(sp)
   43cb8:	dc000115 	stw	r16,4(sp)
   43cbc:	dfc00415 	stw	ra,16(sp)
   43cc0:	2025883a 	mov	r18,r4
   43cc4:	2823883a 	mov	r17,r5
   43cc8:	d9800005 	stb	r6,0(sp)
   43ccc:	3821883a 	mov	r16,r7
   43cd0:	04000a0e 	bge	zero,r16,43cfc <print_repeat+0x50>
   43cd4:	88800117 	ldw	r2,4(r17)
   43cd8:	01c00044 	movi	r7,1
   43cdc:	d80d883a 	mov	r6,sp
   43ce0:	880b883a 	mov	r5,r17
   43ce4:	9009883a 	mov	r4,r18
   43ce8:	103ee83a 	callr	r2
   43cec:	843fffc4 	addi	r16,r16,-1
   43cf0:	103ff726 	beq	r2,zero,43cd0 <__alt_data_end+0xfffdbcd0>
   43cf4:	00bfffc4 	movi	r2,-1
   43cf8:	00000106 	br	43d00 <print_repeat+0x54>
   43cfc:	0005883a 	mov	r2,zero
   43d00:	dfc00417 	ldw	ra,16(sp)
   43d04:	dc800317 	ldw	r18,12(sp)
   43d08:	dc400217 	ldw	r17,8(sp)
   43d0c:	dc000117 	ldw	r16,4(sp)
   43d10:	dec00504 	addi	sp,sp,20
   43d14:	f800283a 	ret

00043d18 <___vfprintf_internal_r>:
   43d18:	deffe504 	addi	sp,sp,-108
   43d1c:	d8c00804 	addi	r3,sp,32
   43d20:	df001915 	stw	fp,100(sp)
   43d24:	ddc01815 	stw	r23,96(sp)
   43d28:	dd801715 	stw	r22,92(sp)
   43d2c:	dd401615 	stw	r21,88(sp)
   43d30:	dd001515 	stw	r20,84(sp)
   43d34:	dcc01415 	stw	r19,80(sp)
   43d38:	dc801315 	stw	r18,76(sp)
   43d3c:	dc401215 	stw	r17,72(sp)
   43d40:	dc001115 	stw	r16,68(sp)
   43d44:	dfc01a15 	stw	ra,104(sp)
   43d48:	2027883a 	mov	r19,r4
   43d4c:	2839883a 	mov	fp,r5
   43d50:	382d883a 	mov	r22,r7
   43d54:	d9800f15 	stw	r6,60(sp)
   43d58:	0021883a 	mov	r16,zero
   43d5c:	d8000e15 	stw	zero,56(sp)
   43d60:	002f883a 	mov	r23,zero
   43d64:	002b883a 	mov	r21,zero
   43d68:	0025883a 	mov	r18,zero
   43d6c:	0023883a 	mov	r17,zero
   43d70:	d8000c15 	stw	zero,48(sp)
   43d74:	d8000b15 	stw	zero,44(sp)
   43d78:	0029883a 	mov	r20,zero
   43d7c:	d8c00915 	stw	r3,36(sp)
   43d80:	d8c00f17 	ldw	r3,60(sp)
   43d84:	19000003 	ldbu	r4,0(r3)
   43d88:	20803fcc 	andi	r2,r4,255
   43d8c:	1080201c 	xori	r2,r2,128
   43d90:	10bfe004 	addi	r2,r2,-128
   43d94:	10011c26 	beq	r2,zero,44208 <___vfprintf_internal_r+0x4f0>
   43d98:	00c00044 	movi	r3,1
   43d9c:	a0c01426 	beq	r20,r3,43df0 <___vfprintf_internal_r+0xd8>
   43da0:	1d000216 	blt	r3,r20,43dac <___vfprintf_internal_r+0x94>
   43da4:	a0000626 	beq	r20,zero,43dc0 <___vfprintf_internal_r+0xa8>
   43da8:	00011306 	br	441f8 <___vfprintf_internal_r+0x4e0>
   43dac:	01400084 	movi	r5,2
   43db0:	a1401d26 	beq	r20,r5,43e28 <___vfprintf_internal_r+0x110>
   43db4:	014000c4 	movi	r5,3
   43db8:	a1402926 	beq	r20,r5,43e60 <___vfprintf_internal_r+0x148>
   43dbc:	00010e06 	br	441f8 <___vfprintf_internal_r+0x4e0>
   43dc0:	01400944 	movi	r5,37
   43dc4:	1140fb26 	beq	r2,r5,441b4 <___vfprintf_internal_r+0x49c>
   43dc8:	e0800117 	ldw	r2,4(fp)
   43dcc:	d9000005 	stb	r4,0(sp)
   43dd0:	01c00044 	movi	r7,1
   43dd4:	d80d883a 	mov	r6,sp
   43dd8:	e00b883a 	mov	r5,fp
   43ddc:	9809883a 	mov	r4,r19
   43de0:	103ee83a 	callr	r2
   43de4:	1000d61e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   43de8:	84000044 	addi	r16,r16,1
   43dec:	00010206 	br	441f8 <___vfprintf_internal_r+0x4e0>
   43df0:	01400c04 	movi	r5,48
   43df4:	1140f826 	beq	r2,r5,441d8 <___vfprintf_internal_r+0x4c0>
   43df8:	01400944 	movi	r5,37
   43dfc:	11400a1e 	bne	r2,r5,43e28 <___vfprintf_internal_r+0x110>
   43e00:	d8800005 	stb	r2,0(sp)
   43e04:	e0800117 	ldw	r2,4(fp)
   43e08:	a00f883a 	mov	r7,r20
   43e0c:	d80d883a 	mov	r6,sp
   43e10:	e00b883a 	mov	r5,fp
   43e14:	9809883a 	mov	r4,r19
   43e18:	103ee83a 	callr	r2
   43e1c:	1000c81e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   43e20:	84000044 	addi	r16,r16,1
   43e24:	0000f306 	br	441f4 <___vfprintf_internal_r+0x4dc>
   43e28:	217ff404 	addi	r5,r4,-48
   43e2c:	29403fcc 	andi	r5,r5,255
   43e30:	00c00244 	movi	r3,9
   43e34:	19400736 	bltu	r3,r5,43e54 <___vfprintf_internal_r+0x13c>
   43e38:	00bfffc4 	movi	r2,-1
   43e3c:	88800226 	beq	r17,r2,43e48 <___vfprintf_internal_r+0x130>
   43e40:	8c4002a4 	muli	r17,r17,10
   43e44:	00000106 	br	43e4c <___vfprintf_internal_r+0x134>
   43e48:	0023883a 	mov	r17,zero
   43e4c:	2c63883a 	add	r17,r5,r17
   43e50:	0000e206 	br	441dc <___vfprintf_internal_r+0x4c4>
   43e54:	01400b84 	movi	r5,46
   43e58:	1140e426 	beq	r2,r5,441ec <___vfprintf_internal_r+0x4d4>
   43e5c:	05000084 	movi	r20,2
   43e60:	213ff404 	addi	r4,r4,-48
   43e64:	21003fcc 	andi	r4,r4,255
   43e68:	00c00244 	movi	r3,9
   43e6c:	19000736 	bltu	r3,r4,43e8c <___vfprintf_internal_r+0x174>
   43e70:	00bfffc4 	movi	r2,-1
   43e74:	90800226 	beq	r18,r2,43e80 <___vfprintf_internal_r+0x168>
   43e78:	948002a4 	muli	r18,r18,10
   43e7c:	00000106 	br	43e84 <___vfprintf_internal_r+0x16c>
   43e80:	0025883a 	mov	r18,zero
   43e84:	24a5883a 	add	r18,r4,r18
   43e88:	0000db06 	br	441f8 <___vfprintf_internal_r+0x4e0>
   43e8c:	00c01b04 	movi	r3,108
   43e90:	10c0d426 	beq	r2,r3,441e4 <___vfprintf_internal_r+0x4cc>
   43e94:	013fffc4 	movi	r4,-1
   43e98:	91000226 	beq	r18,r4,43ea4 <___vfprintf_internal_r+0x18c>
   43e9c:	d8000b15 	stw	zero,44(sp)
   43ea0:	00000106 	br	43ea8 <___vfprintf_internal_r+0x190>
   43ea4:	04800044 	movi	r18,1
   43ea8:	01001a44 	movi	r4,105
   43eac:	11001626 	beq	r2,r4,43f08 <___vfprintf_internal_r+0x1f0>
   43eb0:	20800916 	blt	r4,r2,43ed8 <___vfprintf_internal_r+0x1c0>
   43eb4:	010018c4 	movi	r4,99
   43eb8:	11008a26 	beq	r2,r4,440e4 <___vfprintf_internal_r+0x3cc>
   43ebc:	01001904 	movi	r4,100
   43ec0:	11001126 	beq	r2,r4,43f08 <___vfprintf_internal_r+0x1f0>
   43ec4:	01001604 	movi	r4,88
   43ec8:	1100ca1e 	bne	r2,r4,441f4 <___vfprintf_internal_r+0x4dc>
   43ecc:	00c00044 	movi	r3,1
   43ed0:	d8c00e15 	stw	r3,56(sp)
   43ed4:	00001406 	br	43f28 <___vfprintf_internal_r+0x210>
   43ed8:	01001cc4 	movi	r4,115
   43edc:	11009a26 	beq	r2,r4,44148 <___vfprintf_internal_r+0x430>
   43ee0:	20800416 	blt	r4,r2,43ef4 <___vfprintf_internal_r+0x1dc>
   43ee4:	01001bc4 	movi	r4,111
   43ee8:	1100c21e 	bne	r2,r4,441f4 <___vfprintf_internal_r+0x4dc>
   43eec:	05400204 	movi	r21,8
   43ef0:	00000e06 	br	43f2c <___vfprintf_internal_r+0x214>
   43ef4:	01001d44 	movi	r4,117
   43ef8:	11000c26 	beq	r2,r4,43f2c <___vfprintf_internal_r+0x214>
   43efc:	01001e04 	movi	r4,120
   43f00:	11000926 	beq	r2,r4,43f28 <___vfprintf_internal_r+0x210>
   43f04:	0000bb06 	br	441f4 <___vfprintf_internal_r+0x4dc>
   43f08:	b5000104 	addi	r20,r22,4
   43f0c:	b8000726 	beq	r23,zero,43f2c <___vfprintf_internal_r+0x214>
   43f10:	dd000d15 	stw	r20,52(sp)
   43f14:	b5800017 	ldw	r22,0(r22)
   43f18:	b000080e 	bge	r22,zero,43f3c <___vfprintf_internal_r+0x224>
   43f1c:	05adc83a 	sub	r22,zero,r22
   43f20:	02800044 	movi	r10,1
   43f24:	00000606 	br	43f40 <___vfprintf_internal_r+0x228>
   43f28:	05400404 	movi	r21,16
   43f2c:	b0c00104 	addi	r3,r22,4
   43f30:	d8c00d15 	stw	r3,52(sp)
   43f34:	b5800017 	ldw	r22,0(r22)
   43f38:	002f883a 	mov	r23,zero
   43f3c:	0015883a 	mov	r10,zero
   43f40:	d829883a 	mov	r20,sp
   43f44:	b0001426 	beq	r22,zero,43f98 <___vfprintf_internal_r+0x280>
   43f48:	b009883a 	mov	r4,r22
   43f4c:	a80b883a 	mov	r5,r21
   43f50:	da801015 	stw	r10,64(sp)
   43f54:	0042f580 	call	42f58 <__udivsi3>
   43f58:	1549383a 	mul	r4,r2,r21
   43f5c:	00c00244 	movi	r3,9
   43f60:	da801017 	ldw	r10,64(sp)
   43f64:	b12dc83a 	sub	r22,r22,r4
   43f68:	1d800216 	blt	r3,r22,43f74 <___vfprintf_internal_r+0x25c>
   43f6c:	b5800c04 	addi	r22,r22,48
   43f70:	00000506 	br	43f88 <___vfprintf_internal_r+0x270>
   43f74:	d8c00e17 	ldw	r3,56(sp)
   43f78:	18000226 	beq	r3,zero,43f84 <___vfprintf_internal_r+0x26c>
   43f7c:	b5800dc4 	addi	r22,r22,55
   43f80:	00000106 	br	43f88 <___vfprintf_internal_r+0x270>
   43f84:	b58015c4 	addi	r22,r22,87
   43f88:	a5800005 	stb	r22,0(r20)
   43f8c:	a5000044 	addi	r20,r20,1
   43f90:	102d883a 	mov	r22,r2
   43f94:	003feb06 	br	43f44 <__alt_data_end+0xfffdbf44>
   43f98:	a6c7c83a 	sub	r3,r20,sp
   43f9c:	d8c00a15 	stw	r3,40(sp)
   43fa0:	90c5c83a 	sub	r2,r18,r3
   43fa4:	00800a0e 	bge	zero,r2,43fd0 <___vfprintf_internal_r+0x2b8>
   43fa8:	a085883a 	add	r2,r20,r2
   43fac:	01400c04 	movi	r5,48
   43fb0:	d8c00917 	ldw	r3,36(sp)
   43fb4:	a009883a 	mov	r4,r20
   43fb8:	a0c0032e 	bgeu	r20,r3,43fc8 <___vfprintf_internal_r+0x2b0>
   43fbc:	a5000044 	addi	r20,r20,1
   43fc0:	21400005 	stb	r5,0(r4)
   43fc4:	a0bffa1e 	bne	r20,r2,43fb0 <__alt_data_end+0xfffdbfb0>
   43fc8:	a6c7c83a 	sub	r3,r20,sp
   43fcc:	d8c00a15 	stw	r3,40(sp)
   43fd0:	d8c00a17 	ldw	r3,40(sp)
   43fd4:	50d3883a 	add	r9,r10,r3
   43fd8:	d8c00b17 	ldw	r3,44(sp)
   43fdc:	8a6dc83a 	sub	r22,r17,r9
   43fe0:	18001726 	beq	r3,zero,44040 <___vfprintf_internal_r+0x328>
   43fe4:	50000a26 	beq	r10,zero,44010 <___vfprintf_internal_r+0x2f8>
   43fe8:	00800b44 	movi	r2,45
   43fec:	d8800805 	stb	r2,32(sp)
   43ff0:	e0800117 	ldw	r2,4(fp)
   43ff4:	01c00044 	movi	r7,1
   43ff8:	d9800804 	addi	r6,sp,32
   43ffc:	e00b883a 	mov	r5,fp
   44000:	9809883a 	mov	r4,r19
   44004:	103ee83a 	callr	r2
   44008:	10004d1e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   4400c:	84000044 	addi	r16,r16,1
   44010:	0580070e 	bge	zero,r22,44030 <___vfprintf_internal_r+0x318>
   44014:	b00f883a 	mov	r7,r22
   44018:	01800c04 	movi	r6,48
   4401c:	e00b883a 	mov	r5,fp
   44020:	9809883a 	mov	r4,r19
   44024:	0043cac0 	call	43cac <print_repeat>
   44028:	1000451e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   4402c:	85a1883a 	add	r16,r16,r22
   44030:	d8c00a17 	ldw	r3,40(sp)
   44034:	a013883a 	mov	r9,r20
   44038:	1d2dc83a 	sub	r22,r3,r20
   4403c:	00002206 	br	440c8 <___vfprintf_internal_r+0x3b0>
   44040:	0580090e 	bge	zero,r22,44068 <___vfprintf_internal_r+0x350>
   44044:	b00f883a 	mov	r7,r22
   44048:	01800804 	movi	r6,32
   4404c:	e00b883a 	mov	r5,fp
   44050:	9809883a 	mov	r4,r19
   44054:	da801015 	stw	r10,64(sp)
   44058:	0043cac0 	call	43cac <print_repeat>
   4405c:	da801017 	ldw	r10,64(sp)
   44060:	1000371e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   44064:	85a1883a 	add	r16,r16,r22
   44068:	503ff126 	beq	r10,zero,44030 <__alt_data_end+0xfffdc030>
   4406c:	00800b44 	movi	r2,45
   44070:	d8800805 	stb	r2,32(sp)
   44074:	e0800117 	ldw	r2,4(fp)
   44078:	01c00044 	movi	r7,1
   4407c:	d9800804 	addi	r6,sp,32
   44080:	e00b883a 	mov	r5,fp
   44084:	9809883a 	mov	r4,r19
   44088:	103ee83a 	callr	r2
   4408c:	10002c1e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   44090:	84000044 	addi	r16,r16,1
   44094:	003fe606 	br	44030 <__alt_data_end+0xfffdc030>
   44098:	4a7fffc4 	addi	r9,r9,-1
   4409c:	48800003 	ldbu	r2,0(r9)
   440a0:	01c00044 	movi	r7,1
   440a4:	d9800804 	addi	r6,sp,32
   440a8:	d8800805 	stb	r2,32(sp)
   440ac:	e0800117 	ldw	r2,4(fp)
   440b0:	e00b883a 	mov	r5,fp
   440b4:	da401015 	stw	r9,64(sp)
   440b8:	9809883a 	mov	r4,r19
   440bc:	103ee83a 	callr	r2
   440c0:	da401017 	ldw	r9,64(sp)
   440c4:	10001e1e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   440c8:	8245c83a 	sub	r2,r16,r9
   440cc:	4d89883a 	add	r4,r9,r22
   440d0:	a085883a 	add	r2,r20,r2
   440d4:	013ff016 	blt	zero,r4,44098 <__alt_data_end+0xfffdc098>
   440d8:	1021883a 	mov	r16,r2
   440dc:	dd800d17 	ldw	r22,52(sp)
   440e0:	00004406 	br	441f4 <___vfprintf_internal_r+0x4dc>
   440e4:	00800044 	movi	r2,1
   440e8:	1440080e 	bge	r2,r17,4410c <___vfprintf_internal_r+0x3f4>
   440ec:	8d3fffc4 	addi	r20,r17,-1
   440f0:	a00f883a 	mov	r7,r20
   440f4:	01800804 	movi	r6,32
   440f8:	e00b883a 	mov	r5,fp
   440fc:	9809883a 	mov	r4,r19
   44100:	0043cac0 	call	43cac <print_repeat>
   44104:	10000e1e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   44108:	8521883a 	add	r16,r16,r20
   4410c:	b0800017 	ldw	r2,0(r22)
   44110:	01c00044 	movi	r7,1
   44114:	d80d883a 	mov	r6,sp
   44118:	d8800005 	stb	r2,0(sp)
   4411c:	e0800117 	ldw	r2,4(fp)
   44120:	e00b883a 	mov	r5,fp
   44124:	9809883a 	mov	r4,r19
   44128:	b5000104 	addi	r20,r22,4
   4412c:	103ee83a 	callr	r2
   44130:	1000031e 	bne	r2,zero,44140 <___vfprintf_internal_r+0x428>
   44134:	84000044 	addi	r16,r16,1
   44138:	a02d883a 	mov	r22,r20
   4413c:	00002d06 	br	441f4 <___vfprintf_internal_r+0x4dc>
   44140:	00bfffc4 	movi	r2,-1
   44144:	00003106 	br	4420c <___vfprintf_internal_r+0x4f4>
   44148:	b5000017 	ldw	r20,0(r22)
   4414c:	b0c00104 	addi	r3,r22,4
   44150:	d8c00a15 	stw	r3,40(sp)
   44154:	a009883a 	mov	r4,r20
   44158:	0043c900 	call	43c90 <strlen>
   4415c:	8893c83a 	sub	r9,r17,r2
   44160:	102d883a 	mov	r22,r2
   44164:	0240090e 	bge	zero,r9,4418c <___vfprintf_internal_r+0x474>
   44168:	480f883a 	mov	r7,r9
   4416c:	01800804 	movi	r6,32
   44170:	e00b883a 	mov	r5,fp
   44174:	9809883a 	mov	r4,r19
   44178:	da401015 	stw	r9,64(sp)
   4417c:	0043cac0 	call	43cac <print_repeat>
   44180:	da401017 	ldw	r9,64(sp)
   44184:	103fee1e 	bne	r2,zero,44140 <__alt_data_end+0xfffdc140>
   44188:	8261883a 	add	r16,r16,r9
   4418c:	e0800117 	ldw	r2,4(fp)
   44190:	b00f883a 	mov	r7,r22
   44194:	a00d883a 	mov	r6,r20
   44198:	e00b883a 	mov	r5,fp
   4419c:	9809883a 	mov	r4,r19
   441a0:	103ee83a 	callr	r2
   441a4:	103fe61e 	bne	r2,zero,44140 <__alt_data_end+0xfffdc140>
   441a8:	85a1883a 	add	r16,r16,r22
   441ac:	dd800a17 	ldw	r22,40(sp)
   441b0:	00001006 	br	441f4 <___vfprintf_internal_r+0x4dc>
   441b4:	05c00044 	movi	r23,1
   441b8:	04bfffc4 	movi	r18,-1
   441bc:	d8000e15 	stw	zero,56(sp)
   441c0:	05400284 	movi	r21,10
   441c4:	9023883a 	mov	r17,r18
   441c8:	d8000c15 	stw	zero,48(sp)
   441cc:	d8000b15 	stw	zero,44(sp)
   441d0:	b829883a 	mov	r20,r23
   441d4:	00000806 	br	441f8 <___vfprintf_internal_r+0x4e0>
   441d8:	dd000b15 	stw	r20,44(sp)
   441dc:	05000084 	movi	r20,2
   441e0:	00000506 	br	441f8 <___vfprintf_internal_r+0x4e0>
   441e4:	00c00044 	movi	r3,1
   441e8:	d8c00c15 	stw	r3,48(sp)
   441ec:	050000c4 	movi	r20,3
   441f0:	00000106 	br	441f8 <___vfprintf_internal_r+0x4e0>
   441f4:	0029883a 	mov	r20,zero
   441f8:	d8c00f17 	ldw	r3,60(sp)
   441fc:	18c00044 	addi	r3,r3,1
   44200:	d8c00f15 	stw	r3,60(sp)
   44204:	003ede06 	br	43d80 <__alt_data_end+0xfffdbd80>
   44208:	8005883a 	mov	r2,r16
   4420c:	dfc01a17 	ldw	ra,104(sp)
   44210:	df001917 	ldw	fp,100(sp)
   44214:	ddc01817 	ldw	r23,96(sp)
   44218:	dd801717 	ldw	r22,92(sp)
   4421c:	dd401617 	ldw	r21,88(sp)
   44220:	dd001517 	ldw	r20,84(sp)
   44224:	dcc01417 	ldw	r19,80(sp)
   44228:	dc801317 	ldw	r18,76(sp)
   4422c:	dc401217 	ldw	r17,72(sp)
   44230:	dc001117 	ldw	r16,68(sp)
   44234:	dec01b04 	addi	sp,sp,108
   44238:	f800283a 	ret

0004423c <__vfprintf_internal>:
   4423c:	00800134 	movhi	r2,4
   44240:	109d7f04 	addi	r2,r2,30204
   44244:	300f883a 	mov	r7,r6
   44248:	280d883a 	mov	r6,r5
   4424c:	200b883a 	mov	r5,r4
   44250:	11000017 	ldw	r4,0(r2)
   44254:	0043d181 	jmpi	43d18 <___vfprintf_internal_r>

00044258 <__sfvwrite_small_dev>:
   44258:	2880000b 	ldhu	r2,0(r5)
   4425c:	1080020c 	andi	r2,r2,8
   44260:	10002126 	beq	r2,zero,442e8 <__sfvwrite_small_dev+0x90>
   44264:	2880008f 	ldh	r2,2(r5)
   44268:	defffa04 	addi	sp,sp,-24
   4426c:	dc000015 	stw	r16,0(sp)
   44270:	dfc00515 	stw	ra,20(sp)
   44274:	dd000415 	stw	r20,16(sp)
   44278:	dcc00315 	stw	r19,12(sp)
   4427c:	dc800215 	stw	r18,8(sp)
   44280:	dc400115 	stw	r17,4(sp)
   44284:	2821883a 	mov	r16,r5
   44288:	10001216 	blt	r2,zero,442d4 <__sfvwrite_small_dev+0x7c>
   4428c:	2027883a 	mov	r19,r4
   44290:	3025883a 	mov	r18,r6
   44294:	3823883a 	mov	r17,r7
   44298:	05010004 	movi	r20,1024
   4429c:	04400b0e 	bge	zero,r17,442cc <__sfvwrite_small_dev+0x74>
   442a0:	880f883a 	mov	r7,r17
   442a4:	a440010e 	bge	r20,r17,442ac <__sfvwrite_small_dev+0x54>
   442a8:	01c10004 	movi	r7,1024
   442ac:	8140008f 	ldh	r5,2(r16)
   442b0:	900d883a 	mov	r6,r18
   442b4:	9809883a 	mov	r4,r19
   442b8:	00443100 	call	44310 <_write_r>
   442bc:	0080050e 	bge	zero,r2,442d4 <__sfvwrite_small_dev+0x7c>
   442c0:	88a3c83a 	sub	r17,r17,r2
   442c4:	90a5883a 	add	r18,r18,r2
   442c8:	003ff406 	br	4429c <__alt_data_end+0xfffdc29c>
   442cc:	0005883a 	mov	r2,zero
   442d0:	00000706 	br	442f0 <__sfvwrite_small_dev+0x98>
   442d4:	8080000b 	ldhu	r2,0(r16)
   442d8:	10801014 	ori	r2,r2,64
   442dc:	8080000d 	sth	r2,0(r16)
   442e0:	00bfffc4 	movi	r2,-1
   442e4:	00000206 	br	442f0 <__sfvwrite_small_dev+0x98>
   442e8:	00bfffc4 	movi	r2,-1
   442ec:	f800283a 	ret
   442f0:	dfc00517 	ldw	ra,20(sp)
   442f4:	dd000417 	ldw	r20,16(sp)
   442f8:	dcc00317 	ldw	r19,12(sp)
   442fc:	dc800217 	ldw	r18,8(sp)
   44300:	dc400117 	ldw	r17,4(sp)
   44304:	dc000017 	ldw	r16,0(sp)
   44308:	dec00604 	addi	sp,sp,24
   4430c:	f800283a 	ret

00044310 <_write_r>:
   44310:	defffd04 	addi	sp,sp,-12
   44314:	dc000015 	stw	r16,0(sp)
   44318:	04000134 	movhi	r16,4
   4431c:	dc400115 	stw	r17,4(sp)
   44320:	841e7604 	addi	r16,r16,31192
   44324:	2023883a 	mov	r17,r4
   44328:	2809883a 	mov	r4,r5
   4432c:	300b883a 	mov	r5,r6
   44330:	380d883a 	mov	r6,r7
   44334:	dfc00215 	stw	ra,8(sp)
   44338:	80000015 	stw	zero,0(r16)
   4433c:	004479c0 	call	4479c <write>
   44340:	00ffffc4 	movi	r3,-1
   44344:	10c0031e 	bne	r2,r3,44354 <_write_r+0x44>
   44348:	80c00017 	ldw	r3,0(r16)
   4434c:	18000126 	beq	r3,zero,44354 <_write_r+0x44>
   44350:	88c00015 	stw	r3,0(r17)
   44354:	dfc00217 	ldw	ra,8(sp)
   44358:	dc400117 	ldw	r17,4(sp)
   4435c:	dc000017 	ldw	r16,0(sp)
   44360:	dec00304 	addi	sp,sp,12
   44364:	f800283a 	ret

00044368 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44368:	defff904 	addi	sp,sp,-28
   4436c:	dfc00615 	stw	ra,24(sp)
   44370:	df000515 	stw	fp,20(sp)
   44374:	df000504 	addi	fp,sp,20
   44378:	e13ffc15 	stw	r4,-16(fp)
   4437c:	e17ffd15 	stw	r5,-12(fp)
   44380:	e1bffe15 	stw	r6,-8(fp)
   44384:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   44388:	e0800217 	ldw	r2,8(fp)
   4438c:	d8800015 	stw	r2,0(sp)
   44390:	e1ffff17 	ldw	r7,-4(fp)
   44394:	e1bffe17 	ldw	r6,-8(fp)
   44398:	e17ffd17 	ldw	r5,-12(fp)
   4439c:	e13ffc17 	ldw	r4,-16(fp)
   443a0:	00445180 	call	44518 <alt_iic_isr_register>
}  
   443a4:	e037883a 	mov	sp,fp
   443a8:	dfc00117 	ldw	ra,4(sp)
   443ac:	df000017 	ldw	fp,0(sp)
   443b0:	dec00204 	addi	sp,sp,8
   443b4:	f800283a 	ret

000443b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   443b8:	defff904 	addi	sp,sp,-28
   443bc:	df000615 	stw	fp,24(sp)
   443c0:	df000604 	addi	fp,sp,24
   443c4:	e13ffe15 	stw	r4,-8(fp)
   443c8:	e17fff15 	stw	r5,-4(fp)
   443cc:	e0bfff17 	ldw	r2,-4(fp)
   443d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   443d4:	0005303a 	rdctl	r2,status
   443d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   443dc:	e0fffb17 	ldw	r3,-20(fp)
   443e0:	00bfff84 	movi	r2,-2
   443e4:	1884703a 	and	r2,r3,r2
   443e8:	1001703a 	wrctl	status,r2
  
  return context;
   443ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   443f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   443f4:	00c00044 	movi	r3,1
   443f8:	e0bffa17 	ldw	r2,-24(fp)
   443fc:	1884983a 	sll	r2,r3,r2
   44400:	1007883a 	mov	r3,r2
   44404:	d0a10017 	ldw	r2,-31744(gp)
   44408:	1884b03a 	or	r2,r3,r2
   4440c:	d0a10015 	stw	r2,-31744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   44410:	d0a10017 	ldw	r2,-31744(gp)
   44414:	100170fa 	wrctl	ienable,r2
   44418:	e0bffc17 	ldw	r2,-16(fp)
   4441c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44420:	e0bffd17 	ldw	r2,-12(fp)
   44424:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44428:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   4442c:	0001883a 	nop
}
   44430:	e037883a 	mov	sp,fp
   44434:	df000017 	ldw	fp,0(sp)
   44438:	dec00104 	addi	sp,sp,4
   4443c:	f800283a 	ret

00044440 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   44440:	defff904 	addi	sp,sp,-28
   44444:	df000615 	stw	fp,24(sp)
   44448:	df000604 	addi	fp,sp,24
   4444c:	e13ffe15 	stw	r4,-8(fp)
   44450:	e17fff15 	stw	r5,-4(fp)
   44454:	e0bfff17 	ldw	r2,-4(fp)
   44458:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4445c:	0005303a 	rdctl	r2,status
   44460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44464:	e0fffb17 	ldw	r3,-20(fp)
   44468:	00bfff84 	movi	r2,-2
   4446c:	1884703a 	and	r2,r3,r2
   44470:	1001703a 	wrctl	status,r2
  
  return context;
   44474:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   44478:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4447c:	00c00044 	movi	r3,1
   44480:	e0bffa17 	ldw	r2,-24(fp)
   44484:	1884983a 	sll	r2,r3,r2
   44488:	0084303a 	nor	r2,zero,r2
   4448c:	1007883a 	mov	r3,r2
   44490:	d0a10017 	ldw	r2,-31744(gp)
   44494:	1884703a 	and	r2,r3,r2
   44498:	d0a10015 	stw	r2,-31744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4449c:	d0a10017 	ldw	r2,-31744(gp)
   444a0:	100170fa 	wrctl	ienable,r2
   444a4:	e0bffc17 	ldw	r2,-16(fp)
   444a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   444ac:	e0bffd17 	ldw	r2,-12(fp)
   444b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   444b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   444b8:	0001883a 	nop
}
   444bc:	e037883a 	mov	sp,fp
   444c0:	df000017 	ldw	fp,0(sp)
   444c4:	dec00104 	addi	sp,sp,4
   444c8:	f800283a 	ret

000444cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   444cc:	defffc04 	addi	sp,sp,-16
   444d0:	df000315 	stw	fp,12(sp)
   444d4:	df000304 	addi	fp,sp,12
   444d8:	e13ffe15 	stw	r4,-8(fp)
   444dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   444e0:	000530fa 	rdctl	r2,ienable
   444e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   444e8:	00c00044 	movi	r3,1
   444ec:	e0bfff17 	ldw	r2,-4(fp)
   444f0:	1884983a 	sll	r2,r3,r2
   444f4:	1007883a 	mov	r3,r2
   444f8:	e0bffd17 	ldw	r2,-12(fp)
   444fc:	1884703a 	and	r2,r3,r2
   44500:	1004c03a 	cmpne	r2,r2,zero
   44504:	10803fcc 	andi	r2,r2,255
}
   44508:	e037883a 	mov	sp,fp
   4450c:	df000017 	ldw	fp,0(sp)
   44510:	dec00104 	addi	sp,sp,4
   44514:	f800283a 	ret

00044518 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44518:	defff504 	addi	sp,sp,-44
   4451c:	dfc00a15 	stw	ra,40(sp)
   44520:	df000915 	stw	fp,36(sp)
   44524:	df000904 	addi	fp,sp,36
   44528:	e13ffc15 	stw	r4,-16(fp)
   4452c:	e17ffd15 	stw	r5,-12(fp)
   44530:	e1bffe15 	stw	r6,-8(fp)
   44534:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44538:	00bffa84 	movi	r2,-22
   4453c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   44540:	e0bffd17 	ldw	r2,-12(fp)
   44544:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44548:	e0bff817 	ldw	r2,-32(fp)
   4454c:	10800808 	cmpgei	r2,r2,32
   44550:	1000271e 	bne	r2,zero,445f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44554:	0005303a 	rdctl	r2,status
   44558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4455c:	e0fffb17 	ldw	r3,-20(fp)
   44560:	00bfff84 	movi	r2,-2
   44564:	1884703a 	and	r2,r3,r2
   44568:	1001703a 	wrctl	status,r2
  
  return context;
   4456c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   44570:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   44574:	00800134 	movhi	r2,4
   44578:	109e7c04 	addi	r2,r2,31216
   4457c:	e0fff817 	ldw	r3,-32(fp)
   44580:	180690fa 	slli	r3,r3,3
   44584:	10c5883a 	add	r2,r2,r3
   44588:	e0fffe17 	ldw	r3,-8(fp)
   4458c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   44590:	00800134 	movhi	r2,4
   44594:	109e7c04 	addi	r2,r2,31216
   44598:	e0fff817 	ldw	r3,-32(fp)
   4459c:	180690fa 	slli	r3,r3,3
   445a0:	10c5883a 	add	r2,r2,r3
   445a4:	10800104 	addi	r2,r2,4
   445a8:	e0ffff17 	ldw	r3,-4(fp)
   445ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   445b0:	e0bffe17 	ldw	r2,-8(fp)
   445b4:	10000526 	beq	r2,zero,445cc <alt_iic_isr_register+0xb4>
   445b8:	e0bff817 	ldw	r2,-32(fp)
   445bc:	100b883a 	mov	r5,r2
   445c0:	e13ffc17 	ldw	r4,-16(fp)
   445c4:	00443b80 	call	443b8 <alt_ic_irq_enable>
   445c8:	00000406 	br	445dc <alt_iic_isr_register+0xc4>
   445cc:	e0bff817 	ldw	r2,-32(fp)
   445d0:	100b883a 	mov	r5,r2
   445d4:	e13ffc17 	ldw	r4,-16(fp)
   445d8:	00444400 	call	44440 <alt_ic_irq_disable>
   445dc:	e0bff715 	stw	r2,-36(fp)
   445e0:	e0bffa17 	ldw	r2,-24(fp)
   445e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   445e8:	e0bff917 	ldw	r2,-28(fp)
   445ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   445f0:	e0bff717 	ldw	r2,-36(fp)
}
   445f4:	e037883a 	mov	sp,fp
   445f8:	dfc00117 	ldw	ra,4(sp)
   445fc:	df000017 	ldw	fp,0(sp)
   44600:	dec00204 	addi	sp,sp,8
   44604:	f800283a 	ret

00044608 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   44608:	defffc04 	addi	sp,sp,-16
   4460c:	df000315 	stw	fp,12(sp)
   44610:	df000304 	addi	fp,sp,12
   44614:	e13ffd15 	stw	r4,-12(fp)
   44618:	e17ffe15 	stw	r5,-8(fp)
   4461c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   44620:	e0fffe17 	ldw	r3,-8(fp)
   44624:	e0bffd17 	ldw	r2,-12(fp)
   44628:	18800c26 	beq	r3,r2,4465c <alt_load_section+0x54>
  {
    while( to != end )
   4462c:	00000806 	br	44650 <alt_load_section+0x48>
    {
      *to++ = *from++;
   44630:	e0bffe17 	ldw	r2,-8(fp)
   44634:	10c00104 	addi	r3,r2,4
   44638:	e0fffe15 	stw	r3,-8(fp)
   4463c:	e0fffd17 	ldw	r3,-12(fp)
   44640:	19000104 	addi	r4,r3,4
   44644:	e13ffd15 	stw	r4,-12(fp)
   44648:	18c00017 	ldw	r3,0(r3)
   4464c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   44650:	e0fffe17 	ldw	r3,-8(fp)
   44654:	e0bfff17 	ldw	r2,-4(fp)
   44658:	18bff51e 	bne	r3,r2,44630 <__alt_data_end+0xfffdc630>
    {
      *to++ = *from++;
    }
  }
}
   4465c:	0001883a 	nop
   44660:	e037883a 	mov	sp,fp
   44664:	df000017 	ldw	fp,0(sp)
   44668:	dec00104 	addi	sp,sp,4
   4466c:	f800283a 	ret

00044670 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   44670:	defffe04 	addi	sp,sp,-8
   44674:	dfc00115 	stw	ra,4(sp)
   44678:	df000015 	stw	fp,0(sp)
   4467c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   44680:	01800134 	movhi	r6,4
   44684:	319d8704 	addi	r6,r6,30236
   44688:	01400134 	movhi	r5,4
   4468c:	295ca004 	addi	r5,r5,29312
   44690:	01000134 	movhi	r4,4
   44694:	211d8704 	addi	r4,r4,30236
   44698:	00446080 	call	44608 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4469c:	01800134 	movhi	r6,4
   446a0:	31809104 	addi	r6,r6,580
   446a4:	01400134 	movhi	r5,4
   446a8:	29400804 	addi	r5,r5,32
   446ac:	01000134 	movhi	r4,4
   446b0:	21000804 	addi	r4,r4,32
   446b4:	00446080 	call	44608 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   446b8:	01800134 	movhi	r6,4
   446bc:	319ca004 	addi	r6,r6,29312
   446c0:	01400134 	movhi	r5,4
   446c4:	2955df04 	addi	r5,r5,22396
   446c8:	01000134 	movhi	r4,4
   446cc:	2115df04 	addi	r4,r4,22396
   446d0:	00446080 	call	44608 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   446d4:	0044c840 	call	44c84 <alt_dcache_flush_all>
  alt_icache_flush_all();
   446d8:	0044db00 	call	44db0 <alt_icache_flush_all>
}
   446dc:	0001883a 	nop
   446e0:	e037883a 	mov	sp,fp
   446e4:	dfc00117 	ldw	ra,4(sp)
   446e8:	df000017 	ldw	fp,0(sp)
   446ec:	dec00204 	addi	sp,sp,8
   446f0:	f800283a 	ret

000446f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   446f4:	defffd04 	addi	sp,sp,-12
   446f8:	dfc00215 	stw	ra,8(sp)
   446fc:	df000115 	stw	fp,4(sp)
   44700:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   44704:	0009883a 	mov	r4,zero
   44708:	00448c80 	call	448c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4470c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   44710:	00449000 	call	44900 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   44714:	01800134 	movhi	r6,4
   44718:	319c9304 	addi	r6,r6,29260
   4471c:	01400134 	movhi	r5,4
   44720:	295c9304 	addi	r5,r5,29260
   44724:	01000134 	movhi	r4,4
   44728:	211c9304 	addi	r4,r4,29260
   4472c:	0044f440 	call	44f44 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   44730:	d0a10117 	ldw	r2,-31740(gp)
   44734:	d0e10217 	ldw	r3,-31736(gp)
   44738:	d1210317 	ldw	r4,-31732(gp)
   4473c:	200d883a 	mov	r6,r4
   44740:	180b883a 	mov	r5,r3
   44744:	1009883a 	mov	r4,r2
   44748:	00409b40 	call	409b4 <main>
   4474c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   44750:	01000044 	movi	r4,1
   44754:	0044bb40 	call	44bb4 <close>
  exit (result);
   44758:	e13fff17 	ldw	r4,-4(fp)
   4475c:	00455680 	call	45568 <exit>

00044760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44760:	defffe04 	addi	sp,sp,-8
   44764:	dfc00115 	stw	ra,4(sp)
   44768:	df000015 	stw	fp,0(sp)
   4476c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44770:	d0a00f17 	ldw	r2,-32708(gp)
   44774:	10000326 	beq	r2,zero,44784 <alt_get_errno+0x24>
   44778:	d0a00f17 	ldw	r2,-32708(gp)
   4477c:	103ee83a 	callr	r2
   44780:	00000106 	br	44788 <alt_get_errno+0x28>
   44784:	d0a0ff04 	addi	r2,gp,-31748
}
   44788:	e037883a 	mov	sp,fp
   4478c:	dfc00117 	ldw	ra,4(sp)
   44790:	df000017 	ldw	fp,0(sp)
   44794:	dec00204 	addi	sp,sp,8
   44798:	f800283a 	ret

0004479c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4479c:	defff904 	addi	sp,sp,-28
   447a0:	dfc00615 	stw	ra,24(sp)
   447a4:	df000515 	stw	fp,20(sp)
   447a8:	df000504 	addi	fp,sp,20
   447ac:	e13ffd15 	stw	r4,-12(fp)
   447b0:	e17ffe15 	stw	r5,-8(fp)
   447b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   447b8:	e0bffd17 	ldw	r2,-12(fp)
   447bc:	10000616 	blt	r2,zero,447d8 <write+0x3c>
   447c0:	e0bffd17 	ldw	r2,-12(fp)
   447c4:	10c00324 	muli	r3,r2,12
   447c8:	00800134 	movhi	r2,4
   447cc:	109d1704 	addi	r2,r2,29788
   447d0:	1885883a 	add	r2,r3,r2
   447d4:	00000106 	br	447dc <write+0x40>
   447d8:	0005883a 	mov	r2,zero
   447dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   447e0:	e0bffb17 	ldw	r2,-20(fp)
   447e4:	10002126 	beq	r2,zero,4486c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   447e8:	e0bffb17 	ldw	r2,-20(fp)
   447ec:	10800217 	ldw	r2,8(r2)
   447f0:	108000cc 	andi	r2,r2,3
   447f4:	10001826 	beq	r2,zero,44858 <write+0xbc>
   447f8:	e0bffb17 	ldw	r2,-20(fp)
   447fc:	10800017 	ldw	r2,0(r2)
   44800:	10800617 	ldw	r2,24(r2)
   44804:	10001426 	beq	r2,zero,44858 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   44808:	e0bffb17 	ldw	r2,-20(fp)
   4480c:	10800017 	ldw	r2,0(r2)
   44810:	10800617 	ldw	r2,24(r2)
   44814:	e0ffff17 	ldw	r3,-4(fp)
   44818:	180d883a 	mov	r6,r3
   4481c:	e17ffe17 	ldw	r5,-8(fp)
   44820:	e13ffb17 	ldw	r4,-20(fp)
   44824:	103ee83a 	callr	r2
   44828:	e0bffc15 	stw	r2,-16(fp)
   4482c:	e0bffc17 	ldw	r2,-16(fp)
   44830:	1000070e 	bge	r2,zero,44850 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   44834:	00447600 	call	44760 <alt_get_errno>
   44838:	1007883a 	mov	r3,r2
   4483c:	e0bffc17 	ldw	r2,-16(fp)
   44840:	0085c83a 	sub	r2,zero,r2
   44844:	18800015 	stw	r2,0(r3)
        return -1;
   44848:	00bfffc4 	movi	r2,-1
   4484c:	00000c06 	br	44880 <write+0xe4>
      }
      return rval;
   44850:	e0bffc17 	ldw	r2,-16(fp)
   44854:	00000a06 	br	44880 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   44858:	00447600 	call	44760 <alt_get_errno>
   4485c:	1007883a 	mov	r3,r2
   44860:	00800344 	movi	r2,13
   44864:	18800015 	stw	r2,0(r3)
   44868:	00000406 	br	4487c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4486c:	00447600 	call	44760 <alt_get_errno>
   44870:	1007883a 	mov	r3,r2
   44874:	00801444 	movi	r2,81
   44878:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4487c:	00bfffc4 	movi	r2,-1
}
   44880:	e037883a 	mov	sp,fp
   44884:	dfc00117 	ldw	ra,4(sp)
   44888:	df000017 	ldw	fp,0(sp)
   4488c:	dec00204 	addi	sp,sp,8
   44890:	f800283a 	ret

00044894 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   44894:	defffd04 	addi	sp,sp,-12
   44898:	dfc00215 	stw	ra,8(sp)
   4489c:	df000115 	stw	fp,4(sp)
   448a0:	df000104 	addi	fp,sp,4
   448a4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   448a8:	d1600c04 	addi	r5,gp,-32720
   448ac:	e13fff17 	ldw	r4,-4(fp)
   448b0:	0044d0c0 	call	44d0c <alt_dev_llist_insert>
}
   448b4:	e037883a 	mov	sp,fp
   448b8:	dfc00117 	ldw	ra,4(sp)
   448bc:	df000017 	ldw	fp,0(sp)
   448c0:	dec00204 	addi	sp,sp,8
   448c4:	f800283a 	ret

000448c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   448c8:	defffd04 	addi	sp,sp,-12
   448cc:	dfc00215 	stw	ra,8(sp)
   448d0:	df000115 	stw	fp,4(sp)
   448d4:	df000104 	addi	fp,sp,4
   448d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   448dc:	00452780 	call	45278 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   448e0:	00800044 	movi	r2,1
   448e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   448e8:	0001883a 	nop
   448ec:	e037883a 	mov	sp,fp
   448f0:	dfc00117 	ldw	ra,4(sp)
   448f4:	df000017 	ldw	fp,0(sp)
   448f8:	dec00204 	addi	sp,sp,8
   448fc:	f800283a 	ret

00044900 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   44900:	defffe04 	addi	sp,sp,-8
   44904:	dfc00115 	stw	ra,4(sp)
   44908:	df000015 	stw	fp,0(sp)
   4490c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_PWM, timer_pwm);
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   44910:	01000134 	movhi	r4,4
   44914:	211d0204 	addi	r4,r4,29704
   44918:	00448940 	call	44894 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   4491c:	0001883a 	nop
}
   44920:	0001883a 	nop
   44924:	e037883a 	mov	sp,fp
   44928:	dfc00117 	ldw	ra,4(sp)
   4492c:	df000017 	ldw	fp,0(sp)
   44930:	dec00204 	addi	sp,sp,8
   44934:	f800283a 	ret

00044938 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44938:	defffa04 	addi	sp,sp,-24
   4493c:	dfc00515 	stw	ra,20(sp)
   44940:	df000415 	stw	fp,16(sp)
   44944:	df000404 	addi	fp,sp,16
   44948:	e13ffd15 	stw	r4,-12(fp)
   4494c:	e17ffe15 	stw	r5,-8(fp)
   44950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44954:	e0bffd17 	ldw	r2,-12(fp)
   44958:	10800017 	ldw	r2,0(r2)
   4495c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   44960:	e0bffc17 	ldw	r2,-16(fp)
   44964:	10c00a04 	addi	r3,r2,40
   44968:	e0bffd17 	ldw	r2,-12(fp)
   4496c:	10800217 	ldw	r2,8(r2)
   44970:	100f883a 	mov	r7,r2
   44974:	e1bfff17 	ldw	r6,-4(fp)
   44978:	e17ffe17 	ldw	r5,-8(fp)
   4497c:	1809883a 	mov	r4,r3
   44980:	00449f80 	call	449f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44984:	e037883a 	mov	sp,fp
   44988:	dfc00117 	ldw	ra,4(sp)
   4498c:	df000017 	ldw	fp,0(sp)
   44990:	dec00204 	addi	sp,sp,8
   44994:	f800283a 	ret

00044998 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44998:	defffa04 	addi	sp,sp,-24
   4499c:	dfc00515 	stw	ra,20(sp)
   449a0:	df000415 	stw	fp,16(sp)
   449a4:	df000404 	addi	fp,sp,16
   449a8:	e13ffd15 	stw	r4,-12(fp)
   449ac:	e17ffe15 	stw	r5,-8(fp)
   449b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   449b4:	e0bffd17 	ldw	r2,-12(fp)
   449b8:	10800017 	ldw	r2,0(r2)
   449bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   449c0:	e0bffc17 	ldw	r2,-16(fp)
   449c4:	10c00a04 	addi	r3,r2,40
   449c8:	e0bffd17 	ldw	r2,-12(fp)
   449cc:	10800217 	ldw	r2,8(r2)
   449d0:	100f883a 	mov	r7,r2
   449d4:	e1bfff17 	ldw	r6,-4(fp)
   449d8:	e17ffe17 	ldw	r5,-8(fp)
   449dc:	1809883a 	mov	r4,r3
   449e0:	0044ae40 	call	44ae4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   449e4:	e037883a 	mov	sp,fp
   449e8:	dfc00117 	ldw	ra,4(sp)
   449ec:	df000017 	ldw	fp,0(sp)
   449f0:	dec00204 	addi	sp,sp,8
   449f4:	f800283a 	ret

000449f8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   449f8:	defff704 	addi	sp,sp,-36
   449fc:	df000815 	stw	fp,32(sp)
   44a00:	df000804 	addi	fp,sp,32
   44a04:	e13ffc15 	stw	r4,-16(fp)
   44a08:	e17ffd15 	stw	r5,-12(fp)
   44a0c:	e1bffe15 	stw	r6,-8(fp)
   44a10:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   44a14:	e0bffc17 	ldw	r2,-16(fp)
   44a18:	10800017 	ldw	r2,0(r2)
   44a1c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   44a20:	e0bffd17 	ldw	r2,-12(fp)
   44a24:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   44a28:	e0bffe17 	ldw	r2,-8(fp)
   44a2c:	e0fffd17 	ldw	r3,-12(fp)
   44a30:	1885883a 	add	r2,r3,r2
   44a34:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   44a38:	00001206 	br	44a84 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44a3c:	e0bff917 	ldw	r2,-28(fp)
   44a40:	10800037 	ldwio	r2,0(r2)
   44a44:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   44a48:	e0bffb17 	ldw	r2,-20(fp)
   44a4c:	10a0000c 	andi	r2,r2,32768
   44a50:	10000626 	beq	r2,zero,44a6c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44a54:	e0bff817 	ldw	r2,-32(fp)
   44a58:	10c00044 	addi	r3,r2,1
   44a5c:	e0fff815 	stw	r3,-32(fp)
   44a60:	e0fffb17 	ldw	r3,-20(fp)
   44a64:	10c00005 	stb	r3,0(r2)
   44a68:	00000606 	br	44a84 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   44a6c:	e0fff817 	ldw	r3,-32(fp)
   44a70:	e0bffd17 	ldw	r2,-12(fp)
   44a74:	1880071e 	bne	r3,r2,44a94 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   44a78:	e0bfff17 	ldw	r2,-4(fp)
   44a7c:	1090000c 	andi	r2,r2,16384
   44a80:	1000061e 	bne	r2,zero,44a9c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   44a84:	e0fff817 	ldw	r3,-32(fp)
   44a88:	e0bffa17 	ldw	r2,-24(fp)
   44a8c:	18bfeb36 	bltu	r3,r2,44a3c <__alt_data_end+0xfffdca3c>
   44a90:	00000306 	br	44aa0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   44a94:	0001883a 	nop
   44a98:	00000106 	br	44aa0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   44a9c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   44aa0:	e0fff817 	ldw	r3,-32(fp)
   44aa4:	e0bffd17 	ldw	r2,-12(fp)
   44aa8:	18800426 	beq	r3,r2,44abc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   44aac:	e0fff817 	ldw	r3,-32(fp)
   44ab0:	e0bffd17 	ldw	r2,-12(fp)
   44ab4:	1885c83a 	sub	r2,r3,r2
   44ab8:	00000606 	br	44ad4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   44abc:	e0bfff17 	ldw	r2,-4(fp)
   44ac0:	1090000c 	andi	r2,r2,16384
   44ac4:	10000226 	beq	r2,zero,44ad0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   44ac8:	00bffd44 	movi	r2,-11
   44acc:	00000106 	br	44ad4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   44ad0:	00bffec4 	movi	r2,-5
}
   44ad4:	e037883a 	mov	sp,fp
   44ad8:	df000017 	ldw	fp,0(sp)
   44adc:	dec00104 	addi	sp,sp,4
   44ae0:	f800283a 	ret

00044ae4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44ae4:	defff904 	addi	sp,sp,-28
   44ae8:	df000615 	stw	fp,24(sp)
   44aec:	df000604 	addi	fp,sp,24
   44af0:	e13ffc15 	stw	r4,-16(fp)
   44af4:	e17ffd15 	stw	r5,-12(fp)
   44af8:	e1bffe15 	stw	r6,-8(fp)
   44afc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   44b00:	e0bffc17 	ldw	r2,-16(fp)
   44b04:	10800017 	ldw	r2,0(r2)
   44b08:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   44b0c:	e0bffe17 	ldw	r2,-8(fp)
   44b10:	e0fffd17 	ldw	r3,-12(fp)
   44b14:	1885883a 	add	r2,r3,r2
   44b18:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   44b1c:	00000e06 	br	44b58 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   44b20:	e0bffa17 	ldw	r2,-24(fp)
   44b24:	10800104 	addi	r2,r2,4
   44b28:	10800037 	ldwio	r2,0(r2)
   44b2c:	10bfffec 	andhi	r2,r2,65535
   44b30:	10000926 	beq	r2,zero,44b58 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   44b34:	e0fffa17 	ldw	r3,-24(fp)
   44b38:	e0bffd17 	ldw	r2,-12(fp)
   44b3c:	11000044 	addi	r4,r2,1
   44b40:	e13ffd15 	stw	r4,-12(fp)
   44b44:	10800003 	ldbu	r2,0(r2)
   44b48:	10803fcc 	andi	r2,r2,255
   44b4c:	1080201c 	xori	r2,r2,128
   44b50:	10bfe004 	addi	r2,r2,-128
   44b54:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   44b58:	e0fffd17 	ldw	r3,-12(fp)
   44b5c:	e0bffb17 	ldw	r2,-20(fp)
   44b60:	18bfef36 	bltu	r3,r2,44b20 <__alt_data_end+0xfffdcb20>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   44b64:	e0bffe17 	ldw	r2,-8(fp)
}
   44b68:	e037883a 	mov	sp,fp
   44b6c:	df000017 	ldw	fp,0(sp)
   44b70:	dec00104 	addi	sp,sp,4
   44b74:	f800283a 	ret

00044b78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44b78:	defffe04 	addi	sp,sp,-8
   44b7c:	dfc00115 	stw	ra,4(sp)
   44b80:	df000015 	stw	fp,0(sp)
   44b84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44b88:	d0a00f17 	ldw	r2,-32708(gp)
   44b8c:	10000326 	beq	r2,zero,44b9c <alt_get_errno+0x24>
   44b90:	d0a00f17 	ldw	r2,-32708(gp)
   44b94:	103ee83a 	callr	r2
   44b98:	00000106 	br	44ba0 <alt_get_errno+0x28>
   44b9c:	d0a0ff04 	addi	r2,gp,-31748
}
   44ba0:	e037883a 	mov	sp,fp
   44ba4:	dfc00117 	ldw	ra,4(sp)
   44ba8:	df000017 	ldw	fp,0(sp)
   44bac:	dec00204 	addi	sp,sp,8
   44bb0:	f800283a 	ret

00044bb4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   44bb4:	defffb04 	addi	sp,sp,-20
   44bb8:	dfc00415 	stw	ra,16(sp)
   44bbc:	df000315 	stw	fp,12(sp)
   44bc0:	df000304 	addi	fp,sp,12
   44bc4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   44bc8:	e0bfff17 	ldw	r2,-4(fp)
   44bcc:	10000616 	blt	r2,zero,44be8 <close+0x34>
   44bd0:	e0bfff17 	ldw	r2,-4(fp)
   44bd4:	10c00324 	muli	r3,r2,12
   44bd8:	00800134 	movhi	r2,4
   44bdc:	109d1704 	addi	r2,r2,29788
   44be0:	1885883a 	add	r2,r3,r2
   44be4:	00000106 	br	44bec <close+0x38>
   44be8:	0005883a 	mov	r2,zero
   44bec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   44bf0:	e0bffd17 	ldw	r2,-12(fp)
   44bf4:	10001926 	beq	r2,zero,44c5c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   44bf8:	e0bffd17 	ldw	r2,-12(fp)
   44bfc:	10800017 	ldw	r2,0(r2)
   44c00:	10800417 	ldw	r2,16(r2)
   44c04:	10000626 	beq	r2,zero,44c20 <close+0x6c>
   44c08:	e0bffd17 	ldw	r2,-12(fp)
   44c0c:	10800017 	ldw	r2,0(r2)
   44c10:	10800417 	ldw	r2,16(r2)
   44c14:	e13ffd17 	ldw	r4,-12(fp)
   44c18:	103ee83a 	callr	r2
   44c1c:	00000106 	br	44c24 <close+0x70>
   44c20:	0005883a 	mov	r2,zero
   44c24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   44c28:	e13fff17 	ldw	r4,-4(fp)
   44c2c:	00452140 	call	45214 <alt_release_fd>
    if (rval < 0)
   44c30:	e0bffe17 	ldw	r2,-8(fp)
   44c34:	1000070e 	bge	r2,zero,44c54 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   44c38:	0044b780 	call	44b78 <alt_get_errno>
   44c3c:	1007883a 	mov	r3,r2
   44c40:	e0bffe17 	ldw	r2,-8(fp)
   44c44:	0085c83a 	sub	r2,zero,r2
   44c48:	18800015 	stw	r2,0(r3)
      return -1;
   44c4c:	00bfffc4 	movi	r2,-1
   44c50:	00000706 	br	44c70 <close+0xbc>
    }
    return 0;
   44c54:	0005883a 	mov	r2,zero
   44c58:	00000506 	br	44c70 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   44c5c:	0044b780 	call	44b78 <alt_get_errno>
   44c60:	1007883a 	mov	r3,r2
   44c64:	00801444 	movi	r2,81
   44c68:	18800015 	stw	r2,0(r3)
    return -1;
   44c6c:	00bfffc4 	movi	r2,-1
  }
}
   44c70:	e037883a 	mov	sp,fp
   44c74:	dfc00117 	ldw	ra,4(sp)
   44c78:	df000017 	ldw	fp,0(sp)
   44c7c:	dec00204 	addi	sp,sp,8
   44c80:	f800283a 	ret

00044c84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44c84:	deffff04 	addi	sp,sp,-4
   44c88:	df000015 	stw	fp,0(sp)
   44c8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44c90:	0001883a 	nop
   44c94:	e037883a 	mov	sp,fp
   44c98:	df000017 	ldw	fp,0(sp)
   44c9c:	dec00104 	addi	sp,sp,4
   44ca0:	f800283a 	ret

00044ca4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   44ca4:	defffc04 	addi	sp,sp,-16
   44ca8:	df000315 	stw	fp,12(sp)
   44cac:	df000304 	addi	fp,sp,12
   44cb0:	e13ffd15 	stw	r4,-12(fp)
   44cb4:	e17ffe15 	stw	r5,-8(fp)
   44cb8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   44cbc:	e0bfff17 	ldw	r2,-4(fp)
}
   44cc0:	e037883a 	mov	sp,fp
   44cc4:	df000017 	ldw	fp,0(sp)
   44cc8:	dec00104 	addi	sp,sp,4
   44ccc:	f800283a 	ret

00044cd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44cd0:	defffe04 	addi	sp,sp,-8
   44cd4:	dfc00115 	stw	ra,4(sp)
   44cd8:	df000015 	stw	fp,0(sp)
   44cdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44ce0:	d0a00f17 	ldw	r2,-32708(gp)
   44ce4:	10000326 	beq	r2,zero,44cf4 <alt_get_errno+0x24>
   44ce8:	d0a00f17 	ldw	r2,-32708(gp)
   44cec:	103ee83a 	callr	r2
   44cf0:	00000106 	br	44cf8 <alt_get_errno+0x28>
   44cf4:	d0a0ff04 	addi	r2,gp,-31748
}
   44cf8:	e037883a 	mov	sp,fp
   44cfc:	dfc00117 	ldw	ra,4(sp)
   44d00:	df000017 	ldw	fp,0(sp)
   44d04:	dec00204 	addi	sp,sp,8
   44d08:	f800283a 	ret

00044d0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44d0c:	defffa04 	addi	sp,sp,-24
   44d10:	dfc00515 	stw	ra,20(sp)
   44d14:	df000415 	stw	fp,16(sp)
   44d18:	df000404 	addi	fp,sp,16
   44d1c:	e13ffe15 	stw	r4,-8(fp)
   44d20:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44d24:	e0bffe17 	ldw	r2,-8(fp)
   44d28:	10000326 	beq	r2,zero,44d38 <alt_dev_llist_insert+0x2c>
   44d2c:	e0bffe17 	ldw	r2,-8(fp)
   44d30:	10800217 	ldw	r2,8(r2)
   44d34:	1000061e 	bne	r2,zero,44d50 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44d38:	0044cd00 	call	44cd0 <alt_get_errno>
   44d3c:	1007883a 	mov	r3,r2
   44d40:	00800584 	movi	r2,22
   44d44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44d48:	00bffa84 	movi	r2,-22
   44d4c:	00001306 	br	44d9c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44d50:	e0bffe17 	ldw	r2,-8(fp)
   44d54:	e0ffff17 	ldw	r3,-4(fp)
   44d58:	e0fffc15 	stw	r3,-16(fp)
   44d5c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44d60:	e0bffd17 	ldw	r2,-12(fp)
   44d64:	e0fffc17 	ldw	r3,-16(fp)
   44d68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44d6c:	e0bffc17 	ldw	r2,-16(fp)
   44d70:	10c00017 	ldw	r3,0(r2)
   44d74:	e0bffd17 	ldw	r2,-12(fp)
   44d78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44d7c:	e0bffc17 	ldw	r2,-16(fp)
   44d80:	10800017 	ldw	r2,0(r2)
   44d84:	e0fffd17 	ldw	r3,-12(fp)
   44d88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44d8c:	e0bffc17 	ldw	r2,-16(fp)
   44d90:	e0fffd17 	ldw	r3,-12(fp)
   44d94:	10c00015 	stw	r3,0(r2)

  return 0;  
   44d98:	0005883a 	mov	r2,zero
}
   44d9c:	e037883a 	mov	sp,fp
   44da0:	dfc00117 	ldw	ra,4(sp)
   44da4:	df000017 	ldw	fp,0(sp)
   44da8:	dec00204 	addi	sp,sp,8
   44dac:	f800283a 	ret

00044db0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44db0:	defffe04 	addi	sp,sp,-8
   44db4:	dfc00115 	stw	ra,4(sp)
   44db8:	df000015 	stw	fp,0(sp)
   44dbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44dc0:	01420004 	movi	r5,2048
   44dc4:	0009883a 	mov	r4,zero
   44dc8:	00454d80 	call	454d8 <alt_icache_flush>
#endif
}
   44dcc:	0001883a 	nop
   44dd0:	e037883a 	mov	sp,fp
   44dd4:	dfc00117 	ldw	ra,4(sp)
   44dd8:	df000017 	ldw	fp,0(sp)
   44ddc:	dec00204 	addi	sp,sp,8
   44de0:	f800283a 	ret

00044de4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   44de4:	defffe04 	addi	sp,sp,-8
   44de8:	df000115 	stw	fp,4(sp)
   44dec:	df000104 	addi	fp,sp,4
   44df0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   44df4:	e0bfff17 	ldw	r2,-4(fp)
   44df8:	10bffe84 	addi	r2,r2,-6
   44dfc:	10c00428 	cmpgeui	r3,r2,16
   44e00:	18001a1e 	bne	r3,zero,44e6c <alt_exception_cause_generated_bad_addr+0x88>
   44e04:	100690ba 	slli	r3,r2,2
   44e08:	00800134 	movhi	r2,4
   44e0c:	10938704 	addi	r2,r2,19996
   44e10:	1885883a 	add	r2,r3,r2
   44e14:	10800017 	ldw	r2,0(r2)
   44e18:	1000683a 	jmp	r2
   44e1c:	00044e5c 	xori	zero,zero,4409
   44e20:	00044e5c 	xori	zero,zero,4409
   44e24:	00044e6c 	andhi	zero,zero,4409
   44e28:	00044e6c 	andhi	zero,zero,4409
   44e2c:	00044e6c 	andhi	zero,zero,4409
   44e30:	00044e5c 	xori	zero,zero,4409
   44e34:	00044e64 	muli	zero,zero,4409
   44e38:	00044e6c 	andhi	zero,zero,4409
   44e3c:	00044e5c 	xori	zero,zero,4409
   44e40:	00044e5c 	xori	zero,zero,4409
   44e44:	00044e6c 	andhi	zero,zero,4409
   44e48:	00044e5c 	xori	zero,zero,4409
   44e4c:	00044e64 	muli	zero,zero,4409
   44e50:	00044e6c 	andhi	zero,zero,4409
   44e54:	00044e6c 	andhi	zero,zero,4409
   44e58:	00044e5c 	xori	zero,zero,4409
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   44e5c:	00800044 	movi	r2,1
   44e60:	00000306 	br	44e70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   44e64:	0005883a 	mov	r2,zero
   44e68:	00000106 	br	44e70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   44e6c:	0005883a 	mov	r2,zero
  }
}
   44e70:	e037883a 	mov	sp,fp
   44e74:	df000017 	ldw	fp,0(sp)
   44e78:	dec00104 	addi	sp,sp,4
   44e7c:	f800283a 	ret

00044e80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44e80:	defff904 	addi	sp,sp,-28
   44e84:	dfc00615 	stw	ra,24(sp)
   44e88:	df000515 	stw	fp,20(sp)
   44e8c:	df000504 	addi	fp,sp,20
   44e90:	e13ffc15 	stw	r4,-16(fp)
   44e94:	e17ffd15 	stw	r5,-12(fp)
   44e98:	e1bffe15 	stw	r6,-8(fp)
   44e9c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   44ea0:	e1bfff17 	ldw	r6,-4(fp)
   44ea4:	e17ffe17 	ldw	r5,-8(fp)
   44ea8:	e13ffd17 	ldw	r4,-12(fp)
   44eac:	00450c00 	call	450c0 <open>
   44eb0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   44eb4:	e0bffb17 	ldw	r2,-20(fp)
   44eb8:	10001c16 	blt	r2,zero,44f2c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   44ebc:	00800134 	movhi	r2,4
   44ec0:	109d1704 	addi	r2,r2,29788
   44ec4:	e0fffb17 	ldw	r3,-20(fp)
   44ec8:	18c00324 	muli	r3,r3,12
   44ecc:	10c5883a 	add	r2,r2,r3
   44ed0:	10c00017 	ldw	r3,0(r2)
   44ed4:	e0bffc17 	ldw	r2,-16(fp)
   44ed8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44edc:	00800134 	movhi	r2,4
   44ee0:	109d1704 	addi	r2,r2,29788
   44ee4:	e0fffb17 	ldw	r3,-20(fp)
   44ee8:	18c00324 	muli	r3,r3,12
   44eec:	10c5883a 	add	r2,r2,r3
   44ef0:	10800104 	addi	r2,r2,4
   44ef4:	10c00017 	ldw	r3,0(r2)
   44ef8:	e0bffc17 	ldw	r2,-16(fp)
   44efc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44f00:	00800134 	movhi	r2,4
   44f04:	109d1704 	addi	r2,r2,29788
   44f08:	e0fffb17 	ldw	r3,-20(fp)
   44f0c:	18c00324 	muli	r3,r3,12
   44f10:	10c5883a 	add	r2,r2,r3
   44f14:	10800204 	addi	r2,r2,8
   44f18:	10c00017 	ldw	r3,0(r2)
   44f1c:	e0bffc17 	ldw	r2,-16(fp)
   44f20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44f24:	e13ffb17 	ldw	r4,-20(fp)
   44f28:	00452140 	call	45214 <alt_release_fd>
  }
} 
   44f2c:	0001883a 	nop
   44f30:	e037883a 	mov	sp,fp
   44f34:	dfc00117 	ldw	ra,4(sp)
   44f38:	df000017 	ldw	fp,0(sp)
   44f3c:	dec00204 	addi	sp,sp,8
   44f40:	f800283a 	ret

00044f44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44f44:	defffb04 	addi	sp,sp,-20
   44f48:	dfc00415 	stw	ra,16(sp)
   44f4c:	df000315 	stw	fp,12(sp)
   44f50:	df000304 	addi	fp,sp,12
   44f54:	e13ffd15 	stw	r4,-12(fp)
   44f58:	e17ffe15 	stw	r5,-8(fp)
   44f5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44f60:	01c07fc4 	movi	r7,511
   44f64:	01800044 	movi	r6,1
   44f68:	e17ffd17 	ldw	r5,-12(fp)
   44f6c:	01000134 	movhi	r4,4
   44f70:	211d1a04 	addi	r4,r4,29800
   44f74:	0044e800 	call	44e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44f78:	01c07fc4 	movi	r7,511
   44f7c:	000d883a 	mov	r6,zero
   44f80:	e17ffe17 	ldw	r5,-8(fp)
   44f84:	01000134 	movhi	r4,4
   44f88:	211d1704 	addi	r4,r4,29788
   44f8c:	0044e800 	call	44e80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44f90:	01c07fc4 	movi	r7,511
   44f94:	01800044 	movi	r6,1
   44f98:	e17fff17 	ldw	r5,-4(fp)
   44f9c:	01000134 	movhi	r4,4
   44fa0:	211d1d04 	addi	r4,r4,29812
   44fa4:	0044e800 	call	44e80 <alt_open_fd>
}  
   44fa8:	0001883a 	nop
   44fac:	e037883a 	mov	sp,fp
   44fb0:	dfc00117 	ldw	ra,4(sp)
   44fb4:	df000017 	ldw	fp,0(sp)
   44fb8:	dec00204 	addi	sp,sp,8
   44fbc:	f800283a 	ret

00044fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44fc0:	defffe04 	addi	sp,sp,-8
   44fc4:	dfc00115 	stw	ra,4(sp)
   44fc8:	df000015 	stw	fp,0(sp)
   44fcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44fd0:	d0a00f17 	ldw	r2,-32708(gp)
   44fd4:	10000326 	beq	r2,zero,44fe4 <alt_get_errno+0x24>
   44fd8:	d0a00f17 	ldw	r2,-32708(gp)
   44fdc:	103ee83a 	callr	r2
   44fe0:	00000106 	br	44fe8 <alt_get_errno+0x28>
   44fe4:	d0a0ff04 	addi	r2,gp,-31748
}
   44fe8:	e037883a 	mov	sp,fp
   44fec:	dfc00117 	ldw	ra,4(sp)
   44ff0:	df000017 	ldw	fp,0(sp)
   44ff4:	dec00204 	addi	sp,sp,8
   44ff8:	f800283a 	ret

00044ffc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   44ffc:	defffd04 	addi	sp,sp,-12
   45000:	df000215 	stw	fp,8(sp)
   45004:	df000204 	addi	fp,sp,8
   45008:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4500c:	e0bfff17 	ldw	r2,-4(fp)
   45010:	10800217 	ldw	r2,8(r2)
   45014:	10d00034 	orhi	r3,r2,16384
   45018:	e0bfff17 	ldw	r2,-4(fp)
   4501c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45020:	e03ffe15 	stw	zero,-8(fp)
   45024:	00001d06 	br	4509c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45028:	00800134 	movhi	r2,4
   4502c:	109d1704 	addi	r2,r2,29788
   45030:	e0fffe17 	ldw	r3,-8(fp)
   45034:	18c00324 	muli	r3,r3,12
   45038:	10c5883a 	add	r2,r2,r3
   4503c:	10c00017 	ldw	r3,0(r2)
   45040:	e0bfff17 	ldw	r2,-4(fp)
   45044:	10800017 	ldw	r2,0(r2)
   45048:	1880111e 	bne	r3,r2,45090 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4504c:	00800134 	movhi	r2,4
   45050:	109d1704 	addi	r2,r2,29788
   45054:	e0fffe17 	ldw	r3,-8(fp)
   45058:	18c00324 	muli	r3,r3,12
   4505c:	10c5883a 	add	r2,r2,r3
   45060:	10800204 	addi	r2,r2,8
   45064:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45068:	1000090e 	bge	r2,zero,45090 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   4506c:	e0bffe17 	ldw	r2,-8(fp)
   45070:	10c00324 	muli	r3,r2,12
   45074:	00800134 	movhi	r2,4
   45078:	109d1704 	addi	r2,r2,29788
   4507c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45080:	e0bfff17 	ldw	r2,-4(fp)
   45084:	18800226 	beq	r3,r2,45090 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   45088:	00bffcc4 	movi	r2,-13
   4508c:	00000806 	br	450b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   45090:	e0bffe17 	ldw	r2,-8(fp)
   45094:	10800044 	addi	r2,r2,1
   45098:	e0bffe15 	stw	r2,-8(fp)
   4509c:	d0a00e17 	ldw	r2,-32712(gp)
   450a0:	1007883a 	mov	r3,r2
   450a4:	e0bffe17 	ldw	r2,-8(fp)
   450a8:	18bfdf2e 	bgeu	r3,r2,45028 <__alt_data_end+0xfffdd028>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   450ac:	0005883a 	mov	r2,zero
}
   450b0:	e037883a 	mov	sp,fp
   450b4:	df000017 	ldw	fp,0(sp)
   450b8:	dec00104 	addi	sp,sp,4
   450bc:	f800283a 	ret

000450c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   450c0:	defff604 	addi	sp,sp,-40
   450c4:	dfc00915 	stw	ra,36(sp)
   450c8:	df000815 	stw	fp,32(sp)
   450cc:	df000804 	addi	fp,sp,32
   450d0:	e13ffd15 	stw	r4,-12(fp)
   450d4:	e17ffe15 	stw	r5,-8(fp)
   450d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   450dc:	00bfffc4 	movi	r2,-1
   450e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   450e4:	00bffb44 	movi	r2,-19
   450e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   450ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   450f0:	d1600c04 	addi	r5,gp,-32720
   450f4:	e13ffd17 	ldw	r4,-12(fp)
   450f8:	004529c0 	call	4529c <alt_find_dev>
   450fc:	e0bff815 	stw	r2,-32(fp)
   45100:	e0bff817 	ldw	r2,-32(fp)
   45104:	1000051e 	bne	r2,zero,4511c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45108:	e13ffd17 	ldw	r4,-12(fp)
   4510c:	004532c0 	call	4532c <alt_find_file>
   45110:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45114:	00800044 	movi	r2,1
   45118:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4511c:	e0bff817 	ldw	r2,-32(fp)
   45120:	10002926 	beq	r2,zero,451c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45124:	e13ff817 	ldw	r4,-32(fp)
   45128:	00454340 	call	45434 <alt_get_fd>
   4512c:	e0bff915 	stw	r2,-28(fp)
   45130:	e0bff917 	ldw	r2,-28(fp)
   45134:	1000030e 	bge	r2,zero,45144 <open+0x84>
    {
      status = index;
   45138:	e0bff917 	ldw	r2,-28(fp)
   4513c:	e0bffa15 	stw	r2,-24(fp)
   45140:	00002306 	br	451d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   45144:	e0bff917 	ldw	r2,-28(fp)
   45148:	10c00324 	muli	r3,r2,12
   4514c:	00800134 	movhi	r2,4
   45150:	109d1704 	addi	r2,r2,29788
   45154:	1885883a 	add	r2,r3,r2
   45158:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4515c:	e0fffe17 	ldw	r3,-8(fp)
   45160:	00900034 	movhi	r2,16384
   45164:	10bfffc4 	addi	r2,r2,-1
   45168:	1886703a 	and	r3,r3,r2
   4516c:	e0bffc17 	ldw	r2,-16(fp)
   45170:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   45174:	e0bffb17 	ldw	r2,-20(fp)
   45178:	1000051e 	bne	r2,zero,45190 <open+0xd0>
   4517c:	e13ffc17 	ldw	r4,-16(fp)
   45180:	0044ffc0 	call	44ffc <alt_file_locked>
   45184:	e0bffa15 	stw	r2,-24(fp)
   45188:	e0bffa17 	ldw	r2,-24(fp)
   4518c:	10001016 	blt	r2,zero,451d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   45190:	e0bff817 	ldw	r2,-32(fp)
   45194:	10800317 	ldw	r2,12(r2)
   45198:	10000826 	beq	r2,zero,451bc <open+0xfc>
   4519c:	e0bff817 	ldw	r2,-32(fp)
   451a0:	10800317 	ldw	r2,12(r2)
   451a4:	e1ffff17 	ldw	r7,-4(fp)
   451a8:	e1bffe17 	ldw	r6,-8(fp)
   451ac:	e17ffd17 	ldw	r5,-12(fp)
   451b0:	e13ffc17 	ldw	r4,-16(fp)
   451b4:	103ee83a 	callr	r2
   451b8:	00000106 	br	451c0 <open+0x100>
   451bc:	0005883a 	mov	r2,zero
   451c0:	e0bffa15 	stw	r2,-24(fp)
   451c4:	00000206 	br	451d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   451c8:	00bffb44 	movi	r2,-19
   451cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   451d0:	e0bffa17 	ldw	r2,-24(fp)
   451d4:	1000090e 	bge	r2,zero,451fc <open+0x13c>
  {
    alt_release_fd (index);  
   451d8:	e13ff917 	ldw	r4,-28(fp)
   451dc:	00452140 	call	45214 <alt_release_fd>
    ALT_ERRNO = -status;
   451e0:	0044fc00 	call	44fc0 <alt_get_errno>
   451e4:	1007883a 	mov	r3,r2
   451e8:	e0bffa17 	ldw	r2,-24(fp)
   451ec:	0085c83a 	sub	r2,zero,r2
   451f0:	18800015 	stw	r2,0(r3)
    return -1;
   451f4:	00bfffc4 	movi	r2,-1
   451f8:	00000106 	br	45200 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   451fc:	e0bff917 	ldw	r2,-28(fp)
}
   45200:	e037883a 	mov	sp,fp
   45204:	dfc00117 	ldw	ra,4(sp)
   45208:	df000017 	ldw	fp,0(sp)
   4520c:	dec00204 	addi	sp,sp,8
   45210:	f800283a 	ret

00045214 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   45214:	defffe04 	addi	sp,sp,-8
   45218:	df000115 	stw	fp,4(sp)
   4521c:	df000104 	addi	fp,sp,4
   45220:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   45224:	e0bfff17 	ldw	r2,-4(fp)
   45228:	108000d0 	cmplti	r2,r2,3
   4522c:	10000d1e 	bne	r2,zero,45264 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   45230:	00800134 	movhi	r2,4
   45234:	109d1704 	addi	r2,r2,29788
   45238:	e0ffff17 	ldw	r3,-4(fp)
   4523c:	18c00324 	muli	r3,r3,12
   45240:	10c5883a 	add	r2,r2,r3
   45244:	10800204 	addi	r2,r2,8
   45248:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4524c:	00800134 	movhi	r2,4
   45250:	109d1704 	addi	r2,r2,29788
   45254:	e0ffff17 	ldw	r3,-4(fp)
   45258:	18c00324 	muli	r3,r3,12
   4525c:	10c5883a 	add	r2,r2,r3
   45260:	10000015 	stw	zero,0(r2)
  }
}
   45264:	0001883a 	nop
   45268:	e037883a 	mov	sp,fp
   4526c:	df000017 	ldw	fp,0(sp)
   45270:	dec00104 	addi	sp,sp,4
   45274:	f800283a 	ret

00045278 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   45278:	deffff04 	addi	sp,sp,-4
   4527c:	df000015 	stw	fp,0(sp)
   45280:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   45284:	000170fa 	wrctl	ienable,zero
}
   45288:	0001883a 	nop
   4528c:	e037883a 	mov	sp,fp
   45290:	df000017 	ldw	fp,0(sp)
   45294:	dec00104 	addi	sp,sp,4
   45298:	f800283a 	ret

0004529c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4529c:	defffa04 	addi	sp,sp,-24
   452a0:	dfc00515 	stw	ra,20(sp)
   452a4:	df000415 	stw	fp,16(sp)
   452a8:	df000404 	addi	fp,sp,16
   452ac:	e13ffe15 	stw	r4,-8(fp)
   452b0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   452b4:	e0bfff17 	ldw	r2,-4(fp)
   452b8:	10800017 	ldw	r2,0(r2)
   452bc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   452c0:	e13ffe17 	ldw	r4,-8(fp)
   452c4:	0043c900 	call	43c90 <strlen>
   452c8:	10800044 	addi	r2,r2,1
   452cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   452d0:	00000d06 	br	45308 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   452d4:	e0bffc17 	ldw	r2,-16(fp)
   452d8:	10800217 	ldw	r2,8(r2)
   452dc:	e0fffd17 	ldw	r3,-12(fp)
   452e0:	180d883a 	mov	r6,r3
   452e4:	e17ffe17 	ldw	r5,-8(fp)
   452e8:	1009883a 	mov	r4,r2
   452ec:	00455880 	call	45588 <memcmp>
   452f0:	1000021e 	bne	r2,zero,452fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   452f4:	e0bffc17 	ldw	r2,-16(fp)
   452f8:	00000706 	br	45318 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   452fc:	e0bffc17 	ldw	r2,-16(fp)
   45300:	10800017 	ldw	r2,0(r2)
   45304:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45308:	e0fffc17 	ldw	r3,-16(fp)
   4530c:	e0bfff17 	ldw	r2,-4(fp)
   45310:	18bff01e 	bne	r3,r2,452d4 <__alt_data_end+0xfffdd2d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45314:	0005883a 	mov	r2,zero
}
   45318:	e037883a 	mov	sp,fp
   4531c:	dfc00117 	ldw	ra,4(sp)
   45320:	df000017 	ldw	fp,0(sp)
   45324:	dec00204 	addi	sp,sp,8
   45328:	f800283a 	ret

0004532c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4532c:	defffb04 	addi	sp,sp,-20
   45330:	dfc00415 	stw	ra,16(sp)
   45334:	df000315 	stw	fp,12(sp)
   45338:	df000304 	addi	fp,sp,12
   4533c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   45340:	d0a00a17 	ldw	r2,-32728(gp)
   45344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45348:	00003106 	br	45410 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4534c:	e0bffd17 	ldw	r2,-12(fp)
   45350:	10800217 	ldw	r2,8(r2)
   45354:	1009883a 	mov	r4,r2
   45358:	0043c900 	call	43c90 <strlen>
   4535c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   45360:	e0bffd17 	ldw	r2,-12(fp)
   45364:	10c00217 	ldw	r3,8(r2)
   45368:	e0bffe17 	ldw	r2,-8(fp)
   4536c:	10bfffc4 	addi	r2,r2,-1
   45370:	1885883a 	add	r2,r3,r2
   45374:	10800003 	ldbu	r2,0(r2)
   45378:	10803fcc 	andi	r2,r2,255
   4537c:	1080201c 	xori	r2,r2,128
   45380:	10bfe004 	addi	r2,r2,-128
   45384:	10800bd8 	cmpnei	r2,r2,47
   45388:	1000031e 	bne	r2,zero,45398 <alt_find_file+0x6c>
    {
      len -= 1;
   4538c:	e0bffe17 	ldw	r2,-8(fp)
   45390:	10bfffc4 	addi	r2,r2,-1
   45394:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45398:	e0bffe17 	ldw	r2,-8(fp)
   4539c:	e0ffff17 	ldw	r3,-4(fp)
   453a0:	1885883a 	add	r2,r3,r2
   453a4:	10800003 	ldbu	r2,0(r2)
   453a8:	10803fcc 	andi	r2,r2,255
   453ac:	1080201c 	xori	r2,r2,128
   453b0:	10bfe004 	addi	r2,r2,-128
   453b4:	10800be0 	cmpeqi	r2,r2,47
   453b8:	1000081e 	bne	r2,zero,453dc <alt_find_file+0xb0>
   453bc:	e0bffe17 	ldw	r2,-8(fp)
   453c0:	e0ffff17 	ldw	r3,-4(fp)
   453c4:	1885883a 	add	r2,r3,r2
   453c8:	10800003 	ldbu	r2,0(r2)
   453cc:	10803fcc 	andi	r2,r2,255
   453d0:	1080201c 	xori	r2,r2,128
   453d4:	10bfe004 	addi	r2,r2,-128
   453d8:	10000a1e 	bne	r2,zero,45404 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   453dc:	e0bffd17 	ldw	r2,-12(fp)
   453e0:	10800217 	ldw	r2,8(r2)
   453e4:	e0fffe17 	ldw	r3,-8(fp)
   453e8:	180d883a 	mov	r6,r3
   453ec:	e17fff17 	ldw	r5,-4(fp)
   453f0:	1009883a 	mov	r4,r2
   453f4:	00455880 	call	45588 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   453f8:	1000021e 	bne	r2,zero,45404 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   453fc:	e0bffd17 	ldw	r2,-12(fp)
   45400:	00000706 	br	45420 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45404:	e0bffd17 	ldw	r2,-12(fp)
   45408:	10800017 	ldw	r2,0(r2)
   4540c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45410:	e0fffd17 	ldw	r3,-12(fp)
   45414:	d0a00a04 	addi	r2,gp,-32728
   45418:	18bfcc1e 	bne	r3,r2,4534c <__alt_data_end+0xfffdd34c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4541c:	0005883a 	mov	r2,zero
}
   45420:	e037883a 	mov	sp,fp
   45424:	dfc00117 	ldw	ra,4(sp)
   45428:	df000017 	ldw	fp,0(sp)
   4542c:	dec00204 	addi	sp,sp,8
   45430:	f800283a 	ret

00045434 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45434:	defffc04 	addi	sp,sp,-16
   45438:	df000315 	stw	fp,12(sp)
   4543c:	df000304 	addi	fp,sp,12
   45440:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45444:	00bffa04 	movi	r2,-24
   45448:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4544c:	e03ffd15 	stw	zero,-12(fp)
   45450:	00001906 	br	454b8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   45454:	00800134 	movhi	r2,4
   45458:	109d1704 	addi	r2,r2,29788
   4545c:	e0fffd17 	ldw	r3,-12(fp)
   45460:	18c00324 	muli	r3,r3,12
   45464:	10c5883a 	add	r2,r2,r3
   45468:	10800017 	ldw	r2,0(r2)
   4546c:	10000f1e 	bne	r2,zero,454ac <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   45470:	00800134 	movhi	r2,4
   45474:	109d1704 	addi	r2,r2,29788
   45478:	e0fffd17 	ldw	r3,-12(fp)
   4547c:	18c00324 	muli	r3,r3,12
   45480:	10c5883a 	add	r2,r2,r3
   45484:	e0ffff17 	ldw	r3,-4(fp)
   45488:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   4548c:	d0e00e17 	ldw	r3,-32712(gp)
   45490:	e0bffd17 	ldw	r2,-12(fp)
   45494:	1880020e 	bge	r3,r2,454a0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   45498:	e0bffd17 	ldw	r2,-12(fp)
   4549c:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   454a0:	e0bffd17 	ldw	r2,-12(fp)
   454a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   454a8:	00000606 	br	454c4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   454ac:	e0bffd17 	ldw	r2,-12(fp)
   454b0:	10800044 	addi	r2,r2,1
   454b4:	e0bffd15 	stw	r2,-12(fp)
   454b8:	e0bffd17 	ldw	r2,-12(fp)
   454bc:	10800810 	cmplti	r2,r2,32
   454c0:	103fe41e 	bne	r2,zero,45454 <__alt_data_end+0xfffdd454>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   454c4:	e0bffe17 	ldw	r2,-8(fp)
}
   454c8:	e037883a 	mov	sp,fp
   454cc:	df000017 	ldw	fp,0(sp)
   454d0:	dec00104 	addi	sp,sp,4
   454d4:	f800283a 	ret

000454d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   454d8:	defffb04 	addi	sp,sp,-20
   454dc:	df000415 	stw	fp,16(sp)
   454e0:	df000404 	addi	fp,sp,16
   454e4:	e13ffe15 	stw	r4,-8(fp)
   454e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   454ec:	e0bfff17 	ldw	r2,-4(fp)
   454f0:	10820070 	cmpltui	r2,r2,2049
   454f4:	1000021e 	bne	r2,zero,45500 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   454f8:	00820004 	movi	r2,2048
   454fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   45500:	e0fffe17 	ldw	r3,-8(fp)
   45504:	e0bfff17 	ldw	r2,-4(fp)
   45508:	1885883a 	add	r2,r3,r2
   4550c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45510:	e0bffe17 	ldw	r2,-8(fp)
   45514:	e0bffc15 	stw	r2,-16(fp)
   45518:	00000506 	br	45530 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4551c:	e0bffc17 	ldw	r2,-16(fp)
   45520:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45524:	e0bffc17 	ldw	r2,-16(fp)
   45528:	10800804 	addi	r2,r2,32
   4552c:	e0bffc15 	stw	r2,-16(fp)
   45530:	e0fffc17 	ldw	r3,-16(fp)
   45534:	e0bffd17 	ldw	r2,-12(fp)
   45538:	18bff836 	bltu	r3,r2,4551c <__alt_data_end+0xfffdd51c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4553c:	e0bffe17 	ldw	r2,-8(fp)
   45540:	108007cc 	andi	r2,r2,31
   45544:	10000226 	beq	r2,zero,45550 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45548:	e0bffc17 	ldw	r2,-16(fp)
   4554c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   45550:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45554:	0001883a 	nop
   45558:	e037883a 	mov	sp,fp
   4555c:	df000017 	ldw	fp,0(sp)
   45560:	dec00104 	addi	sp,sp,4
   45564:	f800283a 	ret

00045568 <exit>:
   45568:	defffe04 	addi	sp,sp,-8
   4556c:	000b883a 	mov	r5,zero
   45570:	dc000015 	stw	r16,0(sp)
   45574:	dfc00115 	stw	ra,4(sp)
   45578:	2021883a 	mov	r16,r4
   4557c:	00455b80 	call	455b8 <__call_exitprocs>
   45580:	8009883a 	mov	r4,r16
   45584:	00457480 	call	45748 <_exit>

00045588 <memcmp>:
   45588:	218d883a 	add	r6,r4,r6
   4558c:	21800826 	beq	r4,r6,455b0 <memcmp+0x28>
   45590:	20800003 	ldbu	r2,0(r4)
   45594:	28c00003 	ldbu	r3,0(r5)
   45598:	10c00226 	beq	r2,r3,455a4 <memcmp+0x1c>
   4559c:	10c5c83a 	sub	r2,r2,r3
   455a0:	f800283a 	ret
   455a4:	21000044 	addi	r4,r4,1
   455a8:	29400044 	addi	r5,r5,1
   455ac:	003ff706 	br	4558c <__alt_data_end+0xfffdd58c>
   455b0:	0005883a 	mov	r2,zero
   455b4:	f800283a 	ret

000455b8 <__call_exitprocs>:
   455b8:	defff504 	addi	sp,sp,-44
   455bc:	dd000515 	stw	r20,20(sp)
   455c0:	05000134 	movhi	r20,4
   455c4:	dc800315 	stw	r18,12(sp)
   455c8:	dfc00a15 	stw	ra,40(sp)
   455cc:	df000915 	stw	fp,36(sp)
   455d0:	ddc00815 	stw	r23,32(sp)
   455d4:	dd800715 	stw	r22,28(sp)
   455d8:	dd400615 	stw	r21,24(sp)
   455dc:	dcc00415 	stw	r19,16(sp)
   455e0:	dc400215 	stw	r17,8(sp)
   455e4:	dc000115 	stw	r16,4(sp)
   455e8:	d9000015 	stw	r4,0(sp)
   455ec:	2825883a 	mov	r18,r5
   455f0:	a51d7e04 	addi	r20,r20,30200
   455f4:	a4400017 	ldw	r17,0(r20)
   455f8:	8cc00c17 	ldw	r19,48(r17)
   455fc:	8c400c04 	addi	r17,r17,48
   45600:	98004526 	beq	r19,zero,45718 <__call_exitprocs+0x160>
   45604:	9c000117 	ldw	r16,4(r19)
   45608:	00900034 	movhi	r2,16384
   4560c:	10bfffc4 	addi	r2,r2,-1
   45610:	9d402217 	ldw	r21,136(r19)
   45614:	85bfffc4 	addi	r22,r16,-1
   45618:	80a1883a 	add	r16,r16,r2
   4561c:	8421883a 	add	r16,r16,r16
   45620:	8421883a 	add	r16,r16,r16
   45624:	ac2f883a 	add	r23,r21,r16
   45628:	84000204 	addi	r16,r16,8
   4562c:	9c21883a 	add	r16,r19,r16
   45630:	b0002716 	blt	r22,zero,456d0 <__call_exitprocs+0x118>
   45634:	90000726 	beq	r18,zero,45654 <__call_exitprocs+0x9c>
   45638:	a800041e 	bne	r21,zero,4564c <__call_exitprocs+0x94>
   4563c:	b5bfffc4 	addi	r22,r22,-1
   45640:	bdffff04 	addi	r23,r23,-4
   45644:	843fff04 	addi	r16,r16,-4
   45648:	003ff906 	br	45630 <__alt_data_end+0xfffdd630>
   4564c:	b9002017 	ldw	r4,128(r23)
   45650:	913ffa1e 	bne	r18,r4,4563c <__alt_data_end+0xfffdd63c>
   45654:	99000117 	ldw	r4,4(r19)
   45658:	82000017 	ldw	r8,0(r16)
   4565c:	213fffc4 	addi	r4,r4,-1
   45660:	b100021e 	bne	r22,r4,4566c <__call_exitprocs+0xb4>
   45664:	9d800115 	stw	r22,4(r19)
   45668:	00000106 	br	45670 <__call_exitprocs+0xb8>
   4566c:	80000015 	stw	zero,0(r16)
   45670:	403ff226 	beq	r8,zero,4563c <__alt_data_end+0xfffdd63c>
   45674:	9f000117 	ldw	fp,4(r19)
   45678:	a8000526 	beq	r21,zero,45690 <__call_exitprocs+0xd8>
   4567c:	00800044 	movi	r2,1
   45680:	1592983a 	sll	r9,r2,r22
   45684:	a9404017 	ldw	r5,256(r21)
   45688:	494a703a 	and	r5,r9,r5
   4568c:	2800021e 	bne	r5,zero,45698 <__call_exitprocs+0xe0>
   45690:	403ee83a 	callr	r8
   45694:	00000906 	br	456bc <__call_exitprocs+0x104>
   45698:	a9004117 	ldw	r4,260(r21)
   4569c:	4908703a 	and	r4,r9,r4
   456a0:	2000041e 	bne	r4,zero,456b4 <__call_exitprocs+0xfc>
   456a4:	b9400017 	ldw	r5,0(r23)
   456a8:	d9000017 	ldw	r4,0(sp)
   456ac:	403ee83a 	callr	r8
   456b0:	00000206 	br	456bc <__call_exitprocs+0x104>
   456b4:	b9000017 	ldw	r4,0(r23)
   456b8:	403ee83a 	callr	r8
   456bc:	99000117 	ldw	r4,4(r19)
   456c0:	e13fcc1e 	bne	fp,r4,455f4 <__alt_data_end+0xfffdd5f4>
   456c4:	89000017 	ldw	r4,0(r17)
   456c8:	993fdc26 	beq	r19,r4,4563c <__alt_data_end+0xfffdd63c>
   456cc:	003fc906 	br	455f4 <__alt_data_end+0xfffdd5f4>
   456d0:	00800034 	movhi	r2,0
   456d4:	10800004 	addi	r2,r2,0
   456d8:	10000f26 	beq	r2,zero,45718 <__call_exitprocs+0x160>
   456dc:	99400117 	ldw	r5,4(r19)
   456e0:	99000017 	ldw	r4,0(r19)
   456e4:	2800091e 	bne	r5,zero,4570c <__call_exitprocs+0x154>
   456e8:	20000826 	beq	r4,zero,4570c <__call_exitprocs+0x154>
   456ec:	89000015 	stw	r4,0(r17)
   456f0:	a8000226 	beq	r21,zero,456fc <__call_exitprocs+0x144>
   456f4:	a809883a 	mov	r4,r21
   456f8:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   456fc:	9809883a 	mov	r4,r19
   45700:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45704:	8cc00017 	ldw	r19,0(r17)
   45708:	003fbd06 	br	45600 <__alt_data_end+0xfffdd600>
   4570c:	9823883a 	mov	r17,r19
   45710:	2027883a 	mov	r19,r4
   45714:	003fba06 	br	45600 <__alt_data_end+0xfffdd600>
   45718:	dfc00a17 	ldw	ra,40(sp)
   4571c:	df000917 	ldw	fp,36(sp)
   45720:	ddc00817 	ldw	r23,32(sp)
   45724:	dd800717 	ldw	r22,28(sp)
   45728:	dd400617 	ldw	r21,24(sp)
   4572c:	dd000517 	ldw	r20,20(sp)
   45730:	dcc00417 	ldw	r19,16(sp)
   45734:	dc800317 	ldw	r18,12(sp)
   45738:	dc400217 	ldw	r17,8(sp)
   4573c:	dc000117 	ldw	r16,4(sp)
   45740:	dec00b04 	addi	sp,sp,44
   45744:	f800283a 	ret

00045748 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45748:	defffd04 	addi	sp,sp,-12
   4574c:	df000215 	stw	fp,8(sp)
   45750:	df000204 	addi	fp,sp,8
   45754:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45758:	0001883a 	nop
   4575c:	e0bfff17 	ldw	r2,-4(fp)
   45760:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45764:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45768:	10000226 	beq	r2,zero,45774 <_exit+0x2c>
    ALT_SIM_FAIL();
   4576c:	002af070 	cmpltui	zero,zero,43969
   45770:	00000106 	br	45778 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   45774:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   45778:	003fff06 	br	45778 <__alt_data_end+0xfffdd778>
