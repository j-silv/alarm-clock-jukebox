
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000039c4 memsz 0x000039c4 flags r-x
    LOAD off    0x000049e4 vaddr 0x000439e4 paddr 0x00043cd0 align 2**12
         filesz 0x000002ec memsz 0x000002ec flags rw-
    LOAD off    0x00004fbc vaddr 0x00043fbc paddr 0x00043fbc align 2**12
         filesz 0x00000000 memsz 0x00000134 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003578  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000228  000437bc  000437bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002ec  000439e4  00043cd0  000049e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000134  00043fbc  00043fbc  00004fbc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000440f0  000440f0  00004cd0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004cd0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006b8  00000000  00000000  00004cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000857c  00000000  00000000  000053b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f6f  00000000  00000000  0000d92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000037a5  00000000  00000000  0001089b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fd8  00000000  00000000  00014040  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001f9c  00000000  00000000  00015018  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  00016fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000182bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  000182e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a512  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0001a515  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a51f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a520  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001a521  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001a525  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001a529  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001a52d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001a538  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001a543  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001a54e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0001a559  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0001a5ba  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00086d2b  00000000  00000000  0001ff54  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
000437bc l    d  .rodata	00000000 .rodata
000439e4 l    d  .rwdata	00000000 .rwdata
00043fbc l    d  .bss	00000000 .bss
000440f0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 button.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
00043fc3 l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00041a3c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000439e4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00042398 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000424f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00042624 l     F .text	00000034 alt_dev_reg
00043ac4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00042920 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00042a14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00042b40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00042b6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00042d1c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00042e5c l     F .text	0000003c alt_get_errno
00042e98 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00043fe4 g     O .bss	00000004 alt_instruction_exception_handler
00042484 g     F .text	0000006c alt_main
0004198c g     F .text	00000080 _puts_r
00043ff0 g     O .bss	00000100 alt_irq
00043cd0 g       *ABS*	00000000 __flash_rwdata_start
00041940 g     F .text	0000004c printf
00040ee4 g     F .text	00000084 getClockTime
000410fc g     F .text	000000b0 upClockHour
000432b8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00043fd0 g     O .bss	00000004 errno
00043fdc g     O .bss	00000004 alt_argv
0004bc98 g       *ABS*	00000000 _gp
00043ca3 g     O .rwdata	00000001 time_format
0004066c g     F .text	00000030 alarmLEDon
00043b18 g     O .rwdata	00000180 alt_fd_list
000432dc g     F .text	00000090 alt_find_dev
00042de0 g     F .text	0000007c alt_io_redirect
00041a0c g     F .text	00000014 puts
00042c80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000427a0 g     F .text	000000ec altera_avalon_jtag_uart_read
00041904 g     F .text	0000003c _printf_r
00041848 g     F .text	00000064 .hidden __udivsi3
00043518 g     F .text	00000090 alt_icache_flush
00043c98 g     O .rwdata	00000001 volume
000405b4 g     F .text	00000048 switchesRegisterISR
00043cc0 g     O .rwdata	00000004 alt_max_fd
00043c9a g     O .rwdata	00000006 unused_switches
000416a4 g     F .text	000000ac downAlarmHour
00041278 g     F .text	000000c8 downClockMinute
00043ca4 g     O .rwdata	00000004 _global_impure_ptr
00041420 g     F .text	00000084 getAlarmTime
000440f0 g       *ABS*	00000000 __bss_end
000422a8 g     F .text	000000f0 alt_iic_isr_register
000431b0 g     F .text	00000108 alt_tick
000408dc g     F .text	00000234 switchesISR
0004225c g     F .text	0000004c alt_ic_irq_enabled
00043fc9 g     O .bss	00000003 alarm
00043114 g     F .text	0000009c alt_alarm_stop
00043fd4 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00043af0 g     O .rwdata	00000028 alt_dev_null
00042b20 g     F .text	00000020 alt_dcache_flush_all
0004078c g     F .text	00000150 timerSecondISR
00043cd0 g       *ABS*	00000000 __ram_rwdata_end
000414a4 g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00043cb8 g     O .rwdata	00000008 alt_dev_list
0004252c g     F .text	000000f8 write
00041340 g     F .text	000000ac downClockHour
000439e4 g       *ABS*	00000000 __ram_rodata_end
000437bc g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00040f68 g     F .text	000000cc upClockSecond
000418ac g     F .text	00000058 .hidden __umodsi3
0004063c g     F .text	00000030 alarmLEDoff
0004069c g     F .text	0000004c alarmLEDtoggle
000440f0 g       *ABS*	00000000 end
00043fbc g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000415fc g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00042998 g     F .text	0000007c alt_avalon_timer_sc_init
0004288c g     F .text	00000094 altera_avalon_jtag_uart_write
00041aa8 g     F .text	00000524 ___vfprintf_internal_r
000435f8 g     F .text	00000190 __call_exitprocs
00040244 g     F .text	0000003c _start
00043fe8 g     O .bss	00000004 _alt_tick_rate
00043fec g     O .bss	00000004 _alt_nticks
00042690 g     F .text	00000050 alt_sys_init
00040dcc g     F .text	0000009c checkInvalidMode
000439e4 g       *ABS*	00000000 __ram_rwdata_start
000437bc g       *ABS*	00000000 __ram_rodata_start
00043ca0 g     O .rwdata	00000003 reset_clock_value
000405fc g     F .text	00000040 switchesEnableInterrupt
000426e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00043474 g     F .text	000000a4 alt_get_fd
000435c8 g     F .text	00000030 memcmp
000440f0 g       *ABS*	00000000 __alt_stack_base
00040e68 g     F .text	00000044 isPowerOfTwoOrZero
0004336c g     F .text	00000108 alt_find_file
00042ba8 g     F .text	000000a4 alt_dev_llist_insert
00040eac g     F .text	00000038 resetClockTime
00041fe8 g     F .text	000000b8 __sfvwrite_small_dev
00043fbc g       *ABS*	00000000 __bss_start
00040b30 g     F .text	00000020 getSong
000406e8 g     F .text	000000a4 main
00043fe0 g     O .bss	00000004 alt_envp
00042740 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040280 g     F .text	00000080 resetDisplay
00043cc4 g     O .rwdata	00000004 alt_errno
00041750 g     F .text	00000084 .hidden __divsi3
000411ac g     F .text	000000cc downClockSecond
000437bc g       *ABS*	00000000 __flash_rodata_start
00042658 g     F .text	00000038 alt_irq_init
000430b0 g     F .text	00000064 alt_release_fd
00043fc2 g     O .bss	00000001 song_index
000420a0 g     F .text	00000058 _write_r
00041034 g     F .text	000000c8 upClockMinute
00043ca8 g     O .rwdata	00000004 _impure_ptr
00043fd8 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00040584 g     F .text	00000030 timerSecondEnableInterrupt
00043cb0 g     O .rwdata	00000008 alt_fs_list
00040b50 g     F .text	0000027c determineMode
00040020 g       *ABS*	00000000 __ram_exceptions_start
000420f8 g     F .text	00000050 alt_ic_isr_register
00043cd0 g       *ABS*	00000000 _edata
000440f0 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000421d0 g     F .text	0000008c alt_ic_irq_disable
000435a8 g     F .text	00000020 exit
000417d4 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004053c g     F .text	00000048 timerSecondRegisterISR
0004154c g     F .text	000000b0 upAlarmHour
00043788 g     F .text	00000034 _exit
00041a20 g     F .text	0000001c strlen
00042f5c g     F .text	00000154 open
00043fcc g     O .bss	00000003 clock
0004394a g     O .rodata	00000060 mode_lookup_table
00042c4c g     F .text	00000034 alt_icache_flush_all
00043cac g     O .rwdata	00000004 alt_priority_mask
00042148 g     F .text	00000088 alt_ic_irq_enable
00041fcc g     F .text	0000001c __vfprintf_internal
00043cc8 g     O .rwdata	00000008 alt_alarm_list
00042a50 g     F .text	000000d0 close
00040b10 g     F .text	00000020 getVolume
000413ec g     F .text	00000034 resetAlarmTime
00042400 g     F .text	00000084 alt_load
00040300 g     F .text	0000023c updateDisplay



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	108ffc04 	addi	r2,r2,16368
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	108ffc04 	addi	r2,r2,16368
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a0d317 	ldw	r2,-31924(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a0d317 	ldw	r2,-31924(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6af2614 	ori	gp,gp,48280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	108fef14 	ori	r2,r2,16316

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18d03c14 	ori	r3,r3,16624

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	00424000 	call	42400 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	00424840 	call	42484 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   40280:	deffff04 	addi	sp,sp,-4
   40284:	df000015 	stw	fp,0(sp)
   40288:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   4028c:	00c03004 	movi	r3,192
   40290:	00800234 	movhi	r2,8
   40294:	10841004 	addi	r2,r2,4160
   40298:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   4029c:	00c03004 	movi	r3,192
   402a0:	00800234 	movhi	r2,8
   402a4:	10843404 	addi	r2,r2,4304
   402a8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   402ac:	00c03004 	movi	r3,192
   402b0:	00800234 	movhi	r2,8
   402b4:	10841404 	addi	r2,r2,4176
   402b8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   402bc:	00c03004 	movi	r3,192
   402c0:	00800234 	movhi	r2,8
   402c4:	10843004 	addi	r2,r2,4288
   402c8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   402cc:	00c03004 	movi	r3,192
   402d0:	00800234 	movhi	r2,8
   402d4:	10841804 	addi	r2,r2,4192
   402d8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   402dc:	00c03004 	movi	r3,192
   402e0:	00800234 	movhi	r2,8
   402e4:	10842c04 	addi	r2,r2,4272
   402e8:	10c00035 	stwio	r3,0(r2)
}
   402ec:	0001883a 	nop
   402f0:	e037883a 	mov	sp,fp
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00104 	addi	sp,sp,4
   402fc:	f800283a 	ret

00040300 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40300:	defffa04 	addi	sp,sp,-24
   40304:	dfc00515 	stw	ra,20(sp)
   40308:	df000415 	stw	fp,16(sp)
   4030c:	df000404 	addi	fp,sp,16
   40310:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40314:	e0bfff03 	ldbu	r2,-4(fp)
   40318:	10803fcc 	andi	r2,r2,255
   4031c:	10801918 	cmpnei	r2,r2,100
   40320:	1000051e 	bne	r2,zero,40338 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40324:	00800284 	movi	r2,10
   40328:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4032c:	00800284 	movi	r2,10
   40330:	e0bffd05 	stb	r2,-12(fp)
   40334:	00000b06 	br	40364 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40338:	e0bfff03 	ldbu	r2,-4(fp)
   4033c:	10803fcc 	andi	r2,r2,255
   40340:	01400284 	movi	r5,10
   40344:	1009883a 	mov	r4,r2
   40348:	00418480 	call	41848 <__udivsi3>
   4034c:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   40350:	e0bfff03 	ldbu	r2,-4(fp)
   40354:	e0fffd43 	ldbu	r3,-11(fp)
   40358:	18fffda4 	muli	r3,r3,-10
   4035c:	10c5883a 	add	r2,r2,r3
   40360:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   40364:	e0bfff43 	ldbu	r2,-3(fp)
   40368:	10803fcc 	andi	r2,r2,255
   4036c:	10801918 	cmpnei	r2,r2,100
   40370:	1000051e 	bne	r2,zero,40388 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   40374:	00800284 	movi	r2,10
   40378:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   4037c:	00800284 	movi	r2,10
   40380:	e0bffc85 	stb	r2,-14(fp)
   40384:	00000b06 	br	403b4 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   40388:	e0bfff43 	ldbu	r2,-3(fp)
   4038c:	10803fcc 	andi	r2,r2,255
   40390:	01400284 	movi	r5,10
   40394:	1009883a 	mov	r4,r2
   40398:	00418480 	call	41848 <__udivsi3>
   4039c:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   403a0:	e0bfff43 	ldbu	r2,-3(fp)
   403a4:	e0fffcc3 	ldbu	r3,-13(fp)
   403a8:	18fffda4 	muli	r3,r3,-10
   403ac:	10c5883a 	add	r2,r2,r3
   403b0:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   403b4:	e0bfff83 	ldbu	r2,-2(fp)
   403b8:	10803fcc 	andi	r2,r2,255
   403bc:	10801918 	cmpnei	r2,r2,100
   403c0:	1000051e 	bne	r2,zero,403d8 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   403c4:	00800284 	movi	r2,10
   403c8:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   403cc:	00800284 	movi	r2,10
   403d0:	e0bffc05 	stb	r2,-16(fp)
   403d4:	00000b06 	br	40404 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   403d8:	e0bfff83 	ldbu	r2,-2(fp)
   403dc:	10803fcc 	andi	r2,r2,255
   403e0:	01400284 	movi	r5,10
   403e4:	1009883a 	mov	r4,r2
   403e8:	00418480 	call	41848 <__udivsi3>
   403ec:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   403f0:	e0bfff83 	ldbu	r2,-2(fp)
   403f4:	e0fffc43 	ldbu	r3,-15(fp)
   403f8:	18fffda4 	muli	r3,r3,-10
   403fc:	10c5883a 	add	r2,r2,r3
   40400:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40404:	e0bffd43 	ldbu	r2,-11(fp)
   40408:	10c03fcc 	andi	r3,r2,255
   4040c:	00800134 	movhi	r2,4
   40410:	108def04 	addi	r2,r2,14268
   40414:	10c5883a 	add	r2,r2,r3
   40418:	10800003 	ldbu	r2,0(r2)
   4041c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40420:	e0bffd03 	ldbu	r2,-12(fp)
   40424:	10c03fcc 	andi	r3,r2,255
   40428:	00800134 	movhi	r2,4
   4042c:	108def04 	addi	r2,r2,14268
   40430:	10c5883a 	add	r2,r2,r3
   40434:	10800003 	ldbu	r2,0(r2)
   40438:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4043c:	e0bffcc3 	ldbu	r2,-13(fp)
   40440:	10c03fcc 	andi	r3,r2,255
   40444:	00800134 	movhi	r2,4
   40448:	108def04 	addi	r2,r2,14268
   4044c:	10c5883a 	add	r2,r2,r3
   40450:	10800003 	ldbu	r2,0(r2)
   40454:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   40458:	e0bffc83 	ldbu	r2,-14(fp)
   4045c:	10c03fcc 	andi	r3,r2,255
   40460:	00800134 	movhi	r2,4
   40464:	108def04 	addi	r2,r2,14268
   40468:	10c5883a 	add	r2,r2,r3
   4046c:	10800003 	ldbu	r2,0(r2)
   40470:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   40474:	e0bffc43 	ldbu	r2,-15(fp)
   40478:	10c03fcc 	andi	r3,r2,255
   4047c:	00800134 	movhi	r2,4
   40480:	108def04 	addi	r2,r2,14268
   40484:	10c5883a 	add	r2,r2,r3
   40488:	10800003 	ldbu	r2,0(r2)
   4048c:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   40490:	e0bffc03 	ldbu	r2,-16(fp)
   40494:	10c03fcc 	andi	r3,r2,255
   40498:	00800134 	movhi	r2,4
   4049c:	108def04 	addi	r2,r2,14268
   404a0:	10c5883a 	add	r2,r2,r3
   404a4:	10800003 	ldbu	r2,0(r2)
   404a8:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   404ac:	e0bffec3 	ldbu	r2,-5(fp)
   404b0:	10c03fcc 	andi	r3,r2,255
   404b4:	00800234 	movhi	r2,8
   404b8:	10841004 	addi	r2,r2,4160
   404bc:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   404c0:	e0bffe83 	ldbu	r2,-6(fp)
   404c4:	10c03fcc 	andi	r3,r2,255
   404c8:	00800234 	movhi	r2,8
   404cc:	10843404 	addi	r2,r2,4304
   404d0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   404d4:	e0bffe43 	ldbu	r2,-7(fp)
   404d8:	10c03fcc 	andi	r3,r2,255
   404dc:	00800234 	movhi	r2,8
   404e0:	10841404 	addi	r2,r2,4176
   404e4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   404e8:	e0bffe03 	ldbu	r2,-8(fp)
   404ec:	10c03fcc 	andi	r3,r2,255
   404f0:	00800234 	movhi	r2,8
   404f4:	10843004 	addi	r2,r2,4288
   404f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   404fc:	e0bffdc3 	ldbu	r2,-9(fp)
   40500:	10c03fcc 	andi	r3,r2,255
   40504:	00800234 	movhi	r2,8
   40508:	10841804 	addi	r2,r2,4192
   4050c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40510:	e0bffd83 	ldbu	r2,-10(fp)
   40514:	10c03fcc 	andi	r3,r2,255
   40518:	00800234 	movhi	r2,8
   4051c:	10842c04 	addi	r2,r2,4272
   40520:	10c00035 	stwio	r3,0(r2)
   40524:	0001883a 	nop
   40528:	e037883a 	mov	sp,fp
   4052c:	dfc00117 	ldw	ra,4(sp)
   40530:	df000017 	ldw	fp,0(sp)
   40534:	dec00204 	addi	sp,sp,8
   40538:	f800283a 	ret

0004053c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4053c:	defffb04 	addi	sp,sp,-20
   40540:	dfc00415 	stw	ra,16(sp)
   40544:	df000315 	stw	fp,12(sp)
   40548:	df000304 	addi	fp,sp,12
   4054c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   40550:	d8000015 	stw	zero,0(sp)
   40554:	000f883a 	mov	r7,zero
   40558:	e1bfff17 	ldw	r6,-4(fp)
   4055c:	01400044 	movi	r5,1
   40560:	0009883a 	mov	r4,zero
   40564:	00420f80 	call	420f8 <alt_ic_isr_register>
   40568:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4056c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40570:	e037883a 	mov	sp,fp
   40574:	dfc00117 	ldw	ra,4(sp)
   40578:	df000017 	ldw	fp,0(sp)
   4057c:	dec00204 	addi	sp,sp,8
   40580:	f800283a 	ret

00040584 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   40584:	deffff04 	addi	sp,sp,-4
   40588:	df000015 	stw	fp,0(sp)
   4058c:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   40590:	00c001c4 	movi	r3,7
   40594:	00800234 	movhi	r2,8
   40598:	10840104 	addi	r2,r2,4100
   4059c:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   405a0:	0001883a 	nop
   405a4:	e037883a 	mov	sp,fp
   405a8:	df000017 	ldw	fp,0(sp)
   405ac:	dec00104 	addi	sp,sp,4
   405b0:	f800283a 	ret

000405b4 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   405b4:	defffb04 	addi	sp,sp,-20
   405b8:	dfc00415 	stw	ra,16(sp)
   405bc:	df000315 	stw	fp,12(sp)
   405c0:	df000304 	addi	fp,sp,12
   405c4:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   405c8:	d8000015 	stw	zero,0(sp)
   405cc:	000f883a 	mov	r7,zero
   405d0:	e1bfff17 	ldw	r6,-4(fp)
   405d4:	01400084 	movi	r5,2
   405d8:	0009883a 	mov	r4,zero
   405dc:	00420f80 	call	420f8 <alt_ic_isr_register>
   405e0:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   405e4:	e0bffe03 	ldbu	r2,-8(fp)
}
   405e8:	e037883a 	mov	sp,fp
   405ec:	dfc00117 	ldw	ra,4(sp)
   405f0:	df000017 	ldw	fp,0(sp)
   405f4:	dec00204 	addi	sp,sp,8
   405f8:	f800283a 	ret

000405fc <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   405fc:	deffff04 	addi	sp,sp,-4
   40600:	df000015 	stw	fp,0(sp)
   40604:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   40608:	00ffffd4 	movui	r3,65535
   4060c:	00800234 	movhi	r2,8
   40610:	10843e04 	addi	r2,r2,4344
   40614:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40618:	0007883a 	mov	r3,zero
   4061c:	00800234 	movhi	r2,8
   40620:	10843f04 	addi	r2,r2,4348
   40624:	10c00035 	stwio	r3,0(r2)
}
   40628:	0001883a 	nop
   4062c:	e037883a 	mov	sp,fp
   40630:	df000017 	ldw	fp,0(sp)
   40634:	dec00104 	addi	sp,sp,4
   40638:	f800283a 	ret

0004063c <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   4063c:	deffff04 	addi	sp,sp,-4
   40640:	df000015 	stw	fp,0(sp)
   40644:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40648:	0007883a 	mov	r3,zero
   4064c:	00800234 	movhi	r2,8
   40650:	10842404 	addi	r2,r2,4240
   40654:	10c00035 	stwio	r3,0(r2)
}
   40658:	0001883a 	nop
   4065c:	e037883a 	mov	sp,fp
   40660:	df000017 	ldw	fp,0(sp)
   40664:	dec00104 	addi	sp,sp,4
   40668:	f800283a 	ret

0004066c <alarmLEDon>:

void alarmLEDon(void) {
   4066c:	deffff04 	addi	sp,sp,-4
   40670:	df000015 	stw	fp,0(sp)
   40674:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40678:	00c00044 	movi	r3,1
   4067c:	00800234 	movhi	r2,8
   40680:	10842404 	addi	r2,r2,4240
   40684:	10c00035 	stwio	r3,0(r2)
}
   40688:	0001883a 	nop
   4068c:	e037883a 	mov	sp,fp
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00104 	addi	sp,sp,4
   40698:	f800283a 	ret

0004069c <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   4069c:	defffe04 	addi	sp,sp,-8
   406a0:	df000115 	stw	fp,4(sp)
   406a4:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   406a8:	00800234 	movhi	r2,8
   406ac:	10842404 	addi	r2,r2,4240
   406b0:	10800037 	ldwio	r2,0(r2)
   406b4:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   406b8:	e0bfff03 	ldbu	r2,-4(fp)
   406bc:	10803fcc 	andi	r2,r2,255
   406c0:	1005003a 	cmpeq	r2,r2,zero
   406c4:	10c03fcc 	andi	r3,r2,255
   406c8:	00800234 	movhi	r2,8
   406cc:	10842404 	addi	r2,r2,4240
   406d0:	10c00035 	stwio	r3,0(r2)
   406d4:	0001883a 	nop
   406d8:	e037883a 	mov	sp,fp
   406dc:	df000017 	ldw	fp,0(sp)
   406e0:	dec00104 	addi	sp,sp,4
   406e4:	f800283a 	ret

000406e8 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   406e8:	defffe04 	addi	sp,sp,-8
   406ec:	dfc00115 	stw	ra,4(sp)
   406f0:	df000015 	stw	fp,0(sp)
   406f4:	d839883a 	mov	fp,sp

  // initialization to "CLOCK" mode
  mode.invalid = FALSE;
   406f8:	d020c905 	stb	zero,-31964(gp)
  mode.display = DISP_CLOCK;
   406fc:	d020c945 	stb	zero,-31963(gp)
  mode.alarm = OFF;
   40700:	d020c985 	stb	zero,-31962(gp)
  mode.config.on = FALSE;
   40704:	d020c9c5 	stb	zero,-31961(gp)
  mode.config.hour = FALSE;
   40708:	d020ca05 	stb	zero,-31960(gp)
  mode.config.minute = FALSE;
   4070c:	d020ca45 	stb	zero,-31959(gp)

  alarmLEDoff();
   40710:	004063c0 	call	4063c <alarmLEDoff>
  resetClockTime();
   40714:	0040eac0 	call	40eac <resetClockTime>
  resetAlarmTime();
   40718:	00413ec0 	call	413ec <resetAlarmTime>
  resetDisplay();
   4071c:	00402800 	call	40280 <resetDisplay>

  /* the callback ISR is passed in for the registration. When the timer peripheral
  fires its interrupt, timerSecondISR() will be called
  timerSecondISR can be preceded with or without & (both pass in the function address); 
  because a function’s name can also be used to get function's address */
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   40720:	01000134 	movhi	r4,4
   40724:	2101e304 	addi	r4,r4,1932
   40728:	004053c0 	call	4053c <timerSecondRegisterISR>
   4072c:	10803fcc 	andi	r2,r2,255
   40730:	1000051e 	bne	r2,zero,40748 <main+0x60>
    printf("timerSecondISR successively registered!\n");
   40734:	01000134 	movhi	r4,4
   40738:	210df204 	addi	r4,r4,14280
   4073c:	0041a0c0 	call	41a0c <puts>
    timerSecondEnableInterrupt();
   40740:	00405840 	call	40584 <timerSecondEnableInterrupt>
   40744:	00000306 	br	40754 <main+0x6c>
  }
  else {
   printf("ERROR: timerSecondISR unsuccessively registered!\n");
   40748:	01000134 	movhi	r4,4
   4074c:	210dfc04 	addi	r4,r4,14320
   40750:	0041a0c0 	call	41a0c <puts>
  }

  if (switchesRegisterISR(&switchesISR) == ISR_REGISTRATION_SUCCESS) {
   40754:	01000134 	movhi	r4,4
   40758:	21023704 	addi	r4,r4,2268
   4075c:	00405b40 	call	405b4 <switchesRegisterISR>
   40760:	10803fcc 	andi	r2,r2,255
   40764:	1000051e 	bne	r2,zero,4077c <main+0x94>
    printf("switchesISR successively registered!\n");
   40768:	01000134 	movhi	r4,4
   4076c:	210e0904 	addi	r4,r4,14372
   40770:	0041a0c0 	call	41a0c <puts>
    switchesEnableInterrupt();
   40774:	00405fc0 	call	405fc <switchesEnableInterrupt>
   40778:	00000306 	br	40788 <main+0xa0>
  }
  else {
   printf("ERROR: switchesISR unsuccessively registered!\n");
   4077c:	01000134 	movhi	r4,4
   40780:	210e1304 	addi	r4,r4,14412
   40784:	0041a0c0 	call	41a0c <puts>





  while(1) {}  
   40788:	003fff06 	br	40788 <__alt_data_end+0xfffd8788>

0004078c <timerSecondISR>:


/* This is the main ISR that is called whenever the second timer fires its interrupt. 
This ISR lets us update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   4078c:	defffc04 	addi	sp,sp,-16
   40790:	dfc00315 	stw	ra,12(sp)
   40794:	df000215 	stw	fp,8(sp)
   40798:	df000204 	addi	fp,sp,8
   4079c:	e13fff15 	stw	r4,-4(fp)

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   407a0:	0007883a 	mov	r3,zero
   407a4:	00800234 	movhi	r2,8
   407a8:	10840004 	addi	r2,r2,4096
   407ac:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   407b0:	d0a0c943 	ldbu	r2,-31963(gp)
   407b4:	10803fcc 	andi	r2,r2,255
   407b8:	1000291e 	bne	r2,zero,40860 <timerSecondISR+0xd4>
    if (mode.config.on == TRUE) {
   407bc:	d0a0c9c3 	ldbu	r2,-31961(gp)
   407c0:	10803fcc 	andi	r2,r2,255
   407c4:	10800058 	cmpnei	r2,r2,1
   407c8:	10000e1e 	bne	r2,zero,40804 <timerSecondISR+0x78>
      // since we're in config, we don't want to carry the digits
      clock = upClockSecond(CARRY_OFF);
   407cc:	0009883a 	mov	r4,zero
   407d0:	0040f680 	call	40f68 <upClockSecond>
   407d4:	e0bffe05 	stb	r2,-8(fp)
   407d8:	1006d23a 	srli	r3,r2,8
   407dc:	1809883a 	mov	r4,r3
   407e0:	00ffffc4 	movi	r3,-1
   407e4:	20c6703a 	and	r3,r4,r3
   407e8:	e0fffe45 	stb	r3,-7(fp)
   407ec:	1004d43a 	srli	r2,r2,16
   407f0:	1007883a 	mov	r3,r2
   407f4:	00bfffc4 	movi	r2,-1
   407f8:	1884703a 	and	r2,r3,r2
   407fc:	e0bffe85 	stb	r2,-6(fp)
   40800:	00001406 	br	40854 <timerSecondISR+0xc8>
    }
    else if (mode.config.on == FALSE) {
   40804:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40808:	10803fcc 	andi	r2,r2,255
   4080c:	10000e1e 	bne	r2,zero,40848 <timerSecondISR+0xbc>

      // since we're not in config, the time should normally count and carry
      clock = upClockSecond(CARRY_ON);
   40810:	01000044 	movi	r4,1
   40814:	0040f680 	call	40f68 <upClockSecond>
   40818:	e0bffe05 	stb	r2,-8(fp)
   4081c:	1006d23a 	srli	r3,r2,8
   40820:	1809883a 	mov	r4,r3
   40824:	00ffffc4 	movi	r3,-1
   40828:	20c6703a 	and	r3,r4,r3
   4082c:	e0fffe45 	stb	r3,-7(fp)
   40830:	1004d43a 	srli	r2,r2,16
   40834:	1007883a 	mov	r3,r2
   40838:	00bfffc4 	movi	r2,-1
   4083c:	1884703a 	and	r2,r3,r2
   40840:	e0bffe85 	stb	r2,-6(fp)
   40844:	00000306 	br	40854 <timerSecondISR+0xc8>
    }
    else {
      printf("ERROR: mode.config.on is invalid\n");
   40848:	01000134 	movhi	r4,4
   4084c:	210e1f04 	addi	r4,r4,14460
   40850:	0041a0c0 	call	41a0c <puts>
    }

    // since the time is being displayed, we'll have to update the display
    updateDisplay(clock);
   40854:	e13ffe17 	ldw	r4,-8(fp)
   40858:	00403000 	call	40300 <updateDisplay>
   4085c:	00000d06 	br	40894 <timerSecondISR+0x108>


  }
  else {
    // since the current time is not being displayed, we don't update the display
    clock = upClockSecond(CARRY_ON);
   40860:	01000044 	movi	r4,1
   40864:	0040f680 	call	40f68 <upClockSecond>
   40868:	e0bffe05 	stb	r2,-8(fp)
   4086c:	1006d23a 	srli	r3,r2,8
   40870:	1809883a 	mov	r4,r3
   40874:	00ffffc4 	movi	r3,-1
   40878:	20c6703a 	and	r3,r4,r3
   4087c:	e0fffe45 	stb	r3,-7(fp)
   40880:	1004d43a 	srli	r2,r2,16
   40884:	1007883a 	mov	r3,r2
   40888:	00bfffc4 	movi	r2,-1
   4088c:	1884703a 	and	r2,r3,r2
   40890:	e0bffe85 	stb	r2,-6(fp)
  }

  // for debugging purposes:
  printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40894:	e0bffe03 	ldbu	r2,-8(fp)
   40898:	10803fcc 	andi	r2,r2,255
   4089c:	e0fffe43 	ldbu	r3,-7(fp)
   408a0:	18c03fcc 	andi	r3,r3,255
   408a4:	e13ffe83 	ldbu	r4,-6(fp)
   408a8:	21003fcc 	andi	r4,r4,255
   408ac:	200f883a 	mov	r7,r4
   408b0:	180d883a 	mov	r6,r3
   408b4:	100b883a 	mov	r5,r2
   408b8:	01000134 	movhi	r4,4
   408bc:	210e2804 	addi	r4,r4,14496
   408c0:	00419400 	call	41940 <printf>
}
   408c4:	0001883a 	nop
   408c8:	e037883a 	mov	sp,fp
   408cc:	dfc00117 	ldw	ra,4(sp)
   408d0:	df000017 	ldw	fp,0(sp)
   408d4:	dec00204 	addi	sp,sp,8
   408d8:	f800283a 	ret

000408dc <switchesISR>:


/* This ISR lets us determine what mode the user is currently requesting.
Once this mode is determined, the system will update the display to match what was requested,
and perform other actions such as turn on/off the alarm and on/off a song*/
void switchesISR(void* isr_context) {
   408dc:	defffa04 	addi	sp,sp,-24
   408e0:	dfc00515 	stw	ra,20(sp)
   408e4:	df000415 	stw	fp,16(sp)
   408e8:	df000404 	addi	fp,sp,16
   408ec:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   408f0:	0007883a 	mov	r3,zero
   408f4:	00800234 	movhi	r2,8
   408f8:	10843f04 	addi	r2,r2,4348
   408fc:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40900:	0040b500 	call	40b50 <determineMode>
   40904:	1009883a 	mov	r4,r2
   40908:	180b883a 	mov	r5,r3
   4090c:	e13ffc05 	stb	r4,-16(fp)
   40910:	2004d23a 	srli	r2,r4,8
   40914:	1007883a 	mov	r3,r2
   40918:	00bfffc4 	movi	r2,-1
   4091c:	1884703a 	and	r2,r3,r2
   40920:	e0bffc45 	stb	r2,-15(fp)
   40924:	2004d43a 	srli	r2,r4,16
   40928:	1007883a 	mov	r3,r2
   4092c:	00bfffc4 	movi	r2,-1
   40930:	1884703a 	and	r2,r3,r2
   40934:	e0bffc85 	stb	r2,-14(fp)
   40938:	2004d63a 	srli	r2,r4,24
   4093c:	e0bffcc5 	stb	r2,-13(fp)
   40940:	e17ffd05 	stb	r5,-12(fp)
   40944:	2804d23a 	srli	r2,r5,8
   40948:	1007883a 	mov	r3,r2
   4094c:	00bfffc4 	movi	r2,-1
   40950:	1884703a 	and	r2,r3,r2
   40954:	e0bffd45 	stb	r2,-11(fp)


  /* if an invalid mode is requested, nothing needs to change except for the mode struct
  if however a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40958:	e0bffc03 	ldbu	r2,-16(fp)
   4095c:	10803fcc 	andi	r2,r2,255
   40960:	1000561e 	bne	r2,zero,40abc <switchesISR+0x1e0>

    /* if we're already displaying the same mode that was requested, we don't need 
    need to update the display. Thus we can skip the following if statement*/
    if (mode_request.display != mode.display) {
   40964:	e0fffc43 	ldbu	r3,-15(fp)
   40968:	d0a0c943 	ldbu	r2,-31963(gp)
   4096c:	18c03fcc 	andi	r3,r3,255
   40970:	10803fcc 	andi	r2,r2,255
   40974:	18804726 	beq	r3,r2,40a94 <switchesISR+0x1b8>
      although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well. */
      struct time display;

      switch(mode_request.display) {
   40978:	e0bffc43 	ldbu	r2,-15(fp)
   4097c:	10803fcc 	andi	r2,r2,255
   40980:	10c00060 	cmpeqi	r3,r2,1
   40984:	1800161e 	bne	r3,zero,409e0 <switchesISR+0x104>
   40988:	10c00088 	cmpgei	r3,r2,2
   4098c:	1800021e 	bne	r3,zero,40998 <switchesISR+0xbc>
   40990:	10000626 	beq	r2,zero,409ac <switchesISR+0xd0>
   40994:	00002d06 	br	40a4c <switchesISR+0x170>
   40998:	10c000a0 	cmpeqi	r3,r2,2
   4099c:	18001d1e 	bne	r3,zero,40a14 <switchesISR+0x138>
   409a0:	108000e0 	cmpeqi	r2,r2,3
   409a4:	1000221e 	bne	r2,zero,40a30 <switchesISR+0x154>
   409a8:	00002806 	br	40a4c <switchesISR+0x170>
        case DISP_CLOCK: 
          display = getClockTime();
   409ac:	0040ee40 	call	40ee4 <getClockTime>
   409b0:	e0bffd85 	stb	r2,-10(fp)
   409b4:	1006d23a 	srli	r3,r2,8
   409b8:	1809883a 	mov	r4,r3
   409bc:	00ffffc4 	movi	r3,-1
   409c0:	20c6703a 	and	r3,r4,r3
   409c4:	e0fffdc5 	stb	r3,-9(fp)
   409c8:	1004d43a 	srli	r2,r2,16
   409cc:	1007883a 	mov	r3,r2
   409d0:	00bfffc4 	movi	r2,-1
   409d4:	1884703a 	and	r2,r3,r2
   409d8:	e0bffe05 	stb	r2,-8(fp)
          break;
   409dc:	00001e06 	br	40a58 <switchesISR+0x17c>

        case DISP_ALARM:
          display = getAlarmTime();
   409e0:	00414200 	call	41420 <getAlarmTime>
   409e4:	e0bffd85 	stb	r2,-10(fp)
   409e8:	1006d23a 	srli	r3,r2,8
   409ec:	1809883a 	mov	r4,r3
   409f0:	00ffffc4 	movi	r3,-1
   409f4:	20c6703a 	and	r3,r4,r3
   409f8:	e0fffdc5 	stb	r3,-9(fp)
   409fc:	1004d43a 	srli	r2,r2,16
   40a00:	1007883a 	mov	r3,r2
   40a04:	00bfffc4 	movi	r2,-1
   40a08:	1884703a 	and	r2,r3,r2
   40a0c:	e0bffe05 	stb	r2,-8(fp)
          break;
   40a10:	00001106 	br	40a58 <switchesISR+0x17c>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the volume exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40a14:	00801904 	movi	r2,100
   40a18:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40a1c:	00801904 	movi	r2,100
   40a20:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getVolume();
   40a24:	0040b100 	call	40b10 <getVolume>
   40a28:	e0bffe05 	stb	r2,-8(fp)
          break;
   40a2c:	00000a06 	br	40a58 <switchesISR+0x17c>

        case DISP_SONG:
          /* the current song will be displayed on the "second" 
          7 segment displays. For the moment this means that we're not going
          to check if the song index exceeds 99 (max number that can be displayed with 2 digits) */
          display.hour = DONT_DISPLAY;
   40a30:	00801904 	movi	r2,100
   40a34:	e0bffd85 	stb	r2,-10(fp)
          display.minute = DONT_DISPLAY;
   40a38:	00801904 	movi	r2,100
   40a3c:	e0bffdc5 	stb	r2,-9(fp)
          display.second = getSong();
   40a40:	0040b300 	call	40b30 <getSong>
   40a44:	e0bffe05 	stb	r2,-8(fp)
          // call playSong() here
          break;
   40a48:	00000306 	br	40a58 <switchesISR+0x17c>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40a4c:	01000134 	movhi	r4,4
   40a50:	210e3204 	addi	r4,r4,14536
   40a54:	0041a0c0 	call	41a0c <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40a58:	e0bffd8b 	ldhu	r2,-10(fp)
   40a5c:	e0fffe0b 	ldhu	r3,-8(fp)
   40a60:	18c03fcc 	andi	r3,r3,255
   40a64:	1806943a 	slli	r3,r3,16
   40a68:	1888b03a 	or	r4,r3,r2
   40a6c:	0007883a 	mov	r3,zero
   40a70:	00804034 	movhi	r2,256
   40a74:	10bfffc4 	addi	r2,r2,-1
   40a78:	2084703a 	and	r2,r4,r2
   40a7c:	18ffc02c 	andhi	r3,r3,65280
   40a80:	1884b03a 	or	r2,r3,r2
   40a84:	1007883a 	mov	r3,r2
   40a88:	1809883a 	mov	r4,r3
   40a8c:	00403000 	call	40300 <updateDisplay>
   40a90:	00000306 	br	40aa0 <switchesISR+0x1c4>
    }

    // (mode_request.display == mode.display)
    else { 
      printf("The requested display mode is already active\n");
   40a94:	01000134 	movhi	r4,4
   40a98:	210e3d04 	addi	r4,r4,14580
   40a9c:	0041a0c0 	call	41a0c <puts>
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40aa0:	e0bffc83 	ldbu	r2,-14(fp)
   40aa4:	10803fcc 	andi	r2,r2,255
   40aa8:	1000021e 	bne	r2,zero,40ab4 <switchesISR+0x1d8>
      alarmLEDoff();
   40aac:	004063c0 	call	4063c <alarmLEDoff>
   40ab0:	00000506 	br	40ac8 <switchesISR+0x1ec>
      }
    }

    // (mode_request.alarm == ON)
    else {
      alarmLEDon();
   40ab4:	004066c0 	call	4066c <alarmLEDon>
   40ab8:	00000306 	br	40ac8 <switchesISR+0x1ec>
    }
  }

  // (mode_request.invalid == TRUE)
  else {
    printf("ERROR: An invalid mode was requested\n");
   40abc:	01000134 	movhi	r4,4
   40ac0:	210e4904 	addi	r4,r4,14628
   40ac4:	0041a0c0 	call	41a0c <puts>
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40ac8:	e0bffc03 	ldbu	r2,-16(fp)
   40acc:	d0a0c905 	stb	r2,-31964(gp)
   40ad0:	e0bffc43 	ldbu	r2,-15(fp)
   40ad4:	d0a0c945 	stb	r2,-31963(gp)
   40ad8:	e0bffc83 	ldbu	r2,-14(fp)
   40adc:	d0a0c985 	stb	r2,-31962(gp)
   40ae0:	e0bffcc3 	ldbu	r2,-13(fp)
   40ae4:	d0a0c9c5 	stb	r2,-31961(gp)
   40ae8:	e0bffd03 	ldbu	r2,-12(fp)
   40aec:	d0a0ca05 	stb	r2,-31960(gp)
   40af0:	e0bffd43 	ldbu	r2,-11(fp)
   40af4:	d0a0ca45 	stb	r2,-31959(gp)
  return;
   40af8:	0001883a 	nop

}
   40afc:	e037883a 	mov	sp,fp
   40b00:	dfc00117 	ldw	ra,4(sp)
   40b04:	df000017 	ldw	fp,0(sp)
   40b08:	dec00204 	addi	sp,sp,8
   40b0c:	f800283a 	ret

00040b10 <getVolume>:
#include "pwm.h"

uint8_t volume = 5;

uint8_t getVolume(void) {
   40b10:	deffff04 	addi	sp,sp,-4
   40b14:	df000015 	stw	fp,0(sp)
   40b18:	d839883a 	mov	fp,sp
  return volume;
   40b1c:	d0a00003 	ldbu	r2,-32768(gp)
   40b20:	e037883a 	mov	sp,fp
   40b24:	df000017 	ldw	fp,0(sp)
   40b28:	dec00104 	addi	sp,sp,4
   40b2c:	f800283a 	ret

00040b30 <getSong>:
#include "rtttl.h"

uint8_t song_index = 0;

uint8_t getSong(void) {
   40b30:	deffff04 	addi	sp,sp,-4
   40b34:	df000015 	stw	fp,0(sp)
   40b38:	d839883a 	mov	fp,sp
  return song_index;
   40b3c:	d0a0ca83 	ldbu	r2,-31958(gp)
   40b40:	e037883a 	mov	sp,fp
   40b44:	df000017 	ldw	fp,0(sp)
   40b48:	dec00104 	addi	sp,sp,4
   40b4c:	f800283a 	ret

00040b50 <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   40b50:	defff904 	addi	sp,sp,-28
   40b54:	dfc00615 	stw	ra,24(sp)
   40b58:	df000515 	stw	fp,20(sp)
   40b5c:	dc400415 	stw	r17,16(sp)
   40b60:	dc000315 	stw	r16,12(sp)
   40b64:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   40b68:	00800234 	movhi	r2,8
   40b6c:	10843c04 	addi	r2,r2,4336
   40b70:	10800037 	ldwio	r2,0(r2)
   40b74:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   40b78:	e0bffd0b 	ldhu	r2,-12(fp)
   40b7c:	10bfffcc 	andi	r2,r2,65535
   40b80:	1009883a 	mov	r4,r2
   40b84:	0040dcc0 	call	40dcc <checkInvalidMode>
   40b88:	10803fcc 	andi	r2,r2,255
   40b8c:	10800058 	cmpnei	r2,r2,1
   40b90:	10000f1e 	bne	r2,zero,40bd0 <determineMode+0x80>
    mode.invalid = TRUE;
   40b94:	00800044 	movi	r2,1
   40b98:	d0a0cac5 	stb	r2,-31957(gp)
    return mode;
   40b9c:	d0a0cac3 	ldbu	r2,-31957(gp)
   40ba0:	e0bffb45 	stb	r2,-19(fp)
   40ba4:	d0a0cb03 	ldbu	r2,-31956(gp)
   40ba8:	e0bffb85 	stb	r2,-18(fp)
   40bac:	d0a0cb43 	ldbu	r2,-31955(gp)
   40bb0:	e0bffbc5 	stb	r2,-17(fp)
   40bb4:	d0a0cb83 	ldbu	r2,-31954(gp)
   40bb8:	e0bffc05 	stb	r2,-16(fp)
   40bbc:	d0a0cbc3 	ldbu	r2,-31953(gp)
   40bc0:	e0bffc45 	stb	r2,-15(fp)
   40bc4:	d0a0cc03 	ldbu	r2,-31952(gp)
   40bc8:	e0bffc85 	stb	r2,-14(fp)
   40bcc:	00004906 	br	40cf4 <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   40bd0:	d020cac5 	stb	zero,-31957(gp)

    uint8_t i = 0;
   40bd4:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   40bd8:	00000606 	br	40bf4 <determineMode+0xa4>
      i++;
   40bdc:	e0bffb03 	ldbu	r2,-20(fp)
   40be0:	10800044 	addi	r2,r2,1
   40be4:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   40be8:	e0bffb03 	ldbu	r2,-20(fp)
   40bec:	10800218 	cmpnei	r2,r2,8
   40bf0:	10000b26 	beq	r2,zero,40c20 <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   40bf4:	e0fffb03 	ldbu	r3,-20(fp)
   40bf8:	00800134 	movhi	r2,4
   40bfc:	108e5284 	addi	r2,r2,14666
   40c00:	18c00324 	muli	r3,r3,12
   40c04:	10c5883a 	add	r2,r2,r3
   40c08:	10c0000b 	ldhu	r3,0(r2)
   40c0c:	e0bffd0b 	ldhu	r2,-12(fp)
   40c10:	18ffffcc 	andi	r3,r3,65535
   40c14:	10bfffcc 	andi	r2,r2,65535
   40c18:	18bff01e 	bne	r3,r2,40bdc <__alt_data_end+0xfffd8bdc>
   40c1c:	00000106 	br	40c24 <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   40c20:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   40c24:	e0fffb03 	ldbu	r3,-20(fp)
   40c28:	00800134 	movhi	r2,4
   40c2c:	108e5284 	addi	r2,r2,14666
   40c30:	18c00324 	muli	r3,r3,12
   40c34:	10c5883a 	add	r2,r2,r3
   40c38:	10800084 	addi	r2,r2,2
   40c3c:	1080000b 	ldhu	r2,0(r2)
   40c40:	d0a0cb05 	stb	r2,-31956(gp)
    mode.config.on = mode_lookup_table[i][2];
   40c44:	e0fffb03 	ldbu	r3,-20(fp)
   40c48:	00800134 	movhi	r2,4
   40c4c:	108e5284 	addi	r2,r2,14666
   40c50:	18c00324 	muli	r3,r3,12
   40c54:	10c5883a 	add	r2,r2,r3
   40c58:	10800104 	addi	r2,r2,4
   40c5c:	1080000b 	ldhu	r2,0(r2)
   40c60:	d0a0cb85 	stb	r2,-31954(gp)
    mode.config.hour = mode_lookup_table[i][3];
   40c64:	e0fffb03 	ldbu	r3,-20(fp)
   40c68:	00800134 	movhi	r2,4
   40c6c:	108e5284 	addi	r2,r2,14666
   40c70:	18c00324 	muli	r3,r3,12
   40c74:	10c5883a 	add	r2,r2,r3
   40c78:	10800184 	addi	r2,r2,6
   40c7c:	1080000b 	ldhu	r2,0(r2)
   40c80:	d0a0cbc5 	stb	r2,-31953(gp)
    mode.config.minute = mode_lookup_table[i][4];
   40c84:	e0fffb03 	ldbu	r3,-20(fp)
   40c88:	00800134 	movhi	r2,4
   40c8c:	108e5284 	addi	r2,r2,14666
   40c90:	18c00324 	muli	r3,r3,12
   40c94:	10c5883a 	add	r2,r2,r3
   40c98:	10800204 	addi	r2,r2,8
   40c9c:	1080000b 	ldhu	r2,0(r2)
   40ca0:	d0a0cc05 	stb	r2,-31952(gp)
    mode.alarm = mode_lookup_table[i][5];
   40ca4:	e0fffb03 	ldbu	r3,-20(fp)
   40ca8:	00800134 	movhi	r2,4
   40cac:	108e5284 	addi	r2,r2,14666
   40cb0:	18c00324 	muli	r3,r3,12
   40cb4:	10c5883a 	add	r2,r2,r3
   40cb8:	10800284 	addi	r2,r2,10
   40cbc:	1080000b 	ldhu	r2,0(r2)
   40cc0:	d0a0cb45 	stb	r2,-31955(gp)

    return mode;
   40cc4:	d0a0cac3 	ldbu	r2,-31957(gp)
   40cc8:	e0bffb45 	stb	r2,-19(fp)
   40ccc:	d0a0cb03 	ldbu	r2,-31956(gp)
   40cd0:	e0bffb85 	stb	r2,-18(fp)
   40cd4:	d0a0cb43 	ldbu	r2,-31955(gp)
   40cd8:	e0bffbc5 	stb	r2,-17(fp)
   40cdc:	d0a0cb83 	ldbu	r2,-31954(gp)
   40ce0:	e0bffc05 	stb	r2,-16(fp)
   40ce4:	d0a0cbc3 	ldbu	r2,-31953(gp)
   40ce8:	e0bffc45 	stb	r2,-15(fp)
   40cec:	d0a0cc03 	ldbu	r2,-31952(gp)
   40cf0:	e0bffc85 	stb	r2,-14(fp)
   40cf4:	0005883a 	mov	r2,zero
   40cf8:	e0fffb43 	ldbu	r3,-19(fp)
   40cfc:	18c03fcc 	andi	r3,r3,255
   40d00:	013fc004 	movi	r4,-256
   40d04:	1104703a 	and	r2,r2,r4
   40d08:	10c4b03a 	or	r2,r2,r3
   40d0c:	e0fffb83 	ldbu	r3,-18(fp)
   40d10:	18c03fcc 	andi	r3,r3,255
   40d14:	1808923a 	slli	r4,r3,8
   40d18:	00fffff4 	movhi	r3,65535
   40d1c:	18c03fc4 	addi	r3,r3,255
   40d20:	10c4703a 	and	r2,r2,r3
   40d24:	1104b03a 	or	r2,r2,r4
   40d28:	e0fffbc3 	ldbu	r3,-17(fp)
   40d2c:	18c03fcc 	andi	r3,r3,255
   40d30:	1808943a 	slli	r4,r3,16
   40d34:	00ffc074 	movhi	r3,65281
   40d38:	18ffffc4 	addi	r3,r3,-1
   40d3c:	10c4703a 	and	r2,r2,r3
   40d40:	1104b03a 	or	r2,r2,r4
   40d44:	e0fffc03 	ldbu	r3,-16(fp)
   40d48:	1808963a 	slli	r4,r3,24
   40d4c:	00c04034 	movhi	r3,256
   40d50:	18ffffc4 	addi	r3,r3,-1
   40d54:	10c4703a 	and	r2,r2,r3
   40d58:	1104b03a 	or	r2,r2,r4
   40d5c:	0009883a 	mov	r4,zero
   40d60:	e0fffc43 	ldbu	r3,-15(fp)
   40d64:	18c03fcc 	andi	r3,r3,255
   40d68:	017fc004 	movi	r5,-256
   40d6c:	2148703a 	and	r4,r4,r5
   40d70:	20c6b03a 	or	r3,r4,r3
   40d74:	1809883a 	mov	r4,r3
   40d78:	e0fffc83 	ldbu	r3,-14(fp)
   40d7c:	18c03fcc 	andi	r3,r3,255
   40d80:	180a923a 	slli	r5,r3,8
   40d84:	00fffff4 	movhi	r3,65535
   40d88:	18c03fc4 	addi	r3,r3,255
   40d8c:	20c6703a 	and	r3,r4,r3
   40d90:	1946b03a 	or	r3,r3,r5
   40d94:	1809883a 	mov	r4,r3
   40d98:	1021883a 	mov	r16,r2
   40d9c:	2023883a 	mov	r17,r4
   40da0:	8007883a 	mov	r3,r16
   40da4:	8809883a 	mov	r4,r17
  }

}
   40da8:	1805883a 	mov	r2,r3
   40dac:	2007883a 	mov	r3,r4
   40db0:	e6fffe04 	addi	sp,fp,-8
   40db4:	dfc00317 	ldw	ra,12(sp)
   40db8:	df000217 	ldw	fp,8(sp)
   40dbc:	dc400117 	ldw	r17,4(sp)
   40dc0:	dc000017 	ldw	r16,0(sp)
   40dc4:	dec00404 	addi	sp,sp,16
   40dc8:	f800283a 	ret

00040dcc <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   40dcc:	defffc04 	addi	sp,sp,-16
   40dd0:	dfc00315 	stw	ra,12(sp)
   40dd4:	df000215 	stw	fp,8(sp)
   40dd8:	df000204 	addi	fp,sp,8
   40ddc:	2005883a 	mov	r2,r4
   40de0:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   40de4:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   40de8:	e0bffe03 	ldbu	r2,-8(fp)
   40dec:	108000d8 	cmpnei	r2,r2,3
   40df0:	10000e26 	beq	r2,zero,40e2c <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   40df4:	e0bffe03 	ldbu	r2,-8(fp)
   40df8:	1087883a 	add	r3,r2,r2
   40dfc:	d0a00084 	addi	r2,gp,-32766
   40e00:	1885883a 	add	r2,r3,r2
   40e04:	1080000b 	ldhu	r2,0(r2)
   40e08:	10ffffcc 	andi	r3,r2,65535
   40e0c:	e0bfff0b 	ldhu	r2,-4(fp)
   40e10:	1880021e 	bne	r3,r2,40e1c <checkInvalidMode+0x50>
      return INVALID;
   40e14:	00800044 	movi	r2,1
   40e18:	00000e06 	br	40e54 <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   40e1c:	e0bffe03 	ldbu	r2,-8(fp)
   40e20:	10800044 	addi	r2,r2,1
   40e24:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   40e28:	003fef06 	br	40de8 <__alt_data_end+0xfffd8de8>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   40e2c:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   40e30:	e0bfff0b 	ldhu	r2,-4(fp)
   40e34:	1009883a 	mov	r4,r2
   40e38:	0040e680 	call	40e68 <isPowerOfTwoOrZero>
   40e3c:	10803fcc 	andi	r2,r2,255
   40e40:	10800058 	cmpnei	r2,r2,1
   40e44:	1000021e 	bne	r2,zero,40e50 <checkInvalidMode+0x84>
    return VALID;
   40e48:	0005883a 	mov	r2,zero
   40e4c:	00000106 	br	40e54 <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   40e50:	00800044 	movi	r2,1
  }
}
   40e54:	e037883a 	mov	sp,fp
   40e58:	dfc00117 	ldw	ra,4(sp)
   40e5c:	df000017 	ldw	fp,0(sp)
   40e60:	dec00204 	addi	sp,sp,8
   40e64:	f800283a 	ret

00040e68 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   40e68:	defffe04 	addi	sp,sp,-8
   40e6c:	df000115 	stw	fp,4(sp)
   40e70:	df000104 	addi	fp,sp,4
   40e74:	2005883a 	mov	r2,r4
   40e78:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   40e7c:	e0ffff0b 	ldhu	r3,-4(fp)
   40e80:	e0bfff0b 	ldhu	r2,-4(fp)
   40e84:	10bfffc4 	addi	r2,r2,-1
   40e88:	1884703a 	and	r2,r3,r2
   40e8c:	1000021e 	bne	r2,zero,40e98 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   40e90:	00800044 	movi	r2,1
   40e94:	00000106 	br	40e9c <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   40e98:	0005883a 	mov	r2,zero
  }
   40e9c:	e037883a 	mov	sp,fp
   40ea0:	df000017 	ldw	fp,0(sp)
   40ea4:	dec00104 	addi	sp,sp,4
   40ea8:	f800283a 	ret

00040eac <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   40eac:	deffff04 	addi	sp,sp,-4
   40eb0:	df000015 	stw	fp,0(sp)
   40eb4:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   40eb8:	008002c4 	movi	r2,11
   40ebc:	d0a0cd05 	stb	r2,-31948(gp)
  clock.minute = reset_clock_value[1];
   40ec0:	00800ec4 	movi	r2,59
   40ec4:	d0a0cd45 	stb	r2,-31947(gp)
  clock.second = reset_clock_value[2];
   40ec8:	0005883a 	mov	r2,zero
   40ecc:	d0a0cd85 	stb	r2,-31946(gp)
}
   40ed0:	0001883a 	nop
   40ed4:	e037883a 	mov	sp,fp
   40ed8:	df000017 	ldw	fp,0(sp)
   40edc:	dec00104 	addi	sp,sp,4
   40ee0:	f800283a 	ret

00040ee4 <getClockTime>:

struct time getClockTime(void) {
   40ee4:	defffe04 	addi	sp,sp,-8
   40ee8:	df000115 	stw	fp,4(sp)
   40eec:	df000104 	addi	fp,sp,4
  return clock;
   40ef0:	d0a0cd03 	ldbu	r2,-31948(gp)
   40ef4:	e0bfff05 	stb	r2,-4(fp)
   40ef8:	d0a0cd43 	ldbu	r2,-31947(gp)
   40efc:	e0bfff45 	stb	r2,-3(fp)
   40f00:	d0a0cd83 	ldbu	r2,-31946(gp)
   40f04:	e0bfff85 	stb	r2,-2(fp)
   40f08:	0005883a 	mov	r2,zero
   40f0c:	e0ffff03 	ldbu	r3,-4(fp)
   40f10:	18c03fcc 	andi	r3,r3,255
   40f14:	013fc004 	movi	r4,-256
   40f18:	1104703a 	and	r2,r2,r4
   40f1c:	10c4b03a 	or	r2,r2,r3
   40f20:	e0ffff43 	ldbu	r3,-3(fp)
   40f24:	18c03fcc 	andi	r3,r3,255
   40f28:	1808923a 	slli	r4,r3,8
   40f2c:	00fffff4 	movhi	r3,65535
   40f30:	18c03fc4 	addi	r3,r3,255
   40f34:	10c4703a 	and	r2,r2,r3
   40f38:	1104b03a 	or	r2,r2,r4
   40f3c:	e0ffff83 	ldbu	r3,-2(fp)
   40f40:	18c03fcc 	andi	r3,r3,255
   40f44:	1808943a 	slli	r4,r3,16
   40f48:	00ffc074 	movhi	r3,65281
   40f4c:	18ffffc4 	addi	r3,r3,-1
   40f50:	10c4703a 	and	r2,r2,r3
   40f54:	1104b03a 	or	r2,r2,r4
}
   40f58:	e037883a 	mov	sp,fp
   40f5c:	df000017 	ldw	fp,0(sp)
   40f60:	dec00104 	addi	sp,sp,4
   40f64:	f800283a 	ret

00040f68 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   40f68:	defffc04 	addi	sp,sp,-16
   40f6c:	dfc00315 	stw	ra,12(sp)
   40f70:	df000215 	stw	fp,8(sp)
   40f74:	df000204 	addi	fp,sp,8
   40f78:	2005883a 	mov	r2,r4
   40f7c:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   40f80:	d0a0cd83 	ldbu	r2,-31946(gp)
   40f84:	10803fcc 	andi	r2,r2,255
   40f88:	10800ed8 	cmpnei	r2,r2,59
   40f8c:	1000071e 	bne	r2,zero,40fac <upClockSecond+0x44>
    clock.second = 0;
   40f90:	d020cd85 	stb	zero,-31946(gp)
    
    if (carry_setting == CARRY_ON) {
   40f94:	e0bfff03 	ldbu	r2,-4(fp)
   40f98:	10800058 	cmpnei	r2,r2,1
   40f9c:	1000061e 	bne	r2,zero,40fb8 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   40fa0:	01000044 	movi	r4,1
   40fa4:	00410340 	call	41034 <upClockMinute>
   40fa8:	00000306 	br	40fb8 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   40fac:	d0a0cd83 	ldbu	r2,-31946(gp)
   40fb0:	10800044 	addi	r2,r2,1
   40fb4:	d0a0cd85 	stb	r2,-31946(gp)
  }
  return clock;
   40fb8:	d0a0cd03 	ldbu	r2,-31948(gp)
   40fbc:	e0bffe05 	stb	r2,-8(fp)
   40fc0:	d0a0cd43 	ldbu	r2,-31947(gp)
   40fc4:	e0bffe45 	stb	r2,-7(fp)
   40fc8:	d0a0cd83 	ldbu	r2,-31946(gp)
   40fcc:	e0bffe85 	stb	r2,-6(fp)
   40fd0:	0005883a 	mov	r2,zero
   40fd4:	e0fffe03 	ldbu	r3,-8(fp)
   40fd8:	18c03fcc 	andi	r3,r3,255
   40fdc:	013fc004 	movi	r4,-256
   40fe0:	1104703a 	and	r2,r2,r4
   40fe4:	10c4b03a 	or	r2,r2,r3
   40fe8:	e0fffe43 	ldbu	r3,-7(fp)
   40fec:	18c03fcc 	andi	r3,r3,255
   40ff0:	1808923a 	slli	r4,r3,8
   40ff4:	00fffff4 	movhi	r3,65535
   40ff8:	18c03fc4 	addi	r3,r3,255
   40ffc:	10c4703a 	and	r2,r2,r3
   41000:	1104b03a 	or	r2,r2,r4
   41004:	e0fffe83 	ldbu	r3,-6(fp)
   41008:	18c03fcc 	andi	r3,r3,255
   4100c:	1808943a 	slli	r4,r3,16
   41010:	00ffc074 	movhi	r3,65281
   41014:	18ffffc4 	addi	r3,r3,-1
   41018:	10c4703a 	and	r2,r2,r3
   4101c:	1104b03a 	or	r2,r2,r4
}
   41020:	e037883a 	mov	sp,fp
   41024:	dfc00117 	ldw	ra,4(sp)
   41028:	df000017 	ldw	fp,0(sp)
   4102c:	dec00204 	addi	sp,sp,8
   41030:	f800283a 	ret

00041034 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   41034:	defffc04 	addi	sp,sp,-16
   41038:	dfc00315 	stw	ra,12(sp)
   4103c:	df000215 	stw	fp,8(sp)
   41040:	df000204 	addi	fp,sp,8
   41044:	2005883a 	mov	r2,r4
   41048:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   4104c:	d0a0cd43 	ldbu	r2,-31947(gp)
   41050:	10803fcc 	andi	r2,r2,255
   41054:	10800ed8 	cmpnei	r2,r2,59
   41058:	1000061e 	bne	r2,zero,41074 <upClockMinute+0x40>
    clock.minute = 0;
   4105c:	d020cd45 	stb	zero,-31947(gp)
    
    if (carry_setting == CARRY_ON) {
   41060:	e0bfff03 	ldbu	r2,-4(fp)
   41064:	10800058 	cmpnei	r2,r2,1
   41068:	1000051e 	bne	r2,zero,41080 <upClockMinute+0x4c>
      upClockHour();
   4106c:	00410fc0 	call	410fc <upClockHour>
   41070:	00000306 	br	41080 <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   41074:	d0a0cd43 	ldbu	r2,-31947(gp)
   41078:	10800044 	addi	r2,r2,1
   4107c:	d0a0cd45 	stb	r2,-31947(gp)
  }
  return clock;
   41080:	d0a0cd03 	ldbu	r2,-31948(gp)
   41084:	e0bffe05 	stb	r2,-8(fp)
   41088:	d0a0cd43 	ldbu	r2,-31947(gp)
   4108c:	e0bffe45 	stb	r2,-7(fp)
   41090:	d0a0cd83 	ldbu	r2,-31946(gp)
   41094:	e0bffe85 	stb	r2,-6(fp)
   41098:	0005883a 	mov	r2,zero
   4109c:	e0fffe03 	ldbu	r3,-8(fp)
   410a0:	18c03fcc 	andi	r3,r3,255
   410a4:	013fc004 	movi	r4,-256
   410a8:	1104703a 	and	r2,r2,r4
   410ac:	10c4b03a 	or	r2,r2,r3
   410b0:	e0fffe43 	ldbu	r3,-7(fp)
   410b4:	18c03fcc 	andi	r3,r3,255
   410b8:	1808923a 	slli	r4,r3,8
   410bc:	00fffff4 	movhi	r3,65535
   410c0:	18c03fc4 	addi	r3,r3,255
   410c4:	10c4703a 	and	r2,r2,r3
   410c8:	1104b03a 	or	r2,r2,r4
   410cc:	e0fffe83 	ldbu	r3,-6(fp)
   410d0:	18c03fcc 	andi	r3,r3,255
   410d4:	1808943a 	slli	r4,r3,16
   410d8:	00ffc074 	movhi	r3,65281
   410dc:	18ffffc4 	addi	r3,r3,-1
   410e0:	10c4703a 	and	r2,r2,r3
   410e4:	1104b03a 	or	r2,r2,r4
}
   410e8:	e037883a 	mov	sp,fp
   410ec:	dfc00117 	ldw	ra,4(sp)
   410f0:	df000017 	ldw	fp,0(sp)
   410f4:	dec00204 	addi	sp,sp,8
   410f8:	f800283a 	ret

000410fc <upClockHour>:

// HOURS
struct time upClockHour(void) {
   410fc:	defffe04 	addi	sp,sp,-8
   41100:	df000115 	stw	fp,4(sp)
   41104:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   41108:	d0a0cd03 	ldbu	r2,-31948(gp)
   4110c:	10c03fcc 	andi	r3,r2,255
   41110:	d0a002c3 	ldbu	r2,-32757(gp)
   41114:	10803fcc 	andi	r2,r2,255
   41118:	10bfffc4 	addi	r2,r2,-1
   4111c:	1880021e 	bne	r3,r2,41128 <upClockHour+0x2c>
    clock.hour = 0;
   41120:	d020cd05 	stb	zero,-31948(gp)
   41124:	00000306 	br	41134 <upClockHour+0x38>
  }
  else {
    clock.hour++;
   41128:	d0a0cd03 	ldbu	r2,-31948(gp)
   4112c:	10800044 	addi	r2,r2,1
   41130:	d0a0cd05 	stb	r2,-31948(gp)
  }
  return clock;
   41134:	d0a0cd03 	ldbu	r2,-31948(gp)
   41138:	e0bfff05 	stb	r2,-4(fp)
   4113c:	d0a0cd43 	ldbu	r2,-31947(gp)
   41140:	e0bfff45 	stb	r2,-3(fp)
   41144:	d0a0cd83 	ldbu	r2,-31946(gp)
   41148:	e0bfff85 	stb	r2,-2(fp)
   4114c:	0005883a 	mov	r2,zero
   41150:	e0ffff03 	ldbu	r3,-4(fp)
   41154:	18c03fcc 	andi	r3,r3,255
   41158:	013fc004 	movi	r4,-256
   4115c:	1104703a 	and	r2,r2,r4
   41160:	10c4b03a 	or	r2,r2,r3
   41164:	e0ffff43 	ldbu	r3,-3(fp)
   41168:	18c03fcc 	andi	r3,r3,255
   4116c:	1808923a 	slli	r4,r3,8
   41170:	00fffff4 	movhi	r3,65535
   41174:	18c03fc4 	addi	r3,r3,255
   41178:	10c4703a 	and	r2,r2,r3
   4117c:	1104b03a 	or	r2,r2,r4
   41180:	e0ffff83 	ldbu	r3,-2(fp)
   41184:	18c03fcc 	andi	r3,r3,255
   41188:	1808943a 	slli	r4,r3,16
   4118c:	00ffc074 	movhi	r3,65281
   41190:	18ffffc4 	addi	r3,r3,-1
   41194:	10c4703a 	and	r2,r2,r3
   41198:	1104b03a 	or	r2,r2,r4
}
   4119c:	e037883a 	mov	sp,fp
   411a0:	df000017 	ldw	fp,0(sp)
   411a4:	dec00104 	addi	sp,sp,4
   411a8:	f800283a 	ret

000411ac <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   411ac:	defffc04 	addi	sp,sp,-16
   411b0:	dfc00315 	stw	ra,12(sp)
   411b4:	df000215 	stw	fp,8(sp)
   411b8:	df000204 	addi	fp,sp,8
   411bc:	2005883a 	mov	r2,r4
   411c0:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   411c4:	d0a0cd83 	ldbu	r2,-31946(gp)
   411c8:	10803fcc 	andi	r2,r2,255
   411cc:	1000081e 	bne	r2,zero,411f0 <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   411d0:	00800ec4 	movi	r2,59
   411d4:	d0a0cd85 	stb	r2,-31946(gp)
    
    if (carry_setting == CARRY_ON) {
   411d8:	e0bfff03 	ldbu	r2,-4(fp)
   411dc:	10800058 	cmpnei	r2,r2,1
   411e0:	1000061e 	bne	r2,zero,411fc <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   411e4:	01000044 	movi	r4,1
   411e8:	00412780 	call	41278 <downClockMinute>
   411ec:	00000306 	br	411fc <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   411f0:	d0a0cd83 	ldbu	r2,-31946(gp)
   411f4:	10bfffc4 	addi	r2,r2,-1
   411f8:	d0a0cd85 	stb	r2,-31946(gp)
  }
  return clock;
   411fc:	d0a0cd03 	ldbu	r2,-31948(gp)
   41200:	e0bffe05 	stb	r2,-8(fp)
   41204:	d0a0cd43 	ldbu	r2,-31947(gp)
   41208:	e0bffe45 	stb	r2,-7(fp)
   4120c:	d0a0cd83 	ldbu	r2,-31946(gp)
   41210:	e0bffe85 	stb	r2,-6(fp)
   41214:	0005883a 	mov	r2,zero
   41218:	e0fffe03 	ldbu	r3,-8(fp)
   4121c:	18c03fcc 	andi	r3,r3,255
   41220:	013fc004 	movi	r4,-256
   41224:	1104703a 	and	r2,r2,r4
   41228:	10c4b03a 	or	r2,r2,r3
   4122c:	e0fffe43 	ldbu	r3,-7(fp)
   41230:	18c03fcc 	andi	r3,r3,255
   41234:	1808923a 	slli	r4,r3,8
   41238:	00fffff4 	movhi	r3,65535
   4123c:	18c03fc4 	addi	r3,r3,255
   41240:	10c4703a 	and	r2,r2,r3
   41244:	1104b03a 	or	r2,r2,r4
   41248:	e0fffe83 	ldbu	r3,-6(fp)
   4124c:	18c03fcc 	andi	r3,r3,255
   41250:	1808943a 	slli	r4,r3,16
   41254:	00ffc074 	movhi	r3,65281
   41258:	18ffffc4 	addi	r3,r3,-1
   4125c:	10c4703a 	and	r2,r2,r3
   41260:	1104b03a 	or	r2,r2,r4
}
   41264:	e037883a 	mov	sp,fp
   41268:	dfc00117 	ldw	ra,4(sp)
   4126c:	df000017 	ldw	fp,0(sp)
   41270:	dec00204 	addi	sp,sp,8
   41274:	f800283a 	ret

00041278 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   41278:	defffc04 	addi	sp,sp,-16
   4127c:	dfc00315 	stw	ra,12(sp)
   41280:	df000215 	stw	fp,8(sp)
   41284:	df000204 	addi	fp,sp,8
   41288:	2005883a 	mov	r2,r4
   4128c:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   41290:	d0a0cd43 	ldbu	r2,-31947(gp)
   41294:	10803fcc 	andi	r2,r2,255
   41298:	1000071e 	bne	r2,zero,412b8 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   4129c:	00800ec4 	movi	r2,59
   412a0:	d0a0cd45 	stb	r2,-31947(gp)
    
    if (carry_setting == CARRY_ON) {
   412a4:	e0bfff03 	ldbu	r2,-4(fp)
   412a8:	10800058 	cmpnei	r2,r2,1
   412ac:	1000051e 	bne	r2,zero,412c4 <downClockMinute+0x4c>
      downClockHour();
   412b0:	00413400 	call	41340 <downClockHour>
   412b4:	00000306 	br	412c4 <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   412b8:	d0a0cd43 	ldbu	r2,-31947(gp)
   412bc:	10bfffc4 	addi	r2,r2,-1
   412c0:	d0a0cd45 	stb	r2,-31947(gp)
  }
  return clock;
   412c4:	d0a0cd03 	ldbu	r2,-31948(gp)
   412c8:	e0bffe05 	stb	r2,-8(fp)
   412cc:	d0a0cd43 	ldbu	r2,-31947(gp)
   412d0:	e0bffe45 	stb	r2,-7(fp)
   412d4:	d0a0cd83 	ldbu	r2,-31946(gp)
   412d8:	e0bffe85 	stb	r2,-6(fp)
   412dc:	0005883a 	mov	r2,zero
   412e0:	e0fffe03 	ldbu	r3,-8(fp)
   412e4:	18c03fcc 	andi	r3,r3,255
   412e8:	013fc004 	movi	r4,-256
   412ec:	1104703a 	and	r2,r2,r4
   412f0:	10c4b03a 	or	r2,r2,r3
   412f4:	e0fffe43 	ldbu	r3,-7(fp)
   412f8:	18c03fcc 	andi	r3,r3,255
   412fc:	1808923a 	slli	r4,r3,8
   41300:	00fffff4 	movhi	r3,65535
   41304:	18c03fc4 	addi	r3,r3,255
   41308:	10c4703a 	and	r2,r2,r3
   4130c:	1104b03a 	or	r2,r2,r4
   41310:	e0fffe83 	ldbu	r3,-6(fp)
   41314:	18c03fcc 	andi	r3,r3,255
   41318:	1808943a 	slli	r4,r3,16
   4131c:	00ffc074 	movhi	r3,65281
   41320:	18ffffc4 	addi	r3,r3,-1
   41324:	10c4703a 	and	r2,r2,r3
   41328:	1104b03a 	or	r2,r2,r4
}
   4132c:	e037883a 	mov	sp,fp
   41330:	dfc00117 	ldw	ra,4(sp)
   41334:	df000017 	ldw	fp,0(sp)
   41338:	dec00204 	addi	sp,sp,8
   4133c:	f800283a 	ret

00041340 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   41340:	defffe04 	addi	sp,sp,-8
   41344:	df000115 	stw	fp,4(sp)
   41348:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   4134c:	d0a0cd03 	ldbu	r2,-31948(gp)
   41350:	10803fcc 	andi	r2,r2,255
   41354:	1000041e 	bne	r2,zero,41368 <downClockHour+0x28>
    clock.hour = (time_format-1);
   41358:	d0a002c3 	ldbu	r2,-32757(gp)
   4135c:	10bfffc4 	addi	r2,r2,-1
   41360:	d0a0cd05 	stb	r2,-31948(gp)
   41364:	00000306 	br	41374 <downClockHour+0x34>
  }
  else {
    clock.hour--;
   41368:	d0a0cd03 	ldbu	r2,-31948(gp)
   4136c:	10bfffc4 	addi	r2,r2,-1
   41370:	d0a0cd05 	stb	r2,-31948(gp)
  }
  return clock;
   41374:	d0a0cd03 	ldbu	r2,-31948(gp)
   41378:	e0bfff05 	stb	r2,-4(fp)
   4137c:	d0a0cd43 	ldbu	r2,-31947(gp)
   41380:	e0bfff45 	stb	r2,-3(fp)
   41384:	d0a0cd83 	ldbu	r2,-31946(gp)
   41388:	e0bfff85 	stb	r2,-2(fp)
   4138c:	0005883a 	mov	r2,zero
   41390:	e0ffff03 	ldbu	r3,-4(fp)
   41394:	18c03fcc 	andi	r3,r3,255
   41398:	013fc004 	movi	r4,-256
   4139c:	1104703a 	and	r2,r2,r4
   413a0:	10c4b03a 	or	r2,r2,r3
   413a4:	e0ffff43 	ldbu	r3,-3(fp)
   413a8:	18c03fcc 	andi	r3,r3,255
   413ac:	1808923a 	slli	r4,r3,8
   413b0:	00fffff4 	movhi	r3,65535
   413b4:	18c03fc4 	addi	r3,r3,255
   413b8:	10c4703a 	and	r2,r2,r3
   413bc:	1104b03a 	or	r2,r2,r4
   413c0:	e0ffff83 	ldbu	r3,-2(fp)
   413c4:	18c03fcc 	andi	r3,r3,255
   413c8:	1808943a 	slli	r4,r3,16
   413cc:	00ffc074 	movhi	r3,65281
   413d0:	18ffffc4 	addi	r3,r3,-1
   413d4:	10c4703a 	and	r2,r2,r3
   413d8:	1104b03a 	or	r2,r2,r4
}
   413dc:	e037883a 	mov	sp,fp
   413e0:	df000017 	ldw	fp,0(sp)
   413e4:	dec00104 	addi	sp,sp,4
   413e8:	f800283a 	ret

000413ec <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   413ec:	deffff04 	addi	sp,sp,-4
   413f0:	df000015 	stw	fp,0(sp)
   413f4:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   413f8:	d020cc45 	stb	zero,-31951(gp)
   413fc:	d020cc85 	stb	zero,-31950(gp)
   41400:	d020ccc5 	stb	zero,-31949(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   41404:	00801904 	movi	r2,100
   41408:	d0a0ccc5 	stb	r2,-31949(gp)
}
   4140c:	0001883a 	nop
   41410:	e037883a 	mov	sp,fp
   41414:	df000017 	ldw	fp,0(sp)
   41418:	dec00104 	addi	sp,sp,4
   4141c:	f800283a 	ret

00041420 <getAlarmTime>:

struct time getAlarmTime(void) {
   41420:	defffe04 	addi	sp,sp,-8
   41424:	df000115 	stw	fp,4(sp)
   41428:	df000104 	addi	fp,sp,4
  return alarm;
   4142c:	d0a0cc43 	ldbu	r2,-31951(gp)
   41430:	e0bfff05 	stb	r2,-4(fp)
   41434:	d0a0cc83 	ldbu	r2,-31950(gp)
   41438:	e0bfff45 	stb	r2,-3(fp)
   4143c:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41440:	e0bfff85 	stb	r2,-2(fp)
   41444:	0005883a 	mov	r2,zero
   41448:	e0ffff03 	ldbu	r3,-4(fp)
   4144c:	18c03fcc 	andi	r3,r3,255
   41450:	013fc004 	movi	r4,-256
   41454:	1104703a 	and	r2,r2,r4
   41458:	10c4b03a 	or	r2,r2,r3
   4145c:	e0ffff43 	ldbu	r3,-3(fp)
   41460:	18c03fcc 	andi	r3,r3,255
   41464:	1808923a 	slli	r4,r3,8
   41468:	00fffff4 	movhi	r3,65535
   4146c:	18c03fc4 	addi	r3,r3,255
   41470:	10c4703a 	and	r2,r2,r3
   41474:	1104b03a 	or	r2,r2,r4
   41478:	e0ffff83 	ldbu	r3,-2(fp)
   4147c:	18c03fcc 	andi	r3,r3,255
   41480:	1808943a 	slli	r4,r3,16
   41484:	00ffc074 	movhi	r3,65281
   41488:	18ffffc4 	addi	r3,r3,-1
   4148c:	10c4703a 	and	r2,r2,r3
   41490:	1104b03a 	or	r2,r2,r4
}
   41494:	e037883a 	mov	sp,fp
   41498:	df000017 	ldw	fp,0(sp)
   4149c:	dec00104 	addi	sp,sp,4
   414a0:	f800283a 	ret

000414a4 <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute() {
   414a4:	defffe04 	addi	sp,sp,-8
   414a8:	df000115 	stw	fp,4(sp)
   414ac:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   414b0:	d0a0cc83 	ldbu	r2,-31950(gp)
   414b4:	10803fcc 	andi	r2,r2,255
   414b8:	10800ed8 	cmpnei	r2,r2,59
   414bc:	1000021e 	bne	r2,zero,414c8 <upAlarmMinute+0x24>
    alarm.minute = 0;
   414c0:	d020cc85 	stb	zero,-31950(gp)
   414c4:	00000306 	br	414d4 <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   414c8:	d0a0cc83 	ldbu	r2,-31950(gp)
   414cc:	10800044 	addi	r2,r2,1
   414d0:	d0a0cc85 	stb	r2,-31950(gp)
  }
  return alarm;
   414d4:	d0a0cc43 	ldbu	r2,-31951(gp)
   414d8:	e0bfff05 	stb	r2,-4(fp)
   414dc:	d0a0cc83 	ldbu	r2,-31950(gp)
   414e0:	e0bfff45 	stb	r2,-3(fp)
   414e4:	d0a0ccc3 	ldbu	r2,-31949(gp)
   414e8:	e0bfff85 	stb	r2,-2(fp)
   414ec:	0005883a 	mov	r2,zero
   414f0:	e0ffff03 	ldbu	r3,-4(fp)
   414f4:	18c03fcc 	andi	r3,r3,255
   414f8:	013fc004 	movi	r4,-256
   414fc:	1104703a 	and	r2,r2,r4
   41500:	10c4b03a 	or	r2,r2,r3
   41504:	e0ffff43 	ldbu	r3,-3(fp)
   41508:	18c03fcc 	andi	r3,r3,255
   4150c:	1808923a 	slli	r4,r3,8
   41510:	00fffff4 	movhi	r3,65535
   41514:	18c03fc4 	addi	r3,r3,255
   41518:	10c4703a 	and	r2,r2,r3
   4151c:	1104b03a 	or	r2,r2,r4
   41520:	e0ffff83 	ldbu	r3,-2(fp)
   41524:	18c03fcc 	andi	r3,r3,255
   41528:	1808943a 	slli	r4,r3,16
   4152c:	00ffc074 	movhi	r3,65281
   41530:	18ffffc4 	addi	r3,r3,-1
   41534:	10c4703a 	and	r2,r2,r3
   41538:	1104b03a 	or	r2,r2,r4
}
   4153c:	e037883a 	mov	sp,fp
   41540:	df000017 	ldw	fp,0(sp)
   41544:	dec00104 	addi	sp,sp,4
   41548:	f800283a 	ret

0004154c <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   4154c:	defffe04 	addi	sp,sp,-8
   41550:	df000115 	stw	fp,4(sp)
   41554:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   41558:	d0a0cc43 	ldbu	r2,-31951(gp)
   4155c:	10c03fcc 	andi	r3,r2,255
   41560:	d0a002c3 	ldbu	r2,-32757(gp)
   41564:	10803fcc 	andi	r2,r2,255
   41568:	10bfffc4 	addi	r2,r2,-1
   4156c:	1880021e 	bne	r3,r2,41578 <upAlarmHour+0x2c>
    alarm.hour = 0;
   41570:	d020cc45 	stb	zero,-31951(gp)
   41574:	00000306 	br	41584 <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   41578:	d0a0cc43 	ldbu	r2,-31951(gp)
   4157c:	10800044 	addi	r2,r2,1
   41580:	d0a0cc45 	stb	r2,-31951(gp)
  }
  return alarm;
   41584:	d0a0cc43 	ldbu	r2,-31951(gp)
   41588:	e0bfff05 	stb	r2,-4(fp)
   4158c:	d0a0cc83 	ldbu	r2,-31950(gp)
   41590:	e0bfff45 	stb	r2,-3(fp)
   41594:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41598:	e0bfff85 	stb	r2,-2(fp)
   4159c:	0005883a 	mov	r2,zero
   415a0:	e0ffff03 	ldbu	r3,-4(fp)
   415a4:	18c03fcc 	andi	r3,r3,255
   415a8:	013fc004 	movi	r4,-256
   415ac:	1104703a 	and	r2,r2,r4
   415b0:	10c4b03a 	or	r2,r2,r3
   415b4:	e0ffff43 	ldbu	r3,-3(fp)
   415b8:	18c03fcc 	andi	r3,r3,255
   415bc:	1808923a 	slli	r4,r3,8
   415c0:	00fffff4 	movhi	r3,65535
   415c4:	18c03fc4 	addi	r3,r3,255
   415c8:	10c4703a 	and	r2,r2,r3
   415cc:	1104b03a 	or	r2,r2,r4
   415d0:	e0ffff83 	ldbu	r3,-2(fp)
   415d4:	18c03fcc 	andi	r3,r3,255
   415d8:	1808943a 	slli	r4,r3,16
   415dc:	00ffc074 	movhi	r3,65281
   415e0:	18ffffc4 	addi	r3,r3,-1
   415e4:	10c4703a 	and	r2,r2,r3
   415e8:	1104b03a 	or	r2,r2,r4
}
   415ec:	e037883a 	mov	sp,fp
   415f0:	df000017 	ldw	fp,0(sp)
   415f4:	dec00104 	addi	sp,sp,4
   415f8:	f800283a 	ret

000415fc <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute() {
   415fc:	defffe04 	addi	sp,sp,-8
   41600:	df000115 	stw	fp,4(sp)
   41604:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   41608:	d0a0cc83 	ldbu	r2,-31950(gp)
   4160c:	10803fcc 	andi	r2,r2,255
   41610:	1000031e 	bne	r2,zero,41620 <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   41614:	00800ec4 	movi	r2,59
   41618:	d0a0cc85 	stb	r2,-31950(gp)
   4161c:	00000306 	br	4162c <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   41620:	d0a0cc83 	ldbu	r2,-31950(gp)
   41624:	10bfffc4 	addi	r2,r2,-1
   41628:	d0a0cc85 	stb	r2,-31950(gp)
  }
  return alarm;
   4162c:	d0a0cc43 	ldbu	r2,-31951(gp)
   41630:	e0bfff05 	stb	r2,-4(fp)
   41634:	d0a0cc83 	ldbu	r2,-31950(gp)
   41638:	e0bfff45 	stb	r2,-3(fp)
   4163c:	d0a0ccc3 	ldbu	r2,-31949(gp)
   41640:	e0bfff85 	stb	r2,-2(fp)
   41644:	0005883a 	mov	r2,zero
   41648:	e0ffff03 	ldbu	r3,-4(fp)
   4164c:	18c03fcc 	andi	r3,r3,255
   41650:	013fc004 	movi	r4,-256
   41654:	1104703a 	and	r2,r2,r4
   41658:	10c4b03a 	or	r2,r2,r3
   4165c:	e0ffff43 	ldbu	r3,-3(fp)
   41660:	18c03fcc 	andi	r3,r3,255
   41664:	1808923a 	slli	r4,r3,8
   41668:	00fffff4 	movhi	r3,65535
   4166c:	18c03fc4 	addi	r3,r3,255
   41670:	10c4703a 	and	r2,r2,r3
   41674:	1104b03a 	or	r2,r2,r4
   41678:	e0ffff83 	ldbu	r3,-2(fp)
   4167c:	18c03fcc 	andi	r3,r3,255
   41680:	1808943a 	slli	r4,r3,16
   41684:	00ffc074 	movhi	r3,65281
   41688:	18ffffc4 	addi	r3,r3,-1
   4168c:	10c4703a 	and	r2,r2,r3
   41690:	1104b03a 	or	r2,r2,r4
}
   41694:	e037883a 	mov	sp,fp
   41698:	df000017 	ldw	fp,0(sp)
   4169c:	dec00104 	addi	sp,sp,4
   416a0:	f800283a 	ret

000416a4 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   416a4:	defffe04 	addi	sp,sp,-8
   416a8:	df000115 	stw	fp,4(sp)
   416ac:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   416b0:	d0a0cc43 	ldbu	r2,-31951(gp)
   416b4:	10803fcc 	andi	r2,r2,255
   416b8:	1000041e 	bne	r2,zero,416cc <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   416bc:	d0a002c3 	ldbu	r2,-32757(gp)
   416c0:	10bfffc4 	addi	r2,r2,-1
   416c4:	d0a0cc45 	stb	r2,-31951(gp)
   416c8:	00000306 	br	416d8 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   416cc:	d0a0cc43 	ldbu	r2,-31951(gp)
   416d0:	10bfffc4 	addi	r2,r2,-1
   416d4:	d0a0cc45 	stb	r2,-31951(gp)
  }
  return alarm;
   416d8:	d0a0cc43 	ldbu	r2,-31951(gp)
   416dc:	e0bfff05 	stb	r2,-4(fp)
   416e0:	d0a0cc83 	ldbu	r2,-31950(gp)
   416e4:	e0bfff45 	stb	r2,-3(fp)
   416e8:	d0a0ccc3 	ldbu	r2,-31949(gp)
   416ec:	e0bfff85 	stb	r2,-2(fp)
   416f0:	0005883a 	mov	r2,zero
   416f4:	e0ffff03 	ldbu	r3,-4(fp)
   416f8:	18c03fcc 	andi	r3,r3,255
   416fc:	013fc004 	movi	r4,-256
   41700:	1104703a 	and	r2,r2,r4
   41704:	10c4b03a 	or	r2,r2,r3
   41708:	e0ffff43 	ldbu	r3,-3(fp)
   4170c:	18c03fcc 	andi	r3,r3,255
   41710:	1808923a 	slli	r4,r3,8
   41714:	00fffff4 	movhi	r3,65535
   41718:	18c03fc4 	addi	r3,r3,255
   4171c:	10c4703a 	and	r2,r2,r3
   41720:	1104b03a 	or	r2,r2,r4
   41724:	e0ffff83 	ldbu	r3,-2(fp)
   41728:	18c03fcc 	andi	r3,r3,255
   4172c:	1808943a 	slli	r4,r3,16
   41730:	00ffc074 	movhi	r3,65281
   41734:	18ffffc4 	addi	r3,r3,-1
   41738:	10c4703a 	and	r2,r2,r3
   4173c:	1104b03a 	or	r2,r2,r4
}
   41740:	e037883a 	mov	sp,fp
   41744:	df000017 	ldw	fp,0(sp)
   41748:	dec00104 	addi	sp,sp,4
   4174c:	f800283a 	ret

00041750 <__divsi3>:
   41750:	20001b16 	blt	r4,zero,417c0 <__divsi3+0x70>
   41754:	000f883a 	mov	r7,zero
   41758:	28001616 	blt	r5,zero,417b4 <__divsi3+0x64>
   4175c:	200d883a 	mov	r6,r4
   41760:	29001a2e 	bgeu	r5,r4,417cc <__divsi3+0x7c>
   41764:	00800804 	movi	r2,32
   41768:	00c00044 	movi	r3,1
   4176c:	00000106 	br	41774 <__divsi3+0x24>
   41770:	10000d26 	beq	r2,zero,417a8 <__divsi3+0x58>
   41774:	294b883a 	add	r5,r5,r5
   41778:	10bfffc4 	addi	r2,r2,-1
   4177c:	18c7883a 	add	r3,r3,r3
   41780:	293ffb36 	bltu	r5,r4,41770 <__alt_data_end+0xfffd9770>
   41784:	0005883a 	mov	r2,zero
   41788:	18000726 	beq	r3,zero,417a8 <__divsi3+0x58>
   4178c:	0005883a 	mov	r2,zero
   41790:	31400236 	bltu	r6,r5,4179c <__divsi3+0x4c>
   41794:	314dc83a 	sub	r6,r6,r5
   41798:	10c4b03a 	or	r2,r2,r3
   4179c:	1806d07a 	srli	r3,r3,1
   417a0:	280ad07a 	srli	r5,r5,1
   417a4:	183ffa1e 	bne	r3,zero,41790 <__alt_data_end+0xfffd9790>
   417a8:	38000126 	beq	r7,zero,417b0 <__divsi3+0x60>
   417ac:	0085c83a 	sub	r2,zero,r2
   417b0:	f800283a 	ret
   417b4:	014bc83a 	sub	r5,zero,r5
   417b8:	39c0005c 	xori	r7,r7,1
   417bc:	003fe706 	br	4175c <__alt_data_end+0xfffd975c>
   417c0:	0109c83a 	sub	r4,zero,r4
   417c4:	01c00044 	movi	r7,1
   417c8:	003fe306 	br	41758 <__alt_data_end+0xfffd9758>
   417cc:	00c00044 	movi	r3,1
   417d0:	003fee06 	br	4178c <__alt_data_end+0xfffd978c>

000417d4 <__modsi3>:
   417d4:	20001716 	blt	r4,zero,41834 <__modsi3+0x60>
   417d8:	000f883a 	mov	r7,zero
   417dc:	2005883a 	mov	r2,r4
   417e0:	28001216 	blt	r5,zero,4182c <__modsi3+0x58>
   417e4:	2900162e 	bgeu	r5,r4,41840 <__modsi3+0x6c>
   417e8:	01800804 	movi	r6,32
   417ec:	00c00044 	movi	r3,1
   417f0:	00000106 	br	417f8 <__modsi3+0x24>
   417f4:	30000a26 	beq	r6,zero,41820 <__modsi3+0x4c>
   417f8:	294b883a 	add	r5,r5,r5
   417fc:	31bfffc4 	addi	r6,r6,-1
   41800:	18c7883a 	add	r3,r3,r3
   41804:	293ffb36 	bltu	r5,r4,417f4 <__alt_data_end+0xfffd97f4>
   41808:	18000526 	beq	r3,zero,41820 <__modsi3+0x4c>
   4180c:	1806d07a 	srli	r3,r3,1
   41810:	11400136 	bltu	r2,r5,41818 <__modsi3+0x44>
   41814:	1145c83a 	sub	r2,r2,r5
   41818:	280ad07a 	srli	r5,r5,1
   4181c:	183ffb1e 	bne	r3,zero,4180c <__alt_data_end+0xfffd980c>
   41820:	38000126 	beq	r7,zero,41828 <__modsi3+0x54>
   41824:	0085c83a 	sub	r2,zero,r2
   41828:	f800283a 	ret
   4182c:	014bc83a 	sub	r5,zero,r5
   41830:	003fec06 	br	417e4 <__alt_data_end+0xfffd97e4>
   41834:	0109c83a 	sub	r4,zero,r4
   41838:	01c00044 	movi	r7,1
   4183c:	003fe706 	br	417dc <__alt_data_end+0xfffd97dc>
   41840:	00c00044 	movi	r3,1
   41844:	003ff106 	br	4180c <__alt_data_end+0xfffd980c>

00041848 <__udivsi3>:
   41848:	200d883a 	mov	r6,r4
   4184c:	2900152e 	bgeu	r5,r4,418a4 <__udivsi3+0x5c>
   41850:	28001416 	blt	r5,zero,418a4 <__udivsi3+0x5c>
   41854:	00800804 	movi	r2,32
   41858:	00c00044 	movi	r3,1
   4185c:	00000206 	br	41868 <__udivsi3+0x20>
   41860:	10000e26 	beq	r2,zero,4189c <__udivsi3+0x54>
   41864:	28000516 	blt	r5,zero,4187c <__udivsi3+0x34>
   41868:	294b883a 	add	r5,r5,r5
   4186c:	10bfffc4 	addi	r2,r2,-1
   41870:	18c7883a 	add	r3,r3,r3
   41874:	293ffa36 	bltu	r5,r4,41860 <__alt_data_end+0xfffd9860>
   41878:	18000826 	beq	r3,zero,4189c <__udivsi3+0x54>
   4187c:	0005883a 	mov	r2,zero
   41880:	31400236 	bltu	r6,r5,4188c <__udivsi3+0x44>
   41884:	314dc83a 	sub	r6,r6,r5
   41888:	10c4b03a 	or	r2,r2,r3
   4188c:	1806d07a 	srli	r3,r3,1
   41890:	280ad07a 	srli	r5,r5,1
   41894:	183ffa1e 	bne	r3,zero,41880 <__alt_data_end+0xfffd9880>
   41898:	f800283a 	ret
   4189c:	0005883a 	mov	r2,zero
   418a0:	f800283a 	ret
   418a4:	00c00044 	movi	r3,1
   418a8:	003ff406 	br	4187c <__alt_data_end+0xfffd987c>

000418ac <__umodsi3>:
   418ac:	2005883a 	mov	r2,r4
   418b0:	2900122e 	bgeu	r5,r4,418fc <__umodsi3+0x50>
   418b4:	28001116 	blt	r5,zero,418fc <__umodsi3+0x50>
   418b8:	01800804 	movi	r6,32
   418bc:	00c00044 	movi	r3,1
   418c0:	00000206 	br	418cc <__umodsi3+0x20>
   418c4:	30000c26 	beq	r6,zero,418f8 <__umodsi3+0x4c>
   418c8:	28000516 	blt	r5,zero,418e0 <__umodsi3+0x34>
   418cc:	294b883a 	add	r5,r5,r5
   418d0:	31bfffc4 	addi	r6,r6,-1
   418d4:	18c7883a 	add	r3,r3,r3
   418d8:	293ffa36 	bltu	r5,r4,418c4 <__alt_data_end+0xfffd98c4>
   418dc:	18000626 	beq	r3,zero,418f8 <__umodsi3+0x4c>
   418e0:	1806d07a 	srli	r3,r3,1
   418e4:	11400136 	bltu	r2,r5,418ec <__umodsi3+0x40>
   418e8:	1145c83a 	sub	r2,r2,r5
   418ec:	280ad07a 	srli	r5,r5,1
   418f0:	183ffb1e 	bne	r3,zero,418e0 <__alt_data_end+0xfffd98e0>
   418f4:	f800283a 	ret
   418f8:	f800283a 	ret
   418fc:	00c00044 	movi	r3,1
   41900:	003ff706 	br	418e0 <__alt_data_end+0xfffd98e0>

00041904 <_printf_r>:
   41904:	defffd04 	addi	sp,sp,-12
   41908:	dfc00015 	stw	ra,0(sp)
   4190c:	d9800115 	stw	r6,4(sp)
   41910:	d9c00215 	stw	r7,8(sp)
   41914:	20c00217 	ldw	r3,8(r4)
   41918:	01800134 	movhi	r6,4
   4191c:	3187fa04 	addi	r6,r6,8168
   41920:	19800115 	stw	r6,4(r3)
   41924:	280d883a 	mov	r6,r5
   41928:	21400217 	ldw	r5,8(r4)
   4192c:	d9c00104 	addi	r7,sp,4
   41930:	0041aa80 	call	41aa8 <___vfprintf_internal_r>
   41934:	dfc00017 	ldw	ra,0(sp)
   41938:	dec00304 	addi	sp,sp,12
   4193c:	f800283a 	ret

00041940 <printf>:
   41940:	defffc04 	addi	sp,sp,-16
   41944:	dfc00015 	stw	ra,0(sp)
   41948:	d9400115 	stw	r5,4(sp)
   4194c:	d9800215 	stw	r6,8(sp)
   41950:	d9c00315 	stw	r7,12(sp)
   41954:	00800134 	movhi	r2,4
   41958:	108f2a04 	addi	r2,r2,15528
   4195c:	10800017 	ldw	r2,0(r2)
   41960:	01400134 	movhi	r5,4
   41964:	2947fa04 	addi	r5,r5,8168
   41968:	10c00217 	ldw	r3,8(r2)
   4196c:	d9800104 	addi	r6,sp,4
   41970:	19400115 	stw	r5,4(r3)
   41974:	200b883a 	mov	r5,r4
   41978:	11000217 	ldw	r4,8(r2)
   4197c:	0041fcc0 	call	41fcc <__vfprintf_internal>
   41980:	dfc00017 	ldw	ra,0(sp)
   41984:	dec00404 	addi	sp,sp,16
   41988:	f800283a 	ret

0004198c <_puts_r>:
   4198c:	defffd04 	addi	sp,sp,-12
   41990:	dc000015 	stw	r16,0(sp)
   41994:	2021883a 	mov	r16,r4
   41998:	2809883a 	mov	r4,r5
   4199c:	dfc00215 	stw	ra,8(sp)
   419a0:	dc400115 	stw	r17,4(sp)
   419a4:	2823883a 	mov	r17,r5
   419a8:	0041a200 	call	41a20 <strlen>
   419ac:	81400217 	ldw	r5,8(r16)
   419b0:	01000134 	movhi	r4,4
   419b4:	2107fa04 	addi	r4,r4,8168
   419b8:	29000115 	stw	r4,4(r5)
   419bc:	100f883a 	mov	r7,r2
   419c0:	880d883a 	mov	r6,r17
   419c4:	8009883a 	mov	r4,r16
   419c8:	0041fe80 	call	41fe8 <__sfvwrite_small_dev>
   419cc:	00ffffc4 	movi	r3,-1
   419d0:	10c00926 	beq	r2,r3,419f8 <_puts_r+0x6c>
   419d4:	81400217 	ldw	r5,8(r16)
   419d8:	01800134 	movhi	r6,4
   419dc:	01c00044 	movi	r7,1
   419e0:	28800117 	ldw	r2,4(r5)
   419e4:	318e6b04 	addi	r6,r6,14764
   419e8:	8009883a 	mov	r4,r16
   419ec:	103ee83a 	callr	r2
   419f0:	10bfffe0 	cmpeqi	r2,r2,-1
   419f4:	0085c83a 	sub	r2,zero,r2
   419f8:	dfc00217 	ldw	ra,8(sp)
   419fc:	dc400117 	ldw	r17,4(sp)
   41a00:	dc000017 	ldw	r16,0(sp)
   41a04:	dec00304 	addi	sp,sp,12
   41a08:	f800283a 	ret

00041a0c <puts>:
   41a0c:	00800134 	movhi	r2,4
   41a10:	108f2a04 	addi	r2,r2,15528
   41a14:	200b883a 	mov	r5,r4
   41a18:	11000017 	ldw	r4,0(r2)
   41a1c:	004198c1 	jmpi	4198c <_puts_r>

00041a20 <strlen>:
   41a20:	2005883a 	mov	r2,r4
   41a24:	10c00007 	ldb	r3,0(r2)
   41a28:	18000226 	beq	r3,zero,41a34 <strlen+0x14>
   41a2c:	10800044 	addi	r2,r2,1
   41a30:	003ffc06 	br	41a24 <__alt_data_end+0xfffd9a24>
   41a34:	1105c83a 	sub	r2,r2,r4
   41a38:	f800283a 	ret

00041a3c <print_repeat>:
   41a3c:	defffb04 	addi	sp,sp,-20
   41a40:	dc800315 	stw	r18,12(sp)
   41a44:	dc400215 	stw	r17,8(sp)
   41a48:	dc000115 	stw	r16,4(sp)
   41a4c:	dfc00415 	stw	ra,16(sp)
   41a50:	2025883a 	mov	r18,r4
   41a54:	2823883a 	mov	r17,r5
   41a58:	d9800005 	stb	r6,0(sp)
   41a5c:	3821883a 	mov	r16,r7
   41a60:	04000a0e 	bge	zero,r16,41a8c <print_repeat+0x50>
   41a64:	88800117 	ldw	r2,4(r17)
   41a68:	01c00044 	movi	r7,1
   41a6c:	d80d883a 	mov	r6,sp
   41a70:	880b883a 	mov	r5,r17
   41a74:	9009883a 	mov	r4,r18
   41a78:	103ee83a 	callr	r2
   41a7c:	843fffc4 	addi	r16,r16,-1
   41a80:	103ff726 	beq	r2,zero,41a60 <__alt_data_end+0xfffd9a60>
   41a84:	00bfffc4 	movi	r2,-1
   41a88:	00000106 	br	41a90 <print_repeat+0x54>
   41a8c:	0005883a 	mov	r2,zero
   41a90:	dfc00417 	ldw	ra,16(sp)
   41a94:	dc800317 	ldw	r18,12(sp)
   41a98:	dc400217 	ldw	r17,8(sp)
   41a9c:	dc000117 	ldw	r16,4(sp)
   41aa0:	dec00504 	addi	sp,sp,20
   41aa4:	f800283a 	ret

00041aa8 <___vfprintf_internal_r>:
   41aa8:	deffe504 	addi	sp,sp,-108
   41aac:	d8c00804 	addi	r3,sp,32
   41ab0:	df001915 	stw	fp,100(sp)
   41ab4:	ddc01815 	stw	r23,96(sp)
   41ab8:	dd801715 	stw	r22,92(sp)
   41abc:	dd401615 	stw	r21,88(sp)
   41ac0:	dd001515 	stw	r20,84(sp)
   41ac4:	dcc01415 	stw	r19,80(sp)
   41ac8:	dc801315 	stw	r18,76(sp)
   41acc:	dc401215 	stw	r17,72(sp)
   41ad0:	dc001115 	stw	r16,68(sp)
   41ad4:	dfc01a15 	stw	ra,104(sp)
   41ad8:	2027883a 	mov	r19,r4
   41adc:	2839883a 	mov	fp,r5
   41ae0:	382d883a 	mov	r22,r7
   41ae4:	d9800f15 	stw	r6,60(sp)
   41ae8:	0021883a 	mov	r16,zero
   41aec:	d8000e15 	stw	zero,56(sp)
   41af0:	002f883a 	mov	r23,zero
   41af4:	002b883a 	mov	r21,zero
   41af8:	0025883a 	mov	r18,zero
   41afc:	0023883a 	mov	r17,zero
   41b00:	d8000c15 	stw	zero,48(sp)
   41b04:	d8000b15 	stw	zero,44(sp)
   41b08:	0029883a 	mov	r20,zero
   41b0c:	d8c00915 	stw	r3,36(sp)
   41b10:	d8c00f17 	ldw	r3,60(sp)
   41b14:	19000003 	ldbu	r4,0(r3)
   41b18:	20803fcc 	andi	r2,r4,255
   41b1c:	1080201c 	xori	r2,r2,128
   41b20:	10bfe004 	addi	r2,r2,-128
   41b24:	10011c26 	beq	r2,zero,41f98 <___vfprintf_internal_r+0x4f0>
   41b28:	00c00044 	movi	r3,1
   41b2c:	a0c01426 	beq	r20,r3,41b80 <___vfprintf_internal_r+0xd8>
   41b30:	1d000216 	blt	r3,r20,41b3c <___vfprintf_internal_r+0x94>
   41b34:	a0000626 	beq	r20,zero,41b50 <___vfprintf_internal_r+0xa8>
   41b38:	00011306 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41b3c:	01400084 	movi	r5,2
   41b40:	a1401d26 	beq	r20,r5,41bb8 <___vfprintf_internal_r+0x110>
   41b44:	014000c4 	movi	r5,3
   41b48:	a1402926 	beq	r20,r5,41bf0 <___vfprintf_internal_r+0x148>
   41b4c:	00010e06 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41b50:	01400944 	movi	r5,37
   41b54:	1140fb26 	beq	r2,r5,41f44 <___vfprintf_internal_r+0x49c>
   41b58:	e0800117 	ldw	r2,4(fp)
   41b5c:	d9000005 	stb	r4,0(sp)
   41b60:	01c00044 	movi	r7,1
   41b64:	d80d883a 	mov	r6,sp
   41b68:	e00b883a 	mov	r5,fp
   41b6c:	9809883a 	mov	r4,r19
   41b70:	103ee83a 	callr	r2
   41b74:	1000d61e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41b78:	84000044 	addi	r16,r16,1
   41b7c:	00010206 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41b80:	01400c04 	movi	r5,48
   41b84:	1140f826 	beq	r2,r5,41f68 <___vfprintf_internal_r+0x4c0>
   41b88:	01400944 	movi	r5,37
   41b8c:	11400a1e 	bne	r2,r5,41bb8 <___vfprintf_internal_r+0x110>
   41b90:	d8800005 	stb	r2,0(sp)
   41b94:	e0800117 	ldw	r2,4(fp)
   41b98:	a00f883a 	mov	r7,r20
   41b9c:	d80d883a 	mov	r6,sp
   41ba0:	e00b883a 	mov	r5,fp
   41ba4:	9809883a 	mov	r4,r19
   41ba8:	103ee83a 	callr	r2
   41bac:	1000c81e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41bb0:	84000044 	addi	r16,r16,1
   41bb4:	0000f306 	br	41f84 <___vfprintf_internal_r+0x4dc>
   41bb8:	217ff404 	addi	r5,r4,-48
   41bbc:	29403fcc 	andi	r5,r5,255
   41bc0:	00c00244 	movi	r3,9
   41bc4:	19400736 	bltu	r3,r5,41be4 <___vfprintf_internal_r+0x13c>
   41bc8:	00bfffc4 	movi	r2,-1
   41bcc:	88800226 	beq	r17,r2,41bd8 <___vfprintf_internal_r+0x130>
   41bd0:	8c4002a4 	muli	r17,r17,10
   41bd4:	00000106 	br	41bdc <___vfprintf_internal_r+0x134>
   41bd8:	0023883a 	mov	r17,zero
   41bdc:	2c63883a 	add	r17,r5,r17
   41be0:	0000e206 	br	41f6c <___vfprintf_internal_r+0x4c4>
   41be4:	01400b84 	movi	r5,46
   41be8:	1140e426 	beq	r2,r5,41f7c <___vfprintf_internal_r+0x4d4>
   41bec:	05000084 	movi	r20,2
   41bf0:	213ff404 	addi	r4,r4,-48
   41bf4:	21003fcc 	andi	r4,r4,255
   41bf8:	00c00244 	movi	r3,9
   41bfc:	19000736 	bltu	r3,r4,41c1c <___vfprintf_internal_r+0x174>
   41c00:	00bfffc4 	movi	r2,-1
   41c04:	90800226 	beq	r18,r2,41c10 <___vfprintf_internal_r+0x168>
   41c08:	948002a4 	muli	r18,r18,10
   41c0c:	00000106 	br	41c14 <___vfprintf_internal_r+0x16c>
   41c10:	0025883a 	mov	r18,zero
   41c14:	24a5883a 	add	r18,r4,r18
   41c18:	0000db06 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41c1c:	00c01b04 	movi	r3,108
   41c20:	10c0d426 	beq	r2,r3,41f74 <___vfprintf_internal_r+0x4cc>
   41c24:	013fffc4 	movi	r4,-1
   41c28:	91000226 	beq	r18,r4,41c34 <___vfprintf_internal_r+0x18c>
   41c2c:	d8000b15 	stw	zero,44(sp)
   41c30:	00000106 	br	41c38 <___vfprintf_internal_r+0x190>
   41c34:	04800044 	movi	r18,1
   41c38:	01001a44 	movi	r4,105
   41c3c:	11001626 	beq	r2,r4,41c98 <___vfprintf_internal_r+0x1f0>
   41c40:	20800916 	blt	r4,r2,41c68 <___vfprintf_internal_r+0x1c0>
   41c44:	010018c4 	movi	r4,99
   41c48:	11008a26 	beq	r2,r4,41e74 <___vfprintf_internal_r+0x3cc>
   41c4c:	01001904 	movi	r4,100
   41c50:	11001126 	beq	r2,r4,41c98 <___vfprintf_internal_r+0x1f0>
   41c54:	01001604 	movi	r4,88
   41c58:	1100ca1e 	bne	r2,r4,41f84 <___vfprintf_internal_r+0x4dc>
   41c5c:	00c00044 	movi	r3,1
   41c60:	d8c00e15 	stw	r3,56(sp)
   41c64:	00001406 	br	41cb8 <___vfprintf_internal_r+0x210>
   41c68:	01001cc4 	movi	r4,115
   41c6c:	11009a26 	beq	r2,r4,41ed8 <___vfprintf_internal_r+0x430>
   41c70:	20800416 	blt	r4,r2,41c84 <___vfprintf_internal_r+0x1dc>
   41c74:	01001bc4 	movi	r4,111
   41c78:	1100c21e 	bne	r2,r4,41f84 <___vfprintf_internal_r+0x4dc>
   41c7c:	05400204 	movi	r21,8
   41c80:	00000e06 	br	41cbc <___vfprintf_internal_r+0x214>
   41c84:	01001d44 	movi	r4,117
   41c88:	11000c26 	beq	r2,r4,41cbc <___vfprintf_internal_r+0x214>
   41c8c:	01001e04 	movi	r4,120
   41c90:	11000926 	beq	r2,r4,41cb8 <___vfprintf_internal_r+0x210>
   41c94:	0000bb06 	br	41f84 <___vfprintf_internal_r+0x4dc>
   41c98:	b5000104 	addi	r20,r22,4
   41c9c:	b8000726 	beq	r23,zero,41cbc <___vfprintf_internal_r+0x214>
   41ca0:	dd000d15 	stw	r20,52(sp)
   41ca4:	b5800017 	ldw	r22,0(r22)
   41ca8:	b000080e 	bge	r22,zero,41ccc <___vfprintf_internal_r+0x224>
   41cac:	05adc83a 	sub	r22,zero,r22
   41cb0:	02800044 	movi	r10,1
   41cb4:	00000606 	br	41cd0 <___vfprintf_internal_r+0x228>
   41cb8:	05400404 	movi	r21,16
   41cbc:	b0c00104 	addi	r3,r22,4
   41cc0:	d8c00d15 	stw	r3,52(sp)
   41cc4:	b5800017 	ldw	r22,0(r22)
   41cc8:	002f883a 	mov	r23,zero
   41ccc:	0015883a 	mov	r10,zero
   41cd0:	d829883a 	mov	r20,sp
   41cd4:	b0001426 	beq	r22,zero,41d28 <___vfprintf_internal_r+0x280>
   41cd8:	b009883a 	mov	r4,r22
   41cdc:	a80b883a 	mov	r5,r21
   41ce0:	da801015 	stw	r10,64(sp)
   41ce4:	00418480 	call	41848 <__udivsi3>
   41ce8:	1549383a 	mul	r4,r2,r21
   41cec:	00c00244 	movi	r3,9
   41cf0:	da801017 	ldw	r10,64(sp)
   41cf4:	b12dc83a 	sub	r22,r22,r4
   41cf8:	1d800216 	blt	r3,r22,41d04 <___vfprintf_internal_r+0x25c>
   41cfc:	b5800c04 	addi	r22,r22,48
   41d00:	00000506 	br	41d18 <___vfprintf_internal_r+0x270>
   41d04:	d8c00e17 	ldw	r3,56(sp)
   41d08:	18000226 	beq	r3,zero,41d14 <___vfprintf_internal_r+0x26c>
   41d0c:	b5800dc4 	addi	r22,r22,55
   41d10:	00000106 	br	41d18 <___vfprintf_internal_r+0x270>
   41d14:	b58015c4 	addi	r22,r22,87
   41d18:	a5800005 	stb	r22,0(r20)
   41d1c:	a5000044 	addi	r20,r20,1
   41d20:	102d883a 	mov	r22,r2
   41d24:	003feb06 	br	41cd4 <__alt_data_end+0xfffd9cd4>
   41d28:	a6c7c83a 	sub	r3,r20,sp
   41d2c:	d8c00a15 	stw	r3,40(sp)
   41d30:	90c5c83a 	sub	r2,r18,r3
   41d34:	00800a0e 	bge	zero,r2,41d60 <___vfprintf_internal_r+0x2b8>
   41d38:	a085883a 	add	r2,r20,r2
   41d3c:	01400c04 	movi	r5,48
   41d40:	d8c00917 	ldw	r3,36(sp)
   41d44:	a009883a 	mov	r4,r20
   41d48:	a0c0032e 	bgeu	r20,r3,41d58 <___vfprintf_internal_r+0x2b0>
   41d4c:	a5000044 	addi	r20,r20,1
   41d50:	21400005 	stb	r5,0(r4)
   41d54:	a0bffa1e 	bne	r20,r2,41d40 <__alt_data_end+0xfffd9d40>
   41d58:	a6c7c83a 	sub	r3,r20,sp
   41d5c:	d8c00a15 	stw	r3,40(sp)
   41d60:	d8c00a17 	ldw	r3,40(sp)
   41d64:	50d3883a 	add	r9,r10,r3
   41d68:	d8c00b17 	ldw	r3,44(sp)
   41d6c:	8a6dc83a 	sub	r22,r17,r9
   41d70:	18001726 	beq	r3,zero,41dd0 <___vfprintf_internal_r+0x328>
   41d74:	50000a26 	beq	r10,zero,41da0 <___vfprintf_internal_r+0x2f8>
   41d78:	00800b44 	movi	r2,45
   41d7c:	d8800805 	stb	r2,32(sp)
   41d80:	e0800117 	ldw	r2,4(fp)
   41d84:	01c00044 	movi	r7,1
   41d88:	d9800804 	addi	r6,sp,32
   41d8c:	e00b883a 	mov	r5,fp
   41d90:	9809883a 	mov	r4,r19
   41d94:	103ee83a 	callr	r2
   41d98:	10004d1e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41d9c:	84000044 	addi	r16,r16,1
   41da0:	0580070e 	bge	zero,r22,41dc0 <___vfprintf_internal_r+0x318>
   41da4:	b00f883a 	mov	r7,r22
   41da8:	01800c04 	movi	r6,48
   41dac:	e00b883a 	mov	r5,fp
   41db0:	9809883a 	mov	r4,r19
   41db4:	0041a3c0 	call	41a3c <print_repeat>
   41db8:	1000451e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41dbc:	85a1883a 	add	r16,r16,r22
   41dc0:	d8c00a17 	ldw	r3,40(sp)
   41dc4:	a013883a 	mov	r9,r20
   41dc8:	1d2dc83a 	sub	r22,r3,r20
   41dcc:	00002206 	br	41e58 <___vfprintf_internal_r+0x3b0>
   41dd0:	0580090e 	bge	zero,r22,41df8 <___vfprintf_internal_r+0x350>
   41dd4:	b00f883a 	mov	r7,r22
   41dd8:	01800804 	movi	r6,32
   41ddc:	e00b883a 	mov	r5,fp
   41de0:	9809883a 	mov	r4,r19
   41de4:	da801015 	stw	r10,64(sp)
   41de8:	0041a3c0 	call	41a3c <print_repeat>
   41dec:	da801017 	ldw	r10,64(sp)
   41df0:	1000371e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41df4:	85a1883a 	add	r16,r16,r22
   41df8:	503ff126 	beq	r10,zero,41dc0 <__alt_data_end+0xfffd9dc0>
   41dfc:	00800b44 	movi	r2,45
   41e00:	d8800805 	stb	r2,32(sp)
   41e04:	e0800117 	ldw	r2,4(fp)
   41e08:	01c00044 	movi	r7,1
   41e0c:	d9800804 	addi	r6,sp,32
   41e10:	e00b883a 	mov	r5,fp
   41e14:	9809883a 	mov	r4,r19
   41e18:	103ee83a 	callr	r2
   41e1c:	10002c1e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41e20:	84000044 	addi	r16,r16,1
   41e24:	003fe606 	br	41dc0 <__alt_data_end+0xfffd9dc0>
   41e28:	4a7fffc4 	addi	r9,r9,-1
   41e2c:	48800003 	ldbu	r2,0(r9)
   41e30:	01c00044 	movi	r7,1
   41e34:	d9800804 	addi	r6,sp,32
   41e38:	d8800805 	stb	r2,32(sp)
   41e3c:	e0800117 	ldw	r2,4(fp)
   41e40:	e00b883a 	mov	r5,fp
   41e44:	da401015 	stw	r9,64(sp)
   41e48:	9809883a 	mov	r4,r19
   41e4c:	103ee83a 	callr	r2
   41e50:	da401017 	ldw	r9,64(sp)
   41e54:	10001e1e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41e58:	8245c83a 	sub	r2,r16,r9
   41e5c:	4d89883a 	add	r4,r9,r22
   41e60:	a085883a 	add	r2,r20,r2
   41e64:	013ff016 	blt	zero,r4,41e28 <__alt_data_end+0xfffd9e28>
   41e68:	1021883a 	mov	r16,r2
   41e6c:	dd800d17 	ldw	r22,52(sp)
   41e70:	00004406 	br	41f84 <___vfprintf_internal_r+0x4dc>
   41e74:	00800044 	movi	r2,1
   41e78:	1440080e 	bge	r2,r17,41e9c <___vfprintf_internal_r+0x3f4>
   41e7c:	8d3fffc4 	addi	r20,r17,-1
   41e80:	a00f883a 	mov	r7,r20
   41e84:	01800804 	movi	r6,32
   41e88:	e00b883a 	mov	r5,fp
   41e8c:	9809883a 	mov	r4,r19
   41e90:	0041a3c0 	call	41a3c <print_repeat>
   41e94:	10000e1e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41e98:	8521883a 	add	r16,r16,r20
   41e9c:	b0800017 	ldw	r2,0(r22)
   41ea0:	01c00044 	movi	r7,1
   41ea4:	d80d883a 	mov	r6,sp
   41ea8:	d8800005 	stb	r2,0(sp)
   41eac:	e0800117 	ldw	r2,4(fp)
   41eb0:	e00b883a 	mov	r5,fp
   41eb4:	9809883a 	mov	r4,r19
   41eb8:	b5000104 	addi	r20,r22,4
   41ebc:	103ee83a 	callr	r2
   41ec0:	1000031e 	bne	r2,zero,41ed0 <___vfprintf_internal_r+0x428>
   41ec4:	84000044 	addi	r16,r16,1
   41ec8:	a02d883a 	mov	r22,r20
   41ecc:	00002d06 	br	41f84 <___vfprintf_internal_r+0x4dc>
   41ed0:	00bfffc4 	movi	r2,-1
   41ed4:	00003106 	br	41f9c <___vfprintf_internal_r+0x4f4>
   41ed8:	b5000017 	ldw	r20,0(r22)
   41edc:	b0c00104 	addi	r3,r22,4
   41ee0:	d8c00a15 	stw	r3,40(sp)
   41ee4:	a009883a 	mov	r4,r20
   41ee8:	0041a200 	call	41a20 <strlen>
   41eec:	8893c83a 	sub	r9,r17,r2
   41ef0:	102d883a 	mov	r22,r2
   41ef4:	0240090e 	bge	zero,r9,41f1c <___vfprintf_internal_r+0x474>
   41ef8:	480f883a 	mov	r7,r9
   41efc:	01800804 	movi	r6,32
   41f00:	e00b883a 	mov	r5,fp
   41f04:	9809883a 	mov	r4,r19
   41f08:	da401015 	stw	r9,64(sp)
   41f0c:	0041a3c0 	call	41a3c <print_repeat>
   41f10:	da401017 	ldw	r9,64(sp)
   41f14:	103fee1e 	bne	r2,zero,41ed0 <__alt_data_end+0xfffd9ed0>
   41f18:	8261883a 	add	r16,r16,r9
   41f1c:	e0800117 	ldw	r2,4(fp)
   41f20:	b00f883a 	mov	r7,r22
   41f24:	a00d883a 	mov	r6,r20
   41f28:	e00b883a 	mov	r5,fp
   41f2c:	9809883a 	mov	r4,r19
   41f30:	103ee83a 	callr	r2
   41f34:	103fe61e 	bne	r2,zero,41ed0 <__alt_data_end+0xfffd9ed0>
   41f38:	85a1883a 	add	r16,r16,r22
   41f3c:	dd800a17 	ldw	r22,40(sp)
   41f40:	00001006 	br	41f84 <___vfprintf_internal_r+0x4dc>
   41f44:	05c00044 	movi	r23,1
   41f48:	04bfffc4 	movi	r18,-1
   41f4c:	d8000e15 	stw	zero,56(sp)
   41f50:	05400284 	movi	r21,10
   41f54:	9023883a 	mov	r17,r18
   41f58:	d8000c15 	stw	zero,48(sp)
   41f5c:	d8000b15 	stw	zero,44(sp)
   41f60:	b829883a 	mov	r20,r23
   41f64:	00000806 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41f68:	dd000b15 	stw	r20,44(sp)
   41f6c:	05000084 	movi	r20,2
   41f70:	00000506 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41f74:	00c00044 	movi	r3,1
   41f78:	d8c00c15 	stw	r3,48(sp)
   41f7c:	050000c4 	movi	r20,3
   41f80:	00000106 	br	41f88 <___vfprintf_internal_r+0x4e0>
   41f84:	0029883a 	mov	r20,zero
   41f88:	d8c00f17 	ldw	r3,60(sp)
   41f8c:	18c00044 	addi	r3,r3,1
   41f90:	d8c00f15 	stw	r3,60(sp)
   41f94:	003ede06 	br	41b10 <__alt_data_end+0xfffd9b10>
   41f98:	8005883a 	mov	r2,r16
   41f9c:	dfc01a17 	ldw	ra,104(sp)
   41fa0:	df001917 	ldw	fp,100(sp)
   41fa4:	ddc01817 	ldw	r23,96(sp)
   41fa8:	dd801717 	ldw	r22,92(sp)
   41fac:	dd401617 	ldw	r21,88(sp)
   41fb0:	dd001517 	ldw	r20,84(sp)
   41fb4:	dcc01417 	ldw	r19,80(sp)
   41fb8:	dc801317 	ldw	r18,76(sp)
   41fbc:	dc401217 	ldw	r17,72(sp)
   41fc0:	dc001117 	ldw	r16,68(sp)
   41fc4:	dec01b04 	addi	sp,sp,108
   41fc8:	f800283a 	ret

00041fcc <__vfprintf_internal>:
   41fcc:	00800134 	movhi	r2,4
   41fd0:	108f2a04 	addi	r2,r2,15528
   41fd4:	300f883a 	mov	r7,r6
   41fd8:	280d883a 	mov	r6,r5
   41fdc:	200b883a 	mov	r5,r4
   41fe0:	11000017 	ldw	r4,0(r2)
   41fe4:	0041aa81 	jmpi	41aa8 <___vfprintf_internal_r>

00041fe8 <__sfvwrite_small_dev>:
   41fe8:	2880000b 	ldhu	r2,0(r5)
   41fec:	1080020c 	andi	r2,r2,8
   41ff0:	10002126 	beq	r2,zero,42078 <__sfvwrite_small_dev+0x90>
   41ff4:	2880008f 	ldh	r2,2(r5)
   41ff8:	defffa04 	addi	sp,sp,-24
   41ffc:	dc000015 	stw	r16,0(sp)
   42000:	dfc00515 	stw	ra,20(sp)
   42004:	dd000415 	stw	r20,16(sp)
   42008:	dcc00315 	stw	r19,12(sp)
   4200c:	dc800215 	stw	r18,8(sp)
   42010:	dc400115 	stw	r17,4(sp)
   42014:	2821883a 	mov	r16,r5
   42018:	10001216 	blt	r2,zero,42064 <__sfvwrite_small_dev+0x7c>
   4201c:	2027883a 	mov	r19,r4
   42020:	3025883a 	mov	r18,r6
   42024:	3823883a 	mov	r17,r7
   42028:	05010004 	movi	r20,1024
   4202c:	04400b0e 	bge	zero,r17,4205c <__sfvwrite_small_dev+0x74>
   42030:	880f883a 	mov	r7,r17
   42034:	a440010e 	bge	r20,r17,4203c <__sfvwrite_small_dev+0x54>
   42038:	01c10004 	movi	r7,1024
   4203c:	8140008f 	ldh	r5,2(r16)
   42040:	900d883a 	mov	r6,r18
   42044:	9809883a 	mov	r4,r19
   42048:	00420a00 	call	420a0 <_write_r>
   4204c:	0080050e 	bge	zero,r2,42064 <__sfvwrite_small_dev+0x7c>
   42050:	88a3c83a 	sub	r17,r17,r2
   42054:	90a5883a 	add	r18,r18,r2
   42058:	003ff406 	br	4202c <__alt_data_end+0xfffda02c>
   4205c:	0005883a 	mov	r2,zero
   42060:	00000706 	br	42080 <__sfvwrite_small_dev+0x98>
   42064:	8080000b 	ldhu	r2,0(r16)
   42068:	10801014 	ori	r2,r2,64
   4206c:	8080000d 	sth	r2,0(r16)
   42070:	00bfffc4 	movi	r2,-1
   42074:	00000206 	br	42080 <__sfvwrite_small_dev+0x98>
   42078:	00bfffc4 	movi	r2,-1
   4207c:	f800283a 	ret
   42080:	dfc00517 	ldw	ra,20(sp)
   42084:	dd000417 	ldw	r20,16(sp)
   42088:	dcc00317 	ldw	r19,12(sp)
   4208c:	dc800217 	ldw	r18,8(sp)
   42090:	dc400117 	ldw	r17,4(sp)
   42094:	dc000017 	ldw	r16,0(sp)
   42098:	dec00604 	addi	sp,sp,24
   4209c:	f800283a 	ret

000420a0 <_write_r>:
   420a0:	defffd04 	addi	sp,sp,-12
   420a4:	dc000015 	stw	r16,0(sp)
   420a8:	04000134 	movhi	r16,4
   420ac:	dc400115 	stw	r17,4(sp)
   420b0:	840ff404 	addi	r16,r16,16336
   420b4:	2023883a 	mov	r17,r4
   420b8:	2809883a 	mov	r4,r5
   420bc:	300b883a 	mov	r5,r6
   420c0:	380d883a 	mov	r6,r7
   420c4:	dfc00215 	stw	ra,8(sp)
   420c8:	80000015 	stw	zero,0(r16)
   420cc:	004252c0 	call	4252c <write>
   420d0:	00ffffc4 	movi	r3,-1
   420d4:	10c0031e 	bne	r2,r3,420e4 <_write_r+0x44>
   420d8:	80c00017 	ldw	r3,0(r16)
   420dc:	18000126 	beq	r3,zero,420e4 <_write_r+0x44>
   420e0:	88c00015 	stw	r3,0(r17)
   420e4:	dfc00217 	ldw	ra,8(sp)
   420e8:	dc400117 	ldw	r17,4(sp)
   420ec:	dc000017 	ldw	r16,0(sp)
   420f0:	dec00304 	addi	sp,sp,12
   420f4:	f800283a 	ret

000420f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   420f8:	defff904 	addi	sp,sp,-28
   420fc:	dfc00615 	stw	ra,24(sp)
   42100:	df000515 	stw	fp,20(sp)
   42104:	df000504 	addi	fp,sp,20
   42108:	e13ffc15 	stw	r4,-16(fp)
   4210c:	e17ffd15 	stw	r5,-12(fp)
   42110:	e1bffe15 	stw	r6,-8(fp)
   42114:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   42118:	e0800217 	ldw	r2,8(fp)
   4211c:	d8800015 	stw	r2,0(sp)
   42120:	e1ffff17 	ldw	r7,-4(fp)
   42124:	e1bffe17 	ldw	r6,-8(fp)
   42128:	e17ffd17 	ldw	r5,-12(fp)
   4212c:	e13ffc17 	ldw	r4,-16(fp)
   42130:	00422a80 	call	422a8 <alt_iic_isr_register>
}  
   42134:	e037883a 	mov	sp,fp
   42138:	dfc00117 	ldw	ra,4(sp)
   4213c:	df000017 	ldw	fp,0(sp)
   42140:	dec00204 	addi	sp,sp,8
   42144:	f800283a 	ret

00042148 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   42148:	defff904 	addi	sp,sp,-28
   4214c:	df000615 	stw	fp,24(sp)
   42150:	df000604 	addi	fp,sp,24
   42154:	e13ffe15 	stw	r4,-8(fp)
   42158:	e17fff15 	stw	r5,-4(fp)
   4215c:	e0bfff17 	ldw	r2,-4(fp)
   42160:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42164:	0005303a 	rdctl	r2,status
   42168:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4216c:	e0fffb17 	ldw	r3,-20(fp)
   42170:	00bfff84 	movi	r2,-2
   42174:	1884703a 	and	r2,r3,r2
   42178:	1001703a 	wrctl	status,r2
  
  return context;
   4217c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42180:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   42184:	00c00044 	movi	r3,1
   42188:	e0bffa17 	ldw	r2,-24(fp)
   4218c:	1884983a 	sll	r2,r3,r2
   42190:	1007883a 	mov	r3,r2
   42194:	d0a0cf17 	ldw	r2,-31940(gp)
   42198:	1884b03a 	or	r2,r3,r2
   4219c:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   421a0:	d0a0cf17 	ldw	r2,-31940(gp)
   421a4:	100170fa 	wrctl	ienable,r2
   421a8:	e0bffc17 	ldw	r2,-16(fp)
   421ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   421b0:	e0bffd17 	ldw	r2,-12(fp)
   421b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   421b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   421bc:	0001883a 	nop
}
   421c0:	e037883a 	mov	sp,fp
   421c4:	df000017 	ldw	fp,0(sp)
   421c8:	dec00104 	addi	sp,sp,4
   421cc:	f800283a 	ret

000421d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   421d0:	defff904 	addi	sp,sp,-28
   421d4:	df000615 	stw	fp,24(sp)
   421d8:	df000604 	addi	fp,sp,24
   421dc:	e13ffe15 	stw	r4,-8(fp)
   421e0:	e17fff15 	stw	r5,-4(fp)
   421e4:	e0bfff17 	ldw	r2,-4(fp)
   421e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   421ec:	0005303a 	rdctl	r2,status
   421f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   421f4:	e0fffb17 	ldw	r3,-20(fp)
   421f8:	00bfff84 	movi	r2,-2
   421fc:	1884703a 	and	r2,r3,r2
   42200:	1001703a 	wrctl	status,r2
  
  return context;
   42204:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42208:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4220c:	00c00044 	movi	r3,1
   42210:	e0bffa17 	ldw	r2,-24(fp)
   42214:	1884983a 	sll	r2,r3,r2
   42218:	0084303a 	nor	r2,zero,r2
   4221c:	1007883a 	mov	r3,r2
   42220:	d0a0cf17 	ldw	r2,-31940(gp)
   42224:	1884703a 	and	r2,r3,r2
   42228:	d0a0cf15 	stw	r2,-31940(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4222c:	d0a0cf17 	ldw	r2,-31940(gp)
   42230:	100170fa 	wrctl	ienable,r2
   42234:	e0bffc17 	ldw	r2,-16(fp)
   42238:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4223c:	e0bffd17 	ldw	r2,-12(fp)
   42240:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42244:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   42248:	0001883a 	nop
}
   4224c:	e037883a 	mov	sp,fp
   42250:	df000017 	ldw	fp,0(sp)
   42254:	dec00104 	addi	sp,sp,4
   42258:	f800283a 	ret

0004225c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4225c:	defffc04 	addi	sp,sp,-16
   42260:	df000315 	stw	fp,12(sp)
   42264:	df000304 	addi	fp,sp,12
   42268:	e13ffe15 	stw	r4,-8(fp)
   4226c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   42270:	000530fa 	rdctl	r2,ienable
   42274:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   42278:	00c00044 	movi	r3,1
   4227c:	e0bfff17 	ldw	r2,-4(fp)
   42280:	1884983a 	sll	r2,r3,r2
   42284:	1007883a 	mov	r3,r2
   42288:	e0bffd17 	ldw	r2,-12(fp)
   4228c:	1884703a 	and	r2,r3,r2
   42290:	1004c03a 	cmpne	r2,r2,zero
   42294:	10803fcc 	andi	r2,r2,255
}
   42298:	e037883a 	mov	sp,fp
   4229c:	df000017 	ldw	fp,0(sp)
   422a0:	dec00104 	addi	sp,sp,4
   422a4:	f800283a 	ret

000422a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   422a8:	defff504 	addi	sp,sp,-44
   422ac:	dfc00a15 	stw	ra,40(sp)
   422b0:	df000915 	stw	fp,36(sp)
   422b4:	df000904 	addi	fp,sp,36
   422b8:	e13ffc15 	stw	r4,-16(fp)
   422bc:	e17ffd15 	stw	r5,-12(fp)
   422c0:	e1bffe15 	stw	r6,-8(fp)
   422c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   422c8:	00bffa84 	movi	r2,-22
   422cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   422d0:	e0bffd17 	ldw	r2,-12(fp)
   422d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   422d8:	e0bff817 	ldw	r2,-32(fp)
   422dc:	10800808 	cmpgei	r2,r2,32
   422e0:	1000271e 	bne	r2,zero,42380 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   422e4:	0005303a 	rdctl	r2,status
   422e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   422ec:	e0fffb17 	ldw	r3,-20(fp)
   422f0:	00bfff84 	movi	r2,-2
   422f4:	1884703a 	and	r2,r3,r2
   422f8:	1001703a 	wrctl	status,r2
  
  return context;
   422fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   42300:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   42304:	00800134 	movhi	r2,4
   42308:	108ffc04 	addi	r2,r2,16368
   4230c:	e0fff817 	ldw	r3,-32(fp)
   42310:	180690fa 	slli	r3,r3,3
   42314:	10c5883a 	add	r2,r2,r3
   42318:	e0fffe17 	ldw	r3,-8(fp)
   4231c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   42320:	00800134 	movhi	r2,4
   42324:	108ffc04 	addi	r2,r2,16368
   42328:	e0fff817 	ldw	r3,-32(fp)
   4232c:	180690fa 	slli	r3,r3,3
   42330:	10c5883a 	add	r2,r2,r3
   42334:	10800104 	addi	r2,r2,4
   42338:	e0ffff17 	ldw	r3,-4(fp)
   4233c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   42340:	e0bffe17 	ldw	r2,-8(fp)
   42344:	10000526 	beq	r2,zero,4235c <alt_iic_isr_register+0xb4>
   42348:	e0bff817 	ldw	r2,-32(fp)
   4234c:	100b883a 	mov	r5,r2
   42350:	e13ffc17 	ldw	r4,-16(fp)
   42354:	00421480 	call	42148 <alt_ic_irq_enable>
   42358:	00000406 	br	4236c <alt_iic_isr_register+0xc4>
   4235c:	e0bff817 	ldw	r2,-32(fp)
   42360:	100b883a 	mov	r5,r2
   42364:	e13ffc17 	ldw	r4,-16(fp)
   42368:	00421d00 	call	421d0 <alt_ic_irq_disable>
   4236c:	e0bff715 	stw	r2,-36(fp)
   42370:	e0bffa17 	ldw	r2,-24(fp)
   42374:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42378:	e0bff917 	ldw	r2,-28(fp)
   4237c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   42380:	e0bff717 	ldw	r2,-36(fp)
}
   42384:	e037883a 	mov	sp,fp
   42388:	dfc00117 	ldw	ra,4(sp)
   4238c:	df000017 	ldw	fp,0(sp)
   42390:	dec00204 	addi	sp,sp,8
   42394:	f800283a 	ret

00042398 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   42398:	defffc04 	addi	sp,sp,-16
   4239c:	df000315 	stw	fp,12(sp)
   423a0:	df000304 	addi	fp,sp,12
   423a4:	e13ffd15 	stw	r4,-12(fp)
   423a8:	e17ffe15 	stw	r5,-8(fp)
   423ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   423b0:	e0fffe17 	ldw	r3,-8(fp)
   423b4:	e0bffd17 	ldw	r2,-12(fp)
   423b8:	18800c26 	beq	r3,r2,423ec <alt_load_section+0x54>
  {
    while( to != end )
   423bc:	00000806 	br	423e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   423c0:	e0bffe17 	ldw	r2,-8(fp)
   423c4:	10c00104 	addi	r3,r2,4
   423c8:	e0fffe15 	stw	r3,-8(fp)
   423cc:	e0fffd17 	ldw	r3,-12(fp)
   423d0:	19000104 	addi	r4,r3,4
   423d4:	e13ffd15 	stw	r4,-12(fp)
   423d8:	18c00017 	ldw	r3,0(r3)
   423dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   423e0:	e0fffe17 	ldw	r3,-8(fp)
   423e4:	e0bfff17 	ldw	r2,-4(fp)
   423e8:	18bff51e 	bne	r3,r2,423c0 <__alt_data_end+0xfffda3c0>
    {
      *to++ = *from++;
    }
  }
}
   423ec:	0001883a 	nop
   423f0:	e037883a 	mov	sp,fp
   423f4:	df000017 	ldw	fp,0(sp)
   423f8:	dec00104 	addi	sp,sp,4
   423fc:	f800283a 	ret

00042400 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   42400:	defffe04 	addi	sp,sp,-8
   42404:	dfc00115 	stw	ra,4(sp)
   42408:	df000015 	stw	fp,0(sp)
   4240c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   42410:	01800134 	movhi	r6,4
   42414:	318f3404 	addi	r6,r6,15568
   42418:	01400134 	movhi	r5,4
   4241c:	294e7904 	addi	r5,r5,14820
   42420:	01000134 	movhi	r4,4
   42424:	210f3404 	addi	r4,r4,15568
   42428:	00423980 	call	42398 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4242c:	01800134 	movhi	r6,4
   42430:	31809104 	addi	r6,r6,580
   42434:	01400134 	movhi	r5,4
   42438:	29400804 	addi	r5,r5,32
   4243c:	01000134 	movhi	r4,4
   42440:	21000804 	addi	r4,r4,32
   42444:	00423980 	call	42398 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   42448:	01800134 	movhi	r6,4
   4244c:	318e7904 	addi	r6,r6,14820
   42450:	01400134 	movhi	r5,4
   42454:	294def04 	addi	r5,r5,14268
   42458:	01000134 	movhi	r4,4
   4245c:	210def04 	addi	r4,r4,14268
   42460:	00423980 	call	42398 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   42464:	0042b200 	call	42b20 <alt_dcache_flush_all>
  alt_icache_flush_all();
   42468:	0042c4c0 	call	42c4c <alt_icache_flush_all>
}
   4246c:	0001883a 	nop
   42470:	e037883a 	mov	sp,fp
   42474:	dfc00117 	ldw	ra,4(sp)
   42478:	df000017 	ldw	fp,0(sp)
   4247c:	dec00204 	addi	sp,sp,8
   42480:	f800283a 	ret

00042484 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   42484:	defffd04 	addi	sp,sp,-12
   42488:	dfc00215 	stw	ra,8(sp)
   4248c:	df000115 	stw	fp,4(sp)
   42490:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   42494:	0009883a 	mov	r4,zero
   42498:	00426580 	call	42658 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4249c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   424a0:	00426900 	call	42690 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   424a4:	01800134 	movhi	r6,4
   424a8:	318e6c04 	addi	r6,r6,14768
   424ac:	01400134 	movhi	r5,4
   424b0:	294e6c04 	addi	r5,r5,14768
   424b4:	01000134 	movhi	r4,4
   424b8:	210e6c04 	addi	r4,r4,14768
   424bc:	0042de00 	call	42de0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   424c0:	d0a0d017 	ldw	r2,-31936(gp)
   424c4:	d0e0d117 	ldw	r3,-31932(gp)
   424c8:	d120d217 	ldw	r4,-31928(gp)
   424cc:	200d883a 	mov	r6,r4
   424d0:	180b883a 	mov	r5,r3
   424d4:	1009883a 	mov	r4,r2
   424d8:	00406e80 	call	406e8 <main>
   424dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   424e0:	01000044 	movi	r4,1
   424e4:	0042a500 	call	42a50 <close>
  exit (result);
   424e8:	e13fff17 	ldw	r4,-4(fp)
   424ec:	00435a80 	call	435a8 <exit>

000424f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   424f0:	defffe04 	addi	sp,sp,-8
   424f4:	dfc00115 	stw	ra,4(sp)
   424f8:	df000015 	stw	fp,0(sp)
   424fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42500:	d0a00b17 	ldw	r2,-32724(gp)
   42504:	10000326 	beq	r2,zero,42514 <alt_get_errno+0x24>
   42508:	d0a00b17 	ldw	r2,-32724(gp)
   4250c:	103ee83a 	callr	r2
   42510:	00000106 	br	42518 <alt_get_errno+0x28>
   42514:	d0a0ce04 	addi	r2,gp,-31944
}
   42518:	e037883a 	mov	sp,fp
   4251c:	dfc00117 	ldw	ra,4(sp)
   42520:	df000017 	ldw	fp,0(sp)
   42524:	dec00204 	addi	sp,sp,8
   42528:	f800283a 	ret

0004252c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4252c:	defff904 	addi	sp,sp,-28
   42530:	dfc00615 	stw	ra,24(sp)
   42534:	df000515 	stw	fp,20(sp)
   42538:	df000504 	addi	fp,sp,20
   4253c:	e13ffd15 	stw	r4,-12(fp)
   42540:	e17ffe15 	stw	r5,-8(fp)
   42544:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   42548:	e0bffd17 	ldw	r2,-12(fp)
   4254c:	10000616 	blt	r2,zero,42568 <write+0x3c>
   42550:	e0bffd17 	ldw	r2,-12(fp)
   42554:	10c00324 	muli	r3,r2,12
   42558:	00800134 	movhi	r2,4
   4255c:	108ec604 	addi	r2,r2,15128
   42560:	1885883a 	add	r2,r3,r2
   42564:	00000106 	br	4256c <write+0x40>
   42568:	0005883a 	mov	r2,zero
   4256c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   42570:	e0bffb17 	ldw	r2,-20(fp)
   42574:	10002126 	beq	r2,zero,425fc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   42578:	e0bffb17 	ldw	r2,-20(fp)
   4257c:	10800217 	ldw	r2,8(r2)
   42580:	108000cc 	andi	r2,r2,3
   42584:	10001826 	beq	r2,zero,425e8 <write+0xbc>
   42588:	e0bffb17 	ldw	r2,-20(fp)
   4258c:	10800017 	ldw	r2,0(r2)
   42590:	10800617 	ldw	r2,24(r2)
   42594:	10001426 	beq	r2,zero,425e8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   42598:	e0bffb17 	ldw	r2,-20(fp)
   4259c:	10800017 	ldw	r2,0(r2)
   425a0:	10800617 	ldw	r2,24(r2)
   425a4:	e0ffff17 	ldw	r3,-4(fp)
   425a8:	180d883a 	mov	r6,r3
   425ac:	e17ffe17 	ldw	r5,-8(fp)
   425b0:	e13ffb17 	ldw	r4,-20(fp)
   425b4:	103ee83a 	callr	r2
   425b8:	e0bffc15 	stw	r2,-16(fp)
   425bc:	e0bffc17 	ldw	r2,-16(fp)
   425c0:	1000070e 	bge	r2,zero,425e0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   425c4:	00424f00 	call	424f0 <alt_get_errno>
   425c8:	1007883a 	mov	r3,r2
   425cc:	e0bffc17 	ldw	r2,-16(fp)
   425d0:	0085c83a 	sub	r2,zero,r2
   425d4:	18800015 	stw	r2,0(r3)
        return -1;
   425d8:	00bfffc4 	movi	r2,-1
   425dc:	00000c06 	br	42610 <write+0xe4>
      }
      return rval;
   425e0:	e0bffc17 	ldw	r2,-16(fp)
   425e4:	00000a06 	br	42610 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   425e8:	00424f00 	call	424f0 <alt_get_errno>
   425ec:	1007883a 	mov	r3,r2
   425f0:	00800344 	movi	r2,13
   425f4:	18800015 	stw	r2,0(r3)
   425f8:	00000406 	br	4260c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   425fc:	00424f00 	call	424f0 <alt_get_errno>
   42600:	1007883a 	mov	r3,r2
   42604:	00801444 	movi	r2,81
   42608:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4260c:	00bfffc4 	movi	r2,-1
}
   42610:	e037883a 	mov	sp,fp
   42614:	dfc00117 	ldw	ra,4(sp)
   42618:	df000017 	ldw	fp,0(sp)
   4261c:	dec00204 	addi	sp,sp,8
   42620:	f800283a 	ret

00042624 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   42624:	defffd04 	addi	sp,sp,-12
   42628:	dfc00215 	stw	ra,8(sp)
   4262c:	df000115 	stw	fp,4(sp)
   42630:	df000104 	addi	fp,sp,4
   42634:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   42638:	d1600804 	addi	r5,gp,-32736
   4263c:	e13fff17 	ldw	r4,-4(fp)
   42640:	0042ba80 	call	42ba8 <alt_dev_llist_insert>
}
   42644:	e037883a 	mov	sp,fp
   42648:	dfc00117 	ldw	ra,4(sp)
   4264c:	df000017 	ldw	fp,0(sp)
   42650:	dec00204 	addi	sp,sp,8
   42654:	f800283a 	ret

00042658 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   42658:	defffd04 	addi	sp,sp,-12
   4265c:	dfc00215 	stw	ra,8(sp)
   42660:	df000115 	stw	fp,4(sp)
   42664:	df000104 	addi	fp,sp,4
   42668:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   4266c:	00432b80 	call	432b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   42670:	00800044 	movi	r2,1
   42674:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   42678:	0001883a 	nop
   4267c:	e037883a 	mov	sp,fp
   42680:	dfc00117 	ldw	ra,4(sp)
   42684:	df000017 	ldw	fp,0(sp)
   42688:	dec00204 	addi	sp,sp,8
   4268c:	f800283a 	ret

00042690 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   42690:	defffe04 	addi	sp,sp,-8
   42694:	dfc00115 	stw	ra,4(sp)
   42698:	df000015 	stw	fp,0(sp)
   4269c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   426a0:	01c0fa04 	movi	r7,1000
   426a4:	000d883a 	mov	r6,zero
   426a8:	000b883a 	mov	r5,zero
   426ac:	01000234 	movhi	r4,8
   426b0:	21040804 	addi	r4,r4,4128
   426b4:	00429980 	call	42998 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   426b8:	01000134 	movhi	r4,4
   426bc:	210eb104 	addi	r4,r4,15044
   426c0:	00426240 	call	42624 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   426c4:	0001883a 	nop
}
   426c8:	0001883a 	nop
   426cc:	e037883a 	mov	sp,fp
   426d0:	dfc00117 	ldw	ra,4(sp)
   426d4:	df000017 	ldw	fp,0(sp)
   426d8:	dec00204 	addi	sp,sp,8
   426dc:	f800283a 	ret

000426e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   426e0:	defffa04 	addi	sp,sp,-24
   426e4:	dfc00515 	stw	ra,20(sp)
   426e8:	df000415 	stw	fp,16(sp)
   426ec:	df000404 	addi	fp,sp,16
   426f0:	e13ffd15 	stw	r4,-12(fp)
   426f4:	e17ffe15 	stw	r5,-8(fp)
   426f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   426fc:	e0bffd17 	ldw	r2,-12(fp)
   42700:	10800017 	ldw	r2,0(r2)
   42704:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   42708:	e0bffc17 	ldw	r2,-16(fp)
   4270c:	10c00a04 	addi	r3,r2,40
   42710:	e0bffd17 	ldw	r2,-12(fp)
   42714:	10800217 	ldw	r2,8(r2)
   42718:	100f883a 	mov	r7,r2
   4271c:	e1bfff17 	ldw	r6,-4(fp)
   42720:	e17ffe17 	ldw	r5,-8(fp)
   42724:	1809883a 	mov	r4,r3
   42728:	00427a00 	call	427a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4272c:	e037883a 	mov	sp,fp
   42730:	dfc00117 	ldw	ra,4(sp)
   42734:	df000017 	ldw	fp,0(sp)
   42738:	dec00204 	addi	sp,sp,8
   4273c:	f800283a 	ret

00042740 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   42740:	defffa04 	addi	sp,sp,-24
   42744:	dfc00515 	stw	ra,20(sp)
   42748:	df000415 	stw	fp,16(sp)
   4274c:	df000404 	addi	fp,sp,16
   42750:	e13ffd15 	stw	r4,-12(fp)
   42754:	e17ffe15 	stw	r5,-8(fp)
   42758:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4275c:	e0bffd17 	ldw	r2,-12(fp)
   42760:	10800017 	ldw	r2,0(r2)
   42764:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   42768:	e0bffc17 	ldw	r2,-16(fp)
   4276c:	10c00a04 	addi	r3,r2,40
   42770:	e0bffd17 	ldw	r2,-12(fp)
   42774:	10800217 	ldw	r2,8(r2)
   42778:	100f883a 	mov	r7,r2
   4277c:	e1bfff17 	ldw	r6,-4(fp)
   42780:	e17ffe17 	ldw	r5,-8(fp)
   42784:	1809883a 	mov	r4,r3
   42788:	004288c0 	call	4288c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4278c:	e037883a 	mov	sp,fp
   42790:	dfc00117 	ldw	ra,4(sp)
   42794:	df000017 	ldw	fp,0(sp)
   42798:	dec00204 	addi	sp,sp,8
   4279c:	f800283a 	ret

000427a0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   427a0:	defff704 	addi	sp,sp,-36
   427a4:	df000815 	stw	fp,32(sp)
   427a8:	df000804 	addi	fp,sp,32
   427ac:	e13ffc15 	stw	r4,-16(fp)
   427b0:	e17ffd15 	stw	r5,-12(fp)
   427b4:	e1bffe15 	stw	r6,-8(fp)
   427b8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   427bc:	e0bffc17 	ldw	r2,-16(fp)
   427c0:	10800017 	ldw	r2,0(r2)
   427c4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   427c8:	e0bffd17 	ldw	r2,-12(fp)
   427cc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   427d0:	e0bffe17 	ldw	r2,-8(fp)
   427d4:	e0fffd17 	ldw	r3,-12(fp)
   427d8:	1885883a 	add	r2,r3,r2
   427dc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   427e0:	00001206 	br	4282c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   427e4:	e0bff917 	ldw	r2,-28(fp)
   427e8:	10800037 	ldwio	r2,0(r2)
   427ec:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   427f0:	e0bffb17 	ldw	r2,-20(fp)
   427f4:	10a0000c 	andi	r2,r2,32768
   427f8:	10000626 	beq	r2,zero,42814 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   427fc:	e0bff817 	ldw	r2,-32(fp)
   42800:	10c00044 	addi	r3,r2,1
   42804:	e0fff815 	stw	r3,-32(fp)
   42808:	e0fffb17 	ldw	r3,-20(fp)
   4280c:	10c00005 	stb	r3,0(r2)
   42810:	00000606 	br	4282c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   42814:	e0fff817 	ldw	r3,-32(fp)
   42818:	e0bffd17 	ldw	r2,-12(fp)
   4281c:	1880071e 	bne	r3,r2,4283c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   42820:	e0bfff17 	ldw	r2,-4(fp)
   42824:	1090000c 	andi	r2,r2,16384
   42828:	1000061e 	bne	r2,zero,42844 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4282c:	e0fff817 	ldw	r3,-32(fp)
   42830:	e0bffa17 	ldw	r2,-24(fp)
   42834:	18bfeb36 	bltu	r3,r2,427e4 <__alt_data_end+0xfffda7e4>
   42838:	00000306 	br	42848 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   4283c:	0001883a 	nop
   42840:	00000106 	br	42848 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   42844:	0001883a 	nop
    
  }

  if (ptr != buffer)
   42848:	e0fff817 	ldw	r3,-32(fp)
   4284c:	e0bffd17 	ldw	r2,-12(fp)
   42850:	18800426 	beq	r3,r2,42864 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   42854:	e0fff817 	ldw	r3,-32(fp)
   42858:	e0bffd17 	ldw	r2,-12(fp)
   4285c:	1885c83a 	sub	r2,r3,r2
   42860:	00000606 	br	4287c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   42864:	e0bfff17 	ldw	r2,-4(fp)
   42868:	1090000c 	andi	r2,r2,16384
   4286c:	10000226 	beq	r2,zero,42878 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   42870:	00bffd44 	movi	r2,-11
   42874:	00000106 	br	4287c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   42878:	00bffec4 	movi	r2,-5
}
   4287c:	e037883a 	mov	sp,fp
   42880:	df000017 	ldw	fp,0(sp)
   42884:	dec00104 	addi	sp,sp,4
   42888:	f800283a 	ret

0004288c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4288c:	defff904 	addi	sp,sp,-28
   42890:	df000615 	stw	fp,24(sp)
   42894:	df000604 	addi	fp,sp,24
   42898:	e13ffc15 	stw	r4,-16(fp)
   4289c:	e17ffd15 	stw	r5,-12(fp)
   428a0:	e1bffe15 	stw	r6,-8(fp)
   428a4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   428a8:	e0bffc17 	ldw	r2,-16(fp)
   428ac:	10800017 	ldw	r2,0(r2)
   428b0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   428b4:	e0bffe17 	ldw	r2,-8(fp)
   428b8:	e0fffd17 	ldw	r3,-12(fp)
   428bc:	1885883a 	add	r2,r3,r2
   428c0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   428c4:	00000e06 	br	42900 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   428c8:	e0bffa17 	ldw	r2,-24(fp)
   428cc:	10800104 	addi	r2,r2,4
   428d0:	10800037 	ldwio	r2,0(r2)
   428d4:	10bfffec 	andhi	r2,r2,65535
   428d8:	10000926 	beq	r2,zero,42900 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   428dc:	e0fffa17 	ldw	r3,-24(fp)
   428e0:	e0bffd17 	ldw	r2,-12(fp)
   428e4:	11000044 	addi	r4,r2,1
   428e8:	e13ffd15 	stw	r4,-12(fp)
   428ec:	10800003 	ldbu	r2,0(r2)
   428f0:	10803fcc 	andi	r2,r2,255
   428f4:	1080201c 	xori	r2,r2,128
   428f8:	10bfe004 	addi	r2,r2,-128
   428fc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   42900:	e0fffd17 	ldw	r3,-12(fp)
   42904:	e0bffb17 	ldw	r2,-20(fp)
   42908:	18bfef36 	bltu	r3,r2,428c8 <__alt_data_end+0xfffda8c8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   4290c:	e0bffe17 	ldw	r2,-8(fp)
}
   42910:	e037883a 	mov	sp,fp
   42914:	df000017 	ldw	fp,0(sp)
   42918:	dec00104 	addi	sp,sp,4
   4291c:	f800283a 	ret

00042920 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   42920:	defffa04 	addi	sp,sp,-24
   42924:	dfc00515 	stw	ra,20(sp)
   42928:	df000415 	stw	fp,16(sp)
   4292c:	df000404 	addi	fp,sp,16
   42930:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   42934:	0007883a 	mov	r3,zero
   42938:	e0bfff17 	ldw	r2,-4(fp)
   4293c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   42940:	e0bfff17 	ldw	r2,-4(fp)
   42944:	10800104 	addi	r2,r2,4
   42948:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4294c:	0005303a 	rdctl	r2,status
   42950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42954:	e0fffd17 	ldw	r3,-12(fp)
   42958:	00bfff84 	movi	r2,-2
   4295c:	1884703a 	and	r2,r3,r2
   42960:	1001703a 	wrctl	status,r2
  
  return context;
   42964:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   42968:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4296c:	00431b00 	call	431b0 <alt_tick>
   42970:	e0bffc17 	ldw	r2,-16(fp)
   42974:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42978:	e0bffe17 	ldw	r2,-8(fp)
   4297c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   42980:	0001883a 	nop
   42984:	e037883a 	mov	sp,fp
   42988:	dfc00117 	ldw	ra,4(sp)
   4298c:	df000017 	ldw	fp,0(sp)
   42990:	dec00204 	addi	sp,sp,8
   42994:	f800283a 	ret

00042998 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   42998:	defff804 	addi	sp,sp,-32
   4299c:	dfc00715 	stw	ra,28(sp)
   429a0:	df000615 	stw	fp,24(sp)
   429a4:	df000604 	addi	fp,sp,24
   429a8:	e13ffc15 	stw	r4,-16(fp)
   429ac:	e17ffd15 	stw	r5,-12(fp)
   429b0:	e1bffe15 	stw	r6,-8(fp)
   429b4:	e1ffff15 	stw	r7,-4(fp)
   429b8:	e0bfff17 	ldw	r2,-4(fp)
   429bc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   429c0:	d0a0d417 	ldw	r2,-31920(gp)
   429c4:	1000021e 	bne	r2,zero,429d0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   429c8:	e0bffb17 	ldw	r2,-20(fp)
   429cc:	d0a0d415 	stw	r2,-31920(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   429d0:	e0bffc17 	ldw	r2,-16(fp)
   429d4:	10800104 	addi	r2,r2,4
   429d8:	00c001c4 	movi	r3,7
   429dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   429e0:	d8000015 	stw	zero,0(sp)
   429e4:	e1fffc17 	ldw	r7,-16(fp)
   429e8:	01800134 	movhi	r6,4
   429ec:	318a4804 	addi	r6,r6,10528
   429f0:	e17ffe17 	ldw	r5,-8(fp)
   429f4:	e13ffd17 	ldw	r4,-12(fp)
   429f8:	00420f80 	call	420f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   429fc:	0001883a 	nop
   42a00:	e037883a 	mov	sp,fp
   42a04:	dfc00117 	ldw	ra,4(sp)
   42a08:	df000017 	ldw	fp,0(sp)
   42a0c:	dec00204 	addi	sp,sp,8
   42a10:	f800283a 	ret

00042a14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42a14:	defffe04 	addi	sp,sp,-8
   42a18:	dfc00115 	stw	ra,4(sp)
   42a1c:	df000015 	stw	fp,0(sp)
   42a20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42a24:	d0a00b17 	ldw	r2,-32724(gp)
   42a28:	10000326 	beq	r2,zero,42a38 <alt_get_errno+0x24>
   42a2c:	d0a00b17 	ldw	r2,-32724(gp)
   42a30:	103ee83a 	callr	r2
   42a34:	00000106 	br	42a3c <alt_get_errno+0x28>
   42a38:	d0a0ce04 	addi	r2,gp,-31944
}
   42a3c:	e037883a 	mov	sp,fp
   42a40:	dfc00117 	ldw	ra,4(sp)
   42a44:	df000017 	ldw	fp,0(sp)
   42a48:	dec00204 	addi	sp,sp,8
   42a4c:	f800283a 	ret

00042a50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42a50:	defffb04 	addi	sp,sp,-20
   42a54:	dfc00415 	stw	ra,16(sp)
   42a58:	df000315 	stw	fp,12(sp)
   42a5c:	df000304 	addi	fp,sp,12
   42a60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42a64:	e0bfff17 	ldw	r2,-4(fp)
   42a68:	10000616 	blt	r2,zero,42a84 <close+0x34>
   42a6c:	e0bfff17 	ldw	r2,-4(fp)
   42a70:	10c00324 	muli	r3,r2,12
   42a74:	00800134 	movhi	r2,4
   42a78:	108ec604 	addi	r2,r2,15128
   42a7c:	1885883a 	add	r2,r3,r2
   42a80:	00000106 	br	42a88 <close+0x38>
   42a84:	0005883a 	mov	r2,zero
   42a88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42a8c:	e0bffd17 	ldw	r2,-12(fp)
   42a90:	10001926 	beq	r2,zero,42af8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42a94:	e0bffd17 	ldw	r2,-12(fp)
   42a98:	10800017 	ldw	r2,0(r2)
   42a9c:	10800417 	ldw	r2,16(r2)
   42aa0:	10000626 	beq	r2,zero,42abc <close+0x6c>
   42aa4:	e0bffd17 	ldw	r2,-12(fp)
   42aa8:	10800017 	ldw	r2,0(r2)
   42aac:	10800417 	ldw	r2,16(r2)
   42ab0:	e13ffd17 	ldw	r4,-12(fp)
   42ab4:	103ee83a 	callr	r2
   42ab8:	00000106 	br	42ac0 <close+0x70>
   42abc:	0005883a 	mov	r2,zero
   42ac0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   42ac4:	e13fff17 	ldw	r4,-4(fp)
   42ac8:	00430b00 	call	430b0 <alt_release_fd>
    if (rval < 0)
   42acc:	e0bffe17 	ldw	r2,-8(fp)
   42ad0:	1000070e 	bge	r2,zero,42af0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   42ad4:	0042a140 	call	42a14 <alt_get_errno>
   42ad8:	1007883a 	mov	r3,r2
   42adc:	e0bffe17 	ldw	r2,-8(fp)
   42ae0:	0085c83a 	sub	r2,zero,r2
   42ae4:	18800015 	stw	r2,0(r3)
      return -1;
   42ae8:	00bfffc4 	movi	r2,-1
   42aec:	00000706 	br	42b0c <close+0xbc>
    }
    return 0;
   42af0:	0005883a 	mov	r2,zero
   42af4:	00000506 	br	42b0c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   42af8:	0042a140 	call	42a14 <alt_get_errno>
   42afc:	1007883a 	mov	r3,r2
   42b00:	00801444 	movi	r2,81
   42b04:	18800015 	stw	r2,0(r3)
    return -1;
   42b08:	00bfffc4 	movi	r2,-1
  }
}
   42b0c:	e037883a 	mov	sp,fp
   42b10:	dfc00117 	ldw	ra,4(sp)
   42b14:	df000017 	ldw	fp,0(sp)
   42b18:	dec00204 	addi	sp,sp,8
   42b1c:	f800283a 	ret

00042b20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   42b20:	deffff04 	addi	sp,sp,-4
   42b24:	df000015 	stw	fp,0(sp)
   42b28:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   42b2c:	0001883a 	nop
   42b30:	e037883a 	mov	sp,fp
   42b34:	df000017 	ldw	fp,0(sp)
   42b38:	dec00104 	addi	sp,sp,4
   42b3c:	f800283a 	ret

00042b40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42b40:	defffc04 	addi	sp,sp,-16
   42b44:	df000315 	stw	fp,12(sp)
   42b48:	df000304 	addi	fp,sp,12
   42b4c:	e13ffd15 	stw	r4,-12(fp)
   42b50:	e17ffe15 	stw	r5,-8(fp)
   42b54:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42b58:	e0bfff17 	ldw	r2,-4(fp)
}
   42b5c:	e037883a 	mov	sp,fp
   42b60:	df000017 	ldw	fp,0(sp)
   42b64:	dec00104 	addi	sp,sp,4
   42b68:	f800283a 	ret

00042b6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42b6c:	defffe04 	addi	sp,sp,-8
   42b70:	dfc00115 	stw	ra,4(sp)
   42b74:	df000015 	stw	fp,0(sp)
   42b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42b7c:	d0a00b17 	ldw	r2,-32724(gp)
   42b80:	10000326 	beq	r2,zero,42b90 <alt_get_errno+0x24>
   42b84:	d0a00b17 	ldw	r2,-32724(gp)
   42b88:	103ee83a 	callr	r2
   42b8c:	00000106 	br	42b94 <alt_get_errno+0x28>
   42b90:	d0a0ce04 	addi	r2,gp,-31944
}
   42b94:	e037883a 	mov	sp,fp
   42b98:	dfc00117 	ldw	ra,4(sp)
   42b9c:	df000017 	ldw	fp,0(sp)
   42ba0:	dec00204 	addi	sp,sp,8
   42ba4:	f800283a 	ret

00042ba8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   42ba8:	defffa04 	addi	sp,sp,-24
   42bac:	dfc00515 	stw	ra,20(sp)
   42bb0:	df000415 	stw	fp,16(sp)
   42bb4:	df000404 	addi	fp,sp,16
   42bb8:	e13ffe15 	stw	r4,-8(fp)
   42bbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   42bc0:	e0bffe17 	ldw	r2,-8(fp)
   42bc4:	10000326 	beq	r2,zero,42bd4 <alt_dev_llist_insert+0x2c>
   42bc8:	e0bffe17 	ldw	r2,-8(fp)
   42bcc:	10800217 	ldw	r2,8(r2)
   42bd0:	1000061e 	bne	r2,zero,42bec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   42bd4:	0042b6c0 	call	42b6c <alt_get_errno>
   42bd8:	1007883a 	mov	r3,r2
   42bdc:	00800584 	movi	r2,22
   42be0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   42be4:	00bffa84 	movi	r2,-22
   42be8:	00001306 	br	42c38 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   42bec:	e0bffe17 	ldw	r2,-8(fp)
   42bf0:	e0ffff17 	ldw	r3,-4(fp)
   42bf4:	e0fffc15 	stw	r3,-16(fp)
   42bf8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   42bfc:	e0bffd17 	ldw	r2,-12(fp)
   42c00:	e0fffc17 	ldw	r3,-16(fp)
   42c04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   42c08:	e0bffc17 	ldw	r2,-16(fp)
   42c0c:	10c00017 	ldw	r3,0(r2)
   42c10:	e0bffd17 	ldw	r2,-12(fp)
   42c14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   42c18:	e0bffc17 	ldw	r2,-16(fp)
   42c1c:	10800017 	ldw	r2,0(r2)
   42c20:	e0fffd17 	ldw	r3,-12(fp)
   42c24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   42c28:	e0bffc17 	ldw	r2,-16(fp)
   42c2c:	e0fffd17 	ldw	r3,-12(fp)
   42c30:	10c00015 	stw	r3,0(r2)

  return 0;  
   42c34:	0005883a 	mov	r2,zero
}
   42c38:	e037883a 	mov	sp,fp
   42c3c:	dfc00117 	ldw	ra,4(sp)
   42c40:	df000017 	ldw	fp,0(sp)
   42c44:	dec00204 	addi	sp,sp,8
   42c48:	f800283a 	ret

00042c4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   42c4c:	defffe04 	addi	sp,sp,-8
   42c50:	dfc00115 	stw	ra,4(sp)
   42c54:	df000015 	stw	fp,0(sp)
   42c58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   42c5c:	01420004 	movi	r5,2048
   42c60:	0009883a 	mov	r4,zero
   42c64:	00435180 	call	43518 <alt_icache_flush>
#endif
}
   42c68:	0001883a 	nop
   42c6c:	e037883a 	mov	sp,fp
   42c70:	dfc00117 	ldw	ra,4(sp)
   42c74:	df000017 	ldw	fp,0(sp)
   42c78:	dec00204 	addi	sp,sp,8
   42c7c:	f800283a 	ret

00042c80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   42c80:	defffe04 	addi	sp,sp,-8
   42c84:	df000115 	stw	fp,4(sp)
   42c88:	df000104 	addi	fp,sp,4
   42c8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   42c90:	e0bfff17 	ldw	r2,-4(fp)
   42c94:	10bffe84 	addi	r2,r2,-6
   42c98:	10c00428 	cmpgeui	r3,r2,16
   42c9c:	18001a1e 	bne	r3,zero,42d08 <alt_exception_cause_generated_bad_addr+0x88>
   42ca0:	100690ba 	slli	r3,r2,2
   42ca4:	00800134 	movhi	r2,4
   42ca8:	108b2e04 	addi	r2,r2,11448
   42cac:	1885883a 	add	r2,r3,r2
   42cb0:	10800017 	ldw	r2,0(r2)
   42cb4:	1000683a 	jmp	r2
   42cb8:	00042cf8 	rdprs	zero,zero,4275
   42cbc:	00042cf8 	rdprs	zero,zero,4275
   42cc0:	00042d08 	cmpgei	zero,zero,4276
   42cc4:	00042d08 	cmpgei	zero,zero,4276
   42cc8:	00042d08 	cmpgei	zero,zero,4276
   42ccc:	00042cf8 	rdprs	zero,zero,4275
   42cd0:	00042d00 	call	42d0 <__alt_mem_onchip_memory-0x3bd30>
   42cd4:	00042d08 	cmpgei	zero,zero,4276
   42cd8:	00042cf8 	rdprs	zero,zero,4275
   42cdc:	00042cf8 	rdprs	zero,zero,4275
   42ce0:	00042d08 	cmpgei	zero,zero,4276
   42ce4:	00042cf8 	rdprs	zero,zero,4275
   42ce8:	00042d00 	call	42d0 <__alt_mem_onchip_memory-0x3bd30>
   42cec:	00042d08 	cmpgei	zero,zero,4276
   42cf0:	00042d08 	cmpgei	zero,zero,4276
   42cf4:	00042cf8 	rdprs	zero,zero,4275
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   42cf8:	00800044 	movi	r2,1
   42cfc:	00000306 	br	42d0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   42d00:	0005883a 	mov	r2,zero
   42d04:	00000106 	br	42d0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   42d08:	0005883a 	mov	r2,zero
  }
}
   42d0c:	e037883a 	mov	sp,fp
   42d10:	df000017 	ldw	fp,0(sp)
   42d14:	dec00104 	addi	sp,sp,4
   42d18:	f800283a 	ret

00042d1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   42d1c:	defff904 	addi	sp,sp,-28
   42d20:	dfc00615 	stw	ra,24(sp)
   42d24:	df000515 	stw	fp,20(sp)
   42d28:	df000504 	addi	fp,sp,20
   42d2c:	e13ffc15 	stw	r4,-16(fp)
   42d30:	e17ffd15 	stw	r5,-12(fp)
   42d34:	e1bffe15 	stw	r6,-8(fp)
   42d38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   42d3c:	e1bfff17 	ldw	r6,-4(fp)
   42d40:	e17ffe17 	ldw	r5,-8(fp)
   42d44:	e13ffd17 	ldw	r4,-12(fp)
   42d48:	0042f5c0 	call	42f5c <open>
   42d4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   42d50:	e0bffb17 	ldw	r2,-20(fp)
   42d54:	10001c16 	blt	r2,zero,42dc8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   42d58:	00800134 	movhi	r2,4
   42d5c:	108ec604 	addi	r2,r2,15128
   42d60:	e0fffb17 	ldw	r3,-20(fp)
   42d64:	18c00324 	muli	r3,r3,12
   42d68:	10c5883a 	add	r2,r2,r3
   42d6c:	10c00017 	ldw	r3,0(r2)
   42d70:	e0bffc17 	ldw	r2,-16(fp)
   42d74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42d78:	00800134 	movhi	r2,4
   42d7c:	108ec604 	addi	r2,r2,15128
   42d80:	e0fffb17 	ldw	r3,-20(fp)
   42d84:	18c00324 	muli	r3,r3,12
   42d88:	10c5883a 	add	r2,r2,r3
   42d8c:	10800104 	addi	r2,r2,4
   42d90:	10c00017 	ldw	r3,0(r2)
   42d94:	e0bffc17 	ldw	r2,-16(fp)
   42d98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   42d9c:	00800134 	movhi	r2,4
   42da0:	108ec604 	addi	r2,r2,15128
   42da4:	e0fffb17 	ldw	r3,-20(fp)
   42da8:	18c00324 	muli	r3,r3,12
   42dac:	10c5883a 	add	r2,r2,r3
   42db0:	10800204 	addi	r2,r2,8
   42db4:	10c00017 	ldw	r3,0(r2)
   42db8:	e0bffc17 	ldw	r2,-16(fp)
   42dbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   42dc0:	e13ffb17 	ldw	r4,-20(fp)
   42dc4:	00430b00 	call	430b0 <alt_release_fd>
  }
} 
   42dc8:	0001883a 	nop
   42dcc:	e037883a 	mov	sp,fp
   42dd0:	dfc00117 	ldw	ra,4(sp)
   42dd4:	df000017 	ldw	fp,0(sp)
   42dd8:	dec00204 	addi	sp,sp,8
   42ddc:	f800283a 	ret

00042de0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   42de0:	defffb04 	addi	sp,sp,-20
   42de4:	dfc00415 	stw	ra,16(sp)
   42de8:	df000315 	stw	fp,12(sp)
   42dec:	df000304 	addi	fp,sp,12
   42df0:	e13ffd15 	stw	r4,-12(fp)
   42df4:	e17ffe15 	stw	r5,-8(fp)
   42df8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   42dfc:	01c07fc4 	movi	r7,511
   42e00:	01800044 	movi	r6,1
   42e04:	e17ffd17 	ldw	r5,-12(fp)
   42e08:	01000134 	movhi	r4,4
   42e0c:	210ec904 	addi	r4,r4,15140
   42e10:	0042d1c0 	call	42d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   42e14:	01c07fc4 	movi	r7,511
   42e18:	000d883a 	mov	r6,zero
   42e1c:	e17ffe17 	ldw	r5,-8(fp)
   42e20:	01000134 	movhi	r4,4
   42e24:	210ec604 	addi	r4,r4,15128
   42e28:	0042d1c0 	call	42d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   42e2c:	01c07fc4 	movi	r7,511
   42e30:	01800044 	movi	r6,1
   42e34:	e17fff17 	ldw	r5,-4(fp)
   42e38:	01000134 	movhi	r4,4
   42e3c:	210ecc04 	addi	r4,r4,15152
   42e40:	0042d1c0 	call	42d1c <alt_open_fd>
}  
   42e44:	0001883a 	nop
   42e48:	e037883a 	mov	sp,fp
   42e4c:	dfc00117 	ldw	ra,4(sp)
   42e50:	df000017 	ldw	fp,0(sp)
   42e54:	dec00204 	addi	sp,sp,8
   42e58:	f800283a 	ret

00042e5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42e5c:	defffe04 	addi	sp,sp,-8
   42e60:	dfc00115 	stw	ra,4(sp)
   42e64:	df000015 	stw	fp,0(sp)
   42e68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42e6c:	d0a00b17 	ldw	r2,-32724(gp)
   42e70:	10000326 	beq	r2,zero,42e80 <alt_get_errno+0x24>
   42e74:	d0a00b17 	ldw	r2,-32724(gp)
   42e78:	103ee83a 	callr	r2
   42e7c:	00000106 	br	42e84 <alt_get_errno+0x28>
   42e80:	d0a0ce04 	addi	r2,gp,-31944
}
   42e84:	e037883a 	mov	sp,fp
   42e88:	dfc00117 	ldw	ra,4(sp)
   42e8c:	df000017 	ldw	fp,0(sp)
   42e90:	dec00204 	addi	sp,sp,8
   42e94:	f800283a 	ret

00042e98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   42e98:	defffd04 	addi	sp,sp,-12
   42e9c:	df000215 	stw	fp,8(sp)
   42ea0:	df000204 	addi	fp,sp,8
   42ea4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   42ea8:	e0bfff17 	ldw	r2,-4(fp)
   42eac:	10800217 	ldw	r2,8(r2)
   42eb0:	10d00034 	orhi	r3,r2,16384
   42eb4:	e0bfff17 	ldw	r2,-4(fp)
   42eb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42ebc:	e03ffe15 	stw	zero,-8(fp)
   42ec0:	00001d06 	br	42f38 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42ec4:	00800134 	movhi	r2,4
   42ec8:	108ec604 	addi	r2,r2,15128
   42ecc:	e0fffe17 	ldw	r3,-8(fp)
   42ed0:	18c00324 	muli	r3,r3,12
   42ed4:	10c5883a 	add	r2,r2,r3
   42ed8:	10c00017 	ldw	r3,0(r2)
   42edc:	e0bfff17 	ldw	r2,-4(fp)
   42ee0:	10800017 	ldw	r2,0(r2)
   42ee4:	1880111e 	bne	r3,r2,42f2c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   42ee8:	00800134 	movhi	r2,4
   42eec:	108ec604 	addi	r2,r2,15128
   42ef0:	e0fffe17 	ldw	r3,-8(fp)
   42ef4:	18c00324 	muli	r3,r3,12
   42ef8:	10c5883a 	add	r2,r2,r3
   42efc:	10800204 	addi	r2,r2,8
   42f00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42f04:	1000090e 	bge	r2,zero,42f2c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   42f08:	e0bffe17 	ldw	r2,-8(fp)
   42f0c:	10c00324 	muli	r3,r2,12
   42f10:	00800134 	movhi	r2,4
   42f14:	108ec604 	addi	r2,r2,15128
   42f18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   42f1c:	e0bfff17 	ldw	r2,-4(fp)
   42f20:	18800226 	beq	r3,r2,42f2c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   42f24:	00bffcc4 	movi	r2,-13
   42f28:	00000806 	br	42f4c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42f2c:	e0bffe17 	ldw	r2,-8(fp)
   42f30:	10800044 	addi	r2,r2,1
   42f34:	e0bffe15 	stw	r2,-8(fp)
   42f38:	d0a00a17 	ldw	r2,-32728(gp)
   42f3c:	1007883a 	mov	r3,r2
   42f40:	e0bffe17 	ldw	r2,-8(fp)
   42f44:	18bfdf2e 	bgeu	r3,r2,42ec4 <__alt_data_end+0xfffdaec4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   42f48:	0005883a 	mov	r2,zero
}
   42f4c:	e037883a 	mov	sp,fp
   42f50:	df000017 	ldw	fp,0(sp)
   42f54:	dec00104 	addi	sp,sp,4
   42f58:	f800283a 	ret

00042f5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   42f5c:	defff604 	addi	sp,sp,-40
   42f60:	dfc00915 	stw	ra,36(sp)
   42f64:	df000815 	stw	fp,32(sp)
   42f68:	df000804 	addi	fp,sp,32
   42f6c:	e13ffd15 	stw	r4,-12(fp)
   42f70:	e17ffe15 	stw	r5,-8(fp)
   42f74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   42f78:	00bfffc4 	movi	r2,-1
   42f7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   42f80:	00bffb44 	movi	r2,-19
   42f84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   42f88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   42f8c:	d1600804 	addi	r5,gp,-32736
   42f90:	e13ffd17 	ldw	r4,-12(fp)
   42f94:	00432dc0 	call	432dc <alt_find_dev>
   42f98:	e0bff815 	stw	r2,-32(fp)
   42f9c:	e0bff817 	ldw	r2,-32(fp)
   42fa0:	1000051e 	bne	r2,zero,42fb8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   42fa4:	e13ffd17 	ldw	r4,-12(fp)
   42fa8:	004336c0 	call	4336c <alt_find_file>
   42fac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   42fb0:	00800044 	movi	r2,1
   42fb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   42fb8:	e0bff817 	ldw	r2,-32(fp)
   42fbc:	10002926 	beq	r2,zero,43064 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   42fc0:	e13ff817 	ldw	r4,-32(fp)
   42fc4:	00434740 	call	43474 <alt_get_fd>
   42fc8:	e0bff915 	stw	r2,-28(fp)
   42fcc:	e0bff917 	ldw	r2,-28(fp)
   42fd0:	1000030e 	bge	r2,zero,42fe0 <open+0x84>
    {
      status = index;
   42fd4:	e0bff917 	ldw	r2,-28(fp)
   42fd8:	e0bffa15 	stw	r2,-24(fp)
   42fdc:	00002306 	br	4306c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   42fe0:	e0bff917 	ldw	r2,-28(fp)
   42fe4:	10c00324 	muli	r3,r2,12
   42fe8:	00800134 	movhi	r2,4
   42fec:	108ec604 	addi	r2,r2,15128
   42ff0:	1885883a 	add	r2,r3,r2
   42ff4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   42ff8:	e0fffe17 	ldw	r3,-8(fp)
   42ffc:	00900034 	movhi	r2,16384
   43000:	10bfffc4 	addi	r2,r2,-1
   43004:	1886703a 	and	r3,r3,r2
   43008:	e0bffc17 	ldw	r2,-16(fp)
   4300c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   43010:	e0bffb17 	ldw	r2,-20(fp)
   43014:	1000051e 	bne	r2,zero,4302c <open+0xd0>
   43018:	e13ffc17 	ldw	r4,-16(fp)
   4301c:	0042e980 	call	42e98 <alt_file_locked>
   43020:	e0bffa15 	stw	r2,-24(fp)
   43024:	e0bffa17 	ldw	r2,-24(fp)
   43028:	10001016 	blt	r2,zero,4306c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4302c:	e0bff817 	ldw	r2,-32(fp)
   43030:	10800317 	ldw	r2,12(r2)
   43034:	10000826 	beq	r2,zero,43058 <open+0xfc>
   43038:	e0bff817 	ldw	r2,-32(fp)
   4303c:	10800317 	ldw	r2,12(r2)
   43040:	e1ffff17 	ldw	r7,-4(fp)
   43044:	e1bffe17 	ldw	r6,-8(fp)
   43048:	e17ffd17 	ldw	r5,-12(fp)
   4304c:	e13ffc17 	ldw	r4,-16(fp)
   43050:	103ee83a 	callr	r2
   43054:	00000106 	br	4305c <open+0x100>
   43058:	0005883a 	mov	r2,zero
   4305c:	e0bffa15 	stw	r2,-24(fp)
   43060:	00000206 	br	4306c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   43064:	00bffb44 	movi	r2,-19
   43068:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4306c:	e0bffa17 	ldw	r2,-24(fp)
   43070:	1000090e 	bge	r2,zero,43098 <open+0x13c>
  {
    alt_release_fd (index);  
   43074:	e13ff917 	ldw	r4,-28(fp)
   43078:	00430b00 	call	430b0 <alt_release_fd>
    ALT_ERRNO = -status;
   4307c:	0042e5c0 	call	42e5c <alt_get_errno>
   43080:	1007883a 	mov	r3,r2
   43084:	e0bffa17 	ldw	r2,-24(fp)
   43088:	0085c83a 	sub	r2,zero,r2
   4308c:	18800015 	stw	r2,0(r3)
    return -1;
   43090:	00bfffc4 	movi	r2,-1
   43094:	00000106 	br	4309c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   43098:	e0bff917 	ldw	r2,-28(fp)
}
   4309c:	e037883a 	mov	sp,fp
   430a0:	dfc00117 	ldw	ra,4(sp)
   430a4:	df000017 	ldw	fp,0(sp)
   430a8:	dec00204 	addi	sp,sp,8
   430ac:	f800283a 	ret

000430b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   430b0:	defffe04 	addi	sp,sp,-8
   430b4:	df000115 	stw	fp,4(sp)
   430b8:	df000104 	addi	fp,sp,4
   430bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   430c0:	e0bfff17 	ldw	r2,-4(fp)
   430c4:	108000d0 	cmplti	r2,r2,3
   430c8:	10000d1e 	bne	r2,zero,43100 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   430cc:	00800134 	movhi	r2,4
   430d0:	108ec604 	addi	r2,r2,15128
   430d4:	e0ffff17 	ldw	r3,-4(fp)
   430d8:	18c00324 	muli	r3,r3,12
   430dc:	10c5883a 	add	r2,r2,r3
   430e0:	10800204 	addi	r2,r2,8
   430e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   430e8:	00800134 	movhi	r2,4
   430ec:	108ec604 	addi	r2,r2,15128
   430f0:	e0ffff17 	ldw	r3,-4(fp)
   430f4:	18c00324 	muli	r3,r3,12
   430f8:	10c5883a 	add	r2,r2,r3
   430fc:	10000015 	stw	zero,0(r2)
  }
}
   43100:	0001883a 	nop
   43104:	e037883a 	mov	sp,fp
   43108:	df000017 	ldw	fp,0(sp)
   4310c:	dec00104 	addi	sp,sp,4
   43110:	f800283a 	ret

00043114 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   43114:	defffa04 	addi	sp,sp,-24
   43118:	df000515 	stw	fp,20(sp)
   4311c:	df000504 	addi	fp,sp,20
   43120:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43124:	0005303a 	rdctl	r2,status
   43128:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4312c:	e0fffc17 	ldw	r3,-16(fp)
   43130:	00bfff84 	movi	r2,-2
   43134:	1884703a 	and	r2,r3,r2
   43138:	1001703a 	wrctl	status,r2
  
  return context;
   4313c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   43140:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   43144:	e0bfff17 	ldw	r2,-4(fp)
   43148:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4314c:	e0bffd17 	ldw	r2,-12(fp)
   43150:	10800017 	ldw	r2,0(r2)
   43154:	e0fffd17 	ldw	r3,-12(fp)
   43158:	18c00117 	ldw	r3,4(r3)
   4315c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   43160:	e0bffd17 	ldw	r2,-12(fp)
   43164:	10800117 	ldw	r2,4(r2)
   43168:	e0fffd17 	ldw	r3,-12(fp)
   4316c:	18c00017 	ldw	r3,0(r3)
   43170:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   43174:	e0bffd17 	ldw	r2,-12(fp)
   43178:	e0fffd17 	ldw	r3,-12(fp)
   4317c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   43180:	e0bffd17 	ldw	r2,-12(fp)
   43184:	e0fffd17 	ldw	r3,-12(fp)
   43188:	10c00015 	stw	r3,0(r2)
   4318c:	e0bffb17 	ldw	r2,-20(fp)
   43190:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43194:	e0bffe17 	ldw	r2,-8(fp)
   43198:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4319c:	0001883a 	nop
   431a0:	e037883a 	mov	sp,fp
   431a4:	df000017 	ldw	fp,0(sp)
   431a8:	dec00104 	addi	sp,sp,4
   431ac:	f800283a 	ret

000431b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   431b0:	defffb04 	addi	sp,sp,-20
   431b4:	dfc00415 	stw	ra,16(sp)
   431b8:	df000315 	stw	fp,12(sp)
   431bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   431c0:	d0a00c17 	ldw	r2,-32720(gp)
   431c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   431c8:	d0a0d517 	ldw	r2,-31916(gp)
   431cc:	10800044 	addi	r2,r2,1
   431d0:	d0a0d515 	stw	r2,-31916(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   431d4:	00002e06 	br	43290 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   431d8:	e0bffd17 	ldw	r2,-12(fp)
   431dc:	10800017 	ldw	r2,0(r2)
   431e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   431e4:	e0bffd17 	ldw	r2,-12(fp)
   431e8:	10800403 	ldbu	r2,16(r2)
   431ec:	10803fcc 	andi	r2,r2,255
   431f0:	10000426 	beq	r2,zero,43204 <alt_tick+0x54>
   431f4:	d0a0d517 	ldw	r2,-31916(gp)
   431f8:	1000021e 	bne	r2,zero,43204 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   431fc:	e0bffd17 	ldw	r2,-12(fp)
   43200:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   43204:	e0bffd17 	ldw	r2,-12(fp)
   43208:	10800217 	ldw	r2,8(r2)
   4320c:	d0e0d517 	ldw	r3,-31916(gp)
   43210:	18801d36 	bltu	r3,r2,43288 <alt_tick+0xd8>
   43214:	e0bffd17 	ldw	r2,-12(fp)
   43218:	10800403 	ldbu	r2,16(r2)
   4321c:	10803fcc 	andi	r2,r2,255
   43220:	1000191e 	bne	r2,zero,43288 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   43224:	e0bffd17 	ldw	r2,-12(fp)
   43228:	10800317 	ldw	r2,12(r2)
   4322c:	e0fffd17 	ldw	r3,-12(fp)
   43230:	18c00517 	ldw	r3,20(r3)
   43234:	1809883a 	mov	r4,r3
   43238:	103ee83a 	callr	r2
   4323c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   43240:	e0bfff17 	ldw	r2,-4(fp)
   43244:	1000031e 	bne	r2,zero,43254 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   43248:	e13ffd17 	ldw	r4,-12(fp)
   4324c:	00431140 	call	43114 <alt_alarm_stop>
   43250:	00000d06 	br	43288 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   43254:	e0bffd17 	ldw	r2,-12(fp)
   43258:	10c00217 	ldw	r3,8(r2)
   4325c:	e0bfff17 	ldw	r2,-4(fp)
   43260:	1887883a 	add	r3,r3,r2
   43264:	e0bffd17 	ldw	r2,-12(fp)
   43268:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4326c:	e0bffd17 	ldw	r2,-12(fp)
   43270:	10c00217 	ldw	r3,8(r2)
   43274:	d0a0d517 	ldw	r2,-31916(gp)
   43278:	1880032e 	bgeu	r3,r2,43288 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   4327c:	e0bffd17 	ldw	r2,-12(fp)
   43280:	00c00044 	movi	r3,1
   43284:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   43288:	e0bffe17 	ldw	r2,-8(fp)
   4328c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   43290:	e0fffd17 	ldw	r3,-12(fp)
   43294:	d0a00c04 	addi	r2,gp,-32720
   43298:	18bfcf1e 	bne	r3,r2,431d8 <__alt_data_end+0xfffdb1d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   4329c:	0001883a 	nop
}
   432a0:	0001883a 	nop
   432a4:	e037883a 	mov	sp,fp
   432a8:	dfc00117 	ldw	ra,4(sp)
   432ac:	df000017 	ldw	fp,0(sp)
   432b0:	dec00204 	addi	sp,sp,8
   432b4:	f800283a 	ret

000432b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   432b8:	deffff04 	addi	sp,sp,-4
   432bc:	df000015 	stw	fp,0(sp)
   432c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   432c4:	000170fa 	wrctl	ienable,zero
}
   432c8:	0001883a 	nop
   432cc:	e037883a 	mov	sp,fp
   432d0:	df000017 	ldw	fp,0(sp)
   432d4:	dec00104 	addi	sp,sp,4
   432d8:	f800283a 	ret

000432dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   432dc:	defffa04 	addi	sp,sp,-24
   432e0:	dfc00515 	stw	ra,20(sp)
   432e4:	df000415 	stw	fp,16(sp)
   432e8:	df000404 	addi	fp,sp,16
   432ec:	e13ffe15 	stw	r4,-8(fp)
   432f0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   432f4:	e0bfff17 	ldw	r2,-4(fp)
   432f8:	10800017 	ldw	r2,0(r2)
   432fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   43300:	e13ffe17 	ldw	r4,-8(fp)
   43304:	0041a200 	call	41a20 <strlen>
   43308:	10800044 	addi	r2,r2,1
   4330c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43310:	00000d06 	br	43348 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   43314:	e0bffc17 	ldw	r2,-16(fp)
   43318:	10800217 	ldw	r2,8(r2)
   4331c:	e0fffd17 	ldw	r3,-12(fp)
   43320:	180d883a 	mov	r6,r3
   43324:	e17ffe17 	ldw	r5,-8(fp)
   43328:	1009883a 	mov	r4,r2
   4332c:	00435c80 	call	435c8 <memcmp>
   43330:	1000021e 	bne	r2,zero,4333c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   43334:	e0bffc17 	ldw	r2,-16(fp)
   43338:	00000706 	br	43358 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4333c:	e0bffc17 	ldw	r2,-16(fp)
   43340:	10800017 	ldw	r2,0(r2)
   43344:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   43348:	e0fffc17 	ldw	r3,-16(fp)
   4334c:	e0bfff17 	ldw	r2,-4(fp)
   43350:	18bff01e 	bne	r3,r2,43314 <__alt_data_end+0xfffdb314>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   43354:	0005883a 	mov	r2,zero
}
   43358:	e037883a 	mov	sp,fp
   4335c:	dfc00117 	ldw	ra,4(sp)
   43360:	df000017 	ldw	fp,0(sp)
   43364:	dec00204 	addi	sp,sp,8
   43368:	f800283a 	ret

0004336c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4336c:	defffb04 	addi	sp,sp,-20
   43370:	dfc00415 	stw	ra,16(sp)
   43374:	df000315 	stw	fp,12(sp)
   43378:	df000304 	addi	fp,sp,12
   4337c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   43380:	d0a00617 	ldw	r2,-32744(gp)
   43384:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43388:	00003106 	br	43450 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   4338c:	e0bffd17 	ldw	r2,-12(fp)
   43390:	10800217 	ldw	r2,8(r2)
   43394:	1009883a 	mov	r4,r2
   43398:	0041a200 	call	41a20 <strlen>
   4339c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   433a0:	e0bffd17 	ldw	r2,-12(fp)
   433a4:	10c00217 	ldw	r3,8(r2)
   433a8:	e0bffe17 	ldw	r2,-8(fp)
   433ac:	10bfffc4 	addi	r2,r2,-1
   433b0:	1885883a 	add	r2,r3,r2
   433b4:	10800003 	ldbu	r2,0(r2)
   433b8:	10803fcc 	andi	r2,r2,255
   433bc:	1080201c 	xori	r2,r2,128
   433c0:	10bfe004 	addi	r2,r2,-128
   433c4:	10800bd8 	cmpnei	r2,r2,47
   433c8:	1000031e 	bne	r2,zero,433d8 <alt_find_file+0x6c>
    {
      len -= 1;
   433cc:	e0bffe17 	ldw	r2,-8(fp)
   433d0:	10bfffc4 	addi	r2,r2,-1
   433d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   433d8:	e0bffe17 	ldw	r2,-8(fp)
   433dc:	e0ffff17 	ldw	r3,-4(fp)
   433e0:	1885883a 	add	r2,r3,r2
   433e4:	10800003 	ldbu	r2,0(r2)
   433e8:	10803fcc 	andi	r2,r2,255
   433ec:	1080201c 	xori	r2,r2,128
   433f0:	10bfe004 	addi	r2,r2,-128
   433f4:	10800be0 	cmpeqi	r2,r2,47
   433f8:	1000081e 	bne	r2,zero,4341c <alt_find_file+0xb0>
   433fc:	e0bffe17 	ldw	r2,-8(fp)
   43400:	e0ffff17 	ldw	r3,-4(fp)
   43404:	1885883a 	add	r2,r3,r2
   43408:	10800003 	ldbu	r2,0(r2)
   4340c:	10803fcc 	andi	r2,r2,255
   43410:	1080201c 	xori	r2,r2,128
   43414:	10bfe004 	addi	r2,r2,-128
   43418:	10000a1e 	bne	r2,zero,43444 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   4341c:	e0bffd17 	ldw	r2,-12(fp)
   43420:	10800217 	ldw	r2,8(r2)
   43424:	e0fffe17 	ldw	r3,-8(fp)
   43428:	180d883a 	mov	r6,r3
   4342c:	e17fff17 	ldw	r5,-4(fp)
   43430:	1009883a 	mov	r4,r2
   43434:	00435c80 	call	435c8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   43438:	1000021e 	bne	r2,zero,43444 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4343c:	e0bffd17 	ldw	r2,-12(fp)
   43440:	00000706 	br	43460 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   43444:	e0bffd17 	ldw	r2,-12(fp)
   43448:	10800017 	ldw	r2,0(r2)
   4344c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   43450:	e0fffd17 	ldw	r3,-12(fp)
   43454:	d0a00604 	addi	r2,gp,-32744
   43458:	18bfcc1e 	bne	r3,r2,4338c <__alt_data_end+0xfffdb38c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4345c:	0005883a 	mov	r2,zero
}
   43460:	e037883a 	mov	sp,fp
   43464:	dfc00117 	ldw	ra,4(sp)
   43468:	df000017 	ldw	fp,0(sp)
   4346c:	dec00204 	addi	sp,sp,8
   43470:	f800283a 	ret

00043474 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   43474:	defffc04 	addi	sp,sp,-16
   43478:	df000315 	stw	fp,12(sp)
   4347c:	df000304 	addi	fp,sp,12
   43480:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   43484:	00bffa04 	movi	r2,-24
   43488:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4348c:	e03ffd15 	stw	zero,-12(fp)
   43490:	00001906 	br	434f8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   43494:	00800134 	movhi	r2,4
   43498:	108ec604 	addi	r2,r2,15128
   4349c:	e0fffd17 	ldw	r3,-12(fp)
   434a0:	18c00324 	muli	r3,r3,12
   434a4:	10c5883a 	add	r2,r2,r3
   434a8:	10800017 	ldw	r2,0(r2)
   434ac:	10000f1e 	bne	r2,zero,434ec <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   434b0:	00800134 	movhi	r2,4
   434b4:	108ec604 	addi	r2,r2,15128
   434b8:	e0fffd17 	ldw	r3,-12(fp)
   434bc:	18c00324 	muli	r3,r3,12
   434c0:	10c5883a 	add	r2,r2,r3
   434c4:	e0ffff17 	ldw	r3,-4(fp)
   434c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   434cc:	d0e00a17 	ldw	r3,-32728(gp)
   434d0:	e0bffd17 	ldw	r2,-12(fp)
   434d4:	1880020e 	bge	r3,r2,434e0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   434d8:	e0bffd17 	ldw	r2,-12(fp)
   434dc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   434e0:	e0bffd17 	ldw	r2,-12(fp)
   434e4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   434e8:	00000606 	br	43504 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   434ec:	e0bffd17 	ldw	r2,-12(fp)
   434f0:	10800044 	addi	r2,r2,1
   434f4:	e0bffd15 	stw	r2,-12(fp)
   434f8:	e0bffd17 	ldw	r2,-12(fp)
   434fc:	10800810 	cmplti	r2,r2,32
   43500:	103fe41e 	bne	r2,zero,43494 <__alt_data_end+0xfffdb494>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   43504:	e0bffe17 	ldw	r2,-8(fp)
}
   43508:	e037883a 	mov	sp,fp
   4350c:	df000017 	ldw	fp,0(sp)
   43510:	dec00104 	addi	sp,sp,4
   43514:	f800283a 	ret

00043518 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   43518:	defffb04 	addi	sp,sp,-20
   4351c:	df000415 	stw	fp,16(sp)
   43520:	df000404 	addi	fp,sp,16
   43524:	e13ffe15 	stw	r4,-8(fp)
   43528:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   4352c:	e0bfff17 	ldw	r2,-4(fp)
   43530:	10820070 	cmpltui	r2,r2,2049
   43534:	1000021e 	bne	r2,zero,43540 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   43538:	00820004 	movi	r2,2048
   4353c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   43540:	e0fffe17 	ldw	r3,-8(fp)
   43544:	e0bfff17 	ldw	r2,-4(fp)
   43548:	1885883a 	add	r2,r3,r2
   4354c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43550:	e0bffe17 	ldw	r2,-8(fp)
   43554:	e0bffc15 	stw	r2,-16(fp)
   43558:	00000506 	br	43570 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4355c:	e0bffc17 	ldw	r2,-16(fp)
   43560:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   43564:	e0bffc17 	ldw	r2,-16(fp)
   43568:	10800804 	addi	r2,r2,32
   4356c:	e0bffc15 	stw	r2,-16(fp)
   43570:	e0fffc17 	ldw	r3,-16(fp)
   43574:	e0bffd17 	ldw	r2,-12(fp)
   43578:	18bff836 	bltu	r3,r2,4355c <__alt_data_end+0xfffdb55c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4357c:	e0bffe17 	ldw	r2,-8(fp)
   43580:	108007cc 	andi	r2,r2,31
   43584:	10000226 	beq	r2,zero,43590 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   43588:	e0bffc17 	ldw	r2,-16(fp)
   4358c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   43590:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   43594:	0001883a 	nop
   43598:	e037883a 	mov	sp,fp
   4359c:	df000017 	ldw	fp,0(sp)
   435a0:	dec00104 	addi	sp,sp,4
   435a4:	f800283a 	ret

000435a8 <exit>:
   435a8:	defffe04 	addi	sp,sp,-8
   435ac:	000b883a 	mov	r5,zero
   435b0:	dc000015 	stw	r16,0(sp)
   435b4:	dfc00115 	stw	ra,4(sp)
   435b8:	2021883a 	mov	r16,r4
   435bc:	00435f80 	call	435f8 <__call_exitprocs>
   435c0:	8009883a 	mov	r4,r16
   435c4:	00437880 	call	43788 <_exit>

000435c8 <memcmp>:
   435c8:	218d883a 	add	r6,r4,r6
   435cc:	21800826 	beq	r4,r6,435f0 <memcmp+0x28>
   435d0:	20800003 	ldbu	r2,0(r4)
   435d4:	28c00003 	ldbu	r3,0(r5)
   435d8:	10c00226 	beq	r2,r3,435e4 <memcmp+0x1c>
   435dc:	10c5c83a 	sub	r2,r2,r3
   435e0:	f800283a 	ret
   435e4:	21000044 	addi	r4,r4,1
   435e8:	29400044 	addi	r5,r5,1
   435ec:	003ff706 	br	435cc <__alt_data_end+0xfffdb5cc>
   435f0:	0005883a 	mov	r2,zero
   435f4:	f800283a 	ret

000435f8 <__call_exitprocs>:
   435f8:	defff504 	addi	sp,sp,-44
   435fc:	dd000515 	stw	r20,20(sp)
   43600:	05000134 	movhi	r20,4
   43604:	dc800315 	stw	r18,12(sp)
   43608:	dfc00a15 	stw	ra,40(sp)
   4360c:	df000915 	stw	fp,36(sp)
   43610:	ddc00815 	stw	r23,32(sp)
   43614:	dd800715 	stw	r22,28(sp)
   43618:	dd400615 	stw	r21,24(sp)
   4361c:	dcc00415 	stw	r19,16(sp)
   43620:	dc400215 	stw	r17,8(sp)
   43624:	dc000115 	stw	r16,4(sp)
   43628:	d9000015 	stw	r4,0(sp)
   4362c:	2825883a 	mov	r18,r5
   43630:	a50f2904 	addi	r20,r20,15524
   43634:	a4400017 	ldw	r17,0(r20)
   43638:	8cc00c17 	ldw	r19,48(r17)
   4363c:	8c400c04 	addi	r17,r17,48
   43640:	98004526 	beq	r19,zero,43758 <__call_exitprocs+0x160>
   43644:	9c000117 	ldw	r16,4(r19)
   43648:	00900034 	movhi	r2,16384
   4364c:	10bfffc4 	addi	r2,r2,-1
   43650:	9d402217 	ldw	r21,136(r19)
   43654:	85bfffc4 	addi	r22,r16,-1
   43658:	80a1883a 	add	r16,r16,r2
   4365c:	8421883a 	add	r16,r16,r16
   43660:	8421883a 	add	r16,r16,r16
   43664:	ac2f883a 	add	r23,r21,r16
   43668:	84000204 	addi	r16,r16,8
   4366c:	9c21883a 	add	r16,r19,r16
   43670:	b0002716 	blt	r22,zero,43710 <__call_exitprocs+0x118>
   43674:	90000726 	beq	r18,zero,43694 <__call_exitprocs+0x9c>
   43678:	a800041e 	bne	r21,zero,4368c <__call_exitprocs+0x94>
   4367c:	b5bfffc4 	addi	r22,r22,-1
   43680:	bdffff04 	addi	r23,r23,-4
   43684:	843fff04 	addi	r16,r16,-4
   43688:	003ff906 	br	43670 <__alt_data_end+0xfffdb670>
   4368c:	b9002017 	ldw	r4,128(r23)
   43690:	913ffa1e 	bne	r18,r4,4367c <__alt_data_end+0xfffdb67c>
   43694:	99000117 	ldw	r4,4(r19)
   43698:	82000017 	ldw	r8,0(r16)
   4369c:	213fffc4 	addi	r4,r4,-1
   436a0:	b100021e 	bne	r22,r4,436ac <__call_exitprocs+0xb4>
   436a4:	9d800115 	stw	r22,4(r19)
   436a8:	00000106 	br	436b0 <__call_exitprocs+0xb8>
   436ac:	80000015 	stw	zero,0(r16)
   436b0:	403ff226 	beq	r8,zero,4367c <__alt_data_end+0xfffdb67c>
   436b4:	9f000117 	ldw	fp,4(r19)
   436b8:	a8000526 	beq	r21,zero,436d0 <__call_exitprocs+0xd8>
   436bc:	00800044 	movi	r2,1
   436c0:	1592983a 	sll	r9,r2,r22
   436c4:	a9404017 	ldw	r5,256(r21)
   436c8:	494a703a 	and	r5,r9,r5
   436cc:	2800021e 	bne	r5,zero,436d8 <__call_exitprocs+0xe0>
   436d0:	403ee83a 	callr	r8
   436d4:	00000906 	br	436fc <__call_exitprocs+0x104>
   436d8:	a9004117 	ldw	r4,260(r21)
   436dc:	4908703a 	and	r4,r9,r4
   436e0:	2000041e 	bne	r4,zero,436f4 <__call_exitprocs+0xfc>
   436e4:	b9400017 	ldw	r5,0(r23)
   436e8:	d9000017 	ldw	r4,0(sp)
   436ec:	403ee83a 	callr	r8
   436f0:	00000206 	br	436fc <__call_exitprocs+0x104>
   436f4:	b9000017 	ldw	r4,0(r23)
   436f8:	403ee83a 	callr	r8
   436fc:	99000117 	ldw	r4,4(r19)
   43700:	e13fcc1e 	bne	fp,r4,43634 <__alt_data_end+0xfffdb634>
   43704:	89000017 	ldw	r4,0(r17)
   43708:	993fdc26 	beq	r19,r4,4367c <__alt_data_end+0xfffdb67c>
   4370c:	003fc906 	br	43634 <__alt_data_end+0xfffdb634>
   43710:	00800034 	movhi	r2,0
   43714:	10800004 	addi	r2,r2,0
   43718:	10000f26 	beq	r2,zero,43758 <__call_exitprocs+0x160>
   4371c:	99400117 	ldw	r5,4(r19)
   43720:	99000017 	ldw	r4,0(r19)
   43724:	2800091e 	bne	r5,zero,4374c <__call_exitprocs+0x154>
   43728:	20000826 	beq	r4,zero,4374c <__call_exitprocs+0x154>
   4372c:	89000015 	stw	r4,0(r17)
   43730:	a8000226 	beq	r21,zero,4373c <__call_exitprocs+0x144>
   43734:	a809883a 	mov	r4,r21
   43738:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   4373c:	9809883a 	mov	r4,r19
   43740:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   43744:	8cc00017 	ldw	r19,0(r17)
   43748:	003fbd06 	br	43640 <__alt_data_end+0xfffdb640>
   4374c:	9823883a 	mov	r17,r19
   43750:	2027883a 	mov	r19,r4
   43754:	003fba06 	br	43640 <__alt_data_end+0xfffdb640>
   43758:	dfc00a17 	ldw	ra,40(sp)
   4375c:	df000917 	ldw	fp,36(sp)
   43760:	ddc00817 	ldw	r23,32(sp)
   43764:	dd800717 	ldw	r22,28(sp)
   43768:	dd400617 	ldw	r21,24(sp)
   4376c:	dd000517 	ldw	r20,20(sp)
   43770:	dcc00417 	ldw	r19,16(sp)
   43774:	dc800317 	ldw	r18,12(sp)
   43778:	dc400217 	ldw	r17,8(sp)
   4377c:	dc000117 	ldw	r16,4(sp)
   43780:	dec00b04 	addi	sp,sp,44
   43784:	f800283a 	ret

00043788 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   43788:	defffd04 	addi	sp,sp,-12
   4378c:	df000215 	stw	fp,8(sp)
   43790:	df000204 	addi	fp,sp,8
   43794:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   43798:	0001883a 	nop
   4379c:	e0bfff17 	ldw	r2,-4(fp)
   437a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   437a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   437a8:	10000226 	beq	r2,zero,437b4 <_exit+0x2c>
    ALT_SIM_FAIL();
   437ac:	002af070 	cmpltui	zero,zero,43969
   437b0:	00000106 	br	437b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   437b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   437b8:	003fff06 	br	437b8 <__alt_data_end+0xfffdb7b8>
