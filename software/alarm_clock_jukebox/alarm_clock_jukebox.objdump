
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00003078 memsz 0x00003078 flags r-x
    LOAD off    0x00004098 vaddr 0x00043098 paddr 0x0004337c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00004660 vaddr 0x00043660 paddr 0x00043660 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002d68  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ec  00042fac  00042fac  00003fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00043098  0004337c  00004098  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  00043660  00043660  00004660  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0004378c  0004378c  0000437c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000437c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000658  00000000  00000000  000043a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008156  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002da8  00000000  00000000  0000cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033e2  00000000  00000000  0000f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000e24  00000000  00000000  00012cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e7c  00000000  00000000  00013afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  00015978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00016c80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  00016ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018cc2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00018cc5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018ccf  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018cd0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00018cd1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00018cd5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00018cd9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00018cdd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00018ce8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00018cf3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00018cfe  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  00018d09  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  00018d6a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00086cce  00000000  00000000  0001e704  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00042fac l    d  .rodata	00000000 .rodata
00043098 l    d  .rwdata	00000000 .rwdata
00043660 l    d  .bss	00000000 .bss
0004378c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 button.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004122c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00043098 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00041b88 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00041ce0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00041e14 l     F .text	00000034 alt_dev_reg
00043178 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00042110 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00042204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00042330 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004235c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004250c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004264c l     F .text	0000003c alt_get_errno
00042688 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00043680 g     O .bss	00000004 alt_instruction_exception_handler
00041c74 g     F .text	0000006c alt_main
0004117c g     F .text	00000080 _puts_r
0004368c g     O .bss	00000100 alt_irq
0004337c g       *ABS*	00000000 __flash_rwdata_start
00041130 g     F .text	0000004c printf
00040988 g     F .text	000000ac upClockHour
00042aa8 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004366c g     O .bss	00000004 errno
00043678 g     O .bss	00000004 alt_argv
0004b34c g       *ABS*	00000000 _gp
0004334f g     O .rwdata	00000001 time_format
00040578 g     F .text	00000030 alarmLEDon
000431cc g     O .rwdata	00000180 alt_fd_list
00042acc g     F .text	00000090 alt_find_dev
000425d0 g     F .text	0000007c alt_io_redirect
000411fc g     F .text	00000014 puts
00042470 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00041f90 g     F .text	000000ec altera_avalon_jtag_uart_read
000410f4 g     F .text	0000003c _printf_r
00041038 g     F .text	00000064 .hidden __udivsi3
00042d08 g     F .text	00000090 alt_icache_flush
0004336c g     O .rwdata	00000004 alt_max_fd
00040e98 g     F .text	000000a8 downAlarmHour
00040afc g     F .text	000000c4 downClockMinute
00043350 g     O .rwdata	00000004 _global_impure_ptr
0004378c g       *ABS*	00000000 __bss_end
00041a98 g     F .text	000000f0 alt_iic_isr_register
000429a0 g     F .text	00000108 alt_tick
00041a4c g     F .text	0000004c alt_ic_irq_enabled
00043665 g     O .bss	00000003 alarm
00042904 g     F .text	0000009c alt_alarm_stop
00043670 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
000431a4 g     O .rwdata	00000028 alt_dev_null
00042310 g     F .text	00000020 alt_dcache_flush_all
00040668 g     F .text	0000015c timerSecondISR
0004337c g       *ABS*	00000000 __ram_rwdata_end
00040c9c g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00043364 g     O .rwdata	00000008 alt_dev_list
00041d1c g     F .text	000000f8 write
00040bc0 g     F .text	000000a8 downClockHour
00043098 g       *ABS*	00000000 __ram_rodata_end
00042fac g     O .rodata	0000000c COM_ANODE_SEG_TABLE
000407fc g     F .text	000000c8 upClockSecond
0004109c g     F .text	00000058 .hidden __umodsi3
00040548 g     F .text	00000030 alarmLEDoff
000405a8 g     F .text	0000004c alarmLEDtoggle
0004378c g       *ABS*	00000000 end
00043660 g     O .bss	00000005 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00040df0 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00042188 g     F .text	0000007c alt_avalon_timer_sc_init
0004207c g     F .text	00000094 altera_avalon_jtag_uart_write
00041298 g     F .text	00000524 ___vfprintf_internal_r
00042de8 g     F .text	00000190 __call_exitprocs
00040244 g     F .text	0000003c _start
00043684 g     O .bss	00000004 _alt_tick_rate
00043688 g     O .bss	00000004 _alt_nticks
00041e80 g     F .text	00000050 alt_sys_init
00043098 g       *ABS*	00000000 __ram_rwdata_start
00042fac g       *ABS*	00000000 __ram_rodata_start
0004334c g     O .rwdata	00000003 reset_clock_value
00041ed0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00042c64 g     F .text	000000a4 alt_get_fd
00042db8 g     F .text	00000030 memcmp
0004378c g       *ABS*	00000000 __alt_stack_base
00042b5c g     F .text	00000108 alt_find_file
00042398 g     F .text	000000a4 alt_dev_llist_insert
000407c4 g     F .text	00000038 resetClockTime
000417d8 g     F .text	000000b8 __sfvwrite_small_dev
00043660 g       *ABS*	00000000 __bss_start
000405f4 g     F .text	00000074 main
0004367c g     O .bss	00000004 alt_envp
00041f30 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040280 g     F .text	00000080 resetDisplay
00043370 g     O .rwdata	00000004 alt_errno
00040f40 g     F .text	00000084 .hidden __divsi3
00040a34 g     F .text	000000c8 downClockSecond
00042fac g       *ABS*	00000000 __flash_rodata_start
00041e48 g     F .text	00000038 alt_irq_init
000428a0 g     F .text	00000064 alt_release_fd
00041890 g     F .text	00000058 _write_r
000408c4 g     F .text	000000c4 upClockMinute
00043354 g     O .rwdata	00000004 _impure_ptr
00043674 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00040518 g     F .text	00000030 timerSecondEnableInterrupt
0004335c g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000418e8 g     F .text	00000050 alt_ic_isr_register
0004337c g       *ABS*	00000000 _edata
0004378c g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000419c0 g     F .text	0000008c alt_ic_irq_disable
00042d98 g     F .text	00000020 exit
00040fc4 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000404d0 g     F .text	00000048 timerSecondRegisterISR
00040d44 g     F .text	000000ac upAlarmHour
00042f78 g     F .text	00000034 _exit
00041210 g     F .text	0000001c strlen
0004274c g     F .text	00000154 open
00043668 g     O .bss	00000003 clock
0004243c g     F .text	00000034 alt_icache_flush_all
00043358 g     O .rwdata	00000004 alt_priority_mask
00041938 g     F .text	00000088 alt_ic_irq_enable
000417bc g     F .text	0000001c __vfprintf_internal
00043374 g     O .rwdata	00000008 alt_alarm_list
00042240 g     F .text	000000d0 close
00040c68 g     F .text	00000034 resetAlarmTime
00041bf0 g     F .text	00000084 alt_load
00040300 g     F .text	000001d0 updateDisplay



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	108da304 	addi	r2,r2,13964
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	108da304 	addi	r2,r2,13964
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a0cd17 	ldw	r2,-31948(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a0cd17 	ldw	r2,-31948(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6acd314 	ori	gp,gp,45900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	108d9814 	ori	r2,r2,13920

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18cde314 	ori	r3,r3,14220

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	0041bf00 	call	41bf0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	0041c740 	call	41c74 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   40280:	deffff04 	addi	sp,sp,-4
   40284:	df000015 	stw	fp,0(sp)
   40288:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   4028c:	00c03004 	movi	r3,192
   40290:	00800234 	movhi	r2,8
   40294:	10841004 	addi	r2,r2,4160
   40298:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   4029c:	00c03004 	movi	r3,192
   402a0:	00800234 	movhi	r2,8
   402a4:	10843404 	addi	r2,r2,4304
   402a8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   402ac:	00c03004 	movi	r3,192
   402b0:	00800234 	movhi	r2,8
   402b4:	10841404 	addi	r2,r2,4176
   402b8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   402bc:	00c03004 	movi	r3,192
   402c0:	00800234 	movhi	r2,8
   402c4:	10843004 	addi	r2,r2,4288
   402c8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   402cc:	00c03004 	movi	r3,192
   402d0:	00800234 	movhi	r2,8
   402d4:	10841804 	addi	r2,r2,4192
   402d8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   402dc:	00c03004 	movi	r3,192
   402e0:	00800234 	movhi	r2,8
   402e4:	10842c04 	addi	r2,r2,4272
   402e8:	10c00035 	stwio	r3,0(r2)
}
   402ec:	0001883a 	nop
   402f0:	e037883a 	mov	sp,fp
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00104 	addi	sp,sp,4
   402fc:	f800283a 	ret

00040300 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40300:	defffc04 	addi	sp,sp,-16
   40304:	dfc00315 	stw	ra,12(sp)
   40308:	df000215 	stw	fp,8(sp)
   4030c:	df000204 	addi	fp,sp,8
   40310:	e13fff15 	stw	r4,-4(fp)
  uint8_t bcd[2];
  uint8_t ledseg[2];

  // HOURS
  bcd[1] = time.hour/10;
   40314:	e0bfff03 	ldbu	r2,-4(fp)
   40318:	10803fcc 	andi	r2,r2,255
   4031c:	01400284 	movi	r5,10
   40320:	1009883a 	mov	r4,r2
   40324:	00410380 	call	41038 <__udivsi3>
   40328:	e0bffe45 	stb	r2,-7(fp)
  bcd[0] = time.hour - bcd[1]*10;
   4032c:	e0bfff03 	ldbu	r2,-4(fp)
   40330:	e0fffe43 	ldbu	r3,-7(fp)
   40334:	18fffda4 	muli	r3,r3,-10
   40338:	10c5883a 	add	r2,r2,r3
   4033c:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   40340:	e0bffe43 	ldbu	r2,-7(fp)
   40344:	10c03fcc 	andi	r3,r2,255
   40348:	00800134 	movhi	r2,4
   4034c:	108beb04 	addi	r2,r2,12204
   40350:	10c5883a 	add	r2,r2,r3
   40354:	10800003 	ldbu	r2,0(r2)
   40358:	e0bffec5 	stb	r2,-5(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   4035c:	e0bffe03 	ldbu	r2,-8(fp)
   40360:	10c03fcc 	andi	r3,r2,255
   40364:	00800134 	movhi	r2,4
   40368:	108beb04 	addi	r2,r2,12204
   4036c:	10c5883a 	add	r2,r2,r3
   40370:	10800003 	ldbu	r2,0(r2)
   40374:	e0bffe85 	stb	r2,-6(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[1]);
   40378:	e0bffec3 	ldbu	r2,-5(fp)
   4037c:	10c03fcc 	andi	r3,r2,255
   40380:	00800234 	movhi	r2,8
   40384:	10841004 	addi	r2,r2,4160
   40388:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[0]);
   4038c:	e0bffe83 	ldbu	r2,-6(fp)
   40390:	10c03fcc 	andi	r3,r2,255
   40394:	00800234 	movhi	r2,8
   40398:	10843404 	addi	r2,r2,4304
   4039c:	10c00035 	stwio	r3,0(r2)

  // MINUTES
  bcd[1] = time.minute/10;
   403a0:	e0bfff43 	ldbu	r2,-3(fp)
   403a4:	10803fcc 	andi	r2,r2,255
   403a8:	01400284 	movi	r5,10
   403ac:	1009883a 	mov	r4,r2
   403b0:	00410380 	call	41038 <__udivsi3>
   403b4:	e0bffe45 	stb	r2,-7(fp)
  bcd[0] = time.minute - bcd[1]*10;
   403b8:	e0bfff43 	ldbu	r2,-3(fp)
   403bc:	e0fffe43 	ldbu	r3,-7(fp)
   403c0:	18fffda4 	muli	r3,r3,-10
   403c4:	10c5883a 	add	r2,r2,r3
   403c8:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   403cc:	e0bffe43 	ldbu	r2,-7(fp)
   403d0:	10c03fcc 	andi	r3,r2,255
   403d4:	00800134 	movhi	r2,4
   403d8:	108beb04 	addi	r2,r2,12204
   403dc:	10c5883a 	add	r2,r2,r3
   403e0:	10800003 	ldbu	r2,0(r2)
   403e4:	e0bffec5 	stb	r2,-5(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   403e8:	e0bffe03 	ldbu	r2,-8(fp)
   403ec:	10c03fcc 	andi	r3,r2,255
   403f0:	00800134 	movhi	r2,4
   403f4:	108beb04 	addi	r2,r2,12204
   403f8:	10c5883a 	add	r2,r2,r3
   403fc:	10800003 	ldbu	r2,0(r2)
   40400:	e0bffe85 	stb	r2,-6(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[1]);
   40404:	e0bffec3 	ldbu	r2,-5(fp)
   40408:	10c03fcc 	andi	r3,r2,255
   4040c:	00800234 	movhi	r2,8
   40410:	10841404 	addi	r2,r2,4176
   40414:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[0]);
   40418:	e0bffe83 	ldbu	r2,-6(fp)
   4041c:	10c03fcc 	andi	r3,r2,255
   40420:	00800234 	movhi	r2,8
   40424:	10843004 	addi	r2,r2,4288
   40428:	10c00035 	stwio	r3,0(r2)

  // SECONDS
  bcd[1] = time.second/10;
   4042c:	e0bfff83 	ldbu	r2,-2(fp)
   40430:	10803fcc 	andi	r2,r2,255
   40434:	01400284 	movi	r5,10
   40438:	1009883a 	mov	r4,r2
   4043c:	00410380 	call	41038 <__udivsi3>
   40440:	e0bffe45 	stb	r2,-7(fp)
  bcd[0] = time.second - bcd[1]*10;
   40444:	e0bfff83 	ldbu	r2,-2(fp)
   40448:	e0fffe43 	ldbu	r3,-7(fp)
   4044c:	18fffda4 	muli	r3,r3,-10
   40450:	10c5883a 	add	r2,r2,r3
   40454:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   40458:	e0bffe43 	ldbu	r2,-7(fp)
   4045c:	10c03fcc 	andi	r3,r2,255
   40460:	00800134 	movhi	r2,4
   40464:	108beb04 	addi	r2,r2,12204
   40468:	10c5883a 	add	r2,r2,r3
   4046c:	10800003 	ldbu	r2,0(r2)
   40470:	e0bffec5 	stb	r2,-5(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   40474:	e0bffe03 	ldbu	r2,-8(fp)
   40478:	10c03fcc 	andi	r3,r2,255
   4047c:	00800134 	movhi	r2,4
   40480:	108beb04 	addi	r2,r2,12204
   40484:	10c5883a 	add	r2,r2,r3
   40488:	10800003 	ldbu	r2,0(r2)
   4048c:	e0bffe85 	stb	r2,-6(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   40490:	e0bffec3 	ldbu	r2,-5(fp)
   40494:	10c03fcc 	andi	r3,r2,255
   40498:	00800234 	movhi	r2,8
   4049c:	10841804 	addi	r2,r2,4192
   404a0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   404a4:	e0bffe83 	ldbu	r2,-6(fp)
   404a8:	10c03fcc 	andi	r3,r2,255
   404ac:	00800234 	movhi	r2,8
   404b0:	10842c04 	addi	r2,r2,4272
   404b4:	10c00035 	stwio	r3,0(r2)



   404b8:	0001883a 	nop
   404bc:	e037883a 	mov	sp,fp
   404c0:	dfc00117 	ldw	ra,4(sp)
   404c4:	df000017 	ldw	fp,0(sp)
   404c8:	dec00204 	addi	sp,sp,8
   404cc:	f800283a 	ret

000404d0 <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   404d0:	defffb04 	addi	sp,sp,-20
   404d4:	dfc00415 	stw	ra,16(sp)
   404d8:	df000315 	stw	fp,12(sp)
   404dc:	df000304 	addi	fp,sp,12
   404e0:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   404e4:	d8000015 	stw	zero,0(sp)
   404e8:	000f883a 	mov	r7,zero
   404ec:	e1bfff17 	ldw	r6,-4(fp)
   404f0:	01400044 	movi	r5,1
   404f4:	0009883a 	mov	r4,zero
   404f8:	00418e80 	call	418e8 <alt_ic_isr_register>
   404fc:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40500:	e0bffe03 	ldbu	r2,-8(fp)
}
   40504:	e037883a 	mov	sp,fp
   40508:	dfc00117 	ldw	ra,4(sp)
   4050c:	df000017 	ldw	fp,0(sp)
   40510:	dec00204 	addi	sp,sp,8
   40514:	f800283a 	ret

00040518 <timerSecondEnableInterrupt>:


void timerSecondEnableInterrupt(void) {
   40518:	deffff04 	addi	sp,sp,-4
   4051c:	df000015 	stw	fp,0(sp)
   40520:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   40524:	00c001c4 	movi	r3,7
   40528:	00800234 	movhi	r2,8
   4052c:	10840104 	addi	r2,r2,4100
   40530:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40534:	0001883a 	nop
   40538:	e037883a 	mov	sp,fp
   4053c:	df000017 	ldw	fp,0(sp)
   40540:	dec00104 	addi	sp,sp,4
   40544:	f800283a 	ret

00040548 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40548:	deffff04 	addi	sp,sp,-4
   4054c:	df000015 	stw	fp,0(sp)
   40550:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40554:	0007883a 	mov	r3,zero
   40558:	00800234 	movhi	r2,8
   4055c:	10842404 	addi	r2,r2,4240
   40560:	10c00035 	stwio	r3,0(r2)
}
   40564:	0001883a 	nop
   40568:	e037883a 	mov	sp,fp
   4056c:	df000017 	ldw	fp,0(sp)
   40570:	dec00104 	addi	sp,sp,4
   40574:	f800283a 	ret

00040578 <alarmLEDon>:

void alarmLEDon(void) {
   40578:	deffff04 	addi	sp,sp,-4
   4057c:	df000015 	stw	fp,0(sp)
   40580:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40584:	00c00044 	movi	r3,1
   40588:	00800234 	movhi	r2,8
   4058c:	10842404 	addi	r2,r2,4240
   40590:	10c00035 	stwio	r3,0(r2)
}
   40594:	0001883a 	nop
   40598:	e037883a 	mov	sp,fp
   4059c:	df000017 	ldw	fp,0(sp)
   405a0:	dec00104 	addi	sp,sp,4
   405a4:	f800283a 	ret

000405a8 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   405a8:	defffe04 	addi	sp,sp,-8
   405ac:	df000115 	stw	fp,4(sp)
   405b0:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   405b4:	00800234 	movhi	r2,8
   405b8:	10842404 	addi	r2,r2,4240
   405bc:	10800037 	ldwio	r2,0(r2)
   405c0:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   405c4:	e0bfff03 	ldbu	r2,-4(fp)
   405c8:	10803fcc 	andi	r2,r2,255
   405cc:	1005003a 	cmpeq	r2,r2,zero
   405d0:	10c03fcc 	andi	r3,r2,255
   405d4:	00800234 	movhi	r2,8
   405d8:	10842404 	addi	r2,r2,4240
   405dc:	10c00035 	stwio	r3,0(r2)
   405e0:	0001883a 	nop
   405e4:	e037883a 	mov	sp,fp
   405e8:	df000017 	ldw	fp,0(sp)
   405ec:	dec00104 	addi	sp,sp,4
   405f0:	f800283a 	ret

000405f4 <main>:
  struct config config;
};

struct mode mode;

int main(void) {
   405f4:	defffe04 	addi	sp,sp,-8
   405f8:	dfc00115 	stw	ra,4(sp)
   405fc:	df000015 	stw	fp,0(sp)
   40600:	d839883a 	mov	fp,sp

  // initialization
  mode.display = TIME_DISPLAY;
   40604:	00800104 	movi	r2,4
   40608:	d0a0c505 	stb	r2,-31980(gp)
  mode.alarm = NOT_ARMED;
   4060c:	00800084 	movi	r2,2
   40610:	d0a0c545 	stb	r2,-31979(gp)
  mode.config.on = FALSE;
   40614:	d020c585 	stb	zero,-31978(gp)
  mode.config.hour = FALSE;
   40618:	d020c5c5 	stb	zero,-31977(gp)
  mode.config.minute = FALSE;
   4061c:	d020c605 	stb	zero,-31976(gp)
  alarmLEDoff();
   40620:	00405480 	call	40548 <alarmLEDoff>
  resetClockTime();
   40624:	00407c40 	call	407c4 <resetClockTime>
  resetAlarmTime();
   40628:	0040c680 	call	40c68 <resetAlarmTime>
  resetDisplay();
   4062c:	00402800 	call	40280 <resetDisplay>

  /* the callback ISR is passed in for the registration. When the timer peripheral
  fires its interrupt, timerSecondISR() will be called
  timerSecondISR can be preceded with or without & (both pass in the function address); 
  because a function’s name can also be used to get function's address */
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   40630:	01000134 	movhi	r4,4
   40634:	21019a04 	addi	r4,r4,1640
   40638:	00404d00 	call	404d0 <timerSecondRegisterISR>
   4063c:	10803fcc 	andi	r2,r2,255
   40640:	1000051e 	bne	r2,zero,40658 <main+0x64>
    printf("timerSecondISR successively registered!\n");
   40644:	01000134 	movhi	r4,4
   40648:	210bee04 	addi	r4,r4,12216
   4064c:	00411fc0 	call	411fc <puts>
    timerSecondEnableInterrupt();
   40650:	00405180 	call	40518 <timerSecondEnableInterrupt>
   40654:	00000306 	br	40664 <main+0x70>
  }
  else {
   printf("ERROR: timerSecondISR unsuccessively registered!\n");
   40658:	01000134 	movhi	r4,4
   4065c:	210bf804 	addi	r4,r4,12256
   40660:	00411fc0 	call	411fc <puts>
  }
  // if (timerPWMRegisterISR() == ISR_REGISTRATION_SUCCESS)... etc.



  while(1) {}  
   40664:	003fff06 	br	40664 <__alt_data_end+0xfffd8664>

00040668 <timerSecondISR>:
}


// -------------- ISR callbacks -------------------

void timerSecondISR(void* isr_context) {
   40668:	defffc04 	addi	sp,sp,-16
   4066c:	dfc00315 	stw	ra,12(sp)
   40670:	df000215 	stw	fp,8(sp)
   40674:	df000204 	addi	fp,sp,8
   40678:	e13fff15 	stw	r4,-4(fp)

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   4067c:	0007883a 	mov	r3,zero
   40680:	00800234 	movhi	r2,8
   40684:	10840004 	addi	r2,r2,4096
   40688:	10c00035 	stwio	r3,0(r2)


  // for debugging purposes -> acknowledgement that interrupt has succesively fired
  //printf("timerSecond interrupt has fired!\n");
  alarmLEDtoggle();
   4068c:	00405a80 	call	405a8 <alarmLEDtoggle>

 
  if (mode.display == TIME_DISPLAY) {
   40690:	d0a0c503 	ldbu	r2,-31980(gp)
   40694:	10803fcc 	andi	r2,r2,255
   40698:	10800118 	cmpnei	r2,r2,4
   4069c:	1000411e 	bne	r2,zero,407a4 <timerSecondISR+0x13c>
    // temporary time struct for data transfer between modules
    struct time clock;

    if (mode.config.on == TRUE) {
   406a0:	d0a0c583 	ldbu	r2,-31978(gp)
   406a4:	10803fcc 	andi	r2,r2,255
   406a8:	10800058 	cmpnei	r2,r2,1
   406ac:	10001a1e 	bne	r2,zero,40718 <timerSecondISR+0xb0>

      // since we're in config, we don't want to carry the digits
      clock = upClockSecond(CARRY_OFF);
   406b0:	01000044 	movi	r4,1
   406b4:	00407fc0 	call	407fc <upClockSecond>
   406b8:	e0bffe05 	stb	r2,-8(fp)
   406bc:	1006d23a 	srli	r3,r2,8
   406c0:	1809883a 	mov	r4,r3
   406c4:	00ffffc4 	movi	r3,-1
   406c8:	20c6703a 	and	r3,r4,r3
   406cc:	e0fffe45 	stb	r3,-7(fp)
   406d0:	1004d43a 	srli	r2,r2,16
   406d4:	1007883a 	mov	r3,r2
   406d8:	00bfffc4 	movi	r2,-1
   406dc:	1884703a 	and	r2,r3,r2
   406e0:	e0bffe85 	stb	r2,-6(fp)
      printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   406e4:	e0bffe03 	ldbu	r2,-8(fp)
   406e8:	10803fcc 	andi	r2,r2,255
   406ec:	e0fffe43 	ldbu	r3,-7(fp)
   406f0:	18c03fcc 	andi	r3,r3,255
   406f4:	e13ffe83 	ldbu	r4,-6(fp)
   406f8:	21003fcc 	andi	r4,r4,255
   406fc:	200f883a 	mov	r7,r4
   40700:	180d883a 	mov	r6,r3
   40704:	100b883a 	mov	r5,r2
   40708:	01000134 	movhi	r4,4
   4070c:	210c0504 	addi	r4,r4,12308
   40710:	00411300 	call	41130 <printf>
   40714:	00002006 	br	40798 <timerSecondISR+0x130>
    }
    else if (mode.config.on == FALSE) {
   40718:	d0a0c583 	ldbu	r2,-31978(gp)
   4071c:	10803fcc 	andi	r2,r2,255
   40720:	10001a1e 	bne	r2,zero,4078c <timerSecondISR+0x124>

      // since we're not in config, the time should normally count and carry
      clock = upClockSecond(CARRY_ON);
   40724:	0009883a 	mov	r4,zero
   40728:	00407fc0 	call	407fc <upClockSecond>
   4072c:	e0bffe05 	stb	r2,-8(fp)
   40730:	1006d23a 	srli	r3,r2,8
   40734:	1809883a 	mov	r4,r3
   40738:	00ffffc4 	movi	r3,-1
   4073c:	20c6703a 	and	r3,r4,r3
   40740:	e0fffe45 	stb	r3,-7(fp)
   40744:	1004d43a 	srli	r2,r2,16
   40748:	1007883a 	mov	r3,r2
   4074c:	00bfffc4 	movi	r2,-1
   40750:	1884703a 	and	r2,r3,r2
   40754:	e0bffe85 	stb	r2,-6(fp)
      printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40758:	e0bffe03 	ldbu	r2,-8(fp)
   4075c:	10803fcc 	andi	r2,r2,255
   40760:	e0fffe43 	ldbu	r3,-7(fp)
   40764:	18c03fcc 	andi	r3,r3,255
   40768:	e13ffe83 	ldbu	r4,-6(fp)
   4076c:	21003fcc 	andi	r4,r4,255
   40770:	200f883a 	mov	r7,r4
   40774:	180d883a 	mov	r6,r3
   40778:	100b883a 	mov	r5,r2
   4077c:	01000134 	movhi	r4,4
   40780:	210c0504 	addi	r4,r4,12308
   40784:	00411300 	call	41130 <printf>
   40788:	00000306 	br	40798 <timerSecondISR+0x130>
    }
    else {
      printf("ERROR: mode.config.on is invalid\n");
   4078c:	01000134 	movhi	r4,4
   40790:	210c0f04 	addi	r4,r4,12348
   40794:	00411fc0 	call	411fc <puts>
    }

    // since the time is being displayed, we'll have to update the display
    updateDisplay(clock);
   40798:	e13ffe17 	ldw	r4,-8(fp)
   4079c:	00403000 	call	40300 <updateDisplay>
  }
  else {
    // since the current time is not being displayed, we don't update the display
    upClockSecond(CARRY_ON);
  }
}
   407a0:	00000206 	br	407ac <timerSecondISR+0x144>

    
  }
  else {
    // since the current time is not being displayed, we don't update the display
    upClockSecond(CARRY_ON);
   407a4:	0009883a 	mov	r4,zero
   407a8:	00407fc0 	call	407fc <upClockSecond>
  }
}
   407ac:	0001883a 	nop
   407b0:	e037883a 	mov	sp,fp
   407b4:	dfc00117 	ldw	ra,4(sp)
   407b8:	df000017 	ldw	fp,0(sp)
   407bc:	dec00204 	addi	sp,sp,8
   407c0:	f800283a 	ret

000407c4 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   407c4:	deffff04 	addi	sp,sp,-4
   407c8:	df000015 	stw	fp,0(sp)
   407cc:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   407d0:	008005c4 	movi	r2,23
   407d4:	d0a0c705 	stb	r2,-31972(gp)
  clock.minute = reset_clock_value[1];
   407d8:	00800ec4 	movi	r2,59
   407dc:	d0a0c745 	stb	r2,-31971(gp)
  clock.second = reset_clock_value[2];
   407e0:	0005883a 	mov	r2,zero
   407e4:	d0a0c785 	stb	r2,-31970(gp)
}
   407e8:	0001883a 	nop
   407ec:	e037883a 	mov	sp,fp
   407f0:	df000017 	ldw	fp,0(sp)
   407f4:	dec00104 	addi	sp,sp,4
   407f8:	f800283a 	ret

000407fc <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   407fc:	defffc04 	addi	sp,sp,-16
   40800:	dfc00315 	stw	ra,12(sp)
   40804:	df000215 	stw	fp,8(sp)
   40808:	df000204 	addi	fp,sp,8
   4080c:	2005883a 	mov	r2,r4
   40810:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   40814:	d0a0c783 	ldbu	r2,-31970(gp)
   40818:	10803fcc 	andi	r2,r2,255
   4081c:	10800ed8 	cmpnei	r2,r2,59
   40820:	1000061e 	bne	r2,zero,4083c <upClockSecond+0x40>
    clock.second = 0;
   40824:	d020c785 	stb	zero,-31970(gp)
    
    if (carry_setting == CARRY_ON) {
   40828:	e0bfff03 	ldbu	r2,-4(fp)
   4082c:	1000061e 	bne	r2,zero,40848 <upClockSecond+0x4c>
      upClockMinute(CARRY_ON);
   40830:	0009883a 	mov	r4,zero
   40834:	00408c40 	call	408c4 <upClockMinute>
   40838:	00000306 	br	40848 <upClockSecond+0x4c>
    }
  }
  else {
    clock.second++;
   4083c:	d0a0c783 	ldbu	r2,-31970(gp)
   40840:	10800044 	addi	r2,r2,1
   40844:	d0a0c785 	stb	r2,-31970(gp)
  }
  return clock;
   40848:	d0a0c703 	ldbu	r2,-31972(gp)
   4084c:	e0bffe05 	stb	r2,-8(fp)
   40850:	d0a0c743 	ldbu	r2,-31971(gp)
   40854:	e0bffe45 	stb	r2,-7(fp)
   40858:	d0a0c783 	ldbu	r2,-31970(gp)
   4085c:	e0bffe85 	stb	r2,-6(fp)
   40860:	0005883a 	mov	r2,zero
   40864:	e0fffe03 	ldbu	r3,-8(fp)
   40868:	18c03fcc 	andi	r3,r3,255
   4086c:	013fc004 	movi	r4,-256
   40870:	1104703a 	and	r2,r2,r4
   40874:	10c4b03a 	or	r2,r2,r3
   40878:	e0fffe43 	ldbu	r3,-7(fp)
   4087c:	18c03fcc 	andi	r3,r3,255
   40880:	1808923a 	slli	r4,r3,8
   40884:	00fffff4 	movhi	r3,65535
   40888:	18c03fc4 	addi	r3,r3,255
   4088c:	10c4703a 	and	r2,r2,r3
   40890:	1104b03a 	or	r2,r2,r4
   40894:	e0fffe83 	ldbu	r3,-6(fp)
   40898:	18c03fcc 	andi	r3,r3,255
   4089c:	1808943a 	slli	r4,r3,16
   408a0:	00ffc074 	movhi	r3,65281
   408a4:	18ffffc4 	addi	r3,r3,-1
   408a8:	10c4703a 	and	r2,r2,r3
   408ac:	1104b03a 	or	r2,r2,r4
}
   408b0:	e037883a 	mov	sp,fp
   408b4:	dfc00117 	ldw	ra,4(sp)
   408b8:	df000017 	ldw	fp,0(sp)
   408bc:	dec00204 	addi	sp,sp,8
   408c0:	f800283a 	ret

000408c4 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   408c4:	defffc04 	addi	sp,sp,-16
   408c8:	dfc00315 	stw	ra,12(sp)
   408cc:	df000215 	stw	fp,8(sp)
   408d0:	df000204 	addi	fp,sp,8
   408d4:	2005883a 	mov	r2,r4
   408d8:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   408dc:	d0a0c743 	ldbu	r2,-31971(gp)
   408e0:	10803fcc 	andi	r2,r2,255
   408e4:	10800ed8 	cmpnei	r2,r2,59
   408e8:	1000051e 	bne	r2,zero,40900 <upClockMinute+0x3c>
    clock.minute = 0;
   408ec:	d020c745 	stb	zero,-31971(gp)
    
    if (carry_setting == CARRY_ON) {
   408f0:	e0bfff03 	ldbu	r2,-4(fp)
   408f4:	1000051e 	bne	r2,zero,4090c <upClockMinute+0x48>
      upClockHour();
   408f8:	00409880 	call	40988 <upClockHour>
   408fc:	00000306 	br	4090c <upClockMinute+0x48>
    }
  }
  else {
    clock.minute++;
   40900:	d0a0c743 	ldbu	r2,-31971(gp)
   40904:	10800044 	addi	r2,r2,1
   40908:	d0a0c745 	stb	r2,-31971(gp)
  }
  return clock;
   4090c:	d0a0c703 	ldbu	r2,-31972(gp)
   40910:	e0bffe05 	stb	r2,-8(fp)
   40914:	d0a0c743 	ldbu	r2,-31971(gp)
   40918:	e0bffe45 	stb	r2,-7(fp)
   4091c:	d0a0c783 	ldbu	r2,-31970(gp)
   40920:	e0bffe85 	stb	r2,-6(fp)
   40924:	0005883a 	mov	r2,zero
   40928:	e0fffe03 	ldbu	r3,-8(fp)
   4092c:	18c03fcc 	andi	r3,r3,255
   40930:	013fc004 	movi	r4,-256
   40934:	1104703a 	and	r2,r2,r4
   40938:	10c4b03a 	or	r2,r2,r3
   4093c:	e0fffe43 	ldbu	r3,-7(fp)
   40940:	18c03fcc 	andi	r3,r3,255
   40944:	1808923a 	slli	r4,r3,8
   40948:	00fffff4 	movhi	r3,65535
   4094c:	18c03fc4 	addi	r3,r3,255
   40950:	10c4703a 	and	r2,r2,r3
   40954:	1104b03a 	or	r2,r2,r4
   40958:	e0fffe83 	ldbu	r3,-6(fp)
   4095c:	18c03fcc 	andi	r3,r3,255
   40960:	1808943a 	slli	r4,r3,16
   40964:	00ffc074 	movhi	r3,65281
   40968:	18ffffc4 	addi	r3,r3,-1
   4096c:	10c4703a 	and	r2,r2,r3
   40970:	1104b03a 	or	r2,r2,r4
}
   40974:	e037883a 	mov	sp,fp
   40978:	dfc00117 	ldw	ra,4(sp)
   4097c:	df000017 	ldw	fp,0(sp)
   40980:	dec00204 	addi	sp,sp,8
   40984:	f800283a 	ret

00040988 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   40988:	defffe04 	addi	sp,sp,-8
   4098c:	df000115 	stw	fp,4(sp)
   40990:	df000104 	addi	fp,sp,4
  if (clock.hour == time_format) {
   40994:	d0e0c703 	ldbu	r3,-31972(gp)
   40998:	d0a000c3 	ldbu	r2,-32765(gp)
   4099c:	18c03fcc 	andi	r3,r3,255
   409a0:	10803fcc 	andi	r2,r2,255
   409a4:	1880021e 	bne	r3,r2,409b0 <upClockHour+0x28>
    clock.hour = 0;
   409a8:	d020c705 	stb	zero,-31972(gp)
   409ac:	00000306 	br	409bc <upClockHour+0x34>
  }
  else {
    clock.hour++;
   409b0:	d0a0c703 	ldbu	r2,-31972(gp)
   409b4:	10800044 	addi	r2,r2,1
   409b8:	d0a0c705 	stb	r2,-31972(gp)
  }
  return clock;
   409bc:	d0a0c703 	ldbu	r2,-31972(gp)
   409c0:	e0bfff05 	stb	r2,-4(fp)
   409c4:	d0a0c743 	ldbu	r2,-31971(gp)
   409c8:	e0bfff45 	stb	r2,-3(fp)
   409cc:	d0a0c783 	ldbu	r2,-31970(gp)
   409d0:	e0bfff85 	stb	r2,-2(fp)
   409d4:	0005883a 	mov	r2,zero
   409d8:	e0ffff03 	ldbu	r3,-4(fp)
   409dc:	18c03fcc 	andi	r3,r3,255
   409e0:	013fc004 	movi	r4,-256
   409e4:	1104703a 	and	r2,r2,r4
   409e8:	10c4b03a 	or	r2,r2,r3
   409ec:	e0ffff43 	ldbu	r3,-3(fp)
   409f0:	18c03fcc 	andi	r3,r3,255
   409f4:	1808923a 	slli	r4,r3,8
   409f8:	00fffff4 	movhi	r3,65535
   409fc:	18c03fc4 	addi	r3,r3,255
   40a00:	10c4703a 	and	r2,r2,r3
   40a04:	1104b03a 	or	r2,r2,r4
   40a08:	e0ffff83 	ldbu	r3,-2(fp)
   40a0c:	18c03fcc 	andi	r3,r3,255
   40a10:	1808943a 	slli	r4,r3,16
   40a14:	00ffc074 	movhi	r3,65281
   40a18:	18ffffc4 	addi	r3,r3,-1
   40a1c:	10c4703a 	and	r2,r2,r3
   40a20:	1104b03a 	or	r2,r2,r4
}
   40a24:	e037883a 	mov	sp,fp
   40a28:	df000017 	ldw	fp,0(sp)
   40a2c:	dec00104 	addi	sp,sp,4
   40a30:	f800283a 	ret

00040a34 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   40a34:	defffc04 	addi	sp,sp,-16
   40a38:	dfc00315 	stw	ra,12(sp)
   40a3c:	df000215 	stw	fp,8(sp)
   40a40:	df000204 	addi	fp,sp,8
   40a44:	2005883a 	mov	r2,r4
   40a48:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   40a4c:	d0a0c783 	ldbu	r2,-31970(gp)
   40a50:	10803fcc 	andi	r2,r2,255
   40a54:	1000071e 	bne	r2,zero,40a74 <downClockSecond+0x40>
    clock.second = (ONE_MINUTE-1);
   40a58:	00800ec4 	movi	r2,59
   40a5c:	d0a0c785 	stb	r2,-31970(gp)
    
    if (carry_setting == CARRY_ON) {
   40a60:	e0bfff03 	ldbu	r2,-4(fp)
   40a64:	1000061e 	bne	r2,zero,40a80 <downClockSecond+0x4c>
      downClockMinute(CARRY_ON);
   40a68:	0009883a 	mov	r4,zero
   40a6c:	0040afc0 	call	40afc <downClockMinute>
   40a70:	00000306 	br	40a80 <downClockSecond+0x4c>
    }
  }
  else {
    clock.second--;
   40a74:	d0a0c783 	ldbu	r2,-31970(gp)
   40a78:	10bfffc4 	addi	r2,r2,-1
   40a7c:	d0a0c785 	stb	r2,-31970(gp)
  }
  return clock;
   40a80:	d0a0c703 	ldbu	r2,-31972(gp)
   40a84:	e0bffe05 	stb	r2,-8(fp)
   40a88:	d0a0c743 	ldbu	r2,-31971(gp)
   40a8c:	e0bffe45 	stb	r2,-7(fp)
   40a90:	d0a0c783 	ldbu	r2,-31970(gp)
   40a94:	e0bffe85 	stb	r2,-6(fp)
   40a98:	0005883a 	mov	r2,zero
   40a9c:	e0fffe03 	ldbu	r3,-8(fp)
   40aa0:	18c03fcc 	andi	r3,r3,255
   40aa4:	013fc004 	movi	r4,-256
   40aa8:	1104703a 	and	r2,r2,r4
   40aac:	10c4b03a 	or	r2,r2,r3
   40ab0:	e0fffe43 	ldbu	r3,-7(fp)
   40ab4:	18c03fcc 	andi	r3,r3,255
   40ab8:	1808923a 	slli	r4,r3,8
   40abc:	00fffff4 	movhi	r3,65535
   40ac0:	18c03fc4 	addi	r3,r3,255
   40ac4:	10c4703a 	and	r2,r2,r3
   40ac8:	1104b03a 	or	r2,r2,r4
   40acc:	e0fffe83 	ldbu	r3,-6(fp)
   40ad0:	18c03fcc 	andi	r3,r3,255
   40ad4:	1808943a 	slli	r4,r3,16
   40ad8:	00ffc074 	movhi	r3,65281
   40adc:	18ffffc4 	addi	r3,r3,-1
   40ae0:	10c4703a 	and	r2,r2,r3
   40ae4:	1104b03a 	or	r2,r2,r4
}
   40ae8:	e037883a 	mov	sp,fp
   40aec:	dfc00117 	ldw	ra,4(sp)
   40af0:	df000017 	ldw	fp,0(sp)
   40af4:	dec00204 	addi	sp,sp,8
   40af8:	f800283a 	ret

00040afc <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   40afc:	defffc04 	addi	sp,sp,-16
   40b00:	dfc00315 	stw	ra,12(sp)
   40b04:	df000215 	stw	fp,8(sp)
   40b08:	df000204 	addi	fp,sp,8
   40b0c:	2005883a 	mov	r2,r4
   40b10:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   40b14:	d0a0c743 	ldbu	r2,-31971(gp)
   40b18:	10803fcc 	andi	r2,r2,255
   40b1c:	1000061e 	bne	r2,zero,40b38 <downClockMinute+0x3c>
    clock.minute = (ONE_HOUR-1);
   40b20:	00800ec4 	movi	r2,59
   40b24:	d0a0c745 	stb	r2,-31971(gp)
    
    if (carry_setting == CARRY_ON) {
   40b28:	e0bfff03 	ldbu	r2,-4(fp)
   40b2c:	1000051e 	bne	r2,zero,40b44 <downClockMinute+0x48>
      downClockHour();
   40b30:	0040bc00 	call	40bc0 <downClockHour>
   40b34:	00000306 	br	40b44 <downClockMinute+0x48>
    }
  }
  else {
    clock.minute--;
   40b38:	d0a0c743 	ldbu	r2,-31971(gp)
   40b3c:	10bfffc4 	addi	r2,r2,-1
   40b40:	d0a0c745 	stb	r2,-31971(gp)
  }
  return clock;
   40b44:	d0a0c703 	ldbu	r2,-31972(gp)
   40b48:	e0bffe05 	stb	r2,-8(fp)
   40b4c:	d0a0c743 	ldbu	r2,-31971(gp)
   40b50:	e0bffe45 	stb	r2,-7(fp)
   40b54:	d0a0c783 	ldbu	r2,-31970(gp)
   40b58:	e0bffe85 	stb	r2,-6(fp)
   40b5c:	0005883a 	mov	r2,zero
   40b60:	e0fffe03 	ldbu	r3,-8(fp)
   40b64:	18c03fcc 	andi	r3,r3,255
   40b68:	013fc004 	movi	r4,-256
   40b6c:	1104703a 	and	r2,r2,r4
   40b70:	10c4b03a 	or	r2,r2,r3
   40b74:	e0fffe43 	ldbu	r3,-7(fp)
   40b78:	18c03fcc 	andi	r3,r3,255
   40b7c:	1808923a 	slli	r4,r3,8
   40b80:	00fffff4 	movhi	r3,65535
   40b84:	18c03fc4 	addi	r3,r3,255
   40b88:	10c4703a 	and	r2,r2,r3
   40b8c:	1104b03a 	or	r2,r2,r4
   40b90:	e0fffe83 	ldbu	r3,-6(fp)
   40b94:	18c03fcc 	andi	r3,r3,255
   40b98:	1808943a 	slli	r4,r3,16
   40b9c:	00ffc074 	movhi	r3,65281
   40ba0:	18ffffc4 	addi	r3,r3,-1
   40ba4:	10c4703a 	and	r2,r2,r3
   40ba8:	1104b03a 	or	r2,r2,r4
}
   40bac:	e037883a 	mov	sp,fp
   40bb0:	dfc00117 	ldw	ra,4(sp)
   40bb4:	df000017 	ldw	fp,0(sp)
   40bb8:	dec00204 	addi	sp,sp,8
   40bbc:	f800283a 	ret

00040bc0 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   40bc0:	defffe04 	addi	sp,sp,-8
   40bc4:	df000115 	stw	fp,4(sp)
   40bc8:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   40bcc:	d0a0c703 	ldbu	r2,-31972(gp)
   40bd0:	10803fcc 	andi	r2,r2,255
   40bd4:	1000031e 	bne	r2,zero,40be4 <downClockHour+0x24>
    clock.hour = time_format;
   40bd8:	d0a000c3 	ldbu	r2,-32765(gp)
   40bdc:	d0a0c705 	stb	r2,-31972(gp)
   40be0:	00000306 	br	40bf0 <downClockHour+0x30>
  }
  else {
    clock.hour--;
   40be4:	d0a0c703 	ldbu	r2,-31972(gp)
   40be8:	10bfffc4 	addi	r2,r2,-1
   40bec:	d0a0c705 	stb	r2,-31972(gp)
  }
  return clock;
   40bf0:	d0a0c703 	ldbu	r2,-31972(gp)
   40bf4:	e0bfff05 	stb	r2,-4(fp)
   40bf8:	d0a0c743 	ldbu	r2,-31971(gp)
   40bfc:	e0bfff45 	stb	r2,-3(fp)
   40c00:	d0a0c783 	ldbu	r2,-31970(gp)
   40c04:	e0bfff85 	stb	r2,-2(fp)
   40c08:	0005883a 	mov	r2,zero
   40c0c:	e0ffff03 	ldbu	r3,-4(fp)
   40c10:	18c03fcc 	andi	r3,r3,255
   40c14:	013fc004 	movi	r4,-256
   40c18:	1104703a 	and	r2,r2,r4
   40c1c:	10c4b03a 	or	r2,r2,r3
   40c20:	e0ffff43 	ldbu	r3,-3(fp)
   40c24:	18c03fcc 	andi	r3,r3,255
   40c28:	1808923a 	slli	r4,r3,8
   40c2c:	00fffff4 	movhi	r3,65535
   40c30:	18c03fc4 	addi	r3,r3,255
   40c34:	10c4703a 	and	r2,r2,r3
   40c38:	1104b03a 	or	r2,r2,r4
   40c3c:	e0ffff83 	ldbu	r3,-2(fp)
   40c40:	18c03fcc 	andi	r3,r3,255
   40c44:	1808943a 	slli	r4,r3,16
   40c48:	00ffc074 	movhi	r3,65281
   40c4c:	18ffffc4 	addi	r3,r3,-1
   40c50:	10c4703a 	and	r2,r2,r3
   40c54:	1104b03a 	or	r2,r2,r4
}
   40c58:	e037883a 	mov	sp,fp
   40c5c:	df000017 	ldw	fp,0(sp)
   40c60:	dec00104 	addi	sp,sp,4
   40c64:	f800283a 	ret

00040c68 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   40c68:	deffff04 	addi	sp,sp,-4
   40c6c:	df000015 	stw	fp,0(sp)
   40c70:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   40c74:	d020c645 	stb	zero,-31975(gp)
   40c78:	d020c685 	stb	zero,-31974(gp)
   40c7c:	d020c6c5 	stb	zero,-31973(gp)

  // we explicitly turn the second digits off
  alarm.second = DIGITS_OFF;
   40c80:	00801b84 	movi	r2,110
   40c84:	d0a0c6c5 	stb	r2,-31973(gp)
}
   40c88:	0001883a 	nop
   40c8c:	e037883a 	mov	sp,fp
   40c90:	df000017 	ldw	fp,0(sp)
   40c94:	dec00104 	addi	sp,sp,4
   40c98:	f800283a 	ret

00040c9c <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute() {
   40c9c:	defffe04 	addi	sp,sp,-8
   40ca0:	df000115 	stw	fp,4(sp)
   40ca4:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   40ca8:	d0a0c683 	ldbu	r2,-31974(gp)
   40cac:	10803fcc 	andi	r2,r2,255
   40cb0:	10800ed8 	cmpnei	r2,r2,59
   40cb4:	1000021e 	bne	r2,zero,40cc0 <upAlarmMinute+0x24>
    alarm.minute = 0;
   40cb8:	d020c685 	stb	zero,-31974(gp)
   40cbc:	00000306 	br	40ccc <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   40cc0:	d0a0c683 	ldbu	r2,-31974(gp)
   40cc4:	10800044 	addi	r2,r2,1
   40cc8:	d0a0c685 	stb	r2,-31974(gp)
  }
  return alarm;
   40ccc:	d0a0c643 	ldbu	r2,-31975(gp)
   40cd0:	e0bfff05 	stb	r2,-4(fp)
   40cd4:	d0a0c683 	ldbu	r2,-31974(gp)
   40cd8:	e0bfff45 	stb	r2,-3(fp)
   40cdc:	d0a0c6c3 	ldbu	r2,-31973(gp)
   40ce0:	e0bfff85 	stb	r2,-2(fp)
   40ce4:	0005883a 	mov	r2,zero
   40ce8:	e0ffff03 	ldbu	r3,-4(fp)
   40cec:	18c03fcc 	andi	r3,r3,255
   40cf0:	013fc004 	movi	r4,-256
   40cf4:	1104703a 	and	r2,r2,r4
   40cf8:	10c4b03a 	or	r2,r2,r3
   40cfc:	e0ffff43 	ldbu	r3,-3(fp)
   40d00:	18c03fcc 	andi	r3,r3,255
   40d04:	1808923a 	slli	r4,r3,8
   40d08:	00fffff4 	movhi	r3,65535
   40d0c:	18c03fc4 	addi	r3,r3,255
   40d10:	10c4703a 	and	r2,r2,r3
   40d14:	1104b03a 	or	r2,r2,r4
   40d18:	e0ffff83 	ldbu	r3,-2(fp)
   40d1c:	18c03fcc 	andi	r3,r3,255
   40d20:	1808943a 	slli	r4,r3,16
   40d24:	00ffc074 	movhi	r3,65281
   40d28:	18ffffc4 	addi	r3,r3,-1
   40d2c:	10c4703a 	and	r2,r2,r3
   40d30:	1104b03a 	or	r2,r2,r4
}
   40d34:	e037883a 	mov	sp,fp
   40d38:	df000017 	ldw	fp,0(sp)
   40d3c:	dec00104 	addi	sp,sp,4
   40d40:	f800283a 	ret

00040d44 <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   40d44:	defffe04 	addi	sp,sp,-8
   40d48:	df000115 	stw	fp,4(sp)
   40d4c:	df000104 	addi	fp,sp,4
  if (alarm.hour == time_format) {
   40d50:	d0e0c643 	ldbu	r3,-31975(gp)
   40d54:	d0a000c3 	ldbu	r2,-32765(gp)
   40d58:	18c03fcc 	andi	r3,r3,255
   40d5c:	10803fcc 	andi	r2,r2,255
   40d60:	1880021e 	bne	r3,r2,40d6c <upAlarmHour+0x28>
    alarm.hour = 0;
   40d64:	d020c645 	stb	zero,-31975(gp)
   40d68:	00000306 	br	40d78 <upAlarmHour+0x34>
  }
  else {
    alarm.hour++;
   40d6c:	d0a0c643 	ldbu	r2,-31975(gp)
   40d70:	10800044 	addi	r2,r2,1
   40d74:	d0a0c645 	stb	r2,-31975(gp)
  }
  return alarm;
   40d78:	d0a0c643 	ldbu	r2,-31975(gp)
   40d7c:	e0bfff05 	stb	r2,-4(fp)
   40d80:	d0a0c683 	ldbu	r2,-31974(gp)
   40d84:	e0bfff45 	stb	r2,-3(fp)
   40d88:	d0a0c6c3 	ldbu	r2,-31973(gp)
   40d8c:	e0bfff85 	stb	r2,-2(fp)
   40d90:	0005883a 	mov	r2,zero
   40d94:	e0ffff03 	ldbu	r3,-4(fp)
   40d98:	18c03fcc 	andi	r3,r3,255
   40d9c:	013fc004 	movi	r4,-256
   40da0:	1104703a 	and	r2,r2,r4
   40da4:	10c4b03a 	or	r2,r2,r3
   40da8:	e0ffff43 	ldbu	r3,-3(fp)
   40dac:	18c03fcc 	andi	r3,r3,255
   40db0:	1808923a 	slli	r4,r3,8
   40db4:	00fffff4 	movhi	r3,65535
   40db8:	18c03fc4 	addi	r3,r3,255
   40dbc:	10c4703a 	and	r2,r2,r3
   40dc0:	1104b03a 	or	r2,r2,r4
   40dc4:	e0ffff83 	ldbu	r3,-2(fp)
   40dc8:	18c03fcc 	andi	r3,r3,255
   40dcc:	1808943a 	slli	r4,r3,16
   40dd0:	00ffc074 	movhi	r3,65281
   40dd4:	18ffffc4 	addi	r3,r3,-1
   40dd8:	10c4703a 	and	r2,r2,r3
   40ddc:	1104b03a 	or	r2,r2,r4
}
   40de0:	e037883a 	mov	sp,fp
   40de4:	df000017 	ldw	fp,0(sp)
   40de8:	dec00104 	addi	sp,sp,4
   40dec:	f800283a 	ret

00040df0 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute() {
   40df0:	defffe04 	addi	sp,sp,-8
   40df4:	df000115 	stw	fp,4(sp)
   40df8:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   40dfc:	d0a0c683 	ldbu	r2,-31974(gp)
   40e00:	10803fcc 	andi	r2,r2,255
   40e04:	1000031e 	bne	r2,zero,40e14 <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   40e08:	00800ec4 	movi	r2,59
   40e0c:	d0a0c685 	stb	r2,-31974(gp)
   40e10:	00000306 	br	40e20 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   40e14:	d0a0c683 	ldbu	r2,-31974(gp)
   40e18:	10bfffc4 	addi	r2,r2,-1
   40e1c:	d0a0c685 	stb	r2,-31974(gp)
  }
  return alarm;
   40e20:	d0a0c643 	ldbu	r2,-31975(gp)
   40e24:	e0bfff05 	stb	r2,-4(fp)
   40e28:	d0a0c683 	ldbu	r2,-31974(gp)
   40e2c:	e0bfff45 	stb	r2,-3(fp)
   40e30:	d0a0c6c3 	ldbu	r2,-31973(gp)
   40e34:	e0bfff85 	stb	r2,-2(fp)
   40e38:	0005883a 	mov	r2,zero
   40e3c:	e0ffff03 	ldbu	r3,-4(fp)
   40e40:	18c03fcc 	andi	r3,r3,255
   40e44:	013fc004 	movi	r4,-256
   40e48:	1104703a 	and	r2,r2,r4
   40e4c:	10c4b03a 	or	r2,r2,r3
   40e50:	e0ffff43 	ldbu	r3,-3(fp)
   40e54:	18c03fcc 	andi	r3,r3,255
   40e58:	1808923a 	slli	r4,r3,8
   40e5c:	00fffff4 	movhi	r3,65535
   40e60:	18c03fc4 	addi	r3,r3,255
   40e64:	10c4703a 	and	r2,r2,r3
   40e68:	1104b03a 	or	r2,r2,r4
   40e6c:	e0ffff83 	ldbu	r3,-2(fp)
   40e70:	18c03fcc 	andi	r3,r3,255
   40e74:	1808943a 	slli	r4,r3,16
   40e78:	00ffc074 	movhi	r3,65281
   40e7c:	18ffffc4 	addi	r3,r3,-1
   40e80:	10c4703a 	and	r2,r2,r3
   40e84:	1104b03a 	or	r2,r2,r4
}
   40e88:	e037883a 	mov	sp,fp
   40e8c:	df000017 	ldw	fp,0(sp)
   40e90:	dec00104 	addi	sp,sp,4
   40e94:	f800283a 	ret

00040e98 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   40e98:	defffe04 	addi	sp,sp,-8
   40e9c:	df000115 	stw	fp,4(sp)
   40ea0:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   40ea4:	d0a0c643 	ldbu	r2,-31975(gp)
   40ea8:	10803fcc 	andi	r2,r2,255
   40eac:	1000031e 	bne	r2,zero,40ebc <downAlarmHour+0x24>
    alarm.hour = time_format;
   40eb0:	d0a000c3 	ldbu	r2,-32765(gp)
   40eb4:	d0a0c645 	stb	r2,-31975(gp)
   40eb8:	00000306 	br	40ec8 <downAlarmHour+0x30>
  }
  else {
    alarm.hour--;
   40ebc:	d0a0c643 	ldbu	r2,-31975(gp)
   40ec0:	10bfffc4 	addi	r2,r2,-1
   40ec4:	d0a0c645 	stb	r2,-31975(gp)
  }
  return alarm;
   40ec8:	d0a0c643 	ldbu	r2,-31975(gp)
   40ecc:	e0bfff05 	stb	r2,-4(fp)
   40ed0:	d0a0c683 	ldbu	r2,-31974(gp)
   40ed4:	e0bfff45 	stb	r2,-3(fp)
   40ed8:	d0a0c6c3 	ldbu	r2,-31973(gp)
   40edc:	e0bfff85 	stb	r2,-2(fp)
   40ee0:	0005883a 	mov	r2,zero
   40ee4:	e0ffff03 	ldbu	r3,-4(fp)
   40ee8:	18c03fcc 	andi	r3,r3,255
   40eec:	013fc004 	movi	r4,-256
   40ef0:	1104703a 	and	r2,r2,r4
   40ef4:	10c4b03a 	or	r2,r2,r3
   40ef8:	e0ffff43 	ldbu	r3,-3(fp)
   40efc:	18c03fcc 	andi	r3,r3,255
   40f00:	1808923a 	slli	r4,r3,8
   40f04:	00fffff4 	movhi	r3,65535
   40f08:	18c03fc4 	addi	r3,r3,255
   40f0c:	10c4703a 	and	r2,r2,r3
   40f10:	1104b03a 	or	r2,r2,r4
   40f14:	e0ffff83 	ldbu	r3,-2(fp)
   40f18:	18c03fcc 	andi	r3,r3,255
   40f1c:	1808943a 	slli	r4,r3,16
   40f20:	00ffc074 	movhi	r3,65281
   40f24:	18ffffc4 	addi	r3,r3,-1
   40f28:	10c4703a 	and	r2,r2,r3
   40f2c:	1104b03a 	or	r2,r2,r4
}
   40f30:	e037883a 	mov	sp,fp
   40f34:	df000017 	ldw	fp,0(sp)
   40f38:	dec00104 	addi	sp,sp,4
   40f3c:	f800283a 	ret

00040f40 <__divsi3>:
   40f40:	20001b16 	blt	r4,zero,40fb0 <__divsi3+0x70>
   40f44:	000f883a 	mov	r7,zero
   40f48:	28001616 	blt	r5,zero,40fa4 <__divsi3+0x64>
   40f4c:	200d883a 	mov	r6,r4
   40f50:	29001a2e 	bgeu	r5,r4,40fbc <__divsi3+0x7c>
   40f54:	00800804 	movi	r2,32
   40f58:	00c00044 	movi	r3,1
   40f5c:	00000106 	br	40f64 <__divsi3+0x24>
   40f60:	10000d26 	beq	r2,zero,40f98 <__divsi3+0x58>
   40f64:	294b883a 	add	r5,r5,r5
   40f68:	10bfffc4 	addi	r2,r2,-1
   40f6c:	18c7883a 	add	r3,r3,r3
   40f70:	293ffb36 	bltu	r5,r4,40f60 <__alt_data_end+0xfffd8f60>
   40f74:	0005883a 	mov	r2,zero
   40f78:	18000726 	beq	r3,zero,40f98 <__divsi3+0x58>
   40f7c:	0005883a 	mov	r2,zero
   40f80:	31400236 	bltu	r6,r5,40f8c <__divsi3+0x4c>
   40f84:	314dc83a 	sub	r6,r6,r5
   40f88:	10c4b03a 	or	r2,r2,r3
   40f8c:	1806d07a 	srli	r3,r3,1
   40f90:	280ad07a 	srli	r5,r5,1
   40f94:	183ffa1e 	bne	r3,zero,40f80 <__alt_data_end+0xfffd8f80>
   40f98:	38000126 	beq	r7,zero,40fa0 <__divsi3+0x60>
   40f9c:	0085c83a 	sub	r2,zero,r2
   40fa0:	f800283a 	ret
   40fa4:	014bc83a 	sub	r5,zero,r5
   40fa8:	39c0005c 	xori	r7,r7,1
   40fac:	003fe706 	br	40f4c <__alt_data_end+0xfffd8f4c>
   40fb0:	0109c83a 	sub	r4,zero,r4
   40fb4:	01c00044 	movi	r7,1
   40fb8:	003fe306 	br	40f48 <__alt_data_end+0xfffd8f48>
   40fbc:	00c00044 	movi	r3,1
   40fc0:	003fee06 	br	40f7c <__alt_data_end+0xfffd8f7c>

00040fc4 <__modsi3>:
   40fc4:	20001716 	blt	r4,zero,41024 <__modsi3+0x60>
   40fc8:	000f883a 	mov	r7,zero
   40fcc:	2005883a 	mov	r2,r4
   40fd0:	28001216 	blt	r5,zero,4101c <__modsi3+0x58>
   40fd4:	2900162e 	bgeu	r5,r4,41030 <__modsi3+0x6c>
   40fd8:	01800804 	movi	r6,32
   40fdc:	00c00044 	movi	r3,1
   40fe0:	00000106 	br	40fe8 <__modsi3+0x24>
   40fe4:	30000a26 	beq	r6,zero,41010 <__modsi3+0x4c>
   40fe8:	294b883a 	add	r5,r5,r5
   40fec:	31bfffc4 	addi	r6,r6,-1
   40ff0:	18c7883a 	add	r3,r3,r3
   40ff4:	293ffb36 	bltu	r5,r4,40fe4 <__alt_data_end+0xfffd8fe4>
   40ff8:	18000526 	beq	r3,zero,41010 <__modsi3+0x4c>
   40ffc:	1806d07a 	srli	r3,r3,1
   41000:	11400136 	bltu	r2,r5,41008 <__modsi3+0x44>
   41004:	1145c83a 	sub	r2,r2,r5
   41008:	280ad07a 	srli	r5,r5,1
   4100c:	183ffb1e 	bne	r3,zero,40ffc <__alt_data_end+0xfffd8ffc>
   41010:	38000126 	beq	r7,zero,41018 <__modsi3+0x54>
   41014:	0085c83a 	sub	r2,zero,r2
   41018:	f800283a 	ret
   4101c:	014bc83a 	sub	r5,zero,r5
   41020:	003fec06 	br	40fd4 <__alt_data_end+0xfffd8fd4>
   41024:	0109c83a 	sub	r4,zero,r4
   41028:	01c00044 	movi	r7,1
   4102c:	003fe706 	br	40fcc <__alt_data_end+0xfffd8fcc>
   41030:	00c00044 	movi	r3,1
   41034:	003ff106 	br	40ffc <__alt_data_end+0xfffd8ffc>

00041038 <__udivsi3>:
   41038:	200d883a 	mov	r6,r4
   4103c:	2900152e 	bgeu	r5,r4,41094 <__udivsi3+0x5c>
   41040:	28001416 	blt	r5,zero,41094 <__udivsi3+0x5c>
   41044:	00800804 	movi	r2,32
   41048:	00c00044 	movi	r3,1
   4104c:	00000206 	br	41058 <__udivsi3+0x20>
   41050:	10000e26 	beq	r2,zero,4108c <__udivsi3+0x54>
   41054:	28000516 	blt	r5,zero,4106c <__udivsi3+0x34>
   41058:	294b883a 	add	r5,r5,r5
   4105c:	10bfffc4 	addi	r2,r2,-1
   41060:	18c7883a 	add	r3,r3,r3
   41064:	293ffa36 	bltu	r5,r4,41050 <__alt_data_end+0xfffd9050>
   41068:	18000826 	beq	r3,zero,4108c <__udivsi3+0x54>
   4106c:	0005883a 	mov	r2,zero
   41070:	31400236 	bltu	r6,r5,4107c <__udivsi3+0x44>
   41074:	314dc83a 	sub	r6,r6,r5
   41078:	10c4b03a 	or	r2,r2,r3
   4107c:	1806d07a 	srli	r3,r3,1
   41080:	280ad07a 	srli	r5,r5,1
   41084:	183ffa1e 	bne	r3,zero,41070 <__alt_data_end+0xfffd9070>
   41088:	f800283a 	ret
   4108c:	0005883a 	mov	r2,zero
   41090:	f800283a 	ret
   41094:	00c00044 	movi	r3,1
   41098:	003ff406 	br	4106c <__alt_data_end+0xfffd906c>

0004109c <__umodsi3>:
   4109c:	2005883a 	mov	r2,r4
   410a0:	2900122e 	bgeu	r5,r4,410ec <__umodsi3+0x50>
   410a4:	28001116 	blt	r5,zero,410ec <__umodsi3+0x50>
   410a8:	01800804 	movi	r6,32
   410ac:	00c00044 	movi	r3,1
   410b0:	00000206 	br	410bc <__umodsi3+0x20>
   410b4:	30000c26 	beq	r6,zero,410e8 <__umodsi3+0x4c>
   410b8:	28000516 	blt	r5,zero,410d0 <__umodsi3+0x34>
   410bc:	294b883a 	add	r5,r5,r5
   410c0:	31bfffc4 	addi	r6,r6,-1
   410c4:	18c7883a 	add	r3,r3,r3
   410c8:	293ffa36 	bltu	r5,r4,410b4 <__alt_data_end+0xfffd90b4>
   410cc:	18000626 	beq	r3,zero,410e8 <__umodsi3+0x4c>
   410d0:	1806d07a 	srli	r3,r3,1
   410d4:	11400136 	bltu	r2,r5,410dc <__umodsi3+0x40>
   410d8:	1145c83a 	sub	r2,r2,r5
   410dc:	280ad07a 	srli	r5,r5,1
   410e0:	183ffb1e 	bne	r3,zero,410d0 <__alt_data_end+0xfffd90d0>
   410e4:	f800283a 	ret
   410e8:	f800283a 	ret
   410ec:	00c00044 	movi	r3,1
   410f0:	003ff706 	br	410d0 <__alt_data_end+0xfffd90d0>

000410f4 <_printf_r>:
   410f4:	defffd04 	addi	sp,sp,-12
   410f8:	dfc00015 	stw	ra,0(sp)
   410fc:	d9800115 	stw	r6,4(sp)
   41100:	d9c00215 	stw	r7,8(sp)
   41104:	20c00217 	ldw	r3,8(r4)
   41108:	01800134 	movhi	r6,4
   4110c:	3185f604 	addi	r6,r6,6104
   41110:	19800115 	stw	r6,4(r3)
   41114:	280d883a 	mov	r6,r5
   41118:	21400217 	ldw	r5,8(r4)
   4111c:	d9c00104 	addi	r7,sp,4
   41120:	00412980 	call	41298 <___vfprintf_internal_r>
   41124:	dfc00017 	ldw	ra,0(sp)
   41128:	dec00304 	addi	sp,sp,12
   4112c:	f800283a 	ret

00041130 <printf>:
   41130:	defffc04 	addi	sp,sp,-16
   41134:	dfc00015 	stw	ra,0(sp)
   41138:	d9400115 	stw	r5,4(sp)
   4113c:	d9800215 	stw	r6,8(sp)
   41140:	d9c00315 	stw	r7,12(sp)
   41144:	00800134 	movhi	r2,4
   41148:	108cd504 	addi	r2,r2,13140
   4114c:	10800017 	ldw	r2,0(r2)
   41150:	01400134 	movhi	r5,4
   41154:	2945f604 	addi	r5,r5,6104
   41158:	10c00217 	ldw	r3,8(r2)
   4115c:	d9800104 	addi	r6,sp,4
   41160:	19400115 	stw	r5,4(r3)
   41164:	200b883a 	mov	r5,r4
   41168:	11000217 	ldw	r4,8(r2)
   4116c:	00417bc0 	call	417bc <__vfprintf_internal>
   41170:	dfc00017 	ldw	ra,0(sp)
   41174:	dec00404 	addi	sp,sp,16
   41178:	f800283a 	ret

0004117c <_puts_r>:
   4117c:	defffd04 	addi	sp,sp,-12
   41180:	dc000015 	stw	r16,0(sp)
   41184:	2021883a 	mov	r16,r4
   41188:	2809883a 	mov	r4,r5
   4118c:	dfc00215 	stw	ra,8(sp)
   41190:	dc400115 	stw	r17,4(sp)
   41194:	2823883a 	mov	r17,r5
   41198:	00412100 	call	41210 <strlen>
   4119c:	81400217 	ldw	r5,8(r16)
   411a0:	01000134 	movhi	r4,4
   411a4:	2105f604 	addi	r4,r4,6104
   411a8:	29000115 	stw	r4,4(r5)
   411ac:	100f883a 	mov	r7,r2
   411b0:	880d883a 	mov	r6,r17
   411b4:	8009883a 	mov	r4,r16
   411b8:	00417d80 	call	417d8 <__sfvwrite_small_dev>
   411bc:	00ffffc4 	movi	r3,-1
   411c0:	10c00926 	beq	r2,r3,411e8 <_puts_r+0x6c>
   411c4:	81400217 	ldw	r5,8(r16)
   411c8:	01800134 	movhi	r6,4
   411cc:	01c00044 	movi	r7,1
   411d0:	28800117 	ldw	r2,4(r5)
   411d4:	318c1804 	addi	r6,r6,12384
   411d8:	8009883a 	mov	r4,r16
   411dc:	103ee83a 	callr	r2
   411e0:	10bfffe0 	cmpeqi	r2,r2,-1
   411e4:	0085c83a 	sub	r2,zero,r2
   411e8:	dfc00217 	ldw	ra,8(sp)
   411ec:	dc400117 	ldw	r17,4(sp)
   411f0:	dc000017 	ldw	r16,0(sp)
   411f4:	dec00304 	addi	sp,sp,12
   411f8:	f800283a 	ret

000411fc <puts>:
   411fc:	00800134 	movhi	r2,4
   41200:	108cd504 	addi	r2,r2,13140
   41204:	200b883a 	mov	r5,r4
   41208:	11000017 	ldw	r4,0(r2)
   4120c:	004117c1 	jmpi	4117c <_puts_r>

00041210 <strlen>:
   41210:	2005883a 	mov	r2,r4
   41214:	10c00007 	ldb	r3,0(r2)
   41218:	18000226 	beq	r3,zero,41224 <strlen+0x14>
   4121c:	10800044 	addi	r2,r2,1
   41220:	003ffc06 	br	41214 <__alt_data_end+0xfffd9214>
   41224:	1105c83a 	sub	r2,r2,r4
   41228:	f800283a 	ret

0004122c <print_repeat>:
   4122c:	defffb04 	addi	sp,sp,-20
   41230:	dc800315 	stw	r18,12(sp)
   41234:	dc400215 	stw	r17,8(sp)
   41238:	dc000115 	stw	r16,4(sp)
   4123c:	dfc00415 	stw	ra,16(sp)
   41240:	2025883a 	mov	r18,r4
   41244:	2823883a 	mov	r17,r5
   41248:	d9800005 	stb	r6,0(sp)
   4124c:	3821883a 	mov	r16,r7
   41250:	04000a0e 	bge	zero,r16,4127c <print_repeat+0x50>
   41254:	88800117 	ldw	r2,4(r17)
   41258:	01c00044 	movi	r7,1
   4125c:	d80d883a 	mov	r6,sp
   41260:	880b883a 	mov	r5,r17
   41264:	9009883a 	mov	r4,r18
   41268:	103ee83a 	callr	r2
   4126c:	843fffc4 	addi	r16,r16,-1
   41270:	103ff726 	beq	r2,zero,41250 <__alt_data_end+0xfffd9250>
   41274:	00bfffc4 	movi	r2,-1
   41278:	00000106 	br	41280 <print_repeat+0x54>
   4127c:	0005883a 	mov	r2,zero
   41280:	dfc00417 	ldw	ra,16(sp)
   41284:	dc800317 	ldw	r18,12(sp)
   41288:	dc400217 	ldw	r17,8(sp)
   4128c:	dc000117 	ldw	r16,4(sp)
   41290:	dec00504 	addi	sp,sp,20
   41294:	f800283a 	ret

00041298 <___vfprintf_internal_r>:
   41298:	deffe504 	addi	sp,sp,-108
   4129c:	d8c00804 	addi	r3,sp,32
   412a0:	df001915 	stw	fp,100(sp)
   412a4:	ddc01815 	stw	r23,96(sp)
   412a8:	dd801715 	stw	r22,92(sp)
   412ac:	dd401615 	stw	r21,88(sp)
   412b0:	dd001515 	stw	r20,84(sp)
   412b4:	dcc01415 	stw	r19,80(sp)
   412b8:	dc801315 	stw	r18,76(sp)
   412bc:	dc401215 	stw	r17,72(sp)
   412c0:	dc001115 	stw	r16,68(sp)
   412c4:	dfc01a15 	stw	ra,104(sp)
   412c8:	2027883a 	mov	r19,r4
   412cc:	2839883a 	mov	fp,r5
   412d0:	382d883a 	mov	r22,r7
   412d4:	d9800f15 	stw	r6,60(sp)
   412d8:	0021883a 	mov	r16,zero
   412dc:	d8000e15 	stw	zero,56(sp)
   412e0:	002f883a 	mov	r23,zero
   412e4:	002b883a 	mov	r21,zero
   412e8:	0025883a 	mov	r18,zero
   412ec:	0023883a 	mov	r17,zero
   412f0:	d8000c15 	stw	zero,48(sp)
   412f4:	d8000b15 	stw	zero,44(sp)
   412f8:	0029883a 	mov	r20,zero
   412fc:	d8c00915 	stw	r3,36(sp)
   41300:	d8c00f17 	ldw	r3,60(sp)
   41304:	19000003 	ldbu	r4,0(r3)
   41308:	20803fcc 	andi	r2,r4,255
   4130c:	1080201c 	xori	r2,r2,128
   41310:	10bfe004 	addi	r2,r2,-128
   41314:	10011c26 	beq	r2,zero,41788 <___vfprintf_internal_r+0x4f0>
   41318:	00c00044 	movi	r3,1
   4131c:	a0c01426 	beq	r20,r3,41370 <___vfprintf_internal_r+0xd8>
   41320:	1d000216 	blt	r3,r20,4132c <___vfprintf_internal_r+0x94>
   41324:	a0000626 	beq	r20,zero,41340 <___vfprintf_internal_r+0xa8>
   41328:	00011306 	br	41778 <___vfprintf_internal_r+0x4e0>
   4132c:	01400084 	movi	r5,2
   41330:	a1401d26 	beq	r20,r5,413a8 <___vfprintf_internal_r+0x110>
   41334:	014000c4 	movi	r5,3
   41338:	a1402926 	beq	r20,r5,413e0 <___vfprintf_internal_r+0x148>
   4133c:	00010e06 	br	41778 <___vfprintf_internal_r+0x4e0>
   41340:	01400944 	movi	r5,37
   41344:	1140fb26 	beq	r2,r5,41734 <___vfprintf_internal_r+0x49c>
   41348:	e0800117 	ldw	r2,4(fp)
   4134c:	d9000005 	stb	r4,0(sp)
   41350:	01c00044 	movi	r7,1
   41354:	d80d883a 	mov	r6,sp
   41358:	e00b883a 	mov	r5,fp
   4135c:	9809883a 	mov	r4,r19
   41360:	103ee83a 	callr	r2
   41364:	1000d61e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   41368:	84000044 	addi	r16,r16,1
   4136c:	00010206 	br	41778 <___vfprintf_internal_r+0x4e0>
   41370:	01400c04 	movi	r5,48
   41374:	1140f826 	beq	r2,r5,41758 <___vfprintf_internal_r+0x4c0>
   41378:	01400944 	movi	r5,37
   4137c:	11400a1e 	bne	r2,r5,413a8 <___vfprintf_internal_r+0x110>
   41380:	d8800005 	stb	r2,0(sp)
   41384:	e0800117 	ldw	r2,4(fp)
   41388:	a00f883a 	mov	r7,r20
   4138c:	d80d883a 	mov	r6,sp
   41390:	e00b883a 	mov	r5,fp
   41394:	9809883a 	mov	r4,r19
   41398:	103ee83a 	callr	r2
   4139c:	1000c81e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   413a0:	84000044 	addi	r16,r16,1
   413a4:	0000f306 	br	41774 <___vfprintf_internal_r+0x4dc>
   413a8:	217ff404 	addi	r5,r4,-48
   413ac:	29403fcc 	andi	r5,r5,255
   413b0:	00c00244 	movi	r3,9
   413b4:	19400736 	bltu	r3,r5,413d4 <___vfprintf_internal_r+0x13c>
   413b8:	00bfffc4 	movi	r2,-1
   413bc:	88800226 	beq	r17,r2,413c8 <___vfprintf_internal_r+0x130>
   413c0:	8c4002a4 	muli	r17,r17,10
   413c4:	00000106 	br	413cc <___vfprintf_internal_r+0x134>
   413c8:	0023883a 	mov	r17,zero
   413cc:	2c63883a 	add	r17,r5,r17
   413d0:	0000e206 	br	4175c <___vfprintf_internal_r+0x4c4>
   413d4:	01400b84 	movi	r5,46
   413d8:	1140e426 	beq	r2,r5,4176c <___vfprintf_internal_r+0x4d4>
   413dc:	05000084 	movi	r20,2
   413e0:	213ff404 	addi	r4,r4,-48
   413e4:	21003fcc 	andi	r4,r4,255
   413e8:	00c00244 	movi	r3,9
   413ec:	19000736 	bltu	r3,r4,4140c <___vfprintf_internal_r+0x174>
   413f0:	00bfffc4 	movi	r2,-1
   413f4:	90800226 	beq	r18,r2,41400 <___vfprintf_internal_r+0x168>
   413f8:	948002a4 	muli	r18,r18,10
   413fc:	00000106 	br	41404 <___vfprintf_internal_r+0x16c>
   41400:	0025883a 	mov	r18,zero
   41404:	24a5883a 	add	r18,r4,r18
   41408:	0000db06 	br	41778 <___vfprintf_internal_r+0x4e0>
   4140c:	00c01b04 	movi	r3,108
   41410:	10c0d426 	beq	r2,r3,41764 <___vfprintf_internal_r+0x4cc>
   41414:	013fffc4 	movi	r4,-1
   41418:	91000226 	beq	r18,r4,41424 <___vfprintf_internal_r+0x18c>
   4141c:	d8000b15 	stw	zero,44(sp)
   41420:	00000106 	br	41428 <___vfprintf_internal_r+0x190>
   41424:	04800044 	movi	r18,1
   41428:	01001a44 	movi	r4,105
   4142c:	11001626 	beq	r2,r4,41488 <___vfprintf_internal_r+0x1f0>
   41430:	20800916 	blt	r4,r2,41458 <___vfprintf_internal_r+0x1c0>
   41434:	010018c4 	movi	r4,99
   41438:	11008a26 	beq	r2,r4,41664 <___vfprintf_internal_r+0x3cc>
   4143c:	01001904 	movi	r4,100
   41440:	11001126 	beq	r2,r4,41488 <___vfprintf_internal_r+0x1f0>
   41444:	01001604 	movi	r4,88
   41448:	1100ca1e 	bne	r2,r4,41774 <___vfprintf_internal_r+0x4dc>
   4144c:	00c00044 	movi	r3,1
   41450:	d8c00e15 	stw	r3,56(sp)
   41454:	00001406 	br	414a8 <___vfprintf_internal_r+0x210>
   41458:	01001cc4 	movi	r4,115
   4145c:	11009a26 	beq	r2,r4,416c8 <___vfprintf_internal_r+0x430>
   41460:	20800416 	blt	r4,r2,41474 <___vfprintf_internal_r+0x1dc>
   41464:	01001bc4 	movi	r4,111
   41468:	1100c21e 	bne	r2,r4,41774 <___vfprintf_internal_r+0x4dc>
   4146c:	05400204 	movi	r21,8
   41470:	00000e06 	br	414ac <___vfprintf_internal_r+0x214>
   41474:	01001d44 	movi	r4,117
   41478:	11000c26 	beq	r2,r4,414ac <___vfprintf_internal_r+0x214>
   4147c:	01001e04 	movi	r4,120
   41480:	11000926 	beq	r2,r4,414a8 <___vfprintf_internal_r+0x210>
   41484:	0000bb06 	br	41774 <___vfprintf_internal_r+0x4dc>
   41488:	b5000104 	addi	r20,r22,4
   4148c:	b8000726 	beq	r23,zero,414ac <___vfprintf_internal_r+0x214>
   41490:	dd000d15 	stw	r20,52(sp)
   41494:	b5800017 	ldw	r22,0(r22)
   41498:	b000080e 	bge	r22,zero,414bc <___vfprintf_internal_r+0x224>
   4149c:	05adc83a 	sub	r22,zero,r22
   414a0:	02800044 	movi	r10,1
   414a4:	00000606 	br	414c0 <___vfprintf_internal_r+0x228>
   414a8:	05400404 	movi	r21,16
   414ac:	b0c00104 	addi	r3,r22,4
   414b0:	d8c00d15 	stw	r3,52(sp)
   414b4:	b5800017 	ldw	r22,0(r22)
   414b8:	002f883a 	mov	r23,zero
   414bc:	0015883a 	mov	r10,zero
   414c0:	d829883a 	mov	r20,sp
   414c4:	b0001426 	beq	r22,zero,41518 <___vfprintf_internal_r+0x280>
   414c8:	b009883a 	mov	r4,r22
   414cc:	a80b883a 	mov	r5,r21
   414d0:	da801015 	stw	r10,64(sp)
   414d4:	00410380 	call	41038 <__udivsi3>
   414d8:	1549383a 	mul	r4,r2,r21
   414dc:	00c00244 	movi	r3,9
   414e0:	da801017 	ldw	r10,64(sp)
   414e4:	b12dc83a 	sub	r22,r22,r4
   414e8:	1d800216 	blt	r3,r22,414f4 <___vfprintf_internal_r+0x25c>
   414ec:	b5800c04 	addi	r22,r22,48
   414f0:	00000506 	br	41508 <___vfprintf_internal_r+0x270>
   414f4:	d8c00e17 	ldw	r3,56(sp)
   414f8:	18000226 	beq	r3,zero,41504 <___vfprintf_internal_r+0x26c>
   414fc:	b5800dc4 	addi	r22,r22,55
   41500:	00000106 	br	41508 <___vfprintf_internal_r+0x270>
   41504:	b58015c4 	addi	r22,r22,87
   41508:	a5800005 	stb	r22,0(r20)
   4150c:	a5000044 	addi	r20,r20,1
   41510:	102d883a 	mov	r22,r2
   41514:	003feb06 	br	414c4 <__alt_data_end+0xfffd94c4>
   41518:	a6c7c83a 	sub	r3,r20,sp
   4151c:	d8c00a15 	stw	r3,40(sp)
   41520:	90c5c83a 	sub	r2,r18,r3
   41524:	00800a0e 	bge	zero,r2,41550 <___vfprintf_internal_r+0x2b8>
   41528:	a085883a 	add	r2,r20,r2
   4152c:	01400c04 	movi	r5,48
   41530:	d8c00917 	ldw	r3,36(sp)
   41534:	a009883a 	mov	r4,r20
   41538:	a0c0032e 	bgeu	r20,r3,41548 <___vfprintf_internal_r+0x2b0>
   4153c:	a5000044 	addi	r20,r20,1
   41540:	21400005 	stb	r5,0(r4)
   41544:	a0bffa1e 	bne	r20,r2,41530 <__alt_data_end+0xfffd9530>
   41548:	a6c7c83a 	sub	r3,r20,sp
   4154c:	d8c00a15 	stw	r3,40(sp)
   41550:	d8c00a17 	ldw	r3,40(sp)
   41554:	50d3883a 	add	r9,r10,r3
   41558:	d8c00b17 	ldw	r3,44(sp)
   4155c:	8a6dc83a 	sub	r22,r17,r9
   41560:	18001726 	beq	r3,zero,415c0 <___vfprintf_internal_r+0x328>
   41564:	50000a26 	beq	r10,zero,41590 <___vfprintf_internal_r+0x2f8>
   41568:	00800b44 	movi	r2,45
   4156c:	d8800805 	stb	r2,32(sp)
   41570:	e0800117 	ldw	r2,4(fp)
   41574:	01c00044 	movi	r7,1
   41578:	d9800804 	addi	r6,sp,32
   4157c:	e00b883a 	mov	r5,fp
   41580:	9809883a 	mov	r4,r19
   41584:	103ee83a 	callr	r2
   41588:	10004d1e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   4158c:	84000044 	addi	r16,r16,1
   41590:	0580070e 	bge	zero,r22,415b0 <___vfprintf_internal_r+0x318>
   41594:	b00f883a 	mov	r7,r22
   41598:	01800c04 	movi	r6,48
   4159c:	e00b883a 	mov	r5,fp
   415a0:	9809883a 	mov	r4,r19
   415a4:	004122c0 	call	4122c <print_repeat>
   415a8:	1000451e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   415ac:	85a1883a 	add	r16,r16,r22
   415b0:	d8c00a17 	ldw	r3,40(sp)
   415b4:	a013883a 	mov	r9,r20
   415b8:	1d2dc83a 	sub	r22,r3,r20
   415bc:	00002206 	br	41648 <___vfprintf_internal_r+0x3b0>
   415c0:	0580090e 	bge	zero,r22,415e8 <___vfprintf_internal_r+0x350>
   415c4:	b00f883a 	mov	r7,r22
   415c8:	01800804 	movi	r6,32
   415cc:	e00b883a 	mov	r5,fp
   415d0:	9809883a 	mov	r4,r19
   415d4:	da801015 	stw	r10,64(sp)
   415d8:	004122c0 	call	4122c <print_repeat>
   415dc:	da801017 	ldw	r10,64(sp)
   415e0:	1000371e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   415e4:	85a1883a 	add	r16,r16,r22
   415e8:	503ff126 	beq	r10,zero,415b0 <__alt_data_end+0xfffd95b0>
   415ec:	00800b44 	movi	r2,45
   415f0:	d8800805 	stb	r2,32(sp)
   415f4:	e0800117 	ldw	r2,4(fp)
   415f8:	01c00044 	movi	r7,1
   415fc:	d9800804 	addi	r6,sp,32
   41600:	e00b883a 	mov	r5,fp
   41604:	9809883a 	mov	r4,r19
   41608:	103ee83a 	callr	r2
   4160c:	10002c1e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   41610:	84000044 	addi	r16,r16,1
   41614:	003fe606 	br	415b0 <__alt_data_end+0xfffd95b0>
   41618:	4a7fffc4 	addi	r9,r9,-1
   4161c:	48800003 	ldbu	r2,0(r9)
   41620:	01c00044 	movi	r7,1
   41624:	d9800804 	addi	r6,sp,32
   41628:	d8800805 	stb	r2,32(sp)
   4162c:	e0800117 	ldw	r2,4(fp)
   41630:	e00b883a 	mov	r5,fp
   41634:	da401015 	stw	r9,64(sp)
   41638:	9809883a 	mov	r4,r19
   4163c:	103ee83a 	callr	r2
   41640:	da401017 	ldw	r9,64(sp)
   41644:	10001e1e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   41648:	8245c83a 	sub	r2,r16,r9
   4164c:	4d89883a 	add	r4,r9,r22
   41650:	a085883a 	add	r2,r20,r2
   41654:	013ff016 	blt	zero,r4,41618 <__alt_data_end+0xfffd9618>
   41658:	1021883a 	mov	r16,r2
   4165c:	dd800d17 	ldw	r22,52(sp)
   41660:	00004406 	br	41774 <___vfprintf_internal_r+0x4dc>
   41664:	00800044 	movi	r2,1
   41668:	1440080e 	bge	r2,r17,4168c <___vfprintf_internal_r+0x3f4>
   4166c:	8d3fffc4 	addi	r20,r17,-1
   41670:	a00f883a 	mov	r7,r20
   41674:	01800804 	movi	r6,32
   41678:	e00b883a 	mov	r5,fp
   4167c:	9809883a 	mov	r4,r19
   41680:	004122c0 	call	4122c <print_repeat>
   41684:	10000e1e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   41688:	8521883a 	add	r16,r16,r20
   4168c:	b0800017 	ldw	r2,0(r22)
   41690:	01c00044 	movi	r7,1
   41694:	d80d883a 	mov	r6,sp
   41698:	d8800005 	stb	r2,0(sp)
   4169c:	e0800117 	ldw	r2,4(fp)
   416a0:	e00b883a 	mov	r5,fp
   416a4:	9809883a 	mov	r4,r19
   416a8:	b5000104 	addi	r20,r22,4
   416ac:	103ee83a 	callr	r2
   416b0:	1000031e 	bne	r2,zero,416c0 <___vfprintf_internal_r+0x428>
   416b4:	84000044 	addi	r16,r16,1
   416b8:	a02d883a 	mov	r22,r20
   416bc:	00002d06 	br	41774 <___vfprintf_internal_r+0x4dc>
   416c0:	00bfffc4 	movi	r2,-1
   416c4:	00003106 	br	4178c <___vfprintf_internal_r+0x4f4>
   416c8:	b5000017 	ldw	r20,0(r22)
   416cc:	b0c00104 	addi	r3,r22,4
   416d0:	d8c00a15 	stw	r3,40(sp)
   416d4:	a009883a 	mov	r4,r20
   416d8:	00412100 	call	41210 <strlen>
   416dc:	8893c83a 	sub	r9,r17,r2
   416e0:	102d883a 	mov	r22,r2
   416e4:	0240090e 	bge	zero,r9,4170c <___vfprintf_internal_r+0x474>
   416e8:	480f883a 	mov	r7,r9
   416ec:	01800804 	movi	r6,32
   416f0:	e00b883a 	mov	r5,fp
   416f4:	9809883a 	mov	r4,r19
   416f8:	da401015 	stw	r9,64(sp)
   416fc:	004122c0 	call	4122c <print_repeat>
   41700:	da401017 	ldw	r9,64(sp)
   41704:	103fee1e 	bne	r2,zero,416c0 <__alt_data_end+0xfffd96c0>
   41708:	8261883a 	add	r16,r16,r9
   4170c:	e0800117 	ldw	r2,4(fp)
   41710:	b00f883a 	mov	r7,r22
   41714:	a00d883a 	mov	r6,r20
   41718:	e00b883a 	mov	r5,fp
   4171c:	9809883a 	mov	r4,r19
   41720:	103ee83a 	callr	r2
   41724:	103fe61e 	bne	r2,zero,416c0 <__alt_data_end+0xfffd96c0>
   41728:	85a1883a 	add	r16,r16,r22
   4172c:	dd800a17 	ldw	r22,40(sp)
   41730:	00001006 	br	41774 <___vfprintf_internal_r+0x4dc>
   41734:	05c00044 	movi	r23,1
   41738:	04bfffc4 	movi	r18,-1
   4173c:	d8000e15 	stw	zero,56(sp)
   41740:	05400284 	movi	r21,10
   41744:	9023883a 	mov	r17,r18
   41748:	d8000c15 	stw	zero,48(sp)
   4174c:	d8000b15 	stw	zero,44(sp)
   41750:	b829883a 	mov	r20,r23
   41754:	00000806 	br	41778 <___vfprintf_internal_r+0x4e0>
   41758:	dd000b15 	stw	r20,44(sp)
   4175c:	05000084 	movi	r20,2
   41760:	00000506 	br	41778 <___vfprintf_internal_r+0x4e0>
   41764:	00c00044 	movi	r3,1
   41768:	d8c00c15 	stw	r3,48(sp)
   4176c:	050000c4 	movi	r20,3
   41770:	00000106 	br	41778 <___vfprintf_internal_r+0x4e0>
   41774:	0029883a 	mov	r20,zero
   41778:	d8c00f17 	ldw	r3,60(sp)
   4177c:	18c00044 	addi	r3,r3,1
   41780:	d8c00f15 	stw	r3,60(sp)
   41784:	003ede06 	br	41300 <__alt_data_end+0xfffd9300>
   41788:	8005883a 	mov	r2,r16
   4178c:	dfc01a17 	ldw	ra,104(sp)
   41790:	df001917 	ldw	fp,100(sp)
   41794:	ddc01817 	ldw	r23,96(sp)
   41798:	dd801717 	ldw	r22,92(sp)
   4179c:	dd401617 	ldw	r21,88(sp)
   417a0:	dd001517 	ldw	r20,84(sp)
   417a4:	dcc01417 	ldw	r19,80(sp)
   417a8:	dc801317 	ldw	r18,76(sp)
   417ac:	dc401217 	ldw	r17,72(sp)
   417b0:	dc001117 	ldw	r16,68(sp)
   417b4:	dec01b04 	addi	sp,sp,108
   417b8:	f800283a 	ret

000417bc <__vfprintf_internal>:
   417bc:	00800134 	movhi	r2,4
   417c0:	108cd504 	addi	r2,r2,13140
   417c4:	300f883a 	mov	r7,r6
   417c8:	280d883a 	mov	r6,r5
   417cc:	200b883a 	mov	r5,r4
   417d0:	11000017 	ldw	r4,0(r2)
   417d4:	00412981 	jmpi	41298 <___vfprintf_internal_r>

000417d8 <__sfvwrite_small_dev>:
   417d8:	2880000b 	ldhu	r2,0(r5)
   417dc:	1080020c 	andi	r2,r2,8
   417e0:	10002126 	beq	r2,zero,41868 <__sfvwrite_small_dev+0x90>
   417e4:	2880008f 	ldh	r2,2(r5)
   417e8:	defffa04 	addi	sp,sp,-24
   417ec:	dc000015 	stw	r16,0(sp)
   417f0:	dfc00515 	stw	ra,20(sp)
   417f4:	dd000415 	stw	r20,16(sp)
   417f8:	dcc00315 	stw	r19,12(sp)
   417fc:	dc800215 	stw	r18,8(sp)
   41800:	dc400115 	stw	r17,4(sp)
   41804:	2821883a 	mov	r16,r5
   41808:	10001216 	blt	r2,zero,41854 <__sfvwrite_small_dev+0x7c>
   4180c:	2027883a 	mov	r19,r4
   41810:	3025883a 	mov	r18,r6
   41814:	3823883a 	mov	r17,r7
   41818:	05010004 	movi	r20,1024
   4181c:	04400b0e 	bge	zero,r17,4184c <__sfvwrite_small_dev+0x74>
   41820:	880f883a 	mov	r7,r17
   41824:	a440010e 	bge	r20,r17,4182c <__sfvwrite_small_dev+0x54>
   41828:	01c10004 	movi	r7,1024
   4182c:	8140008f 	ldh	r5,2(r16)
   41830:	900d883a 	mov	r6,r18
   41834:	9809883a 	mov	r4,r19
   41838:	00418900 	call	41890 <_write_r>
   4183c:	0080050e 	bge	zero,r2,41854 <__sfvwrite_small_dev+0x7c>
   41840:	88a3c83a 	sub	r17,r17,r2
   41844:	90a5883a 	add	r18,r18,r2
   41848:	003ff406 	br	4181c <__alt_data_end+0xfffd981c>
   4184c:	0005883a 	mov	r2,zero
   41850:	00000706 	br	41870 <__sfvwrite_small_dev+0x98>
   41854:	8080000b 	ldhu	r2,0(r16)
   41858:	10801014 	ori	r2,r2,64
   4185c:	8080000d 	sth	r2,0(r16)
   41860:	00bfffc4 	movi	r2,-1
   41864:	00000206 	br	41870 <__sfvwrite_small_dev+0x98>
   41868:	00bfffc4 	movi	r2,-1
   4186c:	f800283a 	ret
   41870:	dfc00517 	ldw	ra,20(sp)
   41874:	dd000417 	ldw	r20,16(sp)
   41878:	dcc00317 	ldw	r19,12(sp)
   4187c:	dc800217 	ldw	r18,8(sp)
   41880:	dc400117 	ldw	r17,4(sp)
   41884:	dc000017 	ldw	r16,0(sp)
   41888:	dec00604 	addi	sp,sp,24
   4188c:	f800283a 	ret

00041890 <_write_r>:
   41890:	defffd04 	addi	sp,sp,-12
   41894:	dc000015 	stw	r16,0(sp)
   41898:	04000134 	movhi	r16,4
   4189c:	dc400115 	stw	r17,4(sp)
   418a0:	840d9b04 	addi	r16,r16,13932
   418a4:	2023883a 	mov	r17,r4
   418a8:	2809883a 	mov	r4,r5
   418ac:	300b883a 	mov	r5,r6
   418b0:	380d883a 	mov	r6,r7
   418b4:	dfc00215 	stw	ra,8(sp)
   418b8:	80000015 	stw	zero,0(r16)
   418bc:	0041d1c0 	call	41d1c <write>
   418c0:	00ffffc4 	movi	r3,-1
   418c4:	10c0031e 	bne	r2,r3,418d4 <_write_r+0x44>
   418c8:	80c00017 	ldw	r3,0(r16)
   418cc:	18000126 	beq	r3,zero,418d4 <_write_r+0x44>
   418d0:	88c00015 	stw	r3,0(r17)
   418d4:	dfc00217 	ldw	ra,8(sp)
   418d8:	dc400117 	ldw	r17,4(sp)
   418dc:	dc000017 	ldw	r16,0(sp)
   418e0:	dec00304 	addi	sp,sp,12
   418e4:	f800283a 	ret

000418e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   418e8:	defff904 	addi	sp,sp,-28
   418ec:	dfc00615 	stw	ra,24(sp)
   418f0:	df000515 	stw	fp,20(sp)
   418f4:	df000504 	addi	fp,sp,20
   418f8:	e13ffc15 	stw	r4,-16(fp)
   418fc:	e17ffd15 	stw	r5,-12(fp)
   41900:	e1bffe15 	stw	r6,-8(fp)
   41904:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   41908:	e0800217 	ldw	r2,8(fp)
   4190c:	d8800015 	stw	r2,0(sp)
   41910:	e1ffff17 	ldw	r7,-4(fp)
   41914:	e1bffe17 	ldw	r6,-8(fp)
   41918:	e17ffd17 	ldw	r5,-12(fp)
   4191c:	e13ffc17 	ldw	r4,-16(fp)
   41920:	0041a980 	call	41a98 <alt_iic_isr_register>
}  
   41924:	e037883a 	mov	sp,fp
   41928:	dfc00117 	ldw	ra,4(sp)
   4192c:	df000017 	ldw	fp,0(sp)
   41930:	dec00204 	addi	sp,sp,8
   41934:	f800283a 	ret

00041938 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   41938:	defff904 	addi	sp,sp,-28
   4193c:	df000615 	stw	fp,24(sp)
   41940:	df000604 	addi	fp,sp,24
   41944:	e13ffe15 	stw	r4,-8(fp)
   41948:	e17fff15 	stw	r5,-4(fp)
   4194c:	e0bfff17 	ldw	r2,-4(fp)
   41950:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41954:	0005303a 	rdctl	r2,status
   41958:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4195c:	e0fffb17 	ldw	r3,-20(fp)
   41960:	00bfff84 	movi	r2,-2
   41964:	1884703a 	and	r2,r3,r2
   41968:	1001703a 	wrctl	status,r2
  
  return context;
   4196c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41970:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   41974:	00c00044 	movi	r3,1
   41978:	e0bffa17 	ldw	r2,-24(fp)
   4197c:	1884983a 	sll	r2,r3,r2
   41980:	1007883a 	mov	r3,r2
   41984:	d0a0c917 	ldw	r2,-31964(gp)
   41988:	1884b03a 	or	r2,r3,r2
   4198c:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41990:	d0a0c917 	ldw	r2,-31964(gp)
   41994:	100170fa 	wrctl	ienable,r2
   41998:	e0bffc17 	ldw	r2,-16(fp)
   4199c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   419a0:	e0bffd17 	ldw	r2,-12(fp)
   419a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   419a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   419ac:	0001883a 	nop
}
   419b0:	e037883a 	mov	sp,fp
   419b4:	df000017 	ldw	fp,0(sp)
   419b8:	dec00104 	addi	sp,sp,4
   419bc:	f800283a 	ret

000419c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   419c0:	defff904 	addi	sp,sp,-28
   419c4:	df000615 	stw	fp,24(sp)
   419c8:	df000604 	addi	fp,sp,24
   419cc:	e13ffe15 	stw	r4,-8(fp)
   419d0:	e17fff15 	stw	r5,-4(fp)
   419d4:	e0bfff17 	ldw	r2,-4(fp)
   419d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   419dc:	0005303a 	rdctl	r2,status
   419e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   419e4:	e0fffb17 	ldw	r3,-20(fp)
   419e8:	00bfff84 	movi	r2,-2
   419ec:	1884703a 	and	r2,r3,r2
   419f0:	1001703a 	wrctl	status,r2
  
  return context;
   419f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   419f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   419fc:	00c00044 	movi	r3,1
   41a00:	e0bffa17 	ldw	r2,-24(fp)
   41a04:	1884983a 	sll	r2,r3,r2
   41a08:	0084303a 	nor	r2,zero,r2
   41a0c:	1007883a 	mov	r3,r2
   41a10:	d0a0c917 	ldw	r2,-31964(gp)
   41a14:	1884703a 	and	r2,r3,r2
   41a18:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41a1c:	d0a0c917 	ldw	r2,-31964(gp)
   41a20:	100170fa 	wrctl	ienable,r2
   41a24:	e0bffc17 	ldw	r2,-16(fp)
   41a28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41a2c:	e0bffd17 	ldw	r2,-12(fp)
   41a30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41a34:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   41a38:	0001883a 	nop
}
   41a3c:	e037883a 	mov	sp,fp
   41a40:	df000017 	ldw	fp,0(sp)
   41a44:	dec00104 	addi	sp,sp,4
   41a48:	f800283a 	ret

00041a4c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41a4c:	defffc04 	addi	sp,sp,-16
   41a50:	df000315 	stw	fp,12(sp)
   41a54:	df000304 	addi	fp,sp,12
   41a58:	e13ffe15 	stw	r4,-8(fp)
   41a5c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   41a60:	000530fa 	rdctl	r2,ienable
   41a64:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   41a68:	00c00044 	movi	r3,1
   41a6c:	e0bfff17 	ldw	r2,-4(fp)
   41a70:	1884983a 	sll	r2,r3,r2
   41a74:	1007883a 	mov	r3,r2
   41a78:	e0bffd17 	ldw	r2,-12(fp)
   41a7c:	1884703a 	and	r2,r3,r2
   41a80:	1004c03a 	cmpne	r2,r2,zero
   41a84:	10803fcc 	andi	r2,r2,255
}
   41a88:	e037883a 	mov	sp,fp
   41a8c:	df000017 	ldw	fp,0(sp)
   41a90:	dec00104 	addi	sp,sp,4
   41a94:	f800283a 	ret

00041a98 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41a98:	defff504 	addi	sp,sp,-44
   41a9c:	dfc00a15 	stw	ra,40(sp)
   41aa0:	df000915 	stw	fp,36(sp)
   41aa4:	df000904 	addi	fp,sp,36
   41aa8:	e13ffc15 	stw	r4,-16(fp)
   41aac:	e17ffd15 	stw	r5,-12(fp)
   41ab0:	e1bffe15 	stw	r6,-8(fp)
   41ab4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   41ab8:	00bffa84 	movi	r2,-22
   41abc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   41ac0:	e0bffd17 	ldw	r2,-12(fp)
   41ac4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   41ac8:	e0bff817 	ldw	r2,-32(fp)
   41acc:	10800808 	cmpgei	r2,r2,32
   41ad0:	1000271e 	bne	r2,zero,41b70 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41ad4:	0005303a 	rdctl	r2,status
   41ad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41adc:	e0fffb17 	ldw	r3,-20(fp)
   41ae0:	00bfff84 	movi	r2,-2
   41ae4:	1884703a 	and	r2,r3,r2
   41ae8:	1001703a 	wrctl	status,r2
  
  return context;
   41aec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   41af0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   41af4:	00800134 	movhi	r2,4
   41af8:	108da304 	addi	r2,r2,13964
   41afc:	e0fff817 	ldw	r3,-32(fp)
   41b00:	180690fa 	slli	r3,r3,3
   41b04:	10c5883a 	add	r2,r2,r3
   41b08:	e0fffe17 	ldw	r3,-8(fp)
   41b0c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   41b10:	00800134 	movhi	r2,4
   41b14:	108da304 	addi	r2,r2,13964
   41b18:	e0fff817 	ldw	r3,-32(fp)
   41b1c:	180690fa 	slli	r3,r3,3
   41b20:	10c5883a 	add	r2,r2,r3
   41b24:	10800104 	addi	r2,r2,4
   41b28:	e0ffff17 	ldw	r3,-4(fp)
   41b2c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   41b30:	e0bffe17 	ldw	r2,-8(fp)
   41b34:	10000526 	beq	r2,zero,41b4c <alt_iic_isr_register+0xb4>
   41b38:	e0bff817 	ldw	r2,-32(fp)
   41b3c:	100b883a 	mov	r5,r2
   41b40:	e13ffc17 	ldw	r4,-16(fp)
   41b44:	00419380 	call	41938 <alt_ic_irq_enable>
   41b48:	00000406 	br	41b5c <alt_iic_isr_register+0xc4>
   41b4c:	e0bff817 	ldw	r2,-32(fp)
   41b50:	100b883a 	mov	r5,r2
   41b54:	e13ffc17 	ldw	r4,-16(fp)
   41b58:	00419c00 	call	419c0 <alt_ic_irq_disable>
   41b5c:	e0bff715 	stw	r2,-36(fp)
   41b60:	e0bffa17 	ldw	r2,-24(fp)
   41b64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41b68:	e0bff917 	ldw	r2,-28(fp)
   41b6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   41b70:	e0bff717 	ldw	r2,-36(fp)
}
   41b74:	e037883a 	mov	sp,fp
   41b78:	dfc00117 	ldw	ra,4(sp)
   41b7c:	df000017 	ldw	fp,0(sp)
   41b80:	dec00204 	addi	sp,sp,8
   41b84:	f800283a 	ret

00041b88 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   41b88:	defffc04 	addi	sp,sp,-16
   41b8c:	df000315 	stw	fp,12(sp)
   41b90:	df000304 	addi	fp,sp,12
   41b94:	e13ffd15 	stw	r4,-12(fp)
   41b98:	e17ffe15 	stw	r5,-8(fp)
   41b9c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   41ba0:	e0fffe17 	ldw	r3,-8(fp)
   41ba4:	e0bffd17 	ldw	r2,-12(fp)
   41ba8:	18800c26 	beq	r3,r2,41bdc <alt_load_section+0x54>
  {
    while( to != end )
   41bac:	00000806 	br	41bd0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   41bb0:	e0bffe17 	ldw	r2,-8(fp)
   41bb4:	10c00104 	addi	r3,r2,4
   41bb8:	e0fffe15 	stw	r3,-8(fp)
   41bbc:	e0fffd17 	ldw	r3,-12(fp)
   41bc0:	19000104 	addi	r4,r3,4
   41bc4:	e13ffd15 	stw	r4,-12(fp)
   41bc8:	18c00017 	ldw	r3,0(r3)
   41bcc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   41bd0:	e0fffe17 	ldw	r3,-8(fp)
   41bd4:	e0bfff17 	ldw	r2,-4(fp)
   41bd8:	18bff51e 	bne	r3,r2,41bb0 <__alt_data_end+0xfffd9bb0>
    {
      *to++ = *from++;
    }
  }
}
   41bdc:	0001883a 	nop
   41be0:	e037883a 	mov	sp,fp
   41be4:	df000017 	ldw	fp,0(sp)
   41be8:	dec00104 	addi	sp,sp,4
   41bec:	f800283a 	ret

00041bf0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   41bf0:	defffe04 	addi	sp,sp,-8
   41bf4:	dfc00115 	stw	ra,4(sp)
   41bf8:	df000015 	stw	fp,0(sp)
   41bfc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   41c00:	01800134 	movhi	r6,4
   41c04:	318cdf04 	addi	r6,r6,13180
   41c08:	01400134 	movhi	r5,4
   41c0c:	294c2604 	addi	r5,r5,12440
   41c10:	01000134 	movhi	r4,4
   41c14:	210cdf04 	addi	r4,r4,13180
   41c18:	0041b880 	call	41b88 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   41c1c:	01800134 	movhi	r6,4
   41c20:	31809104 	addi	r6,r6,580
   41c24:	01400134 	movhi	r5,4
   41c28:	29400804 	addi	r5,r5,32
   41c2c:	01000134 	movhi	r4,4
   41c30:	21000804 	addi	r4,r4,32
   41c34:	0041b880 	call	41b88 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   41c38:	01800134 	movhi	r6,4
   41c3c:	318c2604 	addi	r6,r6,12440
   41c40:	01400134 	movhi	r5,4
   41c44:	294beb04 	addi	r5,r5,12204
   41c48:	01000134 	movhi	r4,4
   41c4c:	210beb04 	addi	r4,r4,12204
   41c50:	0041b880 	call	41b88 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   41c54:	00423100 	call	42310 <alt_dcache_flush_all>
  alt_icache_flush_all();
   41c58:	004243c0 	call	4243c <alt_icache_flush_all>
}
   41c5c:	0001883a 	nop
   41c60:	e037883a 	mov	sp,fp
   41c64:	dfc00117 	ldw	ra,4(sp)
   41c68:	df000017 	ldw	fp,0(sp)
   41c6c:	dec00204 	addi	sp,sp,8
   41c70:	f800283a 	ret

00041c74 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   41c74:	defffd04 	addi	sp,sp,-12
   41c78:	dfc00215 	stw	ra,8(sp)
   41c7c:	df000115 	stw	fp,4(sp)
   41c80:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   41c84:	0009883a 	mov	r4,zero
   41c88:	0041e480 	call	41e48 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   41c8c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   41c90:	0041e800 	call	41e80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   41c94:	01800134 	movhi	r6,4
   41c98:	318c1904 	addi	r6,r6,12388
   41c9c:	01400134 	movhi	r5,4
   41ca0:	294c1904 	addi	r5,r5,12388
   41ca4:	01000134 	movhi	r4,4
   41ca8:	210c1904 	addi	r4,r4,12388
   41cac:	00425d00 	call	425d0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   41cb0:	d0a0ca17 	ldw	r2,-31960(gp)
   41cb4:	d0e0cb17 	ldw	r3,-31956(gp)
   41cb8:	d120cc17 	ldw	r4,-31952(gp)
   41cbc:	200d883a 	mov	r6,r4
   41cc0:	180b883a 	mov	r5,r3
   41cc4:	1009883a 	mov	r4,r2
   41cc8:	00405f40 	call	405f4 <main>
   41ccc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   41cd0:	01000044 	movi	r4,1
   41cd4:	00422400 	call	42240 <close>
  exit (result);
   41cd8:	e13fff17 	ldw	r4,-4(fp)
   41cdc:	0042d980 	call	42d98 <exit>

00041ce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41ce0:	defffe04 	addi	sp,sp,-8
   41ce4:	dfc00115 	stw	ra,4(sp)
   41ce8:	df000015 	stw	fp,0(sp)
   41cec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41cf0:	d0a00917 	ldw	r2,-32732(gp)
   41cf4:	10000326 	beq	r2,zero,41d04 <alt_get_errno+0x24>
   41cf8:	d0a00917 	ldw	r2,-32732(gp)
   41cfc:	103ee83a 	callr	r2
   41d00:	00000106 	br	41d08 <alt_get_errno+0x28>
   41d04:	d0a0c804 	addi	r2,gp,-31968
}
   41d08:	e037883a 	mov	sp,fp
   41d0c:	dfc00117 	ldw	ra,4(sp)
   41d10:	df000017 	ldw	fp,0(sp)
   41d14:	dec00204 	addi	sp,sp,8
   41d18:	f800283a 	ret

00041d1c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   41d1c:	defff904 	addi	sp,sp,-28
   41d20:	dfc00615 	stw	ra,24(sp)
   41d24:	df000515 	stw	fp,20(sp)
   41d28:	df000504 	addi	fp,sp,20
   41d2c:	e13ffd15 	stw	r4,-12(fp)
   41d30:	e17ffe15 	stw	r5,-8(fp)
   41d34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   41d38:	e0bffd17 	ldw	r2,-12(fp)
   41d3c:	10000616 	blt	r2,zero,41d58 <write+0x3c>
   41d40:	e0bffd17 	ldw	r2,-12(fp)
   41d44:	10c00324 	muli	r3,r2,12
   41d48:	00800134 	movhi	r2,4
   41d4c:	108c7304 	addi	r2,r2,12748
   41d50:	1885883a 	add	r2,r3,r2
   41d54:	00000106 	br	41d5c <write+0x40>
   41d58:	0005883a 	mov	r2,zero
   41d5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   41d60:	e0bffb17 	ldw	r2,-20(fp)
   41d64:	10002126 	beq	r2,zero,41dec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   41d68:	e0bffb17 	ldw	r2,-20(fp)
   41d6c:	10800217 	ldw	r2,8(r2)
   41d70:	108000cc 	andi	r2,r2,3
   41d74:	10001826 	beq	r2,zero,41dd8 <write+0xbc>
   41d78:	e0bffb17 	ldw	r2,-20(fp)
   41d7c:	10800017 	ldw	r2,0(r2)
   41d80:	10800617 	ldw	r2,24(r2)
   41d84:	10001426 	beq	r2,zero,41dd8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   41d88:	e0bffb17 	ldw	r2,-20(fp)
   41d8c:	10800017 	ldw	r2,0(r2)
   41d90:	10800617 	ldw	r2,24(r2)
   41d94:	e0ffff17 	ldw	r3,-4(fp)
   41d98:	180d883a 	mov	r6,r3
   41d9c:	e17ffe17 	ldw	r5,-8(fp)
   41da0:	e13ffb17 	ldw	r4,-20(fp)
   41da4:	103ee83a 	callr	r2
   41da8:	e0bffc15 	stw	r2,-16(fp)
   41dac:	e0bffc17 	ldw	r2,-16(fp)
   41db0:	1000070e 	bge	r2,zero,41dd0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   41db4:	0041ce00 	call	41ce0 <alt_get_errno>
   41db8:	1007883a 	mov	r3,r2
   41dbc:	e0bffc17 	ldw	r2,-16(fp)
   41dc0:	0085c83a 	sub	r2,zero,r2
   41dc4:	18800015 	stw	r2,0(r3)
        return -1;
   41dc8:	00bfffc4 	movi	r2,-1
   41dcc:	00000c06 	br	41e00 <write+0xe4>
      }
      return rval;
   41dd0:	e0bffc17 	ldw	r2,-16(fp)
   41dd4:	00000a06 	br	41e00 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   41dd8:	0041ce00 	call	41ce0 <alt_get_errno>
   41ddc:	1007883a 	mov	r3,r2
   41de0:	00800344 	movi	r2,13
   41de4:	18800015 	stw	r2,0(r3)
   41de8:	00000406 	br	41dfc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   41dec:	0041ce00 	call	41ce0 <alt_get_errno>
   41df0:	1007883a 	mov	r3,r2
   41df4:	00801444 	movi	r2,81
   41df8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   41dfc:	00bfffc4 	movi	r2,-1
}
   41e00:	e037883a 	mov	sp,fp
   41e04:	dfc00117 	ldw	ra,4(sp)
   41e08:	df000017 	ldw	fp,0(sp)
   41e0c:	dec00204 	addi	sp,sp,8
   41e10:	f800283a 	ret

00041e14 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   41e14:	defffd04 	addi	sp,sp,-12
   41e18:	dfc00215 	stw	ra,8(sp)
   41e1c:	df000115 	stw	fp,4(sp)
   41e20:	df000104 	addi	fp,sp,4
   41e24:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   41e28:	d1600604 	addi	r5,gp,-32744
   41e2c:	e13fff17 	ldw	r4,-4(fp)
   41e30:	00423980 	call	42398 <alt_dev_llist_insert>
}
   41e34:	e037883a 	mov	sp,fp
   41e38:	dfc00117 	ldw	ra,4(sp)
   41e3c:	df000017 	ldw	fp,0(sp)
   41e40:	dec00204 	addi	sp,sp,8
   41e44:	f800283a 	ret

00041e48 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   41e48:	defffd04 	addi	sp,sp,-12
   41e4c:	dfc00215 	stw	ra,8(sp)
   41e50:	df000115 	stw	fp,4(sp)
   41e54:	df000104 	addi	fp,sp,4
   41e58:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   41e5c:	0042aa80 	call	42aa8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   41e60:	00800044 	movi	r2,1
   41e64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   41e68:	0001883a 	nop
   41e6c:	e037883a 	mov	sp,fp
   41e70:	dfc00117 	ldw	ra,4(sp)
   41e74:	df000017 	ldw	fp,0(sp)
   41e78:	dec00204 	addi	sp,sp,8
   41e7c:	f800283a 	ret

00041e80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   41e80:	defffe04 	addi	sp,sp,-8
   41e84:	dfc00115 	stw	ra,4(sp)
   41e88:	df000015 	stw	fp,0(sp)
   41e8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   41e90:	01c0fa04 	movi	r7,1000
   41e94:	000d883a 	mov	r6,zero
   41e98:	000b883a 	mov	r5,zero
   41e9c:	01000234 	movhi	r4,8
   41ea0:	21040804 	addi	r4,r4,4128
   41ea4:	00421880 	call	42188 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   41ea8:	01000134 	movhi	r4,4
   41eac:	210c5e04 	addi	r4,r4,12664
   41eb0:	0041e140 	call	41e14 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   41eb4:	0001883a 	nop
}
   41eb8:	0001883a 	nop
   41ebc:	e037883a 	mov	sp,fp
   41ec0:	dfc00117 	ldw	ra,4(sp)
   41ec4:	df000017 	ldw	fp,0(sp)
   41ec8:	dec00204 	addi	sp,sp,8
   41ecc:	f800283a 	ret

00041ed0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   41ed0:	defffa04 	addi	sp,sp,-24
   41ed4:	dfc00515 	stw	ra,20(sp)
   41ed8:	df000415 	stw	fp,16(sp)
   41edc:	df000404 	addi	fp,sp,16
   41ee0:	e13ffd15 	stw	r4,-12(fp)
   41ee4:	e17ffe15 	stw	r5,-8(fp)
   41ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41eec:	e0bffd17 	ldw	r2,-12(fp)
   41ef0:	10800017 	ldw	r2,0(r2)
   41ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   41ef8:	e0bffc17 	ldw	r2,-16(fp)
   41efc:	10c00a04 	addi	r3,r2,40
   41f00:	e0bffd17 	ldw	r2,-12(fp)
   41f04:	10800217 	ldw	r2,8(r2)
   41f08:	100f883a 	mov	r7,r2
   41f0c:	e1bfff17 	ldw	r6,-4(fp)
   41f10:	e17ffe17 	ldw	r5,-8(fp)
   41f14:	1809883a 	mov	r4,r3
   41f18:	0041f900 	call	41f90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   41f1c:	e037883a 	mov	sp,fp
   41f20:	dfc00117 	ldw	ra,4(sp)
   41f24:	df000017 	ldw	fp,0(sp)
   41f28:	dec00204 	addi	sp,sp,8
   41f2c:	f800283a 	ret

00041f30 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   41f30:	defffa04 	addi	sp,sp,-24
   41f34:	dfc00515 	stw	ra,20(sp)
   41f38:	df000415 	stw	fp,16(sp)
   41f3c:	df000404 	addi	fp,sp,16
   41f40:	e13ffd15 	stw	r4,-12(fp)
   41f44:	e17ffe15 	stw	r5,-8(fp)
   41f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41f4c:	e0bffd17 	ldw	r2,-12(fp)
   41f50:	10800017 	ldw	r2,0(r2)
   41f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   41f58:	e0bffc17 	ldw	r2,-16(fp)
   41f5c:	10c00a04 	addi	r3,r2,40
   41f60:	e0bffd17 	ldw	r2,-12(fp)
   41f64:	10800217 	ldw	r2,8(r2)
   41f68:	100f883a 	mov	r7,r2
   41f6c:	e1bfff17 	ldw	r6,-4(fp)
   41f70:	e17ffe17 	ldw	r5,-8(fp)
   41f74:	1809883a 	mov	r4,r3
   41f78:	004207c0 	call	4207c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   41f7c:	e037883a 	mov	sp,fp
   41f80:	dfc00117 	ldw	ra,4(sp)
   41f84:	df000017 	ldw	fp,0(sp)
   41f88:	dec00204 	addi	sp,sp,8
   41f8c:	f800283a 	ret

00041f90 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   41f90:	defff704 	addi	sp,sp,-36
   41f94:	df000815 	stw	fp,32(sp)
   41f98:	df000804 	addi	fp,sp,32
   41f9c:	e13ffc15 	stw	r4,-16(fp)
   41fa0:	e17ffd15 	stw	r5,-12(fp)
   41fa4:	e1bffe15 	stw	r6,-8(fp)
   41fa8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   41fac:	e0bffc17 	ldw	r2,-16(fp)
   41fb0:	10800017 	ldw	r2,0(r2)
   41fb4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   41fb8:	e0bffd17 	ldw	r2,-12(fp)
   41fbc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   41fc0:	e0bffe17 	ldw	r2,-8(fp)
   41fc4:	e0fffd17 	ldw	r3,-12(fp)
   41fc8:	1885883a 	add	r2,r3,r2
   41fcc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   41fd0:	00001206 	br	4201c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   41fd4:	e0bff917 	ldw	r2,-28(fp)
   41fd8:	10800037 	ldwio	r2,0(r2)
   41fdc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   41fe0:	e0bffb17 	ldw	r2,-20(fp)
   41fe4:	10a0000c 	andi	r2,r2,32768
   41fe8:	10000626 	beq	r2,zero,42004 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   41fec:	e0bff817 	ldw	r2,-32(fp)
   41ff0:	10c00044 	addi	r3,r2,1
   41ff4:	e0fff815 	stw	r3,-32(fp)
   41ff8:	e0fffb17 	ldw	r3,-20(fp)
   41ffc:	10c00005 	stb	r3,0(r2)
   42000:	00000606 	br	4201c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   42004:	e0fff817 	ldw	r3,-32(fp)
   42008:	e0bffd17 	ldw	r2,-12(fp)
   4200c:	1880071e 	bne	r3,r2,4202c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   42010:	e0bfff17 	ldw	r2,-4(fp)
   42014:	1090000c 	andi	r2,r2,16384
   42018:	1000061e 	bne	r2,zero,42034 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4201c:	e0fff817 	ldw	r3,-32(fp)
   42020:	e0bffa17 	ldw	r2,-24(fp)
   42024:	18bfeb36 	bltu	r3,r2,41fd4 <__alt_data_end+0xfffd9fd4>
   42028:	00000306 	br	42038 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   4202c:	0001883a 	nop
   42030:	00000106 	br	42038 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   42034:	0001883a 	nop
    
  }

  if (ptr != buffer)
   42038:	e0fff817 	ldw	r3,-32(fp)
   4203c:	e0bffd17 	ldw	r2,-12(fp)
   42040:	18800426 	beq	r3,r2,42054 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   42044:	e0fff817 	ldw	r3,-32(fp)
   42048:	e0bffd17 	ldw	r2,-12(fp)
   4204c:	1885c83a 	sub	r2,r3,r2
   42050:	00000606 	br	4206c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   42054:	e0bfff17 	ldw	r2,-4(fp)
   42058:	1090000c 	andi	r2,r2,16384
   4205c:	10000226 	beq	r2,zero,42068 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   42060:	00bffd44 	movi	r2,-11
   42064:	00000106 	br	4206c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   42068:	00bffec4 	movi	r2,-5
}
   4206c:	e037883a 	mov	sp,fp
   42070:	df000017 	ldw	fp,0(sp)
   42074:	dec00104 	addi	sp,sp,4
   42078:	f800283a 	ret

0004207c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4207c:	defff904 	addi	sp,sp,-28
   42080:	df000615 	stw	fp,24(sp)
   42084:	df000604 	addi	fp,sp,24
   42088:	e13ffc15 	stw	r4,-16(fp)
   4208c:	e17ffd15 	stw	r5,-12(fp)
   42090:	e1bffe15 	stw	r6,-8(fp)
   42094:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   42098:	e0bffc17 	ldw	r2,-16(fp)
   4209c:	10800017 	ldw	r2,0(r2)
   420a0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   420a4:	e0bffe17 	ldw	r2,-8(fp)
   420a8:	e0fffd17 	ldw	r3,-12(fp)
   420ac:	1885883a 	add	r2,r3,r2
   420b0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   420b4:	00000e06 	br	420f0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   420b8:	e0bffa17 	ldw	r2,-24(fp)
   420bc:	10800104 	addi	r2,r2,4
   420c0:	10800037 	ldwio	r2,0(r2)
   420c4:	10bfffec 	andhi	r2,r2,65535
   420c8:	10000926 	beq	r2,zero,420f0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   420cc:	e0fffa17 	ldw	r3,-24(fp)
   420d0:	e0bffd17 	ldw	r2,-12(fp)
   420d4:	11000044 	addi	r4,r2,1
   420d8:	e13ffd15 	stw	r4,-12(fp)
   420dc:	10800003 	ldbu	r2,0(r2)
   420e0:	10803fcc 	andi	r2,r2,255
   420e4:	1080201c 	xori	r2,r2,128
   420e8:	10bfe004 	addi	r2,r2,-128
   420ec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   420f0:	e0fffd17 	ldw	r3,-12(fp)
   420f4:	e0bffb17 	ldw	r2,-20(fp)
   420f8:	18bfef36 	bltu	r3,r2,420b8 <__alt_data_end+0xfffda0b8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   420fc:	e0bffe17 	ldw	r2,-8(fp)
}
   42100:	e037883a 	mov	sp,fp
   42104:	df000017 	ldw	fp,0(sp)
   42108:	dec00104 	addi	sp,sp,4
   4210c:	f800283a 	ret

00042110 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   42110:	defffa04 	addi	sp,sp,-24
   42114:	dfc00515 	stw	ra,20(sp)
   42118:	df000415 	stw	fp,16(sp)
   4211c:	df000404 	addi	fp,sp,16
   42120:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   42124:	0007883a 	mov	r3,zero
   42128:	e0bfff17 	ldw	r2,-4(fp)
   4212c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   42130:	e0bfff17 	ldw	r2,-4(fp)
   42134:	10800104 	addi	r2,r2,4
   42138:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4213c:	0005303a 	rdctl	r2,status
   42140:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42144:	e0fffd17 	ldw	r3,-12(fp)
   42148:	00bfff84 	movi	r2,-2
   4214c:	1884703a 	and	r2,r3,r2
   42150:	1001703a 	wrctl	status,r2
  
  return context;
   42154:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   42158:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   4215c:	00429a00 	call	429a0 <alt_tick>
   42160:	e0bffc17 	ldw	r2,-16(fp)
   42164:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42168:	e0bffe17 	ldw	r2,-8(fp)
   4216c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   42170:	0001883a 	nop
   42174:	e037883a 	mov	sp,fp
   42178:	dfc00117 	ldw	ra,4(sp)
   4217c:	df000017 	ldw	fp,0(sp)
   42180:	dec00204 	addi	sp,sp,8
   42184:	f800283a 	ret

00042188 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   42188:	defff804 	addi	sp,sp,-32
   4218c:	dfc00715 	stw	ra,28(sp)
   42190:	df000615 	stw	fp,24(sp)
   42194:	df000604 	addi	fp,sp,24
   42198:	e13ffc15 	stw	r4,-16(fp)
   4219c:	e17ffd15 	stw	r5,-12(fp)
   421a0:	e1bffe15 	stw	r6,-8(fp)
   421a4:	e1ffff15 	stw	r7,-4(fp)
   421a8:	e0bfff17 	ldw	r2,-4(fp)
   421ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   421b0:	d0a0ce17 	ldw	r2,-31944(gp)
   421b4:	1000021e 	bne	r2,zero,421c0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   421b8:	e0bffb17 	ldw	r2,-20(fp)
   421bc:	d0a0ce15 	stw	r2,-31944(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   421c0:	e0bffc17 	ldw	r2,-16(fp)
   421c4:	10800104 	addi	r2,r2,4
   421c8:	00c001c4 	movi	r3,7
   421cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   421d0:	d8000015 	stw	zero,0(sp)
   421d4:	e1fffc17 	ldw	r7,-16(fp)
   421d8:	01800134 	movhi	r6,4
   421dc:	31884404 	addi	r6,r6,8464
   421e0:	e17ffe17 	ldw	r5,-8(fp)
   421e4:	e13ffd17 	ldw	r4,-12(fp)
   421e8:	00418e80 	call	418e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   421ec:	0001883a 	nop
   421f0:	e037883a 	mov	sp,fp
   421f4:	dfc00117 	ldw	ra,4(sp)
   421f8:	df000017 	ldw	fp,0(sp)
   421fc:	dec00204 	addi	sp,sp,8
   42200:	f800283a 	ret

00042204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42204:	defffe04 	addi	sp,sp,-8
   42208:	dfc00115 	stw	ra,4(sp)
   4220c:	df000015 	stw	fp,0(sp)
   42210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42214:	d0a00917 	ldw	r2,-32732(gp)
   42218:	10000326 	beq	r2,zero,42228 <alt_get_errno+0x24>
   4221c:	d0a00917 	ldw	r2,-32732(gp)
   42220:	103ee83a 	callr	r2
   42224:	00000106 	br	4222c <alt_get_errno+0x28>
   42228:	d0a0c804 	addi	r2,gp,-31968
}
   4222c:	e037883a 	mov	sp,fp
   42230:	dfc00117 	ldw	ra,4(sp)
   42234:	df000017 	ldw	fp,0(sp)
   42238:	dec00204 	addi	sp,sp,8
   4223c:	f800283a 	ret

00042240 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42240:	defffb04 	addi	sp,sp,-20
   42244:	dfc00415 	stw	ra,16(sp)
   42248:	df000315 	stw	fp,12(sp)
   4224c:	df000304 	addi	fp,sp,12
   42250:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42254:	e0bfff17 	ldw	r2,-4(fp)
   42258:	10000616 	blt	r2,zero,42274 <close+0x34>
   4225c:	e0bfff17 	ldw	r2,-4(fp)
   42260:	10c00324 	muli	r3,r2,12
   42264:	00800134 	movhi	r2,4
   42268:	108c7304 	addi	r2,r2,12748
   4226c:	1885883a 	add	r2,r3,r2
   42270:	00000106 	br	42278 <close+0x38>
   42274:	0005883a 	mov	r2,zero
   42278:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4227c:	e0bffd17 	ldw	r2,-12(fp)
   42280:	10001926 	beq	r2,zero,422e8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42284:	e0bffd17 	ldw	r2,-12(fp)
   42288:	10800017 	ldw	r2,0(r2)
   4228c:	10800417 	ldw	r2,16(r2)
   42290:	10000626 	beq	r2,zero,422ac <close+0x6c>
   42294:	e0bffd17 	ldw	r2,-12(fp)
   42298:	10800017 	ldw	r2,0(r2)
   4229c:	10800417 	ldw	r2,16(r2)
   422a0:	e13ffd17 	ldw	r4,-12(fp)
   422a4:	103ee83a 	callr	r2
   422a8:	00000106 	br	422b0 <close+0x70>
   422ac:	0005883a 	mov	r2,zero
   422b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   422b4:	e13fff17 	ldw	r4,-4(fp)
   422b8:	00428a00 	call	428a0 <alt_release_fd>
    if (rval < 0)
   422bc:	e0bffe17 	ldw	r2,-8(fp)
   422c0:	1000070e 	bge	r2,zero,422e0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   422c4:	00422040 	call	42204 <alt_get_errno>
   422c8:	1007883a 	mov	r3,r2
   422cc:	e0bffe17 	ldw	r2,-8(fp)
   422d0:	0085c83a 	sub	r2,zero,r2
   422d4:	18800015 	stw	r2,0(r3)
      return -1;
   422d8:	00bfffc4 	movi	r2,-1
   422dc:	00000706 	br	422fc <close+0xbc>
    }
    return 0;
   422e0:	0005883a 	mov	r2,zero
   422e4:	00000506 	br	422fc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   422e8:	00422040 	call	42204 <alt_get_errno>
   422ec:	1007883a 	mov	r3,r2
   422f0:	00801444 	movi	r2,81
   422f4:	18800015 	stw	r2,0(r3)
    return -1;
   422f8:	00bfffc4 	movi	r2,-1
  }
}
   422fc:	e037883a 	mov	sp,fp
   42300:	dfc00117 	ldw	ra,4(sp)
   42304:	df000017 	ldw	fp,0(sp)
   42308:	dec00204 	addi	sp,sp,8
   4230c:	f800283a 	ret

00042310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   42310:	deffff04 	addi	sp,sp,-4
   42314:	df000015 	stw	fp,0(sp)
   42318:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4231c:	0001883a 	nop
   42320:	e037883a 	mov	sp,fp
   42324:	df000017 	ldw	fp,0(sp)
   42328:	dec00104 	addi	sp,sp,4
   4232c:	f800283a 	ret

00042330 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   42330:	defffc04 	addi	sp,sp,-16
   42334:	df000315 	stw	fp,12(sp)
   42338:	df000304 	addi	fp,sp,12
   4233c:	e13ffd15 	stw	r4,-12(fp)
   42340:	e17ffe15 	stw	r5,-8(fp)
   42344:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42348:	e0bfff17 	ldw	r2,-4(fp)
}
   4234c:	e037883a 	mov	sp,fp
   42350:	df000017 	ldw	fp,0(sp)
   42354:	dec00104 	addi	sp,sp,4
   42358:	f800283a 	ret

0004235c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4235c:	defffe04 	addi	sp,sp,-8
   42360:	dfc00115 	stw	ra,4(sp)
   42364:	df000015 	stw	fp,0(sp)
   42368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4236c:	d0a00917 	ldw	r2,-32732(gp)
   42370:	10000326 	beq	r2,zero,42380 <alt_get_errno+0x24>
   42374:	d0a00917 	ldw	r2,-32732(gp)
   42378:	103ee83a 	callr	r2
   4237c:	00000106 	br	42384 <alt_get_errno+0x28>
   42380:	d0a0c804 	addi	r2,gp,-31968
}
   42384:	e037883a 	mov	sp,fp
   42388:	dfc00117 	ldw	ra,4(sp)
   4238c:	df000017 	ldw	fp,0(sp)
   42390:	dec00204 	addi	sp,sp,8
   42394:	f800283a 	ret

00042398 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   42398:	defffa04 	addi	sp,sp,-24
   4239c:	dfc00515 	stw	ra,20(sp)
   423a0:	df000415 	stw	fp,16(sp)
   423a4:	df000404 	addi	fp,sp,16
   423a8:	e13ffe15 	stw	r4,-8(fp)
   423ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   423b0:	e0bffe17 	ldw	r2,-8(fp)
   423b4:	10000326 	beq	r2,zero,423c4 <alt_dev_llist_insert+0x2c>
   423b8:	e0bffe17 	ldw	r2,-8(fp)
   423bc:	10800217 	ldw	r2,8(r2)
   423c0:	1000061e 	bne	r2,zero,423dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   423c4:	004235c0 	call	4235c <alt_get_errno>
   423c8:	1007883a 	mov	r3,r2
   423cc:	00800584 	movi	r2,22
   423d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   423d4:	00bffa84 	movi	r2,-22
   423d8:	00001306 	br	42428 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   423dc:	e0bffe17 	ldw	r2,-8(fp)
   423e0:	e0ffff17 	ldw	r3,-4(fp)
   423e4:	e0fffc15 	stw	r3,-16(fp)
   423e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   423ec:	e0bffd17 	ldw	r2,-12(fp)
   423f0:	e0fffc17 	ldw	r3,-16(fp)
   423f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   423f8:	e0bffc17 	ldw	r2,-16(fp)
   423fc:	10c00017 	ldw	r3,0(r2)
   42400:	e0bffd17 	ldw	r2,-12(fp)
   42404:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   42408:	e0bffc17 	ldw	r2,-16(fp)
   4240c:	10800017 	ldw	r2,0(r2)
   42410:	e0fffd17 	ldw	r3,-12(fp)
   42414:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   42418:	e0bffc17 	ldw	r2,-16(fp)
   4241c:	e0fffd17 	ldw	r3,-12(fp)
   42420:	10c00015 	stw	r3,0(r2)

  return 0;  
   42424:	0005883a 	mov	r2,zero
}
   42428:	e037883a 	mov	sp,fp
   4242c:	dfc00117 	ldw	ra,4(sp)
   42430:	df000017 	ldw	fp,0(sp)
   42434:	dec00204 	addi	sp,sp,8
   42438:	f800283a 	ret

0004243c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4243c:	defffe04 	addi	sp,sp,-8
   42440:	dfc00115 	stw	ra,4(sp)
   42444:	df000015 	stw	fp,0(sp)
   42448:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4244c:	01420004 	movi	r5,2048
   42450:	0009883a 	mov	r4,zero
   42454:	0042d080 	call	42d08 <alt_icache_flush>
#endif
}
   42458:	0001883a 	nop
   4245c:	e037883a 	mov	sp,fp
   42460:	dfc00117 	ldw	ra,4(sp)
   42464:	df000017 	ldw	fp,0(sp)
   42468:	dec00204 	addi	sp,sp,8
   4246c:	f800283a 	ret

00042470 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   42470:	defffe04 	addi	sp,sp,-8
   42474:	df000115 	stw	fp,4(sp)
   42478:	df000104 	addi	fp,sp,4
   4247c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   42480:	e0bfff17 	ldw	r2,-4(fp)
   42484:	10bffe84 	addi	r2,r2,-6
   42488:	10c00428 	cmpgeui	r3,r2,16
   4248c:	18001a1e 	bne	r3,zero,424f8 <alt_exception_cause_generated_bad_addr+0x88>
   42490:	100690ba 	slli	r3,r2,2
   42494:	00800134 	movhi	r2,4
   42498:	10892a04 	addi	r2,r2,9384
   4249c:	1885883a 	add	r2,r3,r2
   424a0:	10800017 	ldw	r2,0(r2)
   424a4:	1000683a 	jmp	r2
   424a8:	000424e8 	cmpgeui	zero,zero,4243
   424ac:	000424e8 	cmpgeui	zero,zero,4243
   424b0:	000424f8 	rdprs	zero,zero,4243
   424b4:	000424f8 	rdprs	zero,zero,4243
   424b8:	000424f8 	rdprs	zero,zero,4243
   424bc:	000424e8 	cmpgeui	zero,zero,4243
   424c0:	000424f0 	cmpltui	zero,zero,4243
   424c4:	000424f8 	rdprs	zero,zero,4243
   424c8:	000424e8 	cmpgeui	zero,zero,4243
   424cc:	000424e8 	cmpgeui	zero,zero,4243
   424d0:	000424f8 	rdprs	zero,zero,4243
   424d4:	000424e8 	cmpgeui	zero,zero,4243
   424d8:	000424f0 	cmpltui	zero,zero,4243
   424dc:	000424f8 	rdprs	zero,zero,4243
   424e0:	000424f8 	rdprs	zero,zero,4243
   424e4:	000424e8 	cmpgeui	zero,zero,4243
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   424e8:	00800044 	movi	r2,1
   424ec:	00000306 	br	424fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   424f0:	0005883a 	mov	r2,zero
   424f4:	00000106 	br	424fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   424f8:	0005883a 	mov	r2,zero
  }
}
   424fc:	e037883a 	mov	sp,fp
   42500:	df000017 	ldw	fp,0(sp)
   42504:	dec00104 	addi	sp,sp,4
   42508:	f800283a 	ret

0004250c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4250c:	defff904 	addi	sp,sp,-28
   42510:	dfc00615 	stw	ra,24(sp)
   42514:	df000515 	stw	fp,20(sp)
   42518:	df000504 	addi	fp,sp,20
   4251c:	e13ffc15 	stw	r4,-16(fp)
   42520:	e17ffd15 	stw	r5,-12(fp)
   42524:	e1bffe15 	stw	r6,-8(fp)
   42528:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4252c:	e1bfff17 	ldw	r6,-4(fp)
   42530:	e17ffe17 	ldw	r5,-8(fp)
   42534:	e13ffd17 	ldw	r4,-12(fp)
   42538:	004274c0 	call	4274c <open>
   4253c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   42540:	e0bffb17 	ldw	r2,-20(fp)
   42544:	10001c16 	blt	r2,zero,425b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   42548:	00800134 	movhi	r2,4
   4254c:	108c7304 	addi	r2,r2,12748
   42550:	e0fffb17 	ldw	r3,-20(fp)
   42554:	18c00324 	muli	r3,r3,12
   42558:	10c5883a 	add	r2,r2,r3
   4255c:	10c00017 	ldw	r3,0(r2)
   42560:	e0bffc17 	ldw	r2,-16(fp)
   42564:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42568:	00800134 	movhi	r2,4
   4256c:	108c7304 	addi	r2,r2,12748
   42570:	e0fffb17 	ldw	r3,-20(fp)
   42574:	18c00324 	muli	r3,r3,12
   42578:	10c5883a 	add	r2,r2,r3
   4257c:	10800104 	addi	r2,r2,4
   42580:	10c00017 	ldw	r3,0(r2)
   42584:	e0bffc17 	ldw	r2,-16(fp)
   42588:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4258c:	00800134 	movhi	r2,4
   42590:	108c7304 	addi	r2,r2,12748
   42594:	e0fffb17 	ldw	r3,-20(fp)
   42598:	18c00324 	muli	r3,r3,12
   4259c:	10c5883a 	add	r2,r2,r3
   425a0:	10800204 	addi	r2,r2,8
   425a4:	10c00017 	ldw	r3,0(r2)
   425a8:	e0bffc17 	ldw	r2,-16(fp)
   425ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   425b0:	e13ffb17 	ldw	r4,-20(fp)
   425b4:	00428a00 	call	428a0 <alt_release_fd>
  }
} 
   425b8:	0001883a 	nop
   425bc:	e037883a 	mov	sp,fp
   425c0:	dfc00117 	ldw	ra,4(sp)
   425c4:	df000017 	ldw	fp,0(sp)
   425c8:	dec00204 	addi	sp,sp,8
   425cc:	f800283a 	ret

000425d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   425d0:	defffb04 	addi	sp,sp,-20
   425d4:	dfc00415 	stw	ra,16(sp)
   425d8:	df000315 	stw	fp,12(sp)
   425dc:	df000304 	addi	fp,sp,12
   425e0:	e13ffd15 	stw	r4,-12(fp)
   425e4:	e17ffe15 	stw	r5,-8(fp)
   425e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   425ec:	01c07fc4 	movi	r7,511
   425f0:	01800044 	movi	r6,1
   425f4:	e17ffd17 	ldw	r5,-12(fp)
   425f8:	01000134 	movhi	r4,4
   425fc:	210c7604 	addi	r4,r4,12760
   42600:	004250c0 	call	4250c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   42604:	01c07fc4 	movi	r7,511
   42608:	000d883a 	mov	r6,zero
   4260c:	e17ffe17 	ldw	r5,-8(fp)
   42610:	01000134 	movhi	r4,4
   42614:	210c7304 	addi	r4,r4,12748
   42618:	004250c0 	call	4250c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4261c:	01c07fc4 	movi	r7,511
   42620:	01800044 	movi	r6,1
   42624:	e17fff17 	ldw	r5,-4(fp)
   42628:	01000134 	movhi	r4,4
   4262c:	210c7904 	addi	r4,r4,12772
   42630:	004250c0 	call	4250c <alt_open_fd>
}  
   42634:	0001883a 	nop
   42638:	e037883a 	mov	sp,fp
   4263c:	dfc00117 	ldw	ra,4(sp)
   42640:	df000017 	ldw	fp,0(sp)
   42644:	dec00204 	addi	sp,sp,8
   42648:	f800283a 	ret

0004264c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4264c:	defffe04 	addi	sp,sp,-8
   42650:	dfc00115 	stw	ra,4(sp)
   42654:	df000015 	stw	fp,0(sp)
   42658:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4265c:	d0a00917 	ldw	r2,-32732(gp)
   42660:	10000326 	beq	r2,zero,42670 <alt_get_errno+0x24>
   42664:	d0a00917 	ldw	r2,-32732(gp)
   42668:	103ee83a 	callr	r2
   4266c:	00000106 	br	42674 <alt_get_errno+0x28>
   42670:	d0a0c804 	addi	r2,gp,-31968
}
   42674:	e037883a 	mov	sp,fp
   42678:	dfc00117 	ldw	ra,4(sp)
   4267c:	df000017 	ldw	fp,0(sp)
   42680:	dec00204 	addi	sp,sp,8
   42684:	f800283a 	ret

00042688 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   42688:	defffd04 	addi	sp,sp,-12
   4268c:	df000215 	stw	fp,8(sp)
   42690:	df000204 	addi	fp,sp,8
   42694:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   42698:	e0bfff17 	ldw	r2,-4(fp)
   4269c:	10800217 	ldw	r2,8(r2)
   426a0:	10d00034 	orhi	r3,r2,16384
   426a4:	e0bfff17 	ldw	r2,-4(fp)
   426a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   426ac:	e03ffe15 	stw	zero,-8(fp)
   426b0:	00001d06 	br	42728 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   426b4:	00800134 	movhi	r2,4
   426b8:	108c7304 	addi	r2,r2,12748
   426bc:	e0fffe17 	ldw	r3,-8(fp)
   426c0:	18c00324 	muli	r3,r3,12
   426c4:	10c5883a 	add	r2,r2,r3
   426c8:	10c00017 	ldw	r3,0(r2)
   426cc:	e0bfff17 	ldw	r2,-4(fp)
   426d0:	10800017 	ldw	r2,0(r2)
   426d4:	1880111e 	bne	r3,r2,4271c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   426d8:	00800134 	movhi	r2,4
   426dc:	108c7304 	addi	r2,r2,12748
   426e0:	e0fffe17 	ldw	r3,-8(fp)
   426e4:	18c00324 	muli	r3,r3,12
   426e8:	10c5883a 	add	r2,r2,r3
   426ec:	10800204 	addi	r2,r2,8
   426f0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   426f4:	1000090e 	bge	r2,zero,4271c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   426f8:	e0bffe17 	ldw	r2,-8(fp)
   426fc:	10c00324 	muli	r3,r2,12
   42700:	00800134 	movhi	r2,4
   42704:	108c7304 	addi	r2,r2,12748
   42708:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4270c:	e0bfff17 	ldw	r2,-4(fp)
   42710:	18800226 	beq	r3,r2,4271c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   42714:	00bffcc4 	movi	r2,-13
   42718:	00000806 	br	4273c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4271c:	e0bffe17 	ldw	r2,-8(fp)
   42720:	10800044 	addi	r2,r2,1
   42724:	e0bffe15 	stw	r2,-8(fp)
   42728:	d0a00817 	ldw	r2,-32736(gp)
   4272c:	1007883a 	mov	r3,r2
   42730:	e0bffe17 	ldw	r2,-8(fp)
   42734:	18bfdf2e 	bgeu	r3,r2,426b4 <__alt_data_end+0xfffda6b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   42738:	0005883a 	mov	r2,zero
}
   4273c:	e037883a 	mov	sp,fp
   42740:	df000017 	ldw	fp,0(sp)
   42744:	dec00104 	addi	sp,sp,4
   42748:	f800283a 	ret

0004274c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4274c:	defff604 	addi	sp,sp,-40
   42750:	dfc00915 	stw	ra,36(sp)
   42754:	df000815 	stw	fp,32(sp)
   42758:	df000804 	addi	fp,sp,32
   4275c:	e13ffd15 	stw	r4,-12(fp)
   42760:	e17ffe15 	stw	r5,-8(fp)
   42764:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   42768:	00bfffc4 	movi	r2,-1
   4276c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   42770:	00bffb44 	movi	r2,-19
   42774:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   42778:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4277c:	d1600604 	addi	r5,gp,-32744
   42780:	e13ffd17 	ldw	r4,-12(fp)
   42784:	0042acc0 	call	42acc <alt_find_dev>
   42788:	e0bff815 	stw	r2,-32(fp)
   4278c:	e0bff817 	ldw	r2,-32(fp)
   42790:	1000051e 	bne	r2,zero,427a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   42794:	e13ffd17 	ldw	r4,-12(fp)
   42798:	0042b5c0 	call	42b5c <alt_find_file>
   4279c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   427a0:	00800044 	movi	r2,1
   427a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   427a8:	e0bff817 	ldw	r2,-32(fp)
   427ac:	10002926 	beq	r2,zero,42854 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   427b0:	e13ff817 	ldw	r4,-32(fp)
   427b4:	0042c640 	call	42c64 <alt_get_fd>
   427b8:	e0bff915 	stw	r2,-28(fp)
   427bc:	e0bff917 	ldw	r2,-28(fp)
   427c0:	1000030e 	bge	r2,zero,427d0 <open+0x84>
    {
      status = index;
   427c4:	e0bff917 	ldw	r2,-28(fp)
   427c8:	e0bffa15 	stw	r2,-24(fp)
   427cc:	00002306 	br	4285c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   427d0:	e0bff917 	ldw	r2,-28(fp)
   427d4:	10c00324 	muli	r3,r2,12
   427d8:	00800134 	movhi	r2,4
   427dc:	108c7304 	addi	r2,r2,12748
   427e0:	1885883a 	add	r2,r3,r2
   427e4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   427e8:	e0fffe17 	ldw	r3,-8(fp)
   427ec:	00900034 	movhi	r2,16384
   427f0:	10bfffc4 	addi	r2,r2,-1
   427f4:	1886703a 	and	r3,r3,r2
   427f8:	e0bffc17 	ldw	r2,-16(fp)
   427fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   42800:	e0bffb17 	ldw	r2,-20(fp)
   42804:	1000051e 	bne	r2,zero,4281c <open+0xd0>
   42808:	e13ffc17 	ldw	r4,-16(fp)
   4280c:	00426880 	call	42688 <alt_file_locked>
   42810:	e0bffa15 	stw	r2,-24(fp)
   42814:	e0bffa17 	ldw	r2,-24(fp)
   42818:	10001016 	blt	r2,zero,4285c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4281c:	e0bff817 	ldw	r2,-32(fp)
   42820:	10800317 	ldw	r2,12(r2)
   42824:	10000826 	beq	r2,zero,42848 <open+0xfc>
   42828:	e0bff817 	ldw	r2,-32(fp)
   4282c:	10800317 	ldw	r2,12(r2)
   42830:	e1ffff17 	ldw	r7,-4(fp)
   42834:	e1bffe17 	ldw	r6,-8(fp)
   42838:	e17ffd17 	ldw	r5,-12(fp)
   4283c:	e13ffc17 	ldw	r4,-16(fp)
   42840:	103ee83a 	callr	r2
   42844:	00000106 	br	4284c <open+0x100>
   42848:	0005883a 	mov	r2,zero
   4284c:	e0bffa15 	stw	r2,-24(fp)
   42850:	00000206 	br	4285c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   42854:	00bffb44 	movi	r2,-19
   42858:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4285c:	e0bffa17 	ldw	r2,-24(fp)
   42860:	1000090e 	bge	r2,zero,42888 <open+0x13c>
  {
    alt_release_fd (index);  
   42864:	e13ff917 	ldw	r4,-28(fp)
   42868:	00428a00 	call	428a0 <alt_release_fd>
    ALT_ERRNO = -status;
   4286c:	004264c0 	call	4264c <alt_get_errno>
   42870:	1007883a 	mov	r3,r2
   42874:	e0bffa17 	ldw	r2,-24(fp)
   42878:	0085c83a 	sub	r2,zero,r2
   4287c:	18800015 	stw	r2,0(r3)
    return -1;
   42880:	00bfffc4 	movi	r2,-1
   42884:	00000106 	br	4288c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   42888:	e0bff917 	ldw	r2,-28(fp)
}
   4288c:	e037883a 	mov	sp,fp
   42890:	dfc00117 	ldw	ra,4(sp)
   42894:	df000017 	ldw	fp,0(sp)
   42898:	dec00204 	addi	sp,sp,8
   4289c:	f800283a 	ret

000428a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   428a0:	defffe04 	addi	sp,sp,-8
   428a4:	df000115 	stw	fp,4(sp)
   428a8:	df000104 	addi	fp,sp,4
   428ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   428b0:	e0bfff17 	ldw	r2,-4(fp)
   428b4:	108000d0 	cmplti	r2,r2,3
   428b8:	10000d1e 	bne	r2,zero,428f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   428bc:	00800134 	movhi	r2,4
   428c0:	108c7304 	addi	r2,r2,12748
   428c4:	e0ffff17 	ldw	r3,-4(fp)
   428c8:	18c00324 	muli	r3,r3,12
   428cc:	10c5883a 	add	r2,r2,r3
   428d0:	10800204 	addi	r2,r2,8
   428d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   428d8:	00800134 	movhi	r2,4
   428dc:	108c7304 	addi	r2,r2,12748
   428e0:	e0ffff17 	ldw	r3,-4(fp)
   428e4:	18c00324 	muli	r3,r3,12
   428e8:	10c5883a 	add	r2,r2,r3
   428ec:	10000015 	stw	zero,0(r2)
  }
}
   428f0:	0001883a 	nop
   428f4:	e037883a 	mov	sp,fp
   428f8:	df000017 	ldw	fp,0(sp)
   428fc:	dec00104 	addi	sp,sp,4
   42900:	f800283a 	ret

00042904 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   42904:	defffa04 	addi	sp,sp,-24
   42908:	df000515 	stw	fp,20(sp)
   4290c:	df000504 	addi	fp,sp,20
   42910:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42914:	0005303a 	rdctl	r2,status
   42918:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4291c:	e0fffc17 	ldw	r3,-16(fp)
   42920:	00bfff84 	movi	r2,-2
   42924:	1884703a 	and	r2,r3,r2
   42928:	1001703a 	wrctl	status,r2
  
  return context;
   4292c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   42930:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   42934:	e0bfff17 	ldw	r2,-4(fp)
   42938:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4293c:	e0bffd17 	ldw	r2,-12(fp)
   42940:	10800017 	ldw	r2,0(r2)
   42944:	e0fffd17 	ldw	r3,-12(fp)
   42948:	18c00117 	ldw	r3,4(r3)
   4294c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   42950:	e0bffd17 	ldw	r2,-12(fp)
   42954:	10800117 	ldw	r2,4(r2)
   42958:	e0fffd17 	ldw	r3,-12(fp)
   4295c:	18c00017 	ldw	r3,0(r3)
   42960:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   42964:	e0bffd17 	ldw	r2,-12(fp)
   42968:	e0fffd17 	ldw	r3,-12(fp)
   4296c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   42970:	e0bffd17 	ldw	r2,-12(fp)
   42974:	e0fffd17 	ldw	r3,-12(fp)
   42978:	10c00015 	stw	r3,0(r2)
   4297c:	e0bffb17 	ldw	r2,-20(fp)
   42980:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42984:	e0bffe17 	ldw	r2,-8(fp)
   42988:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4298c:	0001883a 	nop
   42990:	e037883a 	mov	sp,fp
   42994:	df000017 	ldw	fp,0(sp)
   42998:	dec00104 	addi	sp,sp,4
   4299c:	f800283a 	ret

000429a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   429a0:	defffb04 	addi	sp,sp,-20
   429a4:	dfc00415 	stw	ra,16(sp)
   429a8:	df000315 	stw	fp,12(sp)
   429ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   429b0:	d0a00a17 	ldw	r2,-32728(gp)
   429b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   429b8:	d0a0cf17 	ldw	r2,-31940(gp)
   429bc:	10800044 	addi	r2,r2,1
   429c0:	d0a0cf15 	stw	r2,-31940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   429c4:	00002e06 	br	42a80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   429c8:	e0bffd17 	ldw	r2,-12(fp)
   429cc:	10800017 	ldw	r2,0(r2)
   429d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   429d4:	e0bffd17 	ldw	r2,-12(fp)
   429d8:	10800403 	ldbu	r2,16(r2)
   429dc:	10803fcc 	andi	r2,r2,255
   429e0:	10000426 	beq	r2,zero,429f4 <alt_tick+0x54>
   429e4:	d0a0cf17 	ldw	r2,-31940(gp)
   429e8:	1000021e 	bne	r2,zero,429f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   429ec:	e0bffd17 	ldw	r2,-12(fp)
   429f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   429f4:	e0bffd17 	ldw	r2,-12(fp)
   429f8:	10800217 	ldw	r2,8(r2)
   429fc:	d0e0cf17 	ldw	r3,-31940(gp)
   42a00:	18801d36 	bltu	r3,r2,42a78 <alt_tick+0xd8>
   42a04:	e0bffd17 	ldw	r2,-12(fp)
   42a08:	10800403 	ldbu	r2,16(r2)
   42a0c:	10803fcc 	andi	r2,r2,255
   42a10:	1000191e 	bne	r2,zero,42a78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   42a14:	e0bffd17 	ldw	r2,-12(fp)
   42a18:	10800317 	ldw	r2,12(r2)
   42a1c:	e0fffd17 	ldw	r3,-12(fp)
   42a20:	18c00517 	ldw	r3,20(r3)
   42a24:	1809883a 	mov	r4,r3
   42a28:	103ee83a 	callr	r2
   42a2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   42a30:	e0bfff17 	ldw	r2,-4(fp)
   42a34:	1000031e 	bne	r2,zero,42a44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   42a38:	e13ffd17 	ldw	r4,-12(fp)
   42a3c:	00429040 	call	42904 <alt_alarm_stop>
   42a40:	00000d06 	br	42a78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   42a44:	e0bffd17 	ldw	r2,-12(fp)
   42a48:	10c00217 	ldw	r3,8(r2)
   42a4c:	e0bfff17 	ldw	r2,-4(fp)
   42a50:	1887883a 	add	r3,r3,r2
   42a54:	e0bffd17 	ldw	r2,-12(fp)
   42a58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   42a5c:	e0bffd17 	ldw	r2,-12(fp)
   42a60:	10c00217 	ldw	r3,8(r2)
   42a64:	d0a0cf17 	ldw	r2,-31940(gp)
   42a68:	1880032e 	bgeu	r3,r2,42a78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   42a6c:	e0bffd17 	ldw	r2,-12(fp)
   42a70:	00c00044 	movi	r3,1
   42a74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   42a78:	e0bffe17 	ldw	r2,-8(fp)
   42a7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42a80:	e0fffd17 	ldw	r3,-12(fp)
   42a84:	d0a00a04 	addi	r2,gp,-32728
   42a88:	18bfcf1e 	bne	r3,r2,429c8 <__alt_data_end+0xfffda9c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   42a8c:	0001883a 	nop
}
   42a90:	0001883a 	nop
   42a94:	e037883a 	mov	sp,fp
   42a98:	dfc00117 	ldw	ra,4(sp)
   42a9c:	df000017 	ldw	fp,0(sp)
   42aa0:	dec00204 	addi	sp,sp,8
   42aa4:	f800283a 	ret

00042aa8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   42aa8:	deffff04 	addi	sp,sp,-4
   42aac:	df000015 	stw	fp,0(sp)
   42ab0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42ab4:	000170fa 	wrctl	ienable,zero
}
   42ab8:	0001883a 	nop
   42abc:	e037883a 	mov	sp,fp
   42ac0:	df000017 	ldw	fp,0(sp)
   42ac4:	dec00104 	addi	sp,sp,4
   42ac8:	f800283a 	ret

00042acc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   42acc:	defffa04 	addi	sp,sp,-24
   42ad0:	dfc00515 	stw	ra,20(sp)
   42ad4:	df000415 	stw	fp,16(sp)
   42ad8:	df000404 	addi	fp,sp,16
   42adc:	e13ffe15 	stw	r4,-8(fp)
   42ae0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42ae4:	e0bfff17 	ldw	r2,-4(fp)
   42ae8:	10800017 	ldw	r2,0(r2)
   42aec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   42af0:	e13ffe17 	ldw	r4,-8(fp)
   42af4:	00412100 	call	41210 <strlen>
   42af8:	10800044 	addi	r2,r2,1
   42afc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42b00:	00000d06 	br	42b38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   42b04:	e0bffc17 	ldw	r2,-16(fp)
   42b08:	10800217 	ldw	r2,8(r2)
   42b0c:	e0fffd17 	ldw	r3,-12(fp)
   42b10:	180d883a 	mov	r6,r3
   42b14:	e17ffe17 	ldw	r5,-8(fp)
   42b18:	1009883a 	mov	r4,r2
   42b1c:	0042db80 	call	42db8 <memcmp>
   42b20:	1000021e 	bne	r2,zero,42b2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   42b24:	e0bffc17 	ldw	r2,-16(fp)
   42b28:	00000706 	br	42b48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   42b2c:	e0bffc17 	ldw	r2,-16(fp)
   42b30:	10800017 	ldw	r2,0(r2)
   42b34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42b38:	e0fffc17 	ldw	r3,-16(fp)
   42b3c:	e0bfff17 	ldw	r2,-4(fp)
   42b40:	18bff01e 	bne	r3,r2,42b04 <__alt_data_end+0xfffdab04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   42b44:	0005883a 	mov	r2,zero
}
   42b48:	e037883a 	mov	sp,fp
   42b4c:	dfc00117 	ldw	ra,4(sp)
   42b50:	df000017 	ldw	fp,0(sp)
   42b54:	dec00204 	addi	sp,sp,8
   42b58:	f800283a 	ret

00042b5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   42b5c:	defffb04 	addi	sp,sp,-20
   42b60:	dfc00415 	stw	ra,16(sp)
   42b64:	df000315 	stw	fp,12(sp)
   42b68:	df000304 	addi	fp,sp,12
   42b6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   42b70:	d0a00417 	ldw	r2,-32752(gp)
   42b74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42b78:	00003106 	br	42c40 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   42b7c:	e0bffd17 	ldw	r2,-12(fp)
   42b80:	10800217 	ldw	r2,8(r2)
   42b84:	1009883a 	mov	r4,r2
   42b88:	00412100 	call	41210 <strlen>
   42b8c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   42b90:	e0bffd17 	ldw	r2,-12(fp)
   42b94:	10c00217 	ldw	r3,8(r2)
   42b98:	e0bffe17 	ldw	r2,-8(fp)
   42b9c:	10bfffc4 	addi	r2,r2,-1
   42ba0:	1885883a 	add	r2,r3,r2
   42ba4:	10800003 	ldbu	r2,0(r2)
   42ba8:	10803fcc 	andi	r2,r2,255
   42bac:	1080201c 	xori	r2,r2,128
   42bb0:	10bfe004 	addi	r2,r2,-128
   42bb4:	10800bd8 	cmpnei	r2,r2,47
   42bb8:	1000031e 	bne	r2,zero,42bc8 <alt_find_file+0x6c>
    {
      len -= 1;
   42bbc:	e0bffe17 	ldw	r2,-8(fp)
   42bc0:	10bfffc4 	addi	r2,r2,-1
   42bc4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42bc8:	e0bffe17 	ldw	r2,-8(fp)
   42bcc:	e0ffff17 	ldw	r3,-4(fp)
   42bd0:	1885883a 	add	r2,r3,r2
   42bd4:	10800003 	ldbu	r2,0(r2)
   42bd8:	10803fcc 	andi	r2,r2,255
   42bdc:	1080201c 	xori	r2,r2,128
   42be0:	10bfe004 	addi	r2,r2,-128
   42be4:	10800be0 	cmpeqi	r2,r2,47
   42be8:	1000081e 	bne	r2,zero,42c0c <alt_find_file+0xb0>
   42bec:	e0bffe17 	ldw	r2,-8(fp)
   42bf0:	e0ffff17 	ldw	r3,-4(fp)
   42bf4:	1885883a 	add	r2,r3,r2
   42bf8:	10800003 	ldbu	r2,0(r2)
   42bfc:	10803fcc 	andi	r2,r2,255
   42c00:	1080201c 	xori	r2,r2,128
   42c04:	10bfe004 	addi	r2,r2,-128
   42c08:	10000a1e 	bne	r2,zero,42c34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   42c0c:	e0bffd17 	ldw	r2,-12(fp)
   42c10:	10800217 	ldw	r2,8(r2)
   42c14:	e0fffe17 	ldw	r3,-8(fp)
   42c18:	180d883a 	mov	r6,r3
   42c1c:	e17fff17 	ldw	r5,-4(fp)
   42c20:	1009883a 	mov	r4,r2
   42c24:	0042db80 	call	42db8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42c28:	1000021e 	bne	r2,zero,42c34 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   42c2c:	e0bffd17 	ldw	r2,-12(fp)
   42c30:	00000706 	br	42c50 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   42c34:	e0bffd17 	ldw	r2,-12(fp)
   42c38:	10800017 	ldw	r2,0(r2)
   42c3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42c40:	e0fffd17 	ldw	r3,-12(fp)
   42c44:	d0a00404 	addi	r2,gp,-32752
   42c48:	18bfcc1e 	bne	r3,r2,42b7c <__alt_data_end+0xfffdab7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   42c4c:	0005883a 	mov	r2,zero
}
   42c50:	e037883a 	mov	sp,fp
   42c54:	dfc00117 	ldw	ra,4(sp)
   42c58:	df000017 	ldw	fp,0(sp)
   42c5c:	dec00204 	addi	sp,sp,8
   42c60:	f800283a 	ret

00042c64 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   42c64:	defffc04 	addi	sp,sp,-16
   42c68:	df000315 	stw	fp,12(sp)
   42c6c:	df000304 	addi	fp,sp,12
   42c70:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   42c74:	00bffa04 	movi	r2,-24
   42c78:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42c7c:	e03ffd15 	stw	zero,-12(fp)
   42c80:	00001906 	br	42ce8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   42c84:	00800134 	movhi	r2,4
   42c88:	108c7304 	addi	r2,r2,12748
   42c8c:	e0fffd17 	ldw	r3,-12(fp)
   42c90:	18c00324 	muli	r3,r3,12
   42c94:	10c5883a 	add	r2,r2,r3
   42c98:	10800017 	ldw	r2,0(r2)
   42c9c:	10000f1e 	bne	r2,zero,42cdc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   42ca0:	00800134 	movhi	r2,4
   42ca4:	108c7304 	addi	r2,r2,12748
   42ca8:	e0fffd17 	ldw	r3,-12(fp)
   42cac:	18c00324 	muli	r3,r3,12
   42cb0:	10c5883a 	add	r2,r2,r3
   42cb4:	e0ffff17 	ldw	r3,-4(fp)
   42cb8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   42cbc:	d0e00817 	ldw	r3,-32736(gp)
   42cc0:	e0bffd17 	ldw	r2,-12(fp)
   42cc4:	1880020e 	bge	r3,r2,42cd0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   42cc8:	e0bffd17 	ldw	r2,-12(fp)
   42ccc:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   42cd0:	e0bffd17 	ldw	r2,-12(fp)
   42cd4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   42cd8:	00000606 	br	42cf4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42cdc:	e0bffd17 	ldw	r2,-12(fp)
   42ce0:	10800044 	addi	r2,r2,1
   42ce4:	e0bffd15 	stw	r2,-12(fp)
   42ce8:	e0bffd17 	ldw	r2,-12(fp)
   42cec:	10800810 	cmplti	r2,r2,32
   42cf0:	103fe41e 	bne	r2,zero,42c84 <__alt_data_end+0xfffdac84>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   42cf4:	e0bffe17 	ldw	r2,-8(fp)
}
   42cf8:	e037883a 	mov	sp,fp
   42cfc:	df000017 	ldw	fp,0(sp)
   42d00:	dec00104 	addi	sp,sp,4
   42d04:	f800283a 	ret

00042d08 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   42d08:	defffb04 	addi	sp,sp,-20
   42d0c:	df000415 	stw	fp,16(sp)
   42d10:	df000404 	addi	fp,sp,16
   42d14:	e13ffe15 	stw	r4,-8(fp)
   42d18:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   42d1c:	e0bfff17 	ldw	r2,-4(fp)
   42d20:	10820070 	cmpltui	r2,r2,2049
   42d24:	1000021e 	bne	r2,zero,42d30 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   42d28:	00820004 	movi	r2,2048
   42d2c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   42d30:	e0fffe17 	ldw	r3,-8(fp)
   42d34:	e0bfff17 	ldw	r2,-4(fp)
   42d38:	1885883a 	add	r2,r3,r2
   42d3c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42d40:	e0bffe17 	ldw	r2,-8(fp)
   42d44:	e0bffc15 	stw	r2,-16(fp)
   42d48:	00000506 	br	42d60 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   42d4c:	e0bffc17 	ldw	r2,-16(fp)
   42d50:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42d54:	e0bffc17 	ldw	r2,-16(fp)
   42d58:	10800804 	addi	r2,r2,32
   42d5c:	e0bffc15 	stw	r2,-16(fp)
   42d60:	e0fffc17 	ldw	r3,-16(fp)
   42d64:	e0bffd17 	ldw	r2,-12(fp)
   42d68:	18bff836 	bltu	r3,r2,42d4c <__alt_data_end+0xfffdad4c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   42d6c:	e0bffe17 	ldw	r2,-8(fp)
   42d70:	108007cc 	andi	r2,r2,31
   42d74:	10000226 	beq	r2,zero,42d80 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   42d78:	e0bffc17 	ldw	r2,-16(fp)
   42d7c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   42d80:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   42d84:	0001883a 	nop
   42d88:	e037883a 	mov	sp,fp
   42d8c:	df000017 	ldw	fp,0(sp)
   42d90:	dec00104 	addi	sp,sp,4
   42d94:	f800283a 	ret

00042d98 <exit>:
   42d98:	defffe04 	addi	sp,sp,-8
   42d9c:	000b883a 	mov	r5,zero
   42da0:	dc000015 	stw	r16,0(sp)
   42da4:	dfc00115 	stw	ra,4(sp)
   42da8:	2021883a 	mov	r16,r4
   42dac:	0042de80 	call	42de8 <__call_exitprocs>
   42db0:	8009883a 	mov	r4,r16
   42db4:	0042f780 	call	42f78 <_exit>

00042db8 <memcmp>:
   42db8:	218d883a 	add	r6,r4,r6
   42dbc:	21800826 	beq	r4,r6,42de0 <memcmp+0x28>
   42dc0:	20800003 	ldbu	r2,0(r4)
   42dc4:	28c00003 	ldbu	r3,0(r5)
   42dc8:	10c00226 	beq	r2,r3,42dd4 <memcmp+0x1c>
   42dcc:	10c5c83a 	sub	r2,r2,r3
   42dd0:	f800283a 	ret
   42dd4:	21000044 	addi	r4,r4,1
   42dd8:	29400044 	addi	r5,r5,1
   42ddc:	003ff706 	br	42dbc <__alt_data_end+0xfffdadbc>
   42de0:	0005883a 	mov	r2,zero
   42de4:	f800283a 	ret

00042de8 <__call_exitprocs>:
   42de8:	defff504 	addi	sp,sp,-44
   42dec:	dd000515 	stw	r20,20(sp)
   42df0:	05000134 	movhi	r20,4
   42df4:	dc800315 	stw	r18,12(sp)
   42df8:	dfc00a15 	stw	ra,40(sp)
   42dfc:	df000915 	stw	fp,36(sp)
   42e00:	ddc00815 	stw	r23,32(sp)
   42e04:	dd800715 	stw	r22,28(sp)
   42e08:	dd400615 	stw	r21,24(sp)
   42e0c:	dcc00415 	stw	r19,16(sp)
   42e10:	dc400215 	stw	r17,8(sp)
   42e14:	dc000115 	stw	r16,4(sp)
   42e18:	d9000015 	stw	r4,0(sp)
   42e1c:	2825883a 	mov	r18,r5
   42e20:	a50cd404 	addi	r20,r20,13136
   42e24:	a4400017 	ldw	r17,0(r20)
   42e28:	8cc00c17 	ldw	r19,48(r17)
   42e2c:	8c400c04 	addi	r17,r17,48
   42e30:	98004526 	beq	r19,zero,42f48 <__call_exitprocs+0x160>
   42e34:	9c000117 	ldw	r16,4(r19)
   42e38:	00900034 	movhi	r2,16384
   42e3c:	10bfffc4 	addi	r2,r2,-1
   42e40:	9d402217 	ldw	r21,136(r19)
   42e44:	85bfffc4 	addi	r22,r16,-1
   42e48:	80a1883a 	add	r16,r16,r2
   42e4c:	8421883a 	add	r16,r16,r16
   42e50:	8421883a 	add	r16,r16,r16
   42e54:	ac2f883a 	add	r23,r21,r16
   42e58:	84000204 	addi	r16,r16,8
   42e5c:	9c21883a 	add	r16,r19,r16
   42e60:	b0002716 	blt	r22,zero,42f00 <__call_exitprocs+0x118>
   42e64:	90000726 	beq	r18,zero,42e84 <__call_exitprocs+0x9c>
   42e68:	a800041e 	bne	r21,zero,42e7c <__call_exitprocs+0x94>
   42e6c:	b5bfffc4 	addi	r22,r22,-1
   42e70:	bdffff04 	addi	r23,r23,-4
   42e74:	843fff04 	addi	r16,r16,-4
   42e78:	003ff906 	br	42e60 <__alt_data_end+0xfffdae60>
   42e7c:	b9002017 	ldw	r4,128(r23)
   42e80:	913ffa1e 	bne	r18,r4,42e6c <__alt_data_end+0xfffdae6c>
   42e84:	99000117 	ldw	r4,4(r19)
   42e88:	82000017 	ldw	r8,0(r16)
   42e8c:	213fffc4 	addi	r4,r4,-1
   42e90:	b100021e 	bne	r22,r4,42e9c <__call_exitprocs+0xb4>
   42e94:	9d800115 	stw	r22,4(r19)
   42e98:	00000106 	br	42ea0 <__call_exitprocs+0xb8>
   42e9c:	80000015 	stw	zero,0(r16)
   42ea0:	403ff226 	beq	r8,zero,42e6c <__alt_data_end+0xfffdae6c>
   42ea4:	9f000117 	ldw	fp,4(r19)
   42ea8:	a8000526 	beq	r21,zero,42ec0 <__call_exitprocs+0xd8>
   42eac:	00800044 	movi	r2,1
   42eb0:	1592983a 	sll	r9,r2,r22
   42eb4:	a9404017 	ldw	r5,256(r21)
   42eb8:	494a703a 	and	r5,r9,r5
   42ebc:	2800021e 	bne	r5,zero,42ec8 <__call_exitprocs+0xe0>
   42ec0:	403ee83a 	callr	r8
   42ec4:	00000906 	br	42eec <__call_exitprocs+0x104>
   42ec8:	a9004117 	ldw	r4,260(r21)
   42ecc:	4908703a 	and	r4,r9,r4
   42ed0:	2000041e 	bne	r4,zero,42ee4 <__call_exitprocs+0xfc>
   42ed4:	b9400017 	ldw	r5,0(r23)
   42ed8:	d9000017 	ldw	r4,0(sp)
   42edc:	403ee83a 	callr	r8
   42ee0:	00000206 	br	42eec <__call_exitprocs+0x104>
   42ee4:	b9000017 	ldw	r4,0(r23)
   42ee8:	403ee83a 	callr	r8
   42eec:	99000117 	ldw	r4,4(r19)
   42ef0:	e13fcc1e 	bne	fp,r4,42e24 <__alt_data_end+0xfffdae24>
   42ef4:	89000017 	ldw	r4,0(r17)
   42ef8:	993fdc26 	beq	r19,r4,42e6c <__alt_data_end+0xfffdae6c>
   42efc:	003fc906 	br	42e24 <__alt_data_end+0xfffdae24>
   42f00:	00800034 	movhi	r2,0
   42f04:	10800004 	addi	r2,r2,0
   42f08:	10000f26 	beq	r2,zero,42f48 <__call_exitprocs+0x160>
   42f0c:	99400117 	ldw	r5,4(r19)
   42f10:	99000017 	ldw	r4,0(r19)
   42f14:	2800091e 	bne	r5,zero,42f3c <__call_exitprocs+0x154>
   42f18:	20000826 	beq	r4,zero,42f3c <__call_exitprocs+0x154>
   42f1c:	89000015 	stw	r4,0(r17)
   42f20:	a8000226 	beq	r21,zero,42f2c <__call_exitprocs+0x144>
   42f24:	a809883a 	mov	r4,r21
   42f28:	00000000 	call	0 <__reset-0x40000>
   42f2c:	9809883a 	mov	r4,r19
   42f30:	00000000 	call	0 <__reset-0x40000>
   42f34:	8cc00017 	ldw	r19,0(r17)
   42f38:	003fbd06 	br	42e30 <__alt_data_end+0xfffdae30>
   42f3c:	9823883a 	mov	r17,r19
   42f40:	2027883a 	mov	r19,r4
   42f44:	003fba06 	br	42e30 <__alt_data_end+0xfffdae30>
   42f48:	dfc00a17 	ldw	ra,40(sp)
   42f4c:	df000917 	ldw	fp,36(sp)
   42f50:	ddc00817 	ldw	r23,32(sp)
   42f54:	dd800717 	ldw	r22,28(sp)
   42f58:	dd400617 	ldw	r21,24(sp)
   42f5c:	dd000517 	ldw	r20,20(sp)
   42f60:	dcc00417 	ldw	r19,16(sp)
   42f64:	dc800317 	ldw	r18,12(sp)
   42f68:	dc400217 	ldw	r17,8(sp)
   42f6c:	dc000117 	ldw	r16,4(sp)
   42f70:	dec00b04 	addi	sp,sp,44
   42f74:	f800283a 	ret

00042f78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   42f78:	defffd04 	addi	sp,sp,-12
   42f7c:	df000215 	stw	fp,8(sp)
   42f80:	df000204 	addi	fp,sp,8
   42f84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   42f88:	0001883a 	nop
   42f8c:	e0bfff17 	ldw	r2,-4(fp)
   42f90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   42f94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   42f98:	10000226 	beq	r2,zero,42fa4 <_exit+0x2c>
    ALT_SIM_FAIL();
   42f9c:	002af070 	cmpltui	zero,zero,43969
   42fa0:	00000106 	br	42fa8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   42fa4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   42fa8:	003fff06 	br	42fa8 <__alt_data_end+0xfffdafa8>
