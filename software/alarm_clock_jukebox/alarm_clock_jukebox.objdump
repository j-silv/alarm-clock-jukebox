
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00003010 memsz 0x00003010 flags r-x
    LOAD off    0x00004030 vaddr 0x00043030 paddr 0x00043320 align 2**12
         filesz 0x000002f0 memsz 0x000002f0 flags rw-
    LOAD off    0x00004610 vaddr 0x00043610 paddr 0x00043610 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002d30  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  00042f74  00042f74  00003f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002f0  00043030  00043320  00004030  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  00043610  00043610  00004610  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0004373c  0004373c  00004320  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000658  00000000  00000000  00004348  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000081b9  00000000  00000000  000049a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002dba  00000000  00000000  0000cb59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000033e9  00000000  00000000  0000f913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000eb4  00000000  00000000  00012cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ec8  00000000  00000000  00013bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  00015a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00016d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  00016da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00018e32  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00018e35  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00018e3f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00018e40  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00018e41  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00018e45  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00018e49  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00018e4d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00018e58  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00018e63  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00018e6e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  00018e79  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  00018eda  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00086c0e  00000000  00000000  0001e874  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00042f74 l    d  .rodata	00000000 .rodata
00043030 l    d  .rwdata	00000000 .rwdata
00043610 l    d  .bss	00000000 .bss
0004373c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 button.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000411f4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0004303c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00041b50 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00041ca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00041ddc l     F .text	00000034 alt_dev_reg
0004311c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000420d8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
000421cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000422f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00042324 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000424d4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00042614 l     F .text	0000003c alt_get_errno
00042650 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00043630 g     O .bss	00000004 alt_instruction_exception_handler
00041c3c g     F .text	0000006c alt_main
00041144 g     F .text	00000080 _puts_r
0004363c g     O .bss	00000100 alt_irq
00043320 g       *ABS*	00000000 __flash_rwdata_start
000410f8 g     F .text	0000004c printf
00040958 g     F .text	000000ac upClockHour
00042a70 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004361c g     O .bss	00000004 errno
00043628 g     O .bss	00000004 alt_argv
0004b2f0 g       *ABS*	00000000 _gp
000432f0 g     O .rwdata	00000001 time_format
000405e8 g     F .text	00000030 alarmLEDon
00043170 g     O .rwdata	00000180 alt_fd_list
00042a94 g     F .text	00000090 alt_find_dev
000404b8 g     F .text	00000044 updateMinutesTime
00042598 g     F .text	0000007c alt_io_redirect
000411c4 g     F .text	00000014 puts
00042438 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00041f58 g     F .text	000000ec altera_avalon_jtag_uart_read
000410bc g     F .text	0000003c _printf_r
00041000 g     F .text	00000064 .hidden __udivsi3
00042cd0 g     F .text	00000090 alt_icache_flush
00043310 g     O .rwdata	00000004 alt_max_fd
00040e60 g     F .text	000000a8 downAlarmHour
00040acc g     F .text	000000c4 downClockMinute
000432f4 g     O .rwdata	00000004 _global_impure_ptr
0004373c g       *ABS*	00000000 __bss_end
00041a60 g     F .text	000000f0 alt_iic_isr_register
00042968 g     F .text	00000108 alt_tick
00041a14 g     F .text	0000004c alt_ic_irq_enabled
00043615 g     O .bss	00000003 alarm
000428cc g     F .text	0000009c alt_alarm_stop
00043620 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00043148 g     O .rwdata	00000028 alt_dev_null
000422d8 g     F .text	00000020 alt_dcache_flush_all
000406dc g     F .text	000000c4 timerSecondISR
00043320 g       *ABS*	00000000 __ram_rwdata_end
00040c64 g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00043308 g     O .rwdata	00000008 alt_dev_list
00041ce4 g     F .text	000000f8 write
00040b90 g     F .text	000000a8 downClockHour
00043030 g       *ABS*	00000000 __ram_rodata_end
00040474 g     F .text	00000044 updateHourTime
00043030 g     O .rwdata	0000000c COM_ANODE_SEG_TABLE
000407cc g     F .text	000000c8 upClockSecond
00041064 g     F .text	00000058 .hidden __umodsi3
000405b8 g     F .text	00000030 alarmLEDoff
00040618 g     F .text	0000004c alarmLEDtoggle
0004373c g       *ABS*	00000000 end
00043610 g     O .bss	00000005 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00040db8 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00042150 g     F .text	0000007c alt_avalon_timer_sc_init
00042044 g     F .text	00000094 altera_avalon_jtag_uart_write
00041260 g     F .text	00000524 ___vfprintf_internal_r
00042db0 g     F .text	00000190 __call_exitprocs
00040244 g     F .text	0000003c _start
00043634 g     O .bss	00000004 _alt_tick_rate
00043638 g     O .bss	00000004 _alt_nticks
00041e48 g     F .text	00000050 alt_sys_init
00043030 g       *ABS*	00000000 __ram_rwdata_start
00042f74 g       *ABS*	00000000 __ram_rodata_start
00041e98 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00042c2c g     F .text	000000a4 alt_get_fd
00042d80 g     F .text	00000030 memcmp
0004373c g       *ABS*	00000000 __alt_stack_base
00042b24 g     F .text	00000108 alt_find_file
00042360 g     F .text	000000a4 alt_dev_llist_insert
000407a0 g     F .text	0000002c resetClockTime
000403a0 g     F .text	000000d4 convertBCDToLED
000417a0 g     F .text	000000b8 __sfvwrite_small_dev
00043610 g       *ABS*	00000000 __bss_start
00040664 g     F .text	00000078 main
0004362c g     O .bss	00000004 alt_envp
00041ef8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00040280 g     F .text	00000080 resetDisplay
00043314 g     O .rwdata	00000004 alt_errno
00040f08 g     F .text	00000084 .hidden __divsi3
00040a04 g     F .text	000000c8 downClockSecond
00042f74 g       *ABS*	00000000 __flash_rodata_start
00041e10 g     F .text	00000038 alt_irq_init
00042868 g     F .text	00000064 alt_release_fd
00041858 g     F .text	00000058 _write_r
00040894 g     F .text	000000c4 upClockMinute
000432f8 g     O .rwdata	00000004 _impure_ptr
00043624 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
00040588 g     F .text	00000030 timerSecondEnableInterrupt
00043300 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000418b0 g     F .text	00000050 alt_ic_isr_register
00043320 g       *ABS*	00000000 _edata
0004373c g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000404fc g     F .text	00000044 updateSecondsTime
00041988 g     F .text	0000008c alt_ic_irq_disable
00042d60 g     F .text	00000020 exit
00040300 g     F .text	000000a0 convert3DigitDecimalToLED
00040f8c g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00040540 g     F .text	00000048 timerSecondRegisterISR
00040d0c g     F .text	000000ac upAlarmHour
00042f40 g     F .text	00000034 _exit
000411d8 g     F .text	0000001c strlen
00042714 g     F .text	00000154 open
00043618 g     O .bss	00000003 clock
00042404 g     F .text	00000034 alt_icache_flush_all
000432fc g     O .rwdata	00000004 alt_priority_mask
00041900 g     F .text	00000088 alt_ic_irq_enable
00041784 g     F .text	0000001c __vfprintf_internal
00043318 g     O .rwdata	00000008 alt_alarm_list
00042208 g     F .text	000000d0 close
00040c38 g     F .text	0000002c resetAlarmTime
00041bb8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	108d8f04 	addi	r2,r2,13884
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	108d8f04 	addi	r2,r2,13884
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a0d017 	ldw	r2,-31936(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a0d017 	ldw	r2,-31936(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6acbc14 	ori	gp,gp,45808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	108d8414 	ori	r2,r2,13840

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18cdcf14 	ori	r3,r3,14140

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	0041bb80 	call	41bb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	0041c3c0 	call	41c3c <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   40280:	deffff04 	addi	sp,sp,-4
   40284:	df000015 	stw	fp,0(sp)
   40288:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   4028c:	00c03004 	movi	r3,192
   40290:	00800234 	movhi	r2,8
   40294:	10843004 	addi	r2,r2,4288
   40298:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   4029c:	00c03004 	movi	r3,192
   402a0:	00800234 	movhi	r2,8
   402a4:	10843404 	addi	r2,r2,4304
   402a8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN1_BASE, RESET_DISPLAY_VALUE);
   402ac:	00c03004 	movi	r3,192
   402b0:	00800234 	movhi	r2,8
   402b4:	10842804 	addi	r2,r2,4256
   402b8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN0_BASE, RESET_DISPLAY_VALUE);
   402bc:	00c03004 	movi	r3,192
   402c0:	00800234 	movhi	r2,8
   402c4:	10842c04 	addi	r2,r2,4272
   402c8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC1_BASE, RESET_DISPLAY_VALUE);
   402cc:	00c03004 	movi	r3,192
   402d0:	00800234 	movhi	r2,8
   402d4:	10842004 	addi	r2,r2,4224
   402d8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC0_BASE, RESET_DISPLAY_VALUE);
   402dc:	00c03004 	movi	r3,192
   402e0:	00800234 	movhi	r2,8
   402e4:	10842404 	addi	r2,r2,4240
   402e8:	10c00035 	stwio	r3,0(r2)
}
   402ec:	0001883a 	nop
   402f0:	e037883a 	mov	sp,fp
   402f4:	df000017 	ldw	fp,0(sp)
   402f8:	dec00104 	addi	sp,sp,4
   402fc:	f800283a 	ret

00040300 <convert3DigitDecimalToLED>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/

int convert3DigitDecimalToLED(int decimal) {
   40300:	defff904 	addi	sp,sp,-28
   40304:	dfc00615 	stw	ra,24(sp)
   40308:	df000515 	stw	fp,20(sp)
   4030c:	df000504 	addi	fp,sp,20
   40310:	e13fff15 	stw	r4,-4(fp)
  int bcd[3] = {0x0,0x0,0x0};
   40314:	e03ffc15 	stw	zero,-16(fp)
   40318:	e03ffd15 	stw	zero,-12(fp)
   4031c:	e03ffe15 	stw	zero,-8(fp)
  int ledseg_buffer = 0;
   40320:	e03ffb15 	stw	zero,-20(fp)
  
  // first convert the decimal to BCD
  bcd[2] = decimal/100;
   40324:	e0bfff17 	ldw	r2,-4(fp)
   40328:	01401904 	movi	r5,100
   4032c:	1009883a 	mov	r4,r2
   40330:	0040f080 	call	40f08 <__divsi3>
   40334:	e0bffe15 	stw	r2,-8(fp)
  bcd[1] = (decimal - bcd[2]*100)/10;
   40338:	e0bffe17 	ldw	r2,-8(fp)
   4033c:	10ffe724 	muli	r3,r2,-100
   40340:	e0bfff17 	ldw	r2,-4(fp)
   40344:	1885883a 	add	r2,r3,r2
   40348:	01400284 	movi	r5,10
   4034c:	1009883a 	mov	r4,r2
   40350:	0040f080 	call	40f08 <__divsi3>
   40354:	e0bffd15 	stw	r2,-12(fp)
  bcd[0] = decimal - (bcd[2]*100 + bcd[1]*10);
   40358:	e0bffe17 	ldw	r2,-8(fp)
   4035c:	10c01924 	muli	r3,r2,100
   40360:	e0bffd17 	ldw	r2,-12(fp)
   40364:	108002a4 	muli	r2,r2,10
   40368:	1885883a 	add	r2,r3,r2
   4036c:	e0ffff17 	ldw	r3,-4(fp)
   40370:	1885c83a 	sub	r2,r3,r2
   40374:	e0bffc15 	stw	r2,-16(fp)

  // then convert BCD to LED segment data buffer
  // by passing in pointer to bcd array
  ledseg_buffer = convertBCDToLED(bcd);
   40378:	e0bffc04 	addi	r2,fp,-16
   4037c:	1009883a 	mov	r4,r2
   40380:	00403a00 	call	403a0 <convertBCDToLED>
   40384:	e0bffb15 	stw	r2,-20(fp)

  return ledseg_buffer;
   40388:	e0bffb17 	ldw	r2,-20(fp)
}
   4038c:	e037883a 	mov	sp,fp
   40390:	dfc00117 	ldw	ra,4(sp)
   40394:	df000017 	ldw	fp,0(sp)
   40398:	dec00204 	addi	sp,sp,8
   4039c:	f800283a 	ret

000403a0 <convertBCDToLED>:

int convertBCDToLED(int *bcd) {
   403a0:	defff904 	addi	sp,sp,-28
   403a4:	df000615 	stw	fp,24(sp)
   403a8:	df000604 	addi	fp,sp,24
   403ac:	e13fff15 	stw	r4,-4(fp)

  int i;
  int ledseg[3] = {0x0,0x0,0x0};
   403b0:	e03ffc15 	stw	zero,-16(fp)
   403b4:	e03ffd15 	stw	zero,-12(fp)
   403b8:	e03ffe15 	stw	zero,-8(fp)
  int ledseg_buffer = 0x0;
   403bc:	e03ffb15 	stw	zero,-20(fp)

  // shift by 8 bits each time through loop to target each digit
  // of the 7 seg display
  for (i=0; i < 3; i++) {
   403c0:	e03ffa15 	stw	zero,-24(fp)
   403c4:	00002306 	br	40454 <convertBCDToLED+0xb4>
    // bcd[i] corresponds to a position of the SEG_TABLE and this position
    // is the associated BCD value
    ledseg[i] = COM_ANODE_SEG_TABLE[(bcd[i])];
   403c8:	e0bffa17 	ldw	r2,-24(fp)
   403cc:	1085883a 	add	r2,r2,r2
   403d0:	1085883a 	add	r2,r2,r2
   403d4:	1007883a 	mov	r3,r2
   403d8:	e0bfff17 	ldw	r2,-4(fp)
   403dc:	10c5883a 	add	r2,r2,r3
   403e0:	10c00017 	ldw	r3,0(r2)
   403e4:	00800134 	movhi	r2,4
   403e8:	108c0c04 	addi	r2,r2,12336
   403ec:	10c5883a 	add	r2,r2,r3
   403f0:	10800003 	ldbu	r2,0(r2)
   403f4:	10c03fcc 	andi	r3,r2,255
   403f8:	e0bffa17 	ldw	r2,-24(fp)
   403fc:	1085883a 	add	r2,r2,r2
   40400:	1085883a 	add	r2,r2,r2
   40404:	e13ffa04 	addi	r4,fp,-24
   40408:	2085883a 	add	r2,r4,r2
   4040c:	10800204 	addi	r2,r2,8
   40410:	10c00015 	stw	r3,0(r2)
    ledseg_buffer |= (ledseg[i] << 8*i);
   40414:	e0bffa17 	ldw	r2,-24(fp)
   40418:	1085883a 	add	r2,r2,r2
   4041c:	1085883a 	add	r2,r2,r2
   40420:	e0fffa04 	addi	r3,fp,-24
   40424:	1885883a 	add	r2,r3,r2
   40428:	10800204 	addi	r2,r2,8
   4042c:	10c00017 	ldw	r3,0(r2)
   40430:	e0bffa17 	ldw	r2,-24(fp)
   40434:	100490fa 	slli	r2,r2,3
   40438:	1884983a 	sll	r2,r3,r2
   4043c:	e0fffb17 	ldw	r3,-20(fp)
   40440:	1884b03a 	or	r2,r3,r2
   40444:	e0bffb15 	stw	r2,-20(fp)
  int ledseg[3] = {0x0,0x0,0x0};
  int ledseg_buffer = 0x0;

  // shift by 8 bits each time through loop to target each digit
  // of the 7 seg display
  for (i=0; i < 3; i++) {
   40448:	e0bffa17 	ldw	r2,-24(fp)
   4044c:	10800044 	addi	r2,r2,1
   40450:	e0bffa15 	stw	r2,-24(fp)
   40454:	e0bffa17 	ldw	r2,-24(fp)
   40458:	108000d0 	cmplti	r2,r2,3
   4045c:	103fda1e 	bne	r2,zero,403c8 <__alt_data_end+0xfffd83c8>
    // bcd[i] corresponds to a position of the SEG_TABLE and this position
    // is the associated BCD value
    ledseg[i] = COM_ANODE_SEG_TABLE[(bcd[i])];
    ledseg_buffer |= (ledseg[i] << 8*i);
  }
  return ledseg_buffer;
   40460:	e0bffb17 	ldw	r2,-20(fp)
}
   40464:	e037883a 	mov	sp,fp
   40468:	df000017 	ldw	fp,0(sp)
   4046c:	dec00104 	addi	sp,sp,4
   40470:	f800283a 	ret

00040474 <updateHourTime>:

void updateHourTime(int hour) {
   40474:	defffe04 	addi	sp,sp,-8
   40478:	df000115 	stw	fp,4(sp)
   4047c:	df000104 	addi	fp,sp,4
   40480:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, hour);
   40484:	00800234 	movhi	r2,8
   40488:	10843004 	addi	r2,r2,4288
   4048c:	e0ffff17 	ldw	r3,-4(fp)
   40490:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, hour);
   40494:	00800234 	movhi	r2,8
   40498:	10843404 	addi	r2,r2,4304
   4049c:	e0ffff17 	ldw	r3,-4(fp)
   404a0:	10c00035 	stwio	r3,0(r2)
}
   404a4:	0001883a 	nop
   404a8:	e037883a 	mov	sp,fp
   404ac:	df000017 	ldw	fp,0(sp)
   404b0:	dec00104 	addi	sp,sp,4
   404b4:	f800283a 	ret

000404b8 <updateMinutesTime>:

void updateMinutesTime(int minute) {
   404b8:	defffe04 	addi	sp,sp,-8
   404bc:	df000115 	stw	fp,4(sp)
   404c0:	df000104 	addi	fp,sp,4
   404c4:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN1_BASE, minute);
   404c8:	00800234 	movhi	r2,8
   404cc:	10842804 	addi	r2,r2,4256
   404d0:	e0ffff17 	ldw	r3,-4(fp)
   404d4:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN0_BASE, minute);
   404d8:	00800234 	movhi	r2,8
   404dc:	10842c04 	addi	r2,r2,4272
   404e0:	e0ffff17 	ldw	r3,-4(fp)
   404e4:	10c00035 	stwio	r3,0(r2)
}
   404e8:	0001883a 	nop
   404ec:	e037883a 	mov	sp,fp
   404f0:	df000017 	ldw	fp,0(sp)
   404f4:	dec00104 	addi	sp,sp,4
   404f8:	f800283a 	ret

000404fc <updateSecondsTime>:

void updateSecondsTime(int second) {
   404fc:	defffe04 	addi	sp,sp,-8
   40500:	df000115 	stw	fp,4(sp)
   40504:	df000104 	addi	fp,sp,4
   40508:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC1_BASE, second);
   4050c:	00800234 	movhi	r2,8
   40510:	10842004 	addi	r2,r2,4224
   40514:	e0ffff17 	ldw	r3,-4(fp)
   40518:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC0_BASE, second);
   4051c:	00800234 	movhi	r2,8
   40520:	10842404 	addi	r2,r2,4240
   40524:	e0ffff17 	ldw	r3,-4(fp)
   40528:	10c00035 	stwio	r3,0(r2)
   4052c:	0001883a 	nop
   40530:	e037883a 	mov	sp,fp
   40534:	df000017 	ldw	fp,0(sp)
   40538:	dec00104 	addi	sp,sp,4
   4053c:	f800283a 	ret

00040540 <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   40540:	defffb04 	addi	sp,sp,-20
   40544:	dfc00415 	stw	ra,16(sp)
   40548:	df000315 	stw	fp,12(sp)
   4054c:	df000304 	addi	fp,sp,12
   40550:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   40554:	d8000015 	stw	zero,0(sp)
   40558:	000f883a 	mov	r7,zero
   4055c:	e1bfff17 	ldw	r6,-4(fp)
   40560:	01400044 	movi	r5,1
   40564:	0009883a 	mov	r4,zero
   40568:	00418b00 	call	418b0 <alt_ic_isr_register>
   4056c:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40570:	e0bffe03 	ldbu	r2,-8(fp)
}
   40574:	e037883a 	mov	sp,fp
   40578:	dfc00117 	ldw	ra,4(sp)
   4057c:	df000017 	ldw	fp,0(sp)
   40580:	dec00204 	addi	sp,sp,8
   40584:	f800283a 	ret

00040588 <timerSecondEnableInterrupt>:


void timerSecondEnableInterrupt(void) {
   40588:	deffff04 	addi	sp,sp,-4
   4058c:	df000015 	stw	fp,0(sp)
   40590:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   40594:	00c001c4 	movi	r3,7
   40598:	00800234 	movhi	r2,8
   4059c:	10840104 	addi	r2,r2,4100
   405a0:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   405a4:	0001883a 	nop
   405a8:	e037883a 	mov	sp,fp
   405ac:	df000017 	ldw	fp,0(sp)
   405b0:	dec00104 	addi	sp,sp,4
   405b4:	f800283a 	ret

000405b8 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   405b8:	deffff04 	addi	sp,sp,-4
   405bc:	df000015 	stw	fp,0(sp)
   405c0:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   405c4:	0007883a 	mov	r3,zero
   405c8:	00800234 	movhi	r2,8
   405cc:	10841804 	addi	r2,r2,4192
   405d0:	10c00035 	stwio	r3,0(r2)
}
   405d4:	0001883a 	nop
   405d8:	e037883a 	mov	sp,fp
   405dc:	df000017 	ldw	fp,0(sp)
   405e0:	dec00104 	addi	sp,sp,4
   405e4:	f800283a 	ret

000405e8 <alarmLEDon>:

void alarmLEDon(void) {
   405e8:	deffff04 	addi	sp,sp,-4
   405ec:	df000015 	stw	fp,0(sp)
   405f0:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   405f4:	00c00044 	movi	r3,1
   405f8:	00800234 	movhi	r2,8
   405fc:	10841804 	addi	r2,r2,4192
   40600:	10c00035 	stwio	r3,0(r2)
}
   40604:	0001883a 	nop
   40608:	e037883a 	mov	sp,fp
   4060c:	df000017 	ldw	fp,0(sp)
   40610:	dec00104 	addi	sp,sp,4
   40614:	f800283a 	ret

00040618 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40618:	defffe04 	addi	sp,sp,-8
   4061c:	df000115 	stw	fp,4(sp)
   40620:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40624:	00800234 	movhi	r2,8
   40628:	10841804 	addi	r2,r2,4192
   4062c:	10800037 	ldwio	r2,0(r2)
   40630:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   40634:	e0bfff03 	ldbu	r2,-4(fp)
   40638:	10803fcc 	andi	r2,r2,255
   4063c:	1005003a 	cmpeq	r2,r2,zero
   40640:	10c03fcc 	andi	r3,r2,255
   40644:	00800234 	movhi	r2,8
   40648:	10841804 	addi	r2,r2,4192
   4064c:	10c00035 	stwio	r3,0(r2)
   40650:	0001883a 	nop
   40654:	e037883a 	mov	sp,fp
   40658:	df000017 	ldw	fp,0(sp)
   4065c:	dec00104 	addi	sp,sp,4
   40660:	f800283a 	ret

00040664 <main>:
  struct config config;
};

struct mode mode;

int main(void) {
   40664:	defffe04 	addi	sp,sp,-8
   40668:	dfc00115 	stw	ra,4(sp)
   4066c:	df000015 	stw	fp,0(sp)
   40670:	d839883a 	mov	fp,sp

  // initialization
  mode.display = TIME_DISPLAY;
   40674:	00800104 	movi	r2,4
   40678:	d0a0c805 	stb	r2,-31968(gp)
  mode.alarm = NOT_ARMED;
   4067c:	00800084 	movi	r2,2
   40680:	d0a0c845 	stb	r2,-31967(gp)
  mode.config.on = TRUE;
   40684:	00800044 	movi	r2,1
   40688:	d0a0c885 	stb	r2,-31966(gp)
  mode.config.hour = FALSE;
   4068c:	d020c8c5 	stb	zero,-31965(gp)
  mode.config.minute = FALSE;
   40690:	d020c905 	stb	zero,-31964(gp)
  alarmLEDoff();
   40694:	00405b80 	call	405b8 <alarmLEDoff>
  resetClockTime();
   40698:	00407a00 	call	407a0 <resetClockTime>
  resetAlarmTime();
   4069c:	0040c380 	call	40c38 <resetAlarmTime>
  resetDisplay();
   406a0:	00402800 	call	40280 <resetDisplay>

  /* the callback ISR is passed in for the registration. When the timer peripheral
  fires its interrupt, timerSecondISR() will be called
  timerSecondISR can be preceded with or without & (both pass in the function address); 
  because a function’s name can also be used to get function's address */
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   406a4:	01000134 	movhi	r4,4
   406a8:	2101b704 	addi	r4,r4,1756
   406ac:	00405400 	call	40540 <timerSecondRegisterISR>
   406b0:	10803fcc 	andi	r2,r2,255
   406b4:	1000051e 	bne	r2,zero,406cc <main+0x68>
    printf("timerSecondISR successively registered!\n");
   406b8:	01000134 	movhi	r4,4
   406bc:	210bdd04 	addi	r4,r4,12148
   406c0:	00411c40 	call	411c4 <puts>
    timerSecondEnableInterrupt();
   406c4:	00405880 	call	40588 <timerSecondEnableInterrupt>
   406c8:	00000306 	br	406d8 <main+0x74>
  }
  else {
   printf("ERROR: timerSecondISR unsuccessively registered!\n");
   406cc:	01000134 	movhi	r4,4
   406d0:	210be704 	addi	r4,r4,12188
   406d4:	00411c40 	call	411c4 <puts>
  }
  // if (timerPWMRegisterISR() == ISR_REGISTRATION_SUCCESS)... etc.



  while(1) {}  
   406d8:	003fff06 	br	406d8 <__alt_data_end+0xfffd86d8>

000406dc <timerSecondISR>:
}


// -------------- ISR callbacks -------------------

void timerSecondISR(void* isr_context) {
   406dc:	defffc04 	addi	sp,sp,-16
   406e0:	dfc00315 	stw	ra,12(sp)
   406e4:	df000215 	stw	fp,8(sp)
   406e8:	df000204 	addi	fp,sp,8
   406ec:	e13fff15 	stw	r4,-4(fp)

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   406f0:	0007883a 	mov	r3,zero
   406f4:	00800234 	movhi	r2,8
   406f8:	10840004 	addi	r2,r2,4096
   406fc:	10c00035 	stwio	r3,0(r2)


  // for debugging purposes -> acknowledgement that interrupt has succesively fired
  //printf("timerSecond interrupt has fired!\n");
  alarmLEDtoggle();
   40700:	00406180 	call	40618 <alarmLEDtoggle>
 

  /* if we're currently configuring the current time, the display
  should not overflow its digits (for ex., at sec = 60, the minute should not
  pass to 1 */
  if (mode.display == TIME_DISPLAY) {
   40704:	d0a0c803 	ldbu	r2,-31968(gp)
   40708:	10803fcc 	andi	r2,r2,255
   4070c:	10800118 	cmpnei	r2,r2,4
   40710:	10001d1e 	bne	r2,zero,40788 <timerSecondISR+0xac>
    if (mode.config.on == TRUE) {
   40714:	d0a0c883 	ldbu	r2,-31966(gp)
   40718:	10803fcc 	andi	r2,r2,255
   4071c:	10800058 	cmpnei	r2,r2,1
   40720:	1000191e 	bne	r2,zero,40788 <timerSecondISR+0xac>

      // temporary time struct for data transfer between modules
      struct time clock;

      clock = upClockSecond(CARRY_OFF);
   40724:	01000044 	movi	r4,1
   40728:	00407cc0 	call	407cc <upClockSecond>
   4072c:	e0bffe05 	stb	r2,-8(fp)
   40730:	1006d23a 	srli	r3,r2,8
   40734:	1809883a 	mov	r4,r3
   40738:	00ffffc4 	movi	r3,-1
   4073c:	20c6703a 	and	r3,r4,r3
   40740:	e0fffe45 	stb	r3,-7(fp)
   40744:	1004d43a 	srli	r2,r2,16
   40748:	1007883a 	mov	r3,r2
   4074c:	00bfffc4 	movi	r2,-1
   40750:	1884703a 	and	r2,r3,r2
   40754:	e0bffe85 	stb	r2,-6(fp)
      printf("The clock time is currently: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40758:	e0bffe03 	ldbu	r2,-8(fp)
   4075c:	10803fcc 	andi	r2,r2,255
   40760:	e0fffe43 	ldbu	r3,-7(fp)
   40764:	18c03fcc 	andi	r3,r3,255
   40768:	e13ffe83 	ldbu	r4,-6(fp)
   4076c:	21003fcc 	andi	r4,r4,255
   40770:	200f883a 	mov	r7,r4
   40774:	180d883a 	mov	r6,r3
   40778:	100b883a 	mov	r5,r2
   4077c:	01000134 	movhi	r4,4
   40780:	210bf404 	addi	r4,r4,12240
   40784:	00410f80 	call	410f8 <printf>



  //payload = convertBCD2LED(clock_time);
  //updateDisplay(payload);
}
   40788:	0001883a 	nop
   4078c:	e037883a 	mov	sp,fp
   40790:	dfc00117 	ldw	ra,4(sp)
   40794:	df000017 	ldw	fp,0(sp)
   40798:	dec00204 	addi	sp,sp,8
   4079c:	f800283a 	ret

000407a0 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to 00:00:00
void resetClockTime(void) {
   407a0:	deffff04 	addi	sp,sp,-4
   407a4:	df000015 	stw	fp,0(sp)
   407a8:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  clock = (struct time){0};
   407ac:	d020ca05 	stb	zero,-31960(gp)
   407b0:	d020ca45 	stb	zero,-31959(gp)
   407b4:	d020ca85 	stb	zero,-31958(gp)
}
   407b8:	0001883a 	nop
   407bc:	e037883a 	mov	sp,fp
   407c0:	df000017 	ldw	fp,0(sp)
   407c4:	dec00104 	addi	sp,sp,4
   407c8:	f800283a 	ret

000407cc <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   407cc:	defffc04 	addi	sp,sp,-16
   407d0:	dfc00315 	stw	ra,12(sp)
   407d4:	df000215 	stw	fp,8(sp)
   407d8:	df000204 	addi	fp,sp,8
   407dc:	2005883a 	mov	r2,r4
   407e0:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   407e4:	d0a0ca83 	ldbu	r2,-31958(gp)
   407e8:	10803fcc 	andi	r2,r2,255
   407ec:	10800ed8 	cmpnei	r2,r2,59
   407f0:	1000061e 	bne	r2,zero,4080c <upClockSecond+0x40>
    clock.second = 0;
   407f4:	d020ca85 	stb	zero,-31958(gp)
    
    if (carry_setting == CARRY_ON) {
   407f8:	e0bfff03 	ldbu	r2,-4(fp)
   407fc:	1000061e 	bne	r2,zero,40818 <upClockSecond+0x4c>
      upClockMinute(CARRY_ON);
   40800:	0009883a 	mov	r4,zero
   40804:	00408940 	call	40894 <upClockMinute>
   40808:	00000306 	br	40818 <upClockSecond+0x4c>
    }
  }
  else {
    clock.second++;
   4080c:	d0a0ca83 	ldbu	r2,-31958(gp)
   40810:	10800044 	addi	r2,r2,1
   40814:	d0a0ca85 	stb	r2,-31958(gp)
  }
  return clock;
   40818:	d0a0ca03 	ldbu	r2,-31960(gp)
   4081c:	e0bffe05 	stb	r2,-8(fp)
   40820:	d0a0ca43 	ldbu	r2,-31959(gp)
   40824:	e0bffe45 	stb	r2,-7(fp)
   40828:	d0a0ca83 	ldbu	r2,-31958(gp)
   4082c:	e0bffe85 	stb	r2,-6(fp)
   40830:	0005883a 	mov	r2,zero
   40834:	e0fffe03 	ldbu	r3,-8(fp)
   40838:	18c03fcc 	andi	r3,r3,255
   4083c:	013fc004 	movi	r4,-256
   40840:	1104703a 	and	r2,r2,r4
   40844:	10c4b03a 	or	r2,r2,r3
   40848:	e0fffe43 	ldbu	r3,-7(fp)
   4084c:	18c03fcc 	andi	r3,r3,255
   40850:	1808923a 	slli	r4,r3,8
   40854:	00fffff4 	movhi	r3,65535
   40858:	18c03fc4 	addi	r3,r3,255
   4085c:	10c4703a 	and	r2,r2,r3
   40860:	1104b03a 	or	r2,r2,r4
   40864:	e0fffe83 	ldbu	r3,-6(fp)
   40868:	18c03fcc 	andi	r3,r3,255
   4086c:	1808943a 	slli	r4,r3,16
   40870:	00ffc074 	movhi	r3,65281
   40874:	18ffffc4 	addi	r3,r3,-1
   40878:	10c4703a 	and	r2,r2,r3
   4087c:	1104b03a 	or	r2,r2,r4
}
   40880:	e037883a 	mov	sp,fp
   40884:	dfc00117 	ldw	ra,4(sp)
   40888:	df000017 	ldw	fp,0(sp)
   4088c:	dec00204 	addi	sp,sp,8
   40890:	f800283a 	ret

00040894 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   40894:	defffc04 	addi	sp,sp,-16
   40898:	dfc00315 	stw	ra,12(sp)
   4089c:	df000215 	stw	fp,8(sp)
   408a0:	df000204 	addi	fp,sp,8
   408a4:	2005883a 	mov	r2,r4
   408a8:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   408ac:	d0a0ca43 	ldbu	r2,-31959(gp)
   408b0:	10803fcc 	andi	r2,r2,255
   408b4:	10800ed8 	cmpnei	r2,r2,59
   408b8:	1000051e 	bne	r2,zero,408d0 <upClockMinute+0x3c>
    clock.minute = 0;
   408bc:	d020ca45 	stb	zero,-31959(gp)
    
    if (carry_setting == CARRY_ON) {
   408c0:	e0bfff03 	ldbu	r2,-4(fp)
   408c4:	1000051e 	bne	r2,zero,408dc <upClockMinute+0x48>
      upClockHour();
   408c8:	00409580 	call	40958 <upClockHour>
   408cc:	00000306 	br	408dc <upClockMinute+0x48>
    }
  }
  else {
    clock.minute++;
   408d0:	d0a0ca43 	ldbu	r2,-31959(gp)
   408d4:	10800044 	addi	r2,r2,1
   408d8:	d0a0ca45 	stb	r2,-31959(gp)
  }
  return clock;
   408dc:	d0a0ca03 	ldbu	r2,-31960(gp)
   408e0:	e0bffe05 	stb	r2,-8(fp)
   408e4:	d0a0ca43 	ldbu	r2,-31959(gp)
   408e8:	e0bffe45 	stb	r2,-7(fp)
   408ec:	d0a0ca83 	ldbu	r2,-31958(gp)
   408f0:	e0bffe85 	stb	r2,-6(fp)
   408f4:	0005883a 	mov	r2,zero
   408f8:	e0fffe03 	ldbu	r3,-8(fp)
   408fc:	18c03fcc 	andi	r3,r3,255
   40900:	013fc004 	movi	r4,-256
   40904:	1104703a 	and	r2,r2,r4
   40908:	10c4b03a 	or	r2,r2,r3
   4090c:	e0fffe43 	ldbu	r3,-7(fp)
   40910:	18c03fcc 	andi	r3,r3,255
   40914:	1808923a 	slli	r4,r3,8
   40918:	00fffff4 	movhi	r3,65535
   4091c:	18c03fc4 	addi	r3,r3,255
   40920:	10c4703a 	and	r2,r2,r3
   40924:	1104b03a 	or	r2,r2,r4
   40928:	e0fffe83 	ldbu	r3,-6(fp)
   4092c:	18c03fcc 	andi	r3,r3,255
   40930:	1808943a 	slli	r4,r3,16
   40934:	00ffc074 	movhi	r3,65281
   40938:	18ffffc4 	addi	r3,r3,-1
   4093c:	10c4703a 	and	r2,r2,r3
   40940:	1104b03a 	or	r2,r2,r4
}
   40944:	e037883a 	mov	sp,fp
   40948:	dfc00117 	ldw	ra,4(sp)
   4094c:	df000017 	ldw	fp,0(sp)
   40950:	dec00204 	addi	sp,sp,8
   40954:	f800283a 	ret

00040958 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   40958:	defffe04 	addi	sp,sp,-8
   4095c:	df000115 	stw	fp,4(sp)
   40960:	df000104 	addi	fp,sp,4
  if (clock.hour == time_format) {
   40964:	d0e0ca03 	ldbu	r3,-31960(gp)
   40968:	d0a00003 	ldbu	r2,-32768(gp)
   4096c:	18c03fcc 	andi	r3,r3,255
   40970:	10803fcc 	andi	r2,r2,255
   40974:	1880021e 	bne	r3,r2,40980 <upClockHour+0x28>
    clock.hour = 0;
   40978:	d020ca05 	stb	zero,-31960(gp)
   4097c:	00000306 	br	4098c <upClockHour+0x34>
  }
  else {
    clock.hour++;
   40980:	d0a0ca03 	ldbu	r2,-31960(gp)
   40984:	10800044 	addi	r2,r2,1
   40988:	d0a0ca05 	stb	r2,-31960(gp)
  }
  return clock;
   4098c:	d0a0ca03 	ldbu	r2,-31960(gp)
   40990:	e0bfff05 	stb	r2,-4(fp)
   40994:	d0a0ca43 	ldbu	r2,-31959(gp)
   40998:	e0bfff45 	stb	r2,-3(fp)
   4099c:	d0a0ca83 	ldbu	r2,-31958(gp)
   409a0:	e0bfff85 	stb	r2,-2(fp)
   409a4:	0005883a 	mov	r2,zero
   409a8:	e0ffff03 	ldbu	r3,-4(fp)
   409ac:	18c03fcc 	andi	r3,r3,255
   409b0:	013fc004 	movi	r4,-256
   409b4:	1104703a 	and	r2,r2,r4
   409b8:	10c4b03a 	or	r2,r2,r3
   409bc:	e0ffff43 	ldbu	r3,-3(fp)
   409c0:	18c03fcc 	andi	r3,r3,255
   409c4:	1808923a 	slli	r4,r3,8
   409c8:	00fffff4 	movhi	r3,65535
   409cc:	18c03fc4 	addi	r3,r3,255
   409d0:	10c4703a 	and	r2,r2,r3
   409d4:	1104b03a 	or	r2,r2,r4
   409d8:	e0ffff83 	ldbu	r3,-2(fp)
   409dc:	18c03fcc 	andi	r3,r3,255
   409e0:	1808943a 	slli	r4,r3,16
   409e4:	00ffc074 	movhi	r3,65281
   409e8:	18ffffc4 	addi	r3,r3,-1
   409ec:	10c4703a 	and	r2,r2,r3
   409f0:	1104b03a 	or	r2,r2,r4
}
   409f4:	e037883a 	mov	sp,fp
   409f8:	df000017 	ldw	fp,0(sp)
   409fc:	dec00104 	addi	sp,sp,4
   40a00:	f800283a 	ret

00040a04 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   40a04:	defffc04 	addi	sp,sp,-16
   40a08:	dfc00315 	stw	ra,12(sp)
   40a0c:	df000215 	stw	fp,8(sp)
   40a10:	df000204 	addi	fp,sp,8
   40a14:	2005883a 	mov	r2,r4
   40a18:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   40a1c:	d0a0ca83 	ldbu	r2,-31958(gp)
   40a20:	10803fcc 	andi	r2,r2,255
   40a24:	1000071e 	bne	r2,zero,40a44 <downClockSecond+0x40>
    clock.second = (ONE_MINUTE-1);
   40a28:	00800ec4 	movi	r2,59
   40a2c:	d0a0ca85 	stb	r2,-31958(gp)
    
    if (carry_setting == CARRY_ON) {
   40a30:	e0bfff03 	ldbu	r2,-4(fp)
   40a34:	1000061e 	bne	r2,zero,40a50 <downClockSecond+0x4c>
      downClockMinute(CARRY_ON);
   40a38:	0009883a 	mov	r4,zero
   40a3c:	0040acc0 	call	40acc <downClockMinute>
   40a40:	00000306 	br	40a50 <downClockSecond+0x4c>
    }
  }
  else {
    clock.second--;
   40a44:	d0a0ca83 	ldbu	r2,-31958(gp)
   40a48:	10bfffc4 	addi	r2,r2,-1
   40a4c:	d0a0ca85 	stb	r2,-31958(gp)
  }
  return clock;
   40a50:	d0a0ca03 	ldbu	r2,-31960(gp)
   40a54:	e0bffe05 	stb	r2,-8(fp)
   40a58:	d0a0ca43 	ldbu	r2,-31959(gp)
   40a5c:	e0bffe45 	stb	r2,-7(fp)
   40a60:	d0a0ca83 	ldbu	r2,-31958(gp)
   40a64:	e0bffe85 	stb	r2,-6(fp)
   40a68:	0005883a 	mov	r2,zero
   40a6c:	e0fffe03 	ldbu	r3,-8(fp)
   40a70:	18c03fcc 	andi	r3,r3,255
   40a74:	013fc004 	movi	r4,-256
   40a78:	1104703a 	and	r2,r2,r4
   40a7c:	10c4b03a 	or	r2,r2,r3
   40a80:	e0fffe43 	ldbu	r3,-7(fp)
   40a84:	18c03fcc 	andi	r3,r3,255
   40a88:	1808923a 	slli	r4,r3,8
   40a8c:	00fffff4 	movhi	r3,65535
   40a90:	18c03fc4 	addi	r3,r3,255
   40a94:	10c4703a 	and	r2,r2,r3
   40a98:	1104b03a 	or	r2,r2,r4
   40a9c:	e0fffe83 	ldbu	r3,-6(fp)
   40aa0:	18c03fcc 	andi	r3,r3,255
   40aa4:	1808943a 	slli	r4,r3,16
   40aa8:	00ffc074 	movhi	r3,65281
   40aac:	18ffffc4 	addi	r3,r3,-1
   40ab0:	10c4703a 	and	r2,r2,r3
   40ab4:	1104b03a 	or	r2,r2,r4
}
   40ab8:	e037883a 	mov	sp,fp
   40abc:	dfc00117 	ldw	ra,4(sp)
   40ac0:	df000017 	ldw	fp,0(sp)
   40ac4:	dec00204 	addi	sp,sp,8
   40ac8:	f800283a 	ret

00040acc <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   40acc:	defffc04 	addi	sp,sp,-16
   40ad0:	dfc00315 	stw	ra,12(sp)
   40ad4:	df000215 	stw	fp,8(sp)
   40ad8:	df000204 	addi	fp,sp,8
   40adc:	2005883a 	mov	r2,r4
   40ae0:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   40ae4:	d0a0ca43 	ldbu	r2,-31959(gp)
   40ae8:	10803fcc 	andi	r2,r2,255
   40aec:	1000061e 	bne	r2,zero,40b08 <downClockMinute+0x3c>
    clock.minute = (ONE_HOUR-1);
   40af0:	00800ec4 	movi	r2,59
   40af4:	d0a0ca45 	stb	r2,-31959(gp)
    
    if (carry_setting == CARRY_ON) {
   40af8:	e0bfff03 	ldbu	r2,-4(fp)
   40afc:	1000051e 	bne	r2,zero,40b14 <downClockMinute+0x48>
      downClockHour();
   40b00:	0040b900 	call	40b90 <downClockHour>
   40b04:	00000306 	br	40b14 <downClockMinute+0x48>
    }
  }
  else {
    clock.minute--;
   40b08:	d0a0ca43 	ldbu	r2,-31959(gp)
   40b0c:	10bfffc4 	addi	r2,r2,-1
   40b10:	d0a0ca45 	stb	r2,-31959(gp)
  }
  return clock;
   40b14:	d0a0ca03 	ldbu	r2,-31960(gp)
   40b18:	e0bffe05 	stb	r2,-8(fp)
   40b1c:	d0a0ca43 	ldbu	r2,-31959(gp)
   40b20:	e0bffe45 	stb	r2,-7(fp)
   40b24:	d0a0ca83 	ldbu	r2,-31958(gp)
   40b28:	e0bffe85 	stb	r2,-6(fp)
   40b2c:	0005883a 	mov	r2,zero
   40b30:	e0fffe03 	ldbu	r3,-8(fp)
   40b34:	18c03fcc 	andi	r3,r3,255
   40b38:	013fc004 	movi	r4,-256
   40b3c:	1104703a 	and	r2,r2,r4
   40b40:	10c4b03a 	or	r2,r2,r3
   40b44:	e0fffe43 	ldbu	r3,-7(fp)
   40b48:	18c03fcc 	andi	r3,r3,255
   40b4c:	1808923a 	slli	r4,r3,8
   40b50:	00fffff4 	movhi	r3,65535
   40b54:	18c03fc4 	addi	r3,r3,255
   40b58:	10c4703a 	and	r2,r2,r3
   40b5c:	1104b03a 	or	r2,r2,r4
   40b60:	e0fffe83 	ldbu	r3,-6(fp)
   40b64:	18c03fcc 	andi	r3,r3,255
   40b68:	1808943a 	slli	r4,r3,16
   40b6c:	00ffc074 	movhi	r3,65281
   40b70:	18ffffc4 	addi	r3,r3,-1
   40b74:	10c4703a 	and	r2,r2,r3
   40b78:	1104b03a 	or	r2,r2,r4
}
   40b7c:	e037883a 	mov	sp,fp
   40b80:	dfc00117 	ldw	ra,4(sp)
   40b84:	df000017 	ldw	fp,0(sp)
   40b88:	dec00204 	addi	sp,sp,8
   40b8c:	f800283a 	ret

00040b90 <downClockHour>:

// HOURS
struct time downClockHour(void) {
   40b90:	defffe04 	addi	sp,sp,-8
   40b94:	df000115 	stw	fp,4(sp)
   40b98:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   40b9c:	d0a0ca03 	ldbu	r2,-31960(gp)
   40ba0:	10803fcc 	andi	r2,r2,255
   40ba4:	1000031e 	bne	r2,zero,40bb4 <downClockHour+0x24>
    clock.hour = time_format;
   40ba8:	d0a00003 	ldbu	r2,-32768(gp)
   40bac:	d0a0ca05 	stb	r2,-31960(gp)
   40bb0:	00000306 	br	40bc0 <downClockHour+0x30>
  }
  else {
    clock.hour--;
   40bb4:	d0a0ca03 	ldbu	r2,-31960(gp)
   40bb8:	10bfffc4 	addi	r2,r2,-1
   40bbc:	d0a0ca05 	stb	r2,-31960(gp)
  }
  return clock;
   40bc0:	d0a0ca03 	ldbu	r2,-31960(gp)
   40bc4:	e0bfff05 	stb	r2,-4(fp)
   40bc8:	d0a0ca43 	ldbu	r2,-31959(gp)
   40bcc:	e0bfff45 	stb	r2,-3(fp)
   40bd0:	d0a0ca83 	ldbu	r2,-31958(gp)
   40bd4:	e0bfff85 	stb	r2,-2(fp)
   40bd8:	0005883a 	mov	r2,zero
   40bdc:	e0ffff03 	ldbu	r3,-4(fp)
   40be0:	18c03fcc 	andi	r3,r3,255
   40be4:	013fc004 	movi	r4,-256
   40be8:	1104703a 	and	r2,r2,r4
   40bec:	10c4b03a 	or	r2,r2,r3
   40bf0:	e0ffff43 	ldbu	r3,-3(fp)
   40bf4:	18c03fcc 	andi	r3,r3,255
   40bf8:	1808923a 	slli	r4,r3,8
   40bfc:	00fffff4 	movhi	r3,65535
   40c00:	18c03fc4 	addi	r3,r3,255
   40c04:	10c4703a 	and	r2,r2,r3
   40c08:	1104b03a 	or	r2,r2,r4
   40c0c:	e0ffff83 	ldbu	r3,-2(fp)
   40c10:	18c03fcc 	andi	r3,r3,255
   40c14:	1808943a 	slli	r4,r3,16
   40c18:	00ffc074 	movhi	r3,65281
   40c1c:	18ffffc4 	addi	r3,r3,-1
   40c20:	10c4703a 	and	r2,r2,r3
   40c24:	1104b03a 	or	r2,r2,r4
}
   40c28:	e037883a 	mov	sp,fp
   40c2c:	df000017 	ldw	fp,0(sp)
   40c30:	dec00104 	addi	sp,sp,4
   40c34:	f800283a 	ret

00040c38 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00:00
void resetAlarmTime(void) {
   40c38:	deffff04 	addi	sp,sp,-4
   40c3c:	df000015 	stw	fp,0(sp)
   40c40:	d839883a 	mov	fp,sp
  alarm =  (struct time){0};
   40c44:	d020c945 	stb	zero,-31963(gp)
   40c48:	d020c985 	stb	zero,-31962(gp)
   40c4c:	d020c9c5 	stb	zero,-31961(gp)
}
   40c50:	0001883a 	nop
   40c54:	e037883a 	mov	sp,fp
   40c58:	df000017 	ldw	fp,0(sp)
   40c5c:	dec00104 	addi	sp,sp,4
   40c60:	f800283a 	ret

00040c64 <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute() {
   40c64:	defffe04 	addi	sp,sp,-8
   40c68:	df000115 	stw	fp,4(sp)
   40c6c:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   40c70:	d0a0c983 	ldbu	r2,-31962(gp)
   40c74:	10803fcc 	andi	r2,r2,255
   40c78:	10800ed8 	cmpnei	r2,r2,59
   40c7c:	1000021e 	bne	r2,zero,40c88 <upAlarmMinute+0x24>
    alarm.minute = 0;
   40c80:	d020c985 	stb	zero,-31962(gp)
   40c84:	00000306 	br	40c94 <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   40c88:	d0a0c983 	ldbu	r2,-31962(gp)
   40c8c:	10800044 	addi	r2,r2,1
   40c90:	d0a0c985 	stb	r2,-31962(gp)
  }
  return alarm;
   40c94:	d0a0c943 	ldbu	r2,-31963(gp)
   40c98:	e0bfff05 	stb	r2,-4(fp)
   40c9c:	d0a0c983 	ldbu	r2,-31962(gp)
   40ca0:	e0bfff45 	stb	r2,-3(fp)
   40ca4:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40ca8:	e0bfff85 	stb	r2,-2(fp)
   40cac:	0005883a 	mov	r2,zero
   40cb0:	e0ffff03 	ldbu	r3,-4(fp)
   40cb4:	18c03fcc 	andi	r3,r3,255
   40cb8:	013fc004 	movi	r4,-256
   40cbc:	1104703a 	and	r2,r2,r4
   40cc0:	10c4b03a 	or	r2,r2,r3
   40cc4:	e0ffff43 	ldbu	r3,-3(fp)
   40cc8:	18c03fcc 	andi	r3,r3,255
   40ccc:	1808923a 	slli	r4,r3,8
   40cd0:	00fffff4 	movhi	r3,65535
   40cd4:	18c03fc4 	addi	r3,r3,255
   40cd8:	10c4703a 	and	r2,r2,r3
   40cdc:	1104b03a 	or	r2,r2,r4
   40ce0:	e0ffff83 	ldbu	r3,-2(fp)
   40ce4:	18c03fcc 	andi	r3,r3,255
   40ce8:	1808943a 	slli	r4,r3,16
   40cec:	00ffc074 	movhi	r3,65281
   40cf0:	18ffffc4 	addi	r3,r3,-1
   40cf4:	10c4703a 	and	r2,r2,r3
   40cf8:	1104b03a 	or	r2,r2,r4
}
   40cfc:	e037883a 	mov	sp,fp
   40d00:	df000017 	ldw	fp,0(sp)
   40d04:	dec00104 	addi	sp,sp,4
   40d08:	f800283a 	ret

00040d0c <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   40d0c:	defffe04 	addi	sp,sp,-8
   40d10:	df000115 	stw	fp,4(sp)
   40d14:	df000104 	addi	fp,sp,4
  if (alarm.hour == time_format) {
   40d18:	d0e0c943 	ldbu	r3,-31963(gp)
   40d1c:	d0a00003 	ldbu	r2,-32768(gp)
   40d20:	18c03fcc 	andi	r3,r3,255
   40d24:	10803fcc 	andi	r2,r2,255
   40d28:	1880021e 	bne	r3,r2,40d34 <upAlarmHour+0x28>
    alarm.hour = 0;
   40d2c:	d020c945 	stb	zero,-31963(gp)
   40d30:	00000306 	br	40d40 <upAlarmHour+0x34>
  }
  else {
    alarm.hour++;
   40d34:	d0a0c943 	ldbu	r2,-31963(gp)
   40d38:	10800044 	addi	r2,r2,1
   40d3c:	d0a0c945 	stb	r2,-31963(gp)
  }
  return alarm;
   40d40:	d0a0c943 	ldbu	r2,-31963(gp)
   40d44:	e0bfff05 	stb	r2,-4(fp)
   40d48:	d0a0c983 	ldbu	r2,-31962(gp)
   40d4c:	e0bfff45 	stb	r2,-3(fp)
   40d50:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40d54:	e0bfff85 	stb	r2,-2(fp)
   40d58:	0005883a 	mov	r2,zero
   40d5c:	e0ffff03 	ldbu	r3,-4(fp)
   40d60:	18c03fcc 	andi	r3,r3,255
   40d64:	013fc004 	movi	r4,-256
   40d68:	1104703a 	and	r2,r2,r4
   40d6c:	10c4b03a 	or	r2,r2,r3
   40d70:	e0ffff43 	ldbu	r3,-3(fp)
   40d74:	18c03fcc 	andi	r3,r3,255
   40d78:	1808923a 	slli	r4,r3,8
   40d7c:	00fffff4 	movhi	r3,65535
   40d80:	18c03fc4 	addi	r3,r3,255
   40d84:	10c4703a 	and	r2,r2,r3
   40d88:	1104b03a 	or	r2,r2,r4
   40d8c:	e0ffff83 	ldbu	r3,-2(fp)
   40d90:	18c03fcc 	andi	r3,r3,255
   40d94:	1808943a 	slli	r4,r3,16
   40d98:	00ffc074 	movhi	r3,65281
   40d9c:	18ffffc4 	addi	r3,r3,-1
   40da0:	10c4703a 	and	r2,r2,r3
   40da4:	1104b03a 	or	r2,r2,r4
}
   40da8:	e037883a 	mov	sp,fp
   40dac:	df000017 	ldw	fp,0(sp)
   40db0:	dec00104 	addi	sp,sp,4
   40db4:	f800283a 	ret

00040db8 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute() {
   40db8:	defffe04 	addi	sp,sp,-8
   40dbc:	df000115 	stw	fp,4(sp)
   40dc0:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   40dc4:	d0a0c983 	ldbu	r2,-31962(gp)
   40dc8:	10803fcc 	andi	r2,r2,255
   40dcc:	1000031e 	bne	r2,zero,40ddc <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   40dd0:	00800ec4 	movi	r2,59
   40dd4:	d0a0c985 	stb	r2,-31962(gp)
   40dd8:	00000306 	br	40de8 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   40ddc:	d0a0c983 	ldbu	r2,-31962(gp)
   40de0:	10bfffc4 	addi	r2,r2,-1
   40de4:	d0a0c985 	stb	r2,-31962(gp)
  }
  return alarm;
   40de8:	d0a0c943 	ldbu	r2,-31963(gp)
   40dec:	e0bfff05 	stb	r2,-4(fp)
   40df0:	d0a0c983 	ldbu	r2,-31962(gp)
   40df4:	e0bfff45 	stb	r2,-3(fp)
   40df8:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40dfc:	e0bfff85 	stb	r2,-2(fp)
   40e00:	0005883a 	mov	r2,zero
   40e04:	e0ffff03 	ldbu	r3,-4(fp)
   40e08:	18c03fcc 	andi	r3,r3,255
   40e0c:	013fc004 	movi	r4,-256
   40e10:	1104703a 	and	r2,r2,r4
   40e14:	10c4b03a 	or	r2,r2,r3
   40e18:	e0ffff43 	ldbu	r3,-3(fp)
   40e1c:	18c03fcc 	andi	r3,r3,255
   40e20:	1808923a 	slli	r4,r3,8
   40e24:	00fffff4 	movhi	r3,65535
   40e28:	18c03fc4 	addi	r3,r3,255
   40e2c:	10c4703a 	and	r2,r2,r3
   40e30:	1104b03a 	or	r2,r2,r4
   40e34:	e0ffff83 	ldbu	r3,-2(fp)
   40e38:	18c03fcc 	andi	r3,r3,255
   40e3c:	1808943a 	slli	r4,r3,16
   40e40:	00ffc074 	movhi	r3,65281
   40e44:	18ffffc4 	addi	r3,r3,-1
   40e48:	10c4703a 	and	r2,r2,r3
   40e4c:	1104b03a 	or	r2,r2,r4
}
   40e50:	e037883a 	mov	sp,fp
   40e54:	df000017 	ldw	fp,0(sp)
   40e58:	dec00104 	addi	sp,sp,4
   40e5c:	f800283a 	ret

00040e60 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   40e60:	defffe04 	addi	sp,sp,-8
   40e64:	df000115 	stw	fp,4(sp)
   40e68:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   40e6c:	d0a0c943 	ldbu	r2,-31963(gp)
   40e70:	10803fcc 	andi	r2,r2,255
   40e74:	1000031e 	bne	r2,zero,40e84 <downAlarmHour+0x24>
    alarm.hour = time_format;
   40e78:	d0a00003 	ldbu	r2,-32768(gp)
   40e7c:	d0a0c945 	stb	r2,-31963(gp)
   40e80:	00000306 	br	40e90 <downAlarmHour+0x30>
  }
  else {
    alarm.hour--;
   40e84:	d0a0c943 	ldbu	r2,-31963(gp)
   40e88:	10bfffc4 	addi	r2,r2,-1
   40e8c:	d0a0c945 	stb	r2,-31963(gp)
  }
  return alarm;
   40e90:	d0a0c943 	ldbu	r2,-31963(gp)
   40e94:	e0bfff05 	stb	r2,-4(fp)
   40e98:	d0a0c983 	ldbu	r2,-31962(gp)
   40e9c:	e0bfff45 	stb	r2,-3(fp)
   40ea0:	d0a0c9c3 	ldbu	r2,-31961(gp)
   40ea4:	e0bfff85 	stb	r2,-2(fp)
   40ea8:	0005883a 	mov	r2,zero
   40eac:	e0ffff03 	ldbu	r3,-4(fp)
   40eb0:	18c03fcc 	andi	r3,r3,255
   40eb4:	013fc004 	movi	r4,-256
   40eb8:	1104703a 	and	r2,r2,r4
   40ebc:	10c4b03a 	or	r2,r2,r3
   40ec0:	e0ffff43 	ldbu	r3,-3(fp)
   40ec4:	18c03fcc 	andi	r3,r3,255
   40ec8:	1808923a 	slli	r4,r3,8
   40ecc:	00fffff4 	movhi	r3,65535
   40ed0:	18c03fc4 	addi	r3,r3,255
   40ed4:	10c4703a 	and	r2,r2,r3
   40ed8:	1104b03a 	or	r2,r2,r4
   40edc:	e0ffff83 	ldbu	r3,-2(fp)
   40ee0:	18c03fcc 	andi	r3,r3,255
   40ee4:	1808943a 	slli	r4,r3,16
   40ee8:	00ffc074 	movhi	r3,65281
   40eec:	18ffffc4 	addi	r3,r3,-1
   40ef0:	10c4703a 	and	r2,r2,r3
   40ef4:	1104b03a 	or	r2,r2,r4
}
   40ef8:	e037883a 	mov	sp,fp
   40efc:	df000017 	ldw	fp,0(sp)
   40f00:	dec00104 	addi	sp,sp,4
   40f04:	f800283a 	ret

00040f08 <__divsi3>:
   40f08:	20001b16 	blt	r4,zero,40f78 <__divsi3+0x70>
   40f0c:	000f883a 	mov	r7,zero
   40f10:	28001616 	blt	r5,zero,40f6c <__divsi3+0x64>
   40f14:	200d883a 	mov	r6,r4
   40f18:	29001a2e 	bgeu	r5,r4,40f84 <__divsi3+0x7c>
   40f1c:	00800804 	movi	r2,32
   40f20:	00c00044 	movi	r3,1
   40f24:	00000106 	br	40f2c <__divsi3+0x24>
   40f28:	10000d26 	beq	r2,zero,40f60 <__divsi3+0x58>
   40f2c:	294b883a 	add	r5,r5,r5
   40f30:	10bfffc4 	addi	r2,r2,-1
   40f34:	18c7883a 	add	r3,r3,r3
   40f38:	293ffb36 	bltu	r5,r4,40f28 <__alt_data_end+0xfffd8f28>
   40f3c:	0005883a 	mov	r2,zero
   40f40:	18000726 	beq	r3,zero,40f60 <__divsi3+0x58>
   40f44:	0005883a 	mov	r2,zero
   40f48:	31400236 	bltu	r6,r5,40f54 <__divsi3+0x4c>
   40f4c:	314dc83a 	sub	r6,r6,r5
   40f50:	10c4b03a 	or	r2,r2,r3
   40f54:	1806d07a 	srli	r3,r3,1
   40f58:	280ad07a 	srli	r5,r5,1
   40f5c:	183ffa1e 	bne	r3,zero,40f48 <__alt_data_end+0xfffd8f48>
   40f60:	38000126 	beq	r7,zero,40f68 <__divsi3+0x60>
   40f64:	0085c83a 	sub	r2,zero,r2
   40f68:	f800283a 	ret
   40f6c:	014bc83a 	sub	r5,zero,r5
   40f70:	39c0005c 	xori	r7,r7,1
   40f74:	003fe706 	br	40f14 <__alt_data_end+0xfffd8f14>
   40f78:	0109c83a 	sub	r4,zero,r4
   40f7c:	01c00044 	movi	r7,1
   40f80:	003fe306 	br	40f10 <__alt_data_end+0xfffd8f10>
   40f84:	00c00044 	movi	r3,1
   40f88:	003fee06 	br	40f44 <__alt_data_end+0xfffd8f44>

00040f8c <__modsi3>:
   40f8c:	20001716 	blt	r4,zero,40fec <__modsi3+0x60>
   40f90:	000f883a 	mov	r7,zero
   40f94:	2005883a 	mov	r2,r4
   40f98:	28001216 	blt	r5,zero,40fe4 <__modsi3+0x58>
   40f9c:	2900162e 	bgeu	r5,r4,40ff8 <__modsi3+0x6c>
   40fa0:	01800804 	movi	r6,32
   40fa4:	00c00044 	movi	r3,1
   40fa8:	00000106 	br	40fb0 <__modsi3+0x24>
   40fac:	30000a26 	beq	r6,zero,40fd8 <__modsi3+0x4c>
   40fb0:	294b883a 	add	r5,r5,r5
   40fb4:	31bfffc4 	addi	r6,r6,-1
   40fb8:	18c7883a 	add	r3,r3,r3
   40fbc:	293ffb36 	bltu	r5,r4,40fac <__alt_data_end+0xfffd8fac>
   40fc0:	18000526 	beq	r3,zero,40fd8 <__modsi3+0x4c>
   40fc4:	1806d07a 	srli	r3,r3,1
   40fc8:	11400136 	bltu	r2,r5,40fd0 <__modsi3+0x44>
   40fcc:	1145c83a 	sub	r2,r2,r5
   40fd0:	280ad07a 	srli	r5,r5,1
   40fd4:	183ffb1e 	bne	r3,zero,40fc4 <__alt_data_end+0xfffd8fc4>
   40fd8:	38000126 	beq	r7,zero,40fe0 <__modsi3+0x54>
   40fdc:	0085c83a 	sub	r2,zero,r2
   40fe0:	f800283a 	ret
   40fe4:	014bc83a 	sub	r5,zero,r5
   40fe8:	003fec06 	br	40f9c <__alt_data_end+0xfffd8f9c>
   40fec:	0109c83a 	sub	r4,zero,r4
   40ff0:	01c00044 	movi	r7,1
   40ff4:	003fe706 	br	40f94 <__alt_data_end+0xfffd8f94>
   40ff8:	00c00044 	movi	r3,1
   40ffc:	003ff106 	br	40fc4 <__alt_data_end+0xfffd8fc4>

00041000 <__udivsi3>:
   41000:	200d883a 	mov	r6,r4
   41004:	2900152e 	bgeu	r5,r4,4105c <__udivsi3+0x5c>
   41008:	28001416 	blt	r5,zero,4105c <__udivsi3+0x5c>
   4100c:	00800804 	movi	r2,32
   41010:	00c00044 	movi	r3,1
   41014:	00000206 	br	41020 <__udivsi3+0x20>
   41018:	10000e26 	beq	r2,zero,41054 <__udivsi3+0x54>
   4101c:	28000516 	blt	r5,zero,41034 <__udivsi3+0x34>
   41020:	294b883a 	add	r5,r5,r5
   41024:	10bfffc4 	addi	r2,r2,-1
   41028:	18c7883a 	add	r3,r3,r3
   4102c:	293ffa36 	bltu	r5,r4,41018 <__alt_data_end+0xfffd9018>
   41030:	18000826 	beq	r3,zero,41054 <__udivsi3+0x54>
   41034:	0005883a 	mov	r2,zero
   41038:	31400236 	bltu	r6,r5,41044 <__udivsi3+0x44>
   4103c:	314dc83a 	sub	r6,r6,r5
   41040:	10c4b03a 	or	r2,r2,r3
   41044:	1806d07a 	srli	r3,r3,1
   41048:	280ad07a 	srli	r5,r5,1
   4104c:	183ffa1e 	bne	r3,zero,41038 <__alt_data_end+0xfffd9038>
   41050:	f800283a 	ret
   41054:	0005883a 	mov	r2,zero
   41058:	f800283a 	ret
   4105c:	00c00044 	movi	r3,1
   41060:	003ff406 	br	41034 <__alt_data_end+0xfffd9034>

00041064 <__umodsi3>:
   41064:	2005883a 	mov	r2,r4
   41068:	2900122e 	bgeu	r5,r4,410b4 <__umodsi3+0x50>
   4106c:	28001116 	blt	r5,zero,410b4 <__umodsi3+0x50>
   41070:	01800804 	movi	r6,32
   41074:	00c00044 	movi	r3,1
   41078:	00000206 	br	41084 <__umodsi3+0x20>
   4107c:	30000c26 	beq	r6,zero,410b0 <__umodsi3+0x4c>
   41080:	28000516 	blt	r5,zero,41098 <__umodsi3+0x34>
   41084:	294b883a 	add	r5,r5,r5
   41088:	31bfffc4 	addi	r6,r6,-1
   4108c:	18c7883a 	add	r3,r3,r3
   41090:	293ffa36 	bltu	r5,r4,4107c <__alt_data_end+0xfffd907c>
   41094:	18000626 	beq	r3,zero,410b0 <__umodsi3+0x4c>
   41098:	1806d07a 	srli	r3,r3,1
   4109c:	11400136 	bltu	r2,r5,410a4 <__umodsi3+0x40>
   410a0:	1145c83a 	sub	r2,r2,r5
   410a4:	280ad07a 	srli	r5,r5,1
   410a8:	183ffb1e 	bne	r3,zero,41098 <__alt_data_end+0xfffd9098>
   410ac:	f800283a 	ret
   410b0:	f800283a 	ret
   410b4:	00c00044 	movi	r3,1
   410b8:	003ff706 	br	41098 <__alt_data_end+0xfffd9098>

000410bc <_printf_r>:
   410bc:	defffd04 	addi	sp,sp,-12
   410c0:	dfc00015 	stw	ra,0(sp)
   410c4:	d9800115 	stw	r6,4(sp)
   410c8:	d9c00215 	stw	r7,8(sp)
   410cc:	20c00217 	ldw	r3,8(r4)
   410d0:	01800134 	movhi	r6,4
   410d4:	3185e804 	addi	r6,r6,6048
   410d8:	19800115 	stw	r6,4(r3)
   410dc:	280d883a 	mov	r6,r5
   410e0:	21400217 	ldw	r5,8(r4)
   410e4:	d9c00104 	addi	r7,sp,4
   410e8:	00412600 	call	41260 <___vfprintf_internal_r>
   410ec:	dfc00017 	ldw	ra,0(sp)
   410f0:	dec00304 	addi	sp,sp,12
   410f4:	f800283a 	ret

000410f8 <printf>:
   410f8:	defffc04 	addi	sp,sp,-16
   410fc:	dfc00015 	stw	ra,0(sp)
   41100:	d9400115 	stw	r5,4(sp)
   41104:	d9800215 	stw	r6,8(sp)
   41108:	d9c00315 	stw	r7,12(sp)
   4110c:	00800134 	movhi	r2,4
   41110:	108cbe04 	addi	r2,r2,13048
   41114:	10800017 	ldw	r2,0(r2)
   41118:	01400134 	movhi	r5,4
   4111c:	2945e804 	addi	r5,r5,6048
   41120:	10c00217 	ldw	r3,8(r2)
   41124:	d9800104 	addi	r6,sp,4
   41128:	19400115 	stw	r5,4(r3)
   4112c:	200b883a 	mov	r5,r4
   41130:	11000217 	ldw	r4,8(r2)
   41134:	00417840 	call	41784 <__vfprintf_internal>
   41138:	dfc00017 	ldw	ra,0(sp)
   4113c:	dec00404 	addi	sp,sp,16
   41140:	f800283a 	ret

00041144 <_puts_r>:
   41144:	defffd04 	addi	sp,sp,-12
   41148:	dc000015 	stw	r16,0(sp)
   4114c:	2021883a 	mov	r16,r4
   41150:	2809883a 	mov	r4,r5
   41154:	dfc00215 	stw	ra,8(sp)
   41158:	dc400115 	stw	r17,4(sp)
   4115c:	2823883a 	mov	r17,r5
   41160:	00411d80 	call	411d8 <strlen>
   41164:	81400217 	ldw	r5,8(r16)
   41168:	01000134 	movhi	r4,4
   4116c:	2105e804 	addi	r4,r4,6048
   41170:	29000115 	stw	r4,4(r5)
   41174:	100f883a 	mov	r7,r2
   41178:	880d883a 	mov	r6,r17
   4117c:	8009883a 	mov	r4,r16
   41180:	00417a00 	call	417a0 <__sfvwrite_small_dev>
   41184:	00ffffc4 	movi	r3,-1
   41188:	10c00926 	beq	r2,r3,411b0 <_puts_r+0x6c>
   4118c:	81400217 	ldw	r5,8(r16)
   41190:	01800134 	movhi	r6,4
   41194:	01c00044 	movi	r7,1
   41198:	28800117 	ldw	r2,4(r5)
   4119c:	318bfe04 	addi	r6,r6,12280
   411a0:	8009883a 	mov	r4,r16
   411a4:	103ee83a 	callr	r2
   411a8:	10bfffe0 	cmpeqi	r2,r2,-1
   411ac:	0085c83a 	sub	r2,zero,r2
   411b0:	dfc00217 	ldw	ra,8(sp)
   411b4:	dc400117 	ldw	r17,4(sp)
   411b8:	dc000017 	ldw	r16,0(sp)
   411bc:	dec00304 	addi	sp,sp,12
   411c0:	f800283a 	ret

000411c4 <puts>:
   411c4:	00800134 	movhi	r2,4
   411c8:	108cbe04 	addi	r2,r2,13048
   411cc:	200b883a 	mov	r5,r4
   411d0:	11000017 	ldw	r4,0(r2)
   411d4:	00411441 	jmpi	41144 <_puts_r>

000411d8 <strlen>:
   411d8:	2005883a 	mov	r2,r4
   411dc:	10c00007 	ldb	r3,0(r2)
   411e0:	18000226 	beq	r3,zero,411ec <strlen+0x14>
   411e4:	10800044 	addi	r2,r2,1
   411e8:	003ffc06 	br	411dc <__alt_data_end+0xfffd91dc>
   411ec:	1105c83a 	sub	r2,r2,r4
   411f0:	f800283a 	ret

000411f4 <print_repeat>:
   411f4:	defffb04 	addi	sp,sp,-20
   411f8:	dc800315 	stw	r18,12(sp)
   411fc:	dc400215 	stw	r17,8(sp)
   41200:	dc000115 	stw	r16,4(sp)
   41204:	dfc00415 	stw	ra,16(sp)
   41208:	2025883a 	mov	r18,r4
   4120c:	2823883a 	mov	r17,r5
   41210:	d9800005 	stb	r6,0(sp)
   41214:	3821883a 	mov	r16,r7
   41218:	04000a0e 	bge	zero,r16,41244 <print_repeat+0x50>
   4121c:	88800117 	ldw	r2,4(r17)
   41220:	01c00044 	movi	r7,1
   41224:	d80d883a 	mov	r6,sp
   41228:	880b883a 	mov	r5,r17
   4122c:	9009883a 	mov	r4,r18
   41230:	103ee83a 	callr	r2
   41234:	843fffc4 	addi	r16,r16,-1
   41238:	103ff726 	beq	r2,zero,41218 <__alt_data_end+0xfffd9218>
   4123c:	00bfffc4 	movi	r2,-1
   41240:	00000106 	br	41248 <print_repeat+0x54>
   41244:	0005883a 	mov	r2,zero
   41248:	dfc00417 	ldw	ra,16(sp)
   4124c:	dc800317 	ldw	r18,12(sp)
   41250:	dc400217 	ldw	r17,8(sp)
   41254:	dc000117 	ldw	r16,4(sp)
   41258:	dec00504 	addi	sp,sp,20
   4125c:	f800283a 	ret

00041260 <___vfprintf_internal_r>:
   41260:	deffe504 	addi	sp,sp,-108
   41264:	d8c00804 	addi	r3,sp,32
   41268:	df001915 	stw	fp,100(sp)
   4126c:	ddc01815 	stw	r23,96(sp)
   41270:	dd801715 	stw	r22,92(sp)
   41274:	dd401615 	stw	r21,88(sp)
   41278:	dd001515 	stw	r20,84(sp)
   4127c:	dcc01415 	stw	r19,80(sp)
   41280:	dc801315 	stw	r18,76(sp)
   41284:	dc401215 	stw	r17,72(sp)
   41288:	dc001115 	stw	r16,68(sp)
   4128c:	dfc01a15 	stw	ra,104(sp)
   41290:	2027883a 	mov	r19,r4
   41294:	2839883a 	mov	fp,r5
   41298:	382d883a 	mov	r22,r7
   4129c:	d9800f15 	stw	r6,60(sp)
   412a0:	0021883a 	mov	r16,zero
   412a4:	d8000e15 	stw	zero,56(sp)
   412a8:	002f883a 	mov	r23,zero
   412ac:	002b883a 	mov	r21,zero
   412b0:	0025883a 	mov	r18,zero
   412b4:	0023883a 	mov	r17,zero
   412b8:	d8000c15 	stw	zero,48(sp)
   412bc:	d8000b15 	stw	zero,44(sp)
   412c0:	0029883a 	mov	r20,zero
   412c4:	d8c00915 	stw	r3,36(sp)
   412c8:	d8c00f17 	ldw	r3,60(sp)
   412cc:	19000003 	ldbu	r4,0(r3)
   412d0:	20803fcc 	andi	r2,r4,255
   412d4:	1080201c 	xori	r2,r2,128
   412d8:	10bfe004 	addi	r2,r2,-128
   412dc:	10011c26 	beq	r2,zero,41750 <___vfprintf_internal_r+0x4f0>
   412e0:	00c00044 	movi	r3,1
   412e4:	a0c01426 	beq	r20,r3,41338 <___vfprintf_internal_r+0xd8>
   412e8:	1d000216 	blt	r3,r20,412f4 <___vfprintf_internal_r+0x94>
   412ec:	a0000626 	beq	r20,zero,41308 <___vfprintf_internal_r+0xa8>
   412f0:	00011306 	br	41740 <___vfprintf_internal_r+0x4e0>
   412f4:	01400084 	movi	r5,2
   412f8:	a1401d26 	beq	r20,r5,41370 <___vfprintf_internal_r+0x110>
   412fc:	014000c4 	movi	r5,3
   41300:	a1402926 	beq	r20,r5,413a8 <___vfprintf_internal_r+0x148>
   41304:	00010e06 	br	41740 <___vfprintf_internal_r+0x4e0>
   41308:	01400944 	movi	r5,37
   4130c:	1140fb26 	beq	r2,r5,416fc <___vfprintf_internal_r+0x49c>
   41310:	e0800117 	ldw	r2,4(fp)
   41314:	d9000005 	stb	r4,0(sp)
   41318:	01c00044 	movi	r7,1
   4131c:	d80d883a 	mov	r6,sp
   41320:	e00b883a 	mov	r5,fp
   41324:	9809883a 	mov	r4,r19
   41328:	103ee83a 	callr	r2
   4132c:	1000d61e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41330:	84000044 	addi	r16,r16,1
   41334:	00010206 	br	41740 <___vfprintf_internal_r+0x4e0>
   41338:	01400c04 	movi	r5,48
   4133c:	1140f826 	beq	r2,r5,41720 <___vfprintf_internal_r+0x4c0>
   41340:	01400944 	movi	r5,37
   41344:	11400a1e 	bne	r2,r5,41370 <___vfprintf_internal_r+0x110>
   41348:	d8800005 	stb	r2,0(sp)
   4134c:	e0800117 	ldw	r2,4(fp)
   41350:	a00f883a 	mov	r7,r20
   41354:	d80d883a 	mov	r6,sp
   41358:	e00b883a 	mov	r5,fp
   4135c:	9809883a 	mov	r4,r19
   41360:	103ee83a 	callr	r2
   41364:	1000c81e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41368:	84000044 	addi	r16,r16,1
   4136c:	0000f306 	br	4173c <___vfprintf_internal_r+0x4dc>
   41370:	217ff404 	addi	r5,r4,-48
   41374:	29403fcc 	andi	r5,r5,255
   41378:	00c00244 	movi	r3,9
   4137c:	19400736 	bltu	r3,r5,4139c <___vfprintf_internal_r+0x13c>
   41380:	00bfffc4 	movi	r2,-1
   41384:	88800226 	beq	r17,r2,41390 <___vfprintf_internal_r+0x130>
   41388:	8c4002a4 	muli	r17,r17,10
   4138c:	00000106 	br	41394 <___vfprintf_internal_r+0x134>
   41390:	0023883a 	mov	r17,zero
   41394:	2c63883a 	add	r17,r5,r17
   41398:	0000e206 	br	41724 <___vfprintf_internal_r+0x4c4>
   4139c:	01400b84 	movi	r5,46
   413a0:	1140e426 	beq	r2,r5,41734 <___vfprintf_internal_r+0x4d4>
   413a4:	05000084 	movi	r20,2
   413a8:	213ff404 	addi	r4,r4,-48
   413ac:	21003fcc 	andi	r4,r4,255
   413b0:	00c00244 	movi	r3,9
   413b4:	19000736 	bltu	r3,r4,413d4 <___vfprintf_internal_r+0x174>
   413b8:	00bfffc4 	movi	r2,-1
   413bc:	90800226 	beq	r18,r2,413c8 <___vfprintf_internal_r+0x168>
   413c0:	948002a4 	muli	r18,r18,10
   413c4:	00000106 	br	413cc <___vfprintf_internal_r+0x16c>
   413c8:	0025883a 	mov	r18,zero
   413cc:	24a5883a 	add	r18,r4,r18
   413d0:	0000db06 	br	41740 <___vfprintf_internal_r+0x4e0>
   413d4:	00c01b04 	movi	r3,108
   413d8:	10c0d426 	beq	r2,r3,4172c <___vfprintf_internal_r+0x4cc>
   413dc:	013fffc4 	movi	r4,-1
   413e0:	91000226 	beq	r18,r4,413ec <___vfprintf_internal_r+0x18c>
   413e4:	d8000b15 	stw	zero,44(sp)
   413e8:	00000106 	br	413f0 <___vfprintf_internal_r+0x190>
   413ec:	04800044 	movi	r18,1
   413f0:	01001a44 	movi	r4,105
   413f4:	11001626 	beq	r2,r4,41450 <___vfprintf_internal_r+0x1f0>
   413f8:	20800916 	blt	r4,r2,41420 <___vfprintf_internal_r+0x1c0>
   413fc:	010018c4 	movi	r4,99
   41400:	11008a26 	beq	r2,r4,4162c <___vfprintf_internal_r+0x3cc>
   41404:	01001904 	movi	r4,100
   41408:	11001126 	beq	r2,r4,41450 <___vfprintf_internal_r+0x1f0>
   4140c:	01001604 	movi	r4,88
   41410:	1100ca1e 	bne	r2,r4,4173c <___vfprintf_internal_r+0x4dc>
   41414:	00c00044 	movi	r3,1
   41418:	d8c00e15 	stw	r3,56(sp)
   4141c:	00001406 	br	41470 <___vfprintf_internal_r+0x210>
   41420:	01001cc4 	movi	r4,115
   41424:	11009a26 	beq	r2,r4,41690 <___vfprintf_internal_r+0x430>
   41428:	20800416 	blt	r4,r2,4143c <___vfprintf_internal_r+0x1dc>
   4142c:	01001bc4 	movi	r4,111
   41430:	1100c21e 	bne	r2,r4,4173c <___vfprintf_internal_r+0x4dc>
   41434:	05400204 	movi	r21,8
   41438:	00000e06 	br	41474 <___vfprintf_internal_r+0x214>
   4143c:	01001d44 	movi	r4,117
   41440:	11000c26 	beq	r2,r4,41474 <___vfprintf_internal_r+0x214>
   41444:	01001e04 	movi	r4,120
   41448:	11000926 	beq	r2,r4,41470 <___vfprintf_internal_r+0x210>
   4144c:	0000bb06 	br	4173c <___vfprintf_internal_r+0x4dc>
   41450:	b5000104 	addi	r20,r22,4
   41454:	b8000726 	beq	r23,zero,41474 <___vfprintf_internal_r+0x214>
   41458:	dd000d15 	stw	r20,52(sp)
   4145c:	b5800017 	ldw	r22,0(r22)
   41460:	b000080e 	bge	r22,zero,41484 <___vfprintf_internal_r+0x224>
   41464:	05adc83a 	sub	r22,zero,r22
   41468:	02800044 	movi	r10,1
   4146c:	00000606 	br	41488 <___vfprintf_internal_r+0x228>
   41470:	05400404 	movi	r21,16
   41474:	b0c00104 	addi	r3,r22,4
   41478:	d8c00d15 	stw	r3,52(sp)
   4147c:	b5800017 	ldw	r22,0(r22)
   41480:	002f883a 	mov	r23,zero
   41484:	0015883a 	mov	r10,zero
   41488:	d829883a 	mov	r20,sp
   4148c:	b0001426 	beq	r22,zero,414e0 <___vfprintf_internal_r+0x280>
   41490:	b009883a 	mov	r4,r22
   41494:	a80b883a 	mov	r5,r21
   41498:	da801015 	stw	r10,64(sp)
   4149c:	00410000 	call	41000 <__udivsi3>
   414a0:	1549383a 	mul	r4,r2,r21
   414a4:	00c00244 	movi	r3,9
   414a8:	da801017 	ldw	r10,64(sp)
   414ac:	b12dc83a 	sub	r22,r22,r4
   414b0:	1d800216 	blt	r3,r22,414bc <___vfprintf_internal_r+0x25c>
   414b4:	b5800c04 	addi	r22,r22,48
   414b8:	00000506 	br	414d0 <___vfprintf_internal_r+0x270>
   414bc:	d8c00e17 	ldw	r3,56(sp)
   414c0:	18000226 	beq	r3,zero,414cc <___vfprintf_internal_r+0x26c>
   414c4:	b5800dc4 	addi	r22,r22,55
   414c8:	00000106 	br	414d0 <___vfprintf_internal_r+0x270>
   414cc:	b58015c4 	addi	r22,r22,87
   414d0:	a5800005 	stb	r22,0(r20)
   414d4:	a5000044 	addi	r20,r20,1
   414d8:	102d883a 	mov	r22,r2
   414dc:	003feb06 	br	4148c <__alt_data_end+0xfffd948c>
   414e0:	a6c7c83a 	sub	r3,r20,sp
   414e4:	d8c00a15 	stw	r3,40(sp)
   414e8:	90c5c83a 	sub	r2,r18,r3
   414ec:	00800a0e 	bge	zero,r2,41518 <___vfprintf_internal_r+0x2b8>
   414f0:	a085883a 	add	r2,r20,r2
   414f4:	01400c04 	movi	r5,48
   414f8:	d8c00917 	ldw	r3,36(sp)
   414fc:	a009883a 	mov	r4,r20
   41500:	a0c0032e 	bgeu	r20,r3,41510 <___vfprintf_internal_r+0x2b0>
   41504:	a5000044 	addi	r20,r20,1
   41508:	21400005 	stb	r5,0(r4)
   4150c:	a0bffa1e 	bne	r20,r2,414f8 <__alt_data_end+0xfffd94f8>
   41510:	a6c7c83a 	sub	r3,r20,sp
   41514:	d8c00a15 	stw	r3,40(sp)
   41518:	d8c00a17 	ldw	r3,40(sp)
   4151c:	50d3883a 	add	r9,r10,r3
   41520:	d8c00b17 	ldw	r3,44(sp)
   41524:	8a6dc83a 	sub	r22,r17,r9
   41528:	18001726 	beq	r3,zero,41588 <___vfprintf_internal_r+0x328>
   4152c:	50000a26 	beq	r10,zero,41558 <___vfprintf_internal_r+0x2f8>
   41530:	00800b44 	movi	r2,45
   41534:	d8800805 	stb	r2,32(sp)
   41538:	e0800117 	ldw	r2,4(fp)
   4153c:	01c00044 	movi	r7,1
   41540:	d9800804 	addi	r6,sp,32
   41544:	e00b883a 	mov	r5,fp
   41548:	9809883a 	mov	r4,r19
   4154c:	103ee83a 	callr	r2
   41550:	10004d1e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41554:	84000044 	addi	r16,r16,1
   41558:	0580070e 	bge	zero,r22,41578 <___vfprintf_internal_r+0x318>
   4155c:	b00f883a 	mov	r7,r22
   41560:	01800c04 	movi	r6,48
   41564:	e00b883a 	mov	r5,fp
   41568:	9809883a 	mov	r4,r19
   4156c:	00411f40 	call	411f4 <print_repeat>
   41570:	1000451e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41574:	85a1883a 	add	r16,r16,r22
   41578:	d8c00a17 	ldw	r3,40(sp)
   4157c:	a013883a 	mov	r9,r20
   41580:	1d2dc83a 	sub	r22,r3,r20
   41584:	00002206 	br	41610 <___vfprintf_internal_r+0x3b0>
   41588:	0580090e 	bge	zero,r22,415b0 <___vfprintf_internal_r+0x350>
   4158c:	b00f883a 	mov	r7,r22
   41590:	01800804 	movi	r6,32
   41594:	e00b883a 	mov	r5,fp
   41598:	9809883a 	mov	r4,r19
   4159c:	da801015 	stw	r10,64(sp)
   415a0:	00411f40 	call	411f4 <print_repeat>
   415a4:	da801017 	ldw	r10,64(sp)
   415a8:	1000371e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   415ac:	85a1883a 	add	r16,r16,r22
   415b0:	503ff126 	beq	r10,zero,41578 <__alt_data_end+0xfffd9578>
   415b4:	00800b44 	movi	r2,45
   415b8:	d8800805 	stb	r2,32(sp)
   415bc:	e0800117 	ldw	r2,4(fp)
   415c0:	01c00044 	movi	r7,1
   415c4:	d9800804 	addi	r6,sp,32
   415c8:	e00b883a 	mov	r5,fp
   415cc:	9809883a 	mov	r4,r19
   415d0:	103ee83a 	callr	r2
   415d4:	10002c1e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   415d8:	84000044 	addi	r16,r16,1
   415dc:	003fe606 	br	41578 <__alt_data_end+0xfffd9578>
   415e0:	4a7fffc4 	addi	r9,r9,-1
   415e4:	48800003 	ldbu	r2,0(r9)
   415e8:	01c00044 	movi	r7,1
   415ec:	d9800804 	addi	r6,sp,32
   415f0:	d8800805 	stb	r2,32(sp)
   415f4:	e0800117 	ldw	r2,4(fp)
   415f8:	e00b883a 	mov	r5,fp
   415fc:	da401015 	stw	r9,64(sp)
   41600:	9809883a 	mov	r4,r19
   41604:	103ee83a 	callr	r2
   41608:	da401017 	ldw	r9,64(sp)
   4160c:	10001e1e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41610:	8245c83a 	sub	r2,r16,r9
   41614:	4d89883a 	add	r4,r9,r22
   41618:	a085883a 	add	r2,r20,r2
   4161c:	013ff016 	blt	zero,r4,415e0 <__alt_data_end+0xfffd95e0>
   41620:	1021883a 	mov	r16,r2
   41624:	dd800d17 	ldw	r22,52(sp)
   41628:	00004406 	br	4173c <___vfprintf_internal_r+0x4dc>
   4162c:	00800044 	movi	r2,1
   41630:	1440080e 	bge	r2,r17,41654 <___vfprintf_internal_r+0x3f4>
   41634:	8d3fffc4 	addi	r20,r17,-1
   41638:	a00f883a 	mov	r7,r20
   4163c:	01800804 	movi	r6,32
   41640:	e00b883a 	mov	r5,fp
   41644:	9809883a 	mov	r4,r19
   41648:	00411f40 	call	411f4 <print_repeat>
   4164c:	10000e1e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   41650:	8521883a 	add	r16,r16,r20
   41654:	b0800017 	ldw	r2,0(r22)
   41658:	01c00044 	movi	r7,1
   4165c:	d80d883a 	mov	r6,sp
   41660:	d8800005 	stb	r2,0(sp)
   41664:	e0800117 	ldw	r2,4(fp)
   41668:	e00b883a 	mov	r5,fp
   4166c:	9809883a 	mov	r4,r19
   41670:	b5000104 	addi	r20,r22,4
   41674:	103ee83a 	callr	r2
   41678:	1000031e 	bne	r2,zero,41688 <___vfprintf_internal_r+0x428>
   4167c:	84000044 	addi	r16,r16,1
   41680:	a02d883a 	mov	r22,r20
   41684:	00002d06 	br	4173c <___vfprintf_internal_r+0x4dc>
   41688:	00bfffc4 	movi	r2,-1
   4168c:	00003106 	br	41754 <___vfprintf_internal_r+0x4f4>
   41690:	b5000017 	ldw	r20,0(r22)
   41694:	b0c00104 	addi	r3,r22,4
   41698:	d8c00a15 	stw	r3,40(sp)
   4169c:	a009883a 	mov	r4,r20
   416a0:	00411d80 	call	411d8 <strlen>
   416a4:	8893c83a 	sub	r9,r17,r2
   416a8:	102d883a 	mov	r22,r2
   416ac:	0240090e 	bge	zero,r9,416d4 <___vfprintf_internal_r+0x474>
   416b0:	480f883a 	mov	r7,r9
   416b4:	01800804 	movi	r6,32
   416b8:	e00b883a 	mov	r5,fp
   416bc:	9809883a 	mov	r4,r19
   416c0:	da401015 	stw	r9,64(sp)
   416c4:	00411f40 	call	411f4 <print_repeat>
   416c8:	da401017 	ldw	r9,64(sp)
   416cc:	103fee1e 	bne	r2,zero,41688 <__alt_data_end+0xfffd9688>
   416d0:	8261883a 	add	r16,r16,r9
   416d4:	e0800117 	ldw	r2,4(fp)
   416d8:	b00f883a 	mov	r7,r22
   416dc:	a00d883a 	mov	r6,r20
   416e0:	e00b883a 	mov	r5,fp
   416e4:	9809883a 	mov	r4,r19
   416e8:	103ee83a 	callr	r2
   416ec:	103fe61e 	bne	r2,zero,41688 <__alt_data_end+0xfffd9688>
   416f0:	85a1883a 	add	r16,r16,r22
   416f4:	dd800a17 	ldw	r22,40(sp)
   416f8:	00001006 	br	4173c <___vfprintf_internal_r+0x4dc>
   416fc:	05c00044 	movi	r23,1
   41700:	04bfffc4 	movi	r18,-1
   41704:	d8000e15 	stw	zero,56(sp)
   41708:	05400284 	movi	r21,10
   4170c:	9023883a 	mov	r17,r18
   41710:	d8000c15 	stw	zero,48(sp)
   41714:	d8000b15 	stw	zero,44(sp)
   41718:	b829883a 	mov	r20,r23
   4171c:	00000806 	br	41740 <___vfprintf_internal_r+0x4e0>
   41720:	dd000b15 	stw	r20,44(sp)
   41724:	05000084 	movi	r20,2
   41728:	00000506 	br	41740 <___vfprintf_internal_r+0x4e0>
   4172c:	00c00044 	movi	r3,1
   41730:	d8c00c15 	stw	r3,48(sp)
   41734:	050000c4 	movi	r20,3
   41738:	00000106 	br	41740 <___vfprintf_internal_r+0x4e0>
   4173c:	0029883a 	mov	r20,zero
   41740:	d8c00f17 	ldw	r3,60(sp)
   41744:	18c00044 	addi	r3,r3,1
   41748:	d8c00f15 	stw	r3,60(sp)
   4174c:	003ede06 	br	412c8 <__alt_data_end+0xfffd92c8>
   41750:	8005883a 	mov	r2,r16
   41754:	dfc01a17 	ldw	ra,104(sp)
   41758:	df001917 	ldw	fp,100(sp)
   4175c:	ddc01817 	ldw	r23,96(sp)
   41760:	dd801717 	ldw	r22,92(sp)
   41764:	dd401617 	ldw	r21,88(sp)
   41768:	dd001517 	ldw	r20,84(sp)
   4176c:	dcc01417 	ldw	r19,80(sp)
   41770:	dc801317 	ldw	r18,76(sp)
   41774:	dc401217 	ldw	r17,72(sp)
   41778:	dc001117 	ldw	r16,68(sp)
   4177c:	dec01b04 	addi	sp,sp,108
   41780:	f800283a 	ret

00041784 <__vfprintf_internal>:
   41784:	00800134 	movhi	r2,4
   41788:	108cbe04 	addi	r2,r2,13048
   4178c:	300f883a 	mov	r7,r6
   41790:	280d883a 	mov	r6,r5
   41794:	200b883a 	mov	r5,r4
   41798:	11000017 	ldw	r4,0(r2)
   4179c:	00412601 	jmpi	41260 <___vfprintf_internal_r>

000417a0 <__sfvwrite_small_dev>:
   417a0:	2880000b 	ldhu	r2,0(r5)
   417a4:	1080020c 	andi	r2,r2,8
   417a8:	10002126 	beq	r2,zero,41830 <__sfvwrite_small_dev+0x90>
   417ac:	2880008f 	ldh	r2,2(r5)
   417b0:	defffa04 	addi	sp,sp,-24
   417b4:	dc000015 	stw	r16,0(sp)
   417b8:	dfc00515 	stw	ra,20(sp)
   417bc:	dd000415 	stw	r20,16(sp)
   417c0:	dcc00315 	stw	r19,12(sp)
   417c4:	dc800215 	stw	r18,8(sp)
   417c8:	dc400115 	stw	r17,4(sp)
   417cc:	2821883a 	mov	r16,r5
   417d0:	10001216 	blt	r2,zero,4181c <__sfvwrite_small_dev+0x7c>
   417d4:	2027883a 	mov	r19,r4
   417d8:	3025883a 	mov	r18,r6
   417dc:	3823883a 	mov	r17,r7
   417e0:	05010004 	movi	r20,1024
   417e4:	04400b0e 	bge	zero,r17,41814 <__sfvwrite_small_dev+0x74>
   417e8:	880f883a 	mov	r7,r17
   417ec:	a440010e 	bge	r20,r17,417f4 <__sfvwrite_small_dev+0x54>
   417f0:	01c10004 	movi	r7,1024
   417f4:	8140008f 	ldh	r5,2(r16)
   417f8:	900d883a 	mov	r6,r18
   417fc:	9809883a 	mov	r4,r19
   41800:	00418580 	call	41858 <_write_r>
   41804:	0080050e 	bge	zero,r2,4181c <__sfvwrite_small_dev+0x7c>
   41808:	88a3c83a 	sub	r17,r17,r2
   4180c:	90a5883a 	add	r18,r18,r2
   41810:	003ff406 	br	417e4 <__alt_data_end+0xfffd97e4>
   41814:	0005883a 	mov	r2,zero
   41818:	00000706 	br	41838 <__sfvwrite_small_dev+0x98>
   4181c:	8080000b 	ldhu	r2,0(r16)
   41820:	10801014 	ori	r2,r2,64
   41824:	8080000d 	sth	r2,0(r16)
   41828:	00bfffc4 	movi	r2,-1
   4182c:	00000206 	br	41838 <__sfvwrite_small_dev+0x98>
   41830:	00bfffc4 	movi	r2,-1
   41834:	f800283a 	ret
   41838:	dfc00517 	ldw	ra,20(sp)
   4183c:	dd000417 	ldw	r20,16(sp)
   41840:	dcc00317 	ldw	r19,12(sp)
   41844:	dc800217 	ldw	r18,8(sp)
   41848:	dc400117 	ldw	r17,4(sp)
   4184c:	dc000017 	ldw	r16,0(sp)
   41850:	dec00604 	addi	sp,sp,24
   41854:	f800283a 	ret

00041858 <_write_r>:
   41858:	defffd04 	addi	sp,sp,-12
   4185c:	dc000015 	stw	r16,0(sp)
   41860:	04000134 	movhi	r16,4
   41864:	dc400115 	stw	r17,4(sp)
   41868:	840d8704 	addi	r16,r16,13852
   4186c:	2023883a 	mov	r17,r4
   41870:	2809883a 	mov	r4,r5
   41874:	300b883a 	mov	r5,r6
   41878:	380d883a 	mov	r6,r7
   4187c:	dfc00215 	stw	ra,8(sp)
   41880:	80000015 	stw	zero,0(r16)
   41884:	0041ce40 	call	41ce4 <write>
   41888:	00ffffc4 	movi	r3,-1
   4188c:	10c0031e 	bne	r2,r3,4189c <_write_r+0x44>
   41890:	80c00017 	ldw	r3,0(r16)
   41894:	18000126 	beq	r3,zero,4189c <_write_r+0x44>
   41898:	88c00015 	stw	r3,0(r17)
   4189c:	dfc00217 	ldw	ra,8(sp)
   418a0:	dc400117 	ldw	r17,4(sp)
   418a4:	dc000017 	ldw	r16,0(sp)
   418a8:	dec00304 	addi	sp,sp,12
   418ac:	f800283a 	ret

000418b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   418b0:	defff904 	addi	sp,sp,-28
   418b4:	dfc00615 	stw	ra,24(sp)
   418b8:	df000515 	stw	fp,20(sp)
   418bc:	df000504 	addi	fp,sp,20
   418c0:	e13ffc15 	stw	r4,-16(fp)
   418c4:	e17ffd15 	stw	r5,-12(fp)
   418c8:	e1bffe15 	stw	r6,-8(fp)
   418cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   418d0:	e0800217 	ldw	r2,8(fp)
   418d4:	d8800015 	stw	r2,0(sp)
   418d8:	e1ffff17 	ldw	r7,-4(fp)
   418dc:	e1bffe17 	ldw	r6,-8(fp)
   418e0:	e17ffd17 	ldw	r5,-12(fp)
   418e4:	e13ffc17 	ldw	r4,-16(fp)
   418e8:	0041a600 	call	41a60 <alt_iic_isr_register>
}  
   418ec:	e037883a 	mov	sp,fp
   418f0:	dfc00117 	ldw	ra,4(sp)
   418f4:	df000017 	ldw	fp,0(sp)
   418f8:	dec00204 	addi	sp,sp,8
   418fc:	f800283a 	ret

00041900 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   41900:	defff904 	addi	sp,sp,-28
   41904:	df000615 	stw	fp,24(sp)
   41908:	df000604 	addi	fp,sp,24
   4190c:	e13ffe15 	stw	r4,-8(fp)
   41910:	e17fff15 	stw	r5,-4(fp)
   41914:	e0bfff17 	ldw	r2,-4(fp)
   41918:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4191c:	0005303a 	rdctl	r2,status
   41920:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41924:	e0fffb17 	ldw	r3,-20(fp)
   41928:	00bfff84 	movi	r2,-2
   4192c:	1884703a 	and	r2,r3,r2
   41930:	1001703a 	wrctl	status,r2
  
  return context;
   41934:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   41938:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   4193c:	00c00044 	movi	r3,1
   41940:	e0bffa17 	ldw	r2,-24(fp)
   41944:	1884983a 	sll	r2,r3,r2
   41948:	1007883a 	mov	r3,r2
   4194c:	d0a0cc17 	ldw	r2,-31952(gp)
   41950:	1884b03a 	or	r2,r3,r2
   41954:	d0a0cc15 	stw	r2,-31952(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41958:	d0a0cc17 	ldw	r2,-31952(gp)
   4195c:	100170fa 	wrctl	ienable,r2
   41960:	e0bffc17 	ldw	r2,-16(fp)
   41964:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41968:	e0bffd17 	ldw	r2,-12(fp)
   4196c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41970:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   41974:	0001883a 	nop
}
   41978:	e037883a 	mov	sp,fp
   4197c:	df000017 	ldw	fp,0(sp)
   41980:	dec00104 	addi	sp,sp,4
   41984:	f800283a 	ret

00041988 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   41988:	defff904 	addi	sp,sp,-28
   4198c:	df000615 	stw	fp,24(sp)
   41990:	df000604 	addi	fp,sp,24
   41994:	e13ffe15 	stw	r4,-8(fp)
   41998:	e17fff15 	stw	r5,-4(fp)
   4199c:	e0bfff17 	ldw	r2,-4(fp)
   419a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   419a4:	0005303a 	rdctl	r2,status
   419a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   419ac:	e0fffb17 	ldw	r3,-20(fp)
   419b0:	00bfff84 	movi	r2,-2
   419b4:	1884703a 	and	r2,r3,r2
   419b8:	1001703a 	wrctl	status,r2
  
  return context;
   419bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   419c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   419c4:	00c00044 	movi	r3,1
   419c8:	e0bffa17 	ldw	r2,-24(fp)
   419cc:	1884983a 	sll	r2,r3,r2
   419d0:	0084303a 	nor	r2,zero,r2
   419d4:	1007883a 	mov	r3,r2
   419d8:	d0a0cc17 	ldw	r2,-31952(gp)
   419dc:	1884703a 	and	r2,r3,r2
   419e0:	d0a0cc15 	stw	r2,-31952(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   419e4:	d0a0cc17 	ldw	r2,-31952(gp)
   419e8:	100170fa 	wrctl	ienable,r2
   419ec:	e0bffc17 	ldw	r2,-16(fp)
   419f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   419f4:	e0bffd17 	ldw	r2,-12(fp)
   419f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   419fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   41a00:	0001883a 	nop
}
   41a04:	e037883a 	mov	sp,fp
   41a08:	df000017 	ldw	fp,0(sp)
   41a0c:	dec00104 	addi	sp,sp,4
   41a10:	f800283a 	ret

00041a14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41a14:	defffc04 	addi	sp,sp,-16
   41a18:	df000315 	stw	fp,12(sp)
   41a1c:	df000304 	addi	fp,sp,12
   41a20:	e13ffe15 	stw	r4,-8(fp)
   41a24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   41a28:	000530fa 	rdctl	r2,ienable
   41a2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   41a30:	00c00044 	movi	r3,1
   41a34:	e0bfff17 	ldw	r2,-4(fp)
   41a38:	1884983a 	sll	r2,r3,r2
   41a3c:	1007883a 	mov	r3,r2
   41a40:	e0bffd17 	ldw	r2,-12(fp)
   41a44:	1884703a 	and	r2,r3,r2
   41a48:	1004c03a 	cmpne	r2,r2,zero
   41a4c:	10803fcc 	andi	r2,r2,255
}
   41a50:	e037883a 	mov	sp,fp
   41a54:	df000017 	ldw	fp,0(sp)
   41a58:	dec00104 	addi	sp,sp,4
   41a5c:	f800283a 	ret

00041a60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41a60:	defff504 	addi	sp,sp,-44
   41a64:	dfc00a15 	stw	ra,40(sp)
   41a68:	df000915 	stw	fp,36(sp)
   41a6c:	df000904 	addi	fp,sp,36
   41a70:	e13ffc15 	stw	r4,-16(fp)
   41a74:	e17ffd15 	stw	r5,-12(fp)
   41a78:	e1bffe15 	stw	r6,-8(fp)
   41a7c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   41a80:	00bffa84 	movi	r2,-22
   41a84:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   41a88:	e0bffd17 	ldw	r2,-12(fp)
   41a8c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   41a90:	e0bff817 	ldw	r2,-32(fp)
   41a94:	10800808 	cmpgei	r2,r2,32
   41a98:	1000271e 	bne	r2,zero,41b38 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41a9c:	0005303a 	rdctl	r2,status
   41aa0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41aa4:	e0fffb17 	ldw	r3,-20(fp)
   41aa8:	00bfff84 	movi	r2,-2
   41aac:	1884703a 	and	r2,r3,r2
   41ab0:	1001703a 	wrctl	status,r2
  
  return context;
   41ab4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   41ab8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   41abc:	00800134 	movhi	r2,4
   41ac0:	108d8f04 	addi	r2,r2,13884
   41ac4:	e0fff817 	ldw	r3,-32(fp)
   41ac8:	180690fa 	slli	r3,r3,3
   41acc:	10c5883a 	add	r2,r2,r3
   41ad0:	e0fffe17 	ldw	r3,-8(fp)
   41ad4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   41ad8:	00800134 	movhi	r2,4
   41adc:	108d8f04 	addi	r2,r2,13884
   41ae0:	e0fff817 	ldw	r3,-32(fp)
   41ae4:	180690fa 	slli	r3,r3,3
   41ae8:	10c5883a 	add	r2,r2,r3
   41aec:	10800104 	addi	r2,r2,4
   41af0:	e0ffff17 	ldw	r3,-4(fp)
   41af4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   41af8:	e0bffe17 	ldw	r2,-8(fp)
   41afc:	10000526 	beq	r2,zero,41b14 <alt_iic_isr_register+0xb4>
   41b00:	e0bff817 	ldw	r2,-32(fp)
   41b04:	100b883a 	mov	r5,r2
   41b08:	e13ffc17 	ldw	r4,-16(fp)
   41b0c:	00419000 	call	41900 <alt_ic_irq_enable>
   41b10:	00000406 	br	41b24 <alt_iic_isr_register+0xc4>
   41b14:	e0bff817 	ldw	r2,-32(fp)
   41b18:	100b883a 	mov	r5,r2
   41b1c:	e13ffc17 	ldw	r4,-16(fp)
   41b20:	00419880 	call	41988 <alt_ic_irq_disable>
   41b24:	e0bff715 	stw	r2,-36(fp)
   41b28:	e0bffa17 	ldw	r2,-24(fp)
   41b2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41b30:	e0bff917 	ldw	r2,-28(fp)
   41b34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   41b38:	e0bff717 	ldw	r2,-36(fp)
}
   41b3c:	e037883a 	mov	sp,fp
   41b40:	dfc00117 	ldw	ra,4(sp)
   41b44:	df000017 	ldw	fp,0(sp)
   41b48:	dec00204 	addi	sp,sp,8
   41b4c:	f800283a 	ret

00041b50 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   41b50:	defffc04 	addi	sp,sp,-16
   41b54:	df000315 	stw	fp,12(sp)
   41b58:	df000304 	addi	fp,sp,12
   41b5c:	e13ffd15 	stw	r4,-12(fp)
   41b60:	e17ffe15 	stw	r5,-8(fp)
   41b64:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   41b68:	e0fffe17 	ldw	r3,-8(fp)
   41b6c:	e0bffd17 	ldw	r2,-12(fp)
   41b70:	18800c26 	beq	r3,r2,41ba4 <alt_load_section+0x54>
  {
    while( to != end )
   41b74:	00000806 	br	41b98 <alt_load_section+0x48>
    {
      *to++ = *from++;
   41b78:	e0bffe17 	ldw	r2,-8(fp)
   41b7c:	10c00104 	addi	r3,r2,4
   41b80:	e0fffe15 	stw	r3,-8(fp)
   41b84:	e0fffd17 	ldw	r3,-12(fp)
   41b88:	19000104 	addi	r4,r3,4
   41b8c:	e13ffd15 	stw	r4,-12(fp)
   41b90:	18c00017 	ldw	r3,0(r3)
   41b94:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   41b98:	e0fffe17 	ldw	r3,-8(fp)
   41b9c:	e0bfff17 	ldw	r2,-4(fp)
   41ba0:	18bff51e 	bne	r3,r2,41b78 <__alt_data_end+0xfffd9b78>
    {
      *to++ = *from++;
    }
  }
}
   41ba4:	0001883a 	nop
   41ba8:	e037883a 	mov	sp,fp
   41bac:	df000017 	ldw	fp,0(sp)
   41bb0:	dec00104 	addi	sp,sp,4
   41bb4:	f800283a 	ret

00041bb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   41bb8:	defffe04 	addi	sp,sp,-8
   41bbc:	dfc00115 	stw	ra,4(sp)
   41bc0:	df000015 	stw	fp,0(sp)
   41bc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   41bc8:	01800134 	movhi	r6,4
   41bcc:	318cc804 	addi	r6,r6,13088
   41bd0:	01400134 	movhi	r5,4
   41bd4:	294c0c04 	addi	r5,r5,12336
   41bd8:	01000134 	movhi	r4,4
   41bdc:	210cc804 	addi	r4,r4,13088
   41be0:	0041b500 	call	41b50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   41be4:	01800134 	movhi	r6,4
   41be8:	31809104 	addi	r6,r6,580
   41bec:	01400134 	movhi	r5,4
   41bf0:	29400804 	addi	r5,r5,32
   41bf4:	01000134 	movhi	r4,4
   41bf8:	21000804 	addi	r4,r4,32
   41bfc:	0041b500 	call	41b50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   41c00:	01800134 	movhi	r6,4
   41c04:	318c0c04 	addi	r6,r6,12336
   41c08:	01400134 	movhi	r5,4
   41c0c:	294bdd04 	addi	r5,r5,12148
   41c10:	01000134 	movhi	r4,4
   41c14:	210bdd04 	addi	r4,r4,12148
   41c18:	0041b500 	call	41b50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   41c1c:	00422d80 	call	422d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   41c20:	00424040 	call	42404 <alt_icache_flush_all>
}
   41c24:	0001883a 	nop
   41c28:	e037883a 	mov	sp,fp
   41c2c:	dfc00117 	ldw	ra,4(sp)
   41c30:	df000017 	ldw	fp,0(sp)
   41c34:	dec00204 	addi	sp,sp,8
   41c38:	f800283a 	ret

00041c3c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   41c3c:	defffd04 	addi	sp,sp,-12
   41c40:	dfc00215 	stw	ra,8(sp)
   41c44:	df000115 	stw	fp,4(sp)
   41c48:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   41c4c:	0009883a 	mov	r4,zero
   41c50:	0041e100 	call	41e10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   41c54:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   41c58:	0041e480 	call	41e48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   41c5c:	01800134 	movhi	r6,4
   41c60:	318bff04 	addi	r6,r6,12284
   41c64:	01400134 	movhi	r5,4
   41c68:	294bff04 	addi	r5,r5,12284
   41c6c:	01000134 	movhi	r4,4
   41c70:	210bff04 	addi	r4,r4,12284
   41c74:	00425980 	call	42598 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   41c78:	d0a0cd17 	ldw	r2,-31948(gp)
   41c7c:	d0e0ce17 	ldw	r3,-31944(gp)
   41c80:	d120cf17 	ldw	r4,-31940(gp)
   41c84:	200d883a 	mov	r6,r4
   41c88:	180b883a 	mov	r5,r3
   41c8c:	1009883a 	mov	r4,r2
   41c90:	00406640 	call	40664 <main>
   41c94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   41c98:	01000044 	movi	r4,1
   41c9c:	00422080 	call	42208 <close>
  exit (result);
   41ca0:	e13fff17 	ldw	r4,-4(fp)
   41ca4:	0042d600 	call	42d60 <exit>

00041ca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41ca8:	defffe04 	addi	sp,sp,-8
   41cac:	dfc00115 	stw	ra,4(sp)
   41cb0:	df000015 	stw	fp,0(sp)
   41cb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41cb8:	d0a00917 	ldw	r2,-32732(gp)
   41cbc:	10000326 	beq	r2,zero,41ccc <alt_get_errno+0x24>
   41cc0:	d0a00917 	ldw	r2,-32732(gp)
   41cc4:	103ee83a 	callr	r2
   41cc8:	00000106 	br	41cd0 <alt_get_errno+0x28>
   41ccc:	d0a0cb04 	addi	r2,gp,-31956
}
   41cd0:	e037883a 	mov	sp,fp
   41cd4:	dfc00117 	ldw	ra,4(sp)
   41cd8:	df000017 	ldw	fp,0(sp)
   41cdc:	dec00204 	addi	sp,sp,8
   41ce0:	f800283a 	ret

00041ce4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   41ce4:	defff904 	addi	sp,sp,-28
   41ce8:	dfc00615 	stw	ra,24(sp)
   41cec:	df000515 	stw	fp,20(sp)
   41cf0:	df000504 	addi	fp,sp,20
   41cf4:	e13ffd15 	stw	r4,-12(fp)
   41cf8:	e17ffe15 	stw	r5,-8(fp)
   41cfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   41d00:	e0bffd17 	ldw	r2,-12(fp)
   41d04:	10000616 	blt	r2,zero,41d20 <write+0x3c>
   41d08:	e0bffd17 	ldw	r2,-12(fp)
   41d0c:	10c00324 	muli	r3,r2,12
   41d10:	00800134 	movhi	r2,4
   41d14:	108c5c04 	addi	r2,r2,12656
   41d18:	1885883a 	add	r2,r3,r2
   41d1c:	00000106 	br	41d24 <write+0x40>
   41d20:	0005883a 	mov	r2,zero
   41d24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   41d28:	e0bffb17 	ldw	r2,-20(fp)
   41d2c:	10002126 	beq	r2,zero,41db4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   41d30:	e0bffb17 	ldw	r2,-20(fp)
   41d34:	10800217 	ldw	r2,8(r2)
   41d38:	108000cc 	andi	r2,r2,3
   41d3c:	10001826 	beq	r2,zero,41da0 <write+0xbc>
   41d40:	e0bffb17 	ldw	r2,-20(fp)
   41d44:	10800017 	ldw	r2,0(r2)
   41d48:	10800617 	ldw	r2,24(r2)
   41d4c:	10001426 	beq	r2,zero,41da0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   41d50:	e0bffb17 	ldw	r2,-20(fp)
   41d54:	10800017 	ldw	r2,0(r2)
   41d58:	10800617 	ldw	r2,24(r2)
   41d5c:	e0ffff17 	ldw	r3,-4(fp)
   41d60:	180d883a 	mov	r6,r3
   41d64:	e17ffe17 	ldw	r5,-8(fp)
   41d68:	e13ffb17 	ldw	r4,-20(fp)
   41d6c:	103ee83a 	callr	r2
   41d70:	e0bffc15 	stw	r2,-16(fp)
   41d74:	e0bffc17 	ldw	r2,-16(fp)
   41d78:	1000070e 	bge	r2,zero,41d98 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   41d7c:	0041ca80 	call	41ca8 <alt_get_errno>
   41d80:	1007883a 	mov	r3,r2
   41d84:	e0bffc17 	ldw	r2,-16(fp)
   41d88:	0085c83a 	sub	r2,zero,r2
   41d8c:	18800015 	stw	r2,0(r3)
        return -1;
   41d90:	00bfffc4 	movi	r2,-1
   41d94:	00000c06 	br	41dc8 <write+0xe4>
      }
      return rval;
   41d98:	e0bffc17 	ldw	r2,-16(fp)
   41d9c:	00000a06 	br	41dc8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   41da0:	0041ca80 	call	41ca8 <alt_get_errno>
   41da4:	1007883a 	mov	r3,r2
   41da8:	00800344 	movi	r2,13
   41dac:	18800015 	stw	r2,0(r3)
   41db0:	00000406 	br	41dc4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   41db4:	0041ca80 	call	41ca8 <alt_get_errno>
   41db8:	1007883a 	mov	r3,r2
   41dbc:	00801444 	movi	r2,81
   41dc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   41dc4:	00bfffc4 	movi	r2,-1
}
   41dc8:	e037883a 	mov	sp,fp
   41dcc:	dfc00117 	ldw	ra,4(sp)
   41dd0:	df000017 	ldw	fp,0(sp)
   41dd4:	dec00204 	addi	sp,sp,8
   41dd8:	f800283a 	ret

00041ddc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   41ddc:	defffd04 	addi	sp,sp,-12
   41de0:	dfc00215 	stw	ra,8(sp)
   41de4:	df000115 	stw	fp,4(sp)
   41de8:	df000104 	addi	fp,sp,4
   41dec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   41df0:	d1600604 	addi	r5,gp,-32744
   41df4:	e13fff17 	ldw	r4,-4(fp)
   41df8:	00423600 	call	42360 <alt_dev_llist_insert>
}
   41dfc:	e037883a 	mov	sp,fp
   41e00:	dfc00117 	ldw	ra,4(sp)
   41e04:	df000017 	ldw	fp,0(sp)
   41e08:	dec00204 	addi	sp,sp,8
   41e0c:	f800283a 	ret

00041e10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   41e10:	defffd04 	addi	sp,sp,-12
   41e14:	dfc00215 	stw	ra,8(sp)
   41e18:	df000115 	stw	fp,4(sp)
   41e1c:	df000104 	addi	fp,sp,4
   41e20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   41e24:	0042a700 	call	42a70 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   41e28:	00800044 	movi	r2,1
   41e2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   41e30:	0001883a 	nop
   41e34:	e037883a 	mov	sp,fp
   41e38:	dfc00117 	ldw	ra,4(sp)
   41e3c:	df000017 	ldw	fp,0(sp)
   41e40:	dec00204 	addi	sp,sp,8
   41e44:	f800283a 	ret

00041e48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   41e48:	defffe04 	addi	sp,sp,-8
   41e4c:	dfc00115 	stw	ra,4(sp)
   41e50:	df000015 	stw	fp,0(sp)
   41e54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   41e58:	01c0fa04 	movi	r7,1000
   41e5c:	000d883a 	mov	r6,zero
   41e60:	000b883a 	mov	r5,zero
   41e64:	01000234 	movhi	r4,8
   41e68:	21040804 	addi	r4,r4,4128
   41e6c:	00421500 	call	42150 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   41e70:	01000134 	movhi	r4,4
   41e74:	210c4704 	addi	r4,r4,12572
   41e78:	0041ddc0 	call	41ddc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   41e7c:	0001883a 	nop
}
   41e80:	0001883a 	nop
   41e84:	e037883a 	mov	sp,fp
   41e88:	dfc00117 	ldw	ra,4(sp)
   41e8c:	df000017 	ldw	fp,0(sp)
   41e90:	dec00204 	addi	sp,sp,8
   41e94:	f800283a 	ret

00041e98 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   41e98:	defffa04 	addi	sp,sp,-24
   41e9c:	dfc00515 	stw	ra,20(sp)
   41ea0:	df000415 	stw	fp,16(sp)
   41ea4:	df000404 	addi	fp,sp,16
   41ea8:	e13ffd15 	stw	r4,-12(fp)
   41eac:	e17ffe15 	stw	r5,-8(fp)
   41eb0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41eb4:	e0bffd17 	ldw	r2,-12(fp)
   41eb8:	10800017 	ldw	r2,0(r2)
   41ebc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   41ec0:	e0bffc17 	ldw	r2,-16(fp)
   41ec4:	10c00a04 	addi	r3,r2,40
   41ec8:	e0bffd17 	ldw	r2,-12(fp)
   41ecc:	10800217 	ldw	r2,8(r2)
   41ed0:	100f883a 	mov	r7,r2
   41ed4:	e1bfff17 	ldw	r6,-4(fp)
   41ed8:	e17ffe17 	ldw	r5,-8(fp)
   41edc:	1809883a 	mov	r4,r3
   41ee0:	0041f580 	call	41f58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   41ee4:	e037883a 	mov	sp,fp
   41ee8:	dfc00117 	ldw	ra,4(sp)
   41eec:	df000017 	ldw	fp,0(sp)
   41ef0:	dec00204 	addi	sp,sp,8
   41ef4:	f800283a 	ret

00041ef8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   41ef8:	defffa04 	addi	sp,sp,-24
   41efc:	dfc00515 	stw	ra,20(sp)
   41f00:	df000415 	stw	fp,16(sp)
   41f04:	df000404 	addi	fp,sp,16
   41f08:	e13ffd15 	stw	r4,-12(fp)
   41f0c:	e17ffe15 	stw	r5,-8(fp)
   41f10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   41f14:	e0bffd17 	ldw	r2,-12(fp)
   41f18:	10800017 	ldw	r2,0(r2)
   41f1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   41f20:	e0bffc17 	ldw	r2,-16(fp)
   41f24:	10c00a04 	addi	r3,r2,40
   41f28:	e0bffd17 	ldw	r2,-12(fp)
   41f2c:	10800217 	ldw	r2,8(r2)
   41f30:	100f883a 	mov	r7,r2
   41f34:	e1bfff17 	ldw	r6,-4(fp)
   41f38:	e17ffe17 	ldw	r5,-8(fp)
   41f3c:	1809883a 	mov	r4,r3
   41f40:	00420440 	call	42044 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   41f44:	e037883a 	mov	sp,fp
   41f48:	dfc00117 	ldw	ra,4(sp)
   41f4c:	df000017 	ldw	fp,0(sp)
   41f50:	dec00204 	addi	sp,sp,8
   41f54:	f800283a 	ret

00041f58 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   41f58:	defff704 	addi	sp,sp,-36
   41f5c:	df000815 	stw	fp,32(sp)
   41f60:	df000804 	addi	fp,sp,32
   41f64:	e13ffc15 	stw	r4,-16(fp)
   41f68:	e17ffd15 	stw	r5,-12(fp)
   41f6c:	e1bffe15 	stw	r6,-8(fp)
   41f70:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   41f74:	e0bffc17 	ldw	r2,-16(fp)
   41f78:	10800017 	ldw	r2,0(r2)
   41f7c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   41f80:	e0bffd17 	ldw	r2,-12(fp)
   41f84:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   41f88:	e0bffe17 	ldw	r2,-8(fp)
   41f8c:	e0fffd17 	ldw	r3,-12(fp)
   41f90:	1885883a 	add	r2,r3,r2
   41f94:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   41f98:	00001206 	br	41fe4 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   41f9c:	e0bff917 	ldw	r2,-28(fp)
   41fa0:	10800037 	ldwio	r2,0(r2)
   41fa4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   41fa8:	e0bffb17 	ldw	r2,-20(fp)
   41fac:	10a0000c 	andi	r2,r2,32768
   41fb0:	10000626 	beq	r2,zero,41fcc <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   41fb4:	e0bff817 	ldw	r2,-32(fp)
   41fb8:	10c00044 	addi	r3,r2,1
   41fbc:	e0fff815 	stw	r3,-32(fp)
   41fc0:	e0fffb17 	ldw	r3,-20(fp)
   41fc4:	10c00005 	stb	r3,0(r2)
   41fc8:	00000606 	br	41fe4 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   41fcc:	e0fff817 	ldw	r3,-32(fp)
   41fd0:	e0bffd17 	ldw	r2,-12(fp)
   41fd4:	1880071e 	bne	r3,r2,41ff4 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   41fd8:	e0bfff17 	ldw	r2,-4(fp)
   41fdc:	1090000c 	andi	r2,r2,16384
   41fe0:	1000061e 	bne	r2,zero,41ffc <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   41fe4:	e0fff817 	ldw	r3,-32(fp)
   41fe8:	e0bffa17 	ldw	r2,-24(fp)
   41fec:	18bfeb36 	bltu	r3,r2,41f9c <__alt_data_end+0xfffd9f9c>
   41ff0:	00000306 	br	42000 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   41ff4:	0001883a 	nop
   41ff8:	00000106 	br	42000 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   41ffc:	0001883a 	nop
    
  }

  if (ptr != buffer)
   42000:	e0fff817 	ldw	r3,-32(fp)
   42004:	e0bffd17 	ldw	r2,-12(fp)
   42008:	18800426 	beq	r3,r2,4201c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   4200c:	e0fff817 	ldw	r3,-32(fp)
   42010:	e0bffd17 	ldw	r2,-12(fp)
   42014:	1885c83a 	sub	r2,r3,r2
   42018:	00000606 	br	42034 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   4201c:	e0bfff17 	ldw	r2,-4(fp)
   42020:	1090000c 	andi	r2,r2,16384
   42024:	10000226 	beq	r2,zero,42030 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   42028:	00bffd44 	movi	r2,-11
   4202c:	00000106 	br	42034 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   42030:	00bffec4 	movi	r2,-5
}
   42034:	e037883a 	mov	sp,fp
   42038:	df000017 	ldw	fp,0(sp)
   4203c:	dec00104 	addi	sp,sp,4
   42040:	f800283a 	ret

00042044 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   42044:	defff904 	addi	sp,sp,-28
   42048:	df000615 	stw	fp,24(sp)
   4204c:	df000604 	addi	fp,sp,24
   42050:	e13ffc15 	stw	r4,-16(fp)
   42054:	e17ffd15 	stw	r5,-12(fp)
   42058:	e1bffe15 	stw	r6,-8(fp)
   4205c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   42060:	e0bffc17 	ldw	r2,-16(fp)
   42064:	10800017 	ldw	r2,0(r2)
   42068:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   4206c:	e0bffe17 	ldw	r2,-8(fp)
   42070:	e0fffd17 	ldw	r3,-12(fp)
   42074:	1885883a 	add	r2,r3,r2
   42078:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   4207c:	00000e06 	br	420b8 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   42080:	e0bffa17 	ldw	r2,-24(fp)
   42084:	10800104 	addi	r2,r2,4
   42088:	10800037 	ldwio	r2,0(r2)
   4208c:	10bfffec 	andhi	r2,r2,65535
   42090:	10000926 	beq	r2,zero,420b8 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   42094:	e0fffa17 	ldw	r3,-24(fp)
   42098:	e0bffd17 	ldw	r2,-12(fp)
   4209c:	11000044 	addi	r4,r2,1
   420a0:	e13ffd15 	stw	r4,-12(fp)
   420a4:	10800003 	ldbu	r2,0(r2)
   420a8:	10803fcc 	andi	r2,r2,255
   420ac:	1080201c 	xori	r2,r2,128
   420b0:	10bfe004 	addi	r2,r2,-128
   420b4:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   420b8:	e0fffd17 	ldw	r3,-12(fp)
   420bc:	e0bffb17 	ldw	r2,-20(fp)
   420c0:	18bfef36 	bltu	r3,r2,42080 <__alt_data_end+0xfffda080>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   420c4:	e0bffe17 	ldw	r2,-8(fp)
}
   420c8:	e037883a 	mov	sp,fp
   420cc:	df000017 	ldw	fp,0(sp)
   420d0:	dec00104 	addi	sp,sp,4
   420d4:	f800283a 	ret

000420d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   420d8:	defffa04 	addi	sp,sp,-24
   420dc:	dfc00515 	stw	ra,20(sp)
   420e0:	df000415 	stw	fp,16(sp)
   420e4:	df000404 	addi	fp,sp,16
   420e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   420ec:	0007883a 	mov	r3,zero
   420f0:	e0bfff17 	ldw	r2,-4(fp)
   420f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   420f8:	e0bfff17 	ldw	r2,-4(fp)
   420fc:	10800104 	addi	r2,r2,4
   42100:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42104:	0005303a 	rdctl	r2,status
   42108:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4210c:	e0fffd17 	ldw	r3,-12(fp)
   42110:	00bfff84 	movi	r2,-2
   42114:	1884703a 	and	r2,r3,r2
   42118:	1001703a 	wrctl	status,r2
  
  return context;
   4211c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   42120:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   42124:	00429680 	call	42968 <alt_tick>
   42128:	e0bffc17 	ldw	r2,-16(fp)
   4212c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42130:	e0bffe17 	ldw	r2,-8(fp)
   42134:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   42138:	0001883a 	nop
   4213c:	e037883a 	mov	sp,fp
   42140:	dfc00117 	ldw	ra,4(sp)
   42144:	df000017 	ldw	fp,0(sp)
   42148:	dec00204 	addi	sp,sp,8
   4214c:	f800283a 	ret

00042150 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   42150:	defff804 	addi	sp,sp,-32
   42154:	dfc00715 	stw	ra,28(sp)
   42158:	df000615 	stw	fp,24(sp)
   4215c:	df000604 	addi	fp,sp,24
   42160:	e13ffc15 	stw	r4,-16(fp)
   42164:	e17ffd15 	stw	r5,-12(fp)
   42168:	e1bffe15 	stw	r6,-8(fp)
   4216c:	e1ffff15 	stw	r7,-4(fp)
   42170:	e0bfff17 	ldw	r2,-4(fp)
   42174:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   42178:	d0a0d117 	ldw	r2,-31932(gp)
   4217c:	1000021e 	bne	r2,zero,42188 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   42180:	e0bffb17 	ldw	r2,-20(fp)
   42184:	d0a0d115 	stw	r2,-31932(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   42188:	e0bffc17 	ldw	r2,-16(fp)
   4218c:	10800104 	addi	r2,r2,4
   42190:	00c001c4 	movi	r3,7
   42194:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   42198:	d8000015 	stw	zero,0(sp)
   4219c:	e1fffc17 	ldw	r7,-16(fp)
   421a0:	01800134 	movhi	r6,4
   421a4:	31883604 	addi	r6,r6,8408
   421a8:	e17ffe17 	ldw	r5,-8(fp)
   421ac:	e13ffd17 	ldw	r4,-12(fp)
   421b0:	00418b00 	call	418b0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   421b4:	0001883a 	nop
   421b8:	e037883a 	mov	sp,fp
   421bc:	dfc00117 	ldw	ra,4(sp)
   421c0:	df000017 	ldw	fp,0(sp)
   421c4:	dec00204 	addi	sp,sp,8
   421c8:	f800283a 	ret

000421cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   421cc:	defffe04 	addi	sp,sp,-8
   421d0:	dfc00115 	stw	ra,4(sp)
   421d4:	df000015 	stw	fp,0(sp)
   421d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   421dc:	d0a00917 	ldw	r2,-32732(gp)
   421e0:	10000326 	beq	r2,zero,421f0 <alt_get_errno+0x24>
   421e4:	d0a00917 	ldw	r2,-32732(gp)
   421e8:	103ee83a 	callr	r2
   421ec:	00000106 	br	421f4 <alt_get_errno+0x28>
   421f0:	d0a0cb04 	addi	r2,gp,-31956
}
   421f4:	e037883a 	mov	sp,fp
   421f8:	dfc00117 	ldw	ra,4(sp)
   421fc:	df000017 	ldw	fp,0(sp)
   42200:	dec00204 	addi	sp,sp,8
   42204:	f800283a 	ret

00042208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42208:	defffb04 	addi	sp,sp,-20
   4220c:	dfc00415 	stw	ra,16(sp)
   42210:	df000315 	stw	fp,12(sp)
   42214:	df000304 	addi	fp,sp,12
   42218:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4221c:	e0bfff17 	ldw	r2,-4(fp)
   42220:	10000616 	blt	r2,zero,4223c <close+0x34>
   42224:	e0bfff17 	ldw	r2,-4(fp)
   42228:	10c00324 	muli	r3,r2,12
   4222c:	00800134 	movhi	r2,4
   42230:	108c5c04 	addi	r2,r2,12656
   42234:	1885883a 	add	r2,r3,r2
   42238:	00000106 	br	42240 <close+0x38>
   4223c:	0005883a 	mov	r2,zero
   42240:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42244:	e0bffd17 	ldw	r2,-12(fp)
   42248:	10001926 	beq	r2,zero,422b0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4224c:	e0bffd17 	ldw	r2,-12(fp)
   42250:	10800017 	ldw	r2,0(r2)
   42254:	10800417 	ldw	r2,16(r2)
   42258:	10000626 	beq	r2,zero,42274 <close+0x6c>
   4225c:	e0bffd17 	ldw	r2,-12(fp)
   42260:	10800017 	ldw	r2,0(r2)
   42264:	10800417 	ldw	r2,16(r2)
   42268:	e13ffd17 	ldw	r4,-12(fp)
   4226c:	103ee83a 	callr	r2
   42270:	00000106 	br	42278 <close+0x70>
   42274:	0005883a 	mov	r2,zero
   42278:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4227c:	e13fff17 	ldw	r4,-4(fp)
   42280:	00428680 	call	42868 <alt_release_fd>
    if (rval < 0)
   42284:	e0bffe17 	ldw	r2,-8(fp)
   42288:	1000070e 	bge	r2,zero,422a8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   4228c:	00421cc0 	call	421cc <alt_get_errno>
   42290:	1007883a 	mov	r3,r2
   42294:	e0bffe17 	ldw	r2,-8(fp)
   42298:	0085c83a 	sub	r2,zero,r2
   4229c:	18800015 	stw	r2,0(r3)
      return -1;
   422a0:	00bfffc4 	movi	r2,-1
   422a4:	00000706 	br	422c4 <close+0xbc>
    }
    return 0;
   422a8:	0005883a 	mov	r2,zero
   422ac:	00000506 	br	422c4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   422b0:	00421cc0 	call	421cc <alt_get_errno>
   422b4:	1007883a 	mov	r3,r2
   422b8:	00801444 	movi	r2,81
   422bc:	18800015 	stw	r2,0(r3)
    return -1;
   422c0:	00bfffc4 	movi	r2,-1
  }
}
   422c4:	e037883a 	mov	sp,fp
   422c8:	dfc00117 	ldw	ra,4(sp)
   422cc:	df000017 	ldw	fp,0(sp)
   422d0:	dec00204 	addi	sp,sp,8
   422d4:	f800283a 	ret

000422d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   422d8:	deffff04 	addi	sp,sp,-4
   422dc:	df000015 	stw	fp,0(sp)
   422e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   422e4:	0001883a 	nop
   422e8:	e037883a 	mov	sp,fp
   422ec:	df000017 	ldw	fp,0(sp)
   422f0:	dec00104 	addi	sp,sp,4
   422f4:	f800283a 	ret

000422f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   422f8:	defffc04 	addi	sp,sp,-16
   422fc:	df000315 	stw	fp,12(sp)
   42300:	df000304 	addi	fp,sp,12
   42304:	e13ffd15 	stw	r4,-12(fp)
   42308:	e17ffe15 	stw	r5,-8(fp)
   4230c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   42310:	e0bfff17 	ldw	r2,-4(fp)
}
   42314:	e037883a 	mov	sp,fp
   42318:	df000017 	ldw	fp,0(sp)
   4231c:	dec00104 	addi	sp,sp,4
   42320:	f800283a 	ret

00042324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42324:	defffe04 	addi	sp,sp,-8
   42328:	dfc00115 	stw	ra,4(sp)
   4232c:	df000015 	stw	fp,0(sp)
   42330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42334:	d0a00917 	ldw	r2,-32732(gp)
   42338:	10000326 	beq	r2,zero,42348 <alt_get_errno+0x24>
   4233c:	d0a00917 	ldw	r2,-32732(gp)
   42340:	103ee83a 	callr	r2
   42344:	00000106 	br	4234c <alt_get_errno+0x28>
   42348:	d0a0cb04 	addi	r2,gp,-31956
}
   4234c:	e037883a 	mov	sp,fp
   42350:	dfc00117 	ldw	ra,4(sp)
   42354:	df000017 	ldw	fp,0(sp)
   42358:	dec00204 	addi	sp,sp,8
   4235c:	f800283a 	ret

00042360 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   42360:	defffa04 	addi	sp,sp,-24
   42364:	dfc00515 	stw	ra,20(sp)
   42368:	df000415 	stw	fp,16(sp)
   4236c:	df000404 	addi	fp,sp,16
   42370:	e13ffe15 	stw	r4,-8(fp)
   42374:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   42378:	e0bffe17 	ldw	r2,-8(fp)
   4237c:	10000326 	beq	r2,zero,4238c <alt_dev_llist_insert+0x2c>
   42380:	e0bffe17 	ldw	r2,-8(fp)
   42384:	10800217 	ldw	r2,8(r2)
   42388:	1000061e 	bne	r2,zero,423a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4238c:	00423240 	call	42324 <alt_get_errno>
   42390:	1007883a 	mov	r3,r2
   42394:	00800584 	movi	r2,22
   42398:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4239c:	00bffa84 	movi	r2,-22
   423a0:	00001306 	br	423f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   423a4:	e0bffe17 	ldw	r2,-8(fp)
   423a8:	e0ffff17 	ldw	r3,-4(fp)
   423ac:	e0fffc15 	stw	r3,-16(fp)
   423b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   423b4:	e0bffd17 	ldw	r2,-12(fp)
   423b8:	e0fffc17 	ldw	r3,-16(fp)
   423bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   423c0:	e0bffc17 	ldw	r2,-16(fp)
   423c4:	10c00017 	ldw	r3,0(r2)
   423c8:	e0bffd17 	ldw	r2,-12(fp)
   423cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   423d0:	e0bffc17 	ldw	r2,-16(fp)
   423d4:	10800017 	ldw	r2,0(r2)
   423d8:	e0fffd17 	ldw	r3,-12(fp)
   423dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   423e0:	e0bffc17 	ldw	r2,-16(fp)
   423e4:	e0fffd17 	ldw	r3,-12(fp)
   423e8:	10c00015 	stw	r3,0(r2)

  return 0;  
   423ec:	0005883a 	mov	r2,zero
}
   423f0:	e037883a 	mov	sp,fp
   423f4:	dfc00117 	ldw	ra,4(sp)
   423f8:	df000017 	ldw	fp,0(sp)
   423fc:	dec00204 	addi	sp,sp,8
   42400:	f800283a 	ret

00042404 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   42404:	defffe04 	addi	sp,sp,-8
   42408:	dfc00115 	stw	ra,4(sp)
   4240c:	df000015 	stw	fp,0(sp)
   42410:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   42414:	01420004 	movi	r5,2048
   42418:	0009883a 	mov	r4,zero
   4241c:	0042cd00 	call	42cd0 <alt_icache_flush>
#endif
}
   42420:	0001883a 	nop
   42424:	e037883a 	mov	sp,fp
   42428:	dfc00117 	ldw	ra,4(sp)
   4242c:	df000017 	ldw	fp,0(sp)
   42430:	dec00204 	addi	sp,sp,8
   42434:	f800283a 	ret

00042438 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   42438:	defffe04 	addi	sp,sp,-8
   4243c:	df000115 	stw	fp,4(sp)
   42440:	df000104 	addi	fp,sp,4
   42444:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   42448:	e0bfff17 	ldw	r2,-4(fp)
   4244c:	10bffe84 	addi	r2,r2,-6
   42450:	10c00428 	cmpgeui	r3,r2,16
   42454:	18001a1e 	bne	r3,zero,424c0 <alt_exception_cause_generated_bad_addr+0x88>
   42458:	100690ba 	slli	r3,r2,2
   4245c:	00800134 	movhi	r2,4
   42460:	10891c04 	addi	r2,r2,9328
   42464:	1885883a 	add	r2,r3,r2
   42468:	10800017 	ldw	r2,0(r2)
   4246c:	1000683a 	jmp	r2
   42470:	000424b0 	cmpltui	zero,zero,4242
   42474:	000424b0 	cmpltui	zero,zero,4242
   42478:	000424c0 	call	424c <__reset-0x3bdb4>
   4247c:	000424c0 	call	424c <__reset-0x3bdb4>
   42480:	000424c0 	call	424c <__reset-0x3bdb4>
   42484:	000424b0 	cmpltui	zero,zero,4242
   42488:	000424b8 	rdprs	zero,zero,4242
   4248c:	000424c0 	call	424c <__reset-0x3bdb4>
   42490:	000424b0 	cmpltui	zero,zero,4242
   42494:	000424b0 	cmpltui	zero,zero,4242
   42498:	000424c0 	call	424c <__reset-0x3bdb4>
   4249c:	000424b0 	cmpltui	zero,zero,4242
   424a0:	000424b8 	rdprs	zero,zero,4242
   424a4:	000424c0 	call	424c <__reset-0x3bdb4>
   424a8:	000424c0 	call	424c <__reset-0x3bdb4>
   424ac:	000424b0 	cmpltui	zero,zero,4242
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   424b0:	00800044 	movi	r2,1
   424b4:	00000306 	br	424c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   424b8:	0005883a 	mov	r2,zero
   424bc:	00000106 	br	424c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   424c0:	0005883a 	mov	r2,zero
  }
}
   424c4:	e037883a 	mov	sp,fp
   424c8:	df000017 	ldw	fp,0(sp)
   424cc:	dec00104 	addi	sp,sp,4
   424d0:	f800283a 	ret

000424d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   424d4:	defff904 	addi	sp,sp,-28
   424d8:	dfc00615 	stw	ra,24(sp)
   424dc:	df000515 	stw	fp,20(sp)
   424e0:	df000504 	addi	fp,sp,20
   424e4:	e13ffc15 	stw	r4,-16(fp)
   424e8:	e17ffd15 	stw	r5,-12(fp)
   424ec:	e1bffe15 	stw	r6,-8(fp)
   424f0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   424f4:	e1bfff17 	ldw	r6,-4(fp)
   424f8:	e17ffe17 	ldw	r5,-8(fp)
   424fc:	e13ffd17 	ldw	r4,-12(fp)
   42500:	00427140 	call	42714 <open>
   42504:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   42508:	e0bffb17 	ldw	r2,-20(fp)
   4250c:	10001c16 	blt	r2,zero,42580 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   42510:	00800134 	movhi	r2,4
   42514:	108c5c04 	addi	r2,r2,12656
   42518:	e0fffb17 	ldw	r3,-20(fp)
   4251c:	18c00324 	muli	r3,r3,12
   42520:	10c5883a 	add	r2,r2,r3
   42524:	10c00017 	ldw	r3,0(r2)
   42528:	e0bffc17 	ldw	r2,-16(fp)
   4252c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42530:	00800134 	movhi	r2,4
   42534:	108c5c04 	addi	r2,r2,12656
   42538:	e0fffb17 	ldw	r3,-20(fp)
   4253c:	18c00324 	muli	r3,r3,12
   42540:	10c5883a 	add	r2,r2,r3
   42544:	10800104 	addi	r2,r2,4
   42548:	10c00017 	ldw	r3,0(r2)
   4254c:	e0bffc17 	ldw	r2,-16(fp)
   42550:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   42554:	00800134 	movhi	r2,4
   42558:	108c5c04 	addi	r2,r2,12656
   4255c:	e0fffb17 	ldw	r3,-20(fp)
   42560:	18c00324 	muli	r3,r3,12
   42564:	10c5883a 	add	r2,r2,r3
   42568:	10800204 	addi	r2,r2,8
   4256c:	10c00017 	ldw	r3,0(r2)
   42570:	e0bffc17 	ldw	r2,-16(fp)
   42574:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   42578:	e13ffb17 	ldw	r4,-20(fp)
   4257c:	00428680 	call	42868 <alt_release_fd>
  }
} 
   42580:	0001883a 	nop
   42584:	e037883a 	mov	sp,fp
   42588:	dfc00117 	ldw	ra,4(sp)
   4258c:	df000017 	ldw	fp,0(sp)
   42590:	dec00204 	addi	sp,sp,8
   42594:	f800283a 	ret

00042598 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   42598:	defffb04 	addi	sp,sp,-20
   4259c:	dfc00415 	stw	ra,16(sp)
   425a0:	df000315 	stw	fp,12(sp)
   425a4:	df000304 	addi	fp,sp,12
   425a8:	e13ffd15 	stw	r4,-12(fp)
   425ac:	e17ffe15 	stw	r5,-8(fp)
   425b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   425b4:	01c07fc4 	movi	r7,511
   425b8:	01800044 	movi	r6,1
   425bc:	e17ffd17 	ldw	r5,-12(fp)
   425c0:	01000134 	movhi	r4,4
   425c4:	210c5f04 	addi	r4,r4,12668
   425c8:	00424d40 	call	424d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   425cc:	01c07fc4 	movi	r7,511
   425d0:	000d883a 	mov	r6,zero
   425d4:	e17ffe17 	ldw	r5,-8(fp)
   425d8:	01000134 	movhi	r4,4
   425dc:	210c5c04 	addi	r4,r4,12656
   425e0:	00424d40 	call	424d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   425e4:	01c07fc4 	movi	r7,511
   425e8:	01800044 	movi	r6,1
   425ec:	e17fff17 	ldw	r5,-4(fp)
   425f0:	01000134 	movhi	r4,4
   425f4:	210c6204 	addi	r4,r4,12680
   425f8:	00424d40 	call	424d4 <alt_open_fd>
}  
   425fc:	0001883a 	nop
   42600:	e037883a 	mov	sp,fp
   42604:	dfc00117 	ldw	ra,4(sp)
   42608:	df000017 	ldw	fp,0(sp)
   4260c:	dec00204 	addi	sp,sp,8
   42610:	f800283a 	ret

00042614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42614:	defffe04 	addi	sp,sp,-8
   42618:	dfc00115 	stw	ra,4(sp)
   4261c:	df000015 	stw	fp,0(sp)
   42620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42624:	d0a00917 	ldw	r2,-32732(gp)
   42628:	10000326 	beq	r2,zero,42638 <alt_get_errno+0x24>
   4262c:	d0a00917 	ldw	r2,-32732(gp)
   42630:	103ee83a 	callr	r2
   42634:	00000106 	br	4263c <alt_get_errno+0x28>
   42638:	d0a0cb04 	addi	r2,gp,-31956
}
   4263c:	e037883a 	mov	sp,fp
   42640:	dfc00117 	ldw	ra,4(sp)
   42644:	df000017 	ldw	fp,0(sp)
   42648:	dec00204 	addi	sp,sp,8
   4264c:	f800283a 	ret

00042650 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   42650:	defffd04 	addi	sp,sp,-12
   42654:	df000215 	stw	fp,8(sp)
   42658:	df000204 	addi	fp,sp,8
   4265c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   42660:	e0bfff17 	ldw	r2,-4(fp)
   42664:	10800217 	ldw	r2,8(r2)
   42668:	10d00034 	orhi	r3,r2,16384
   4266c:	e0bfff17 	ldw	r2,-4(fp)
   42670:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42674:	e03ffe15 	stw	zero,-8(fp)
   42678:	00001d06 	br	426f0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4267c:	00800134 	movhi	r2,4
   42680:	108c5c04 	addi	r2,r2,12656
   42684:	e0fffe17 	ldw	r3,-8(fp)
   42688:	18c00324 	muli	r3,r3,12
   4268c:	10c5883a 	add	r2,r2,r3
   42690:	10c00017 	ldw	r3,0(r2)
   42694:	e0bfff17 	ldw	r2,-4(fp)
   42698:	10800017 	ldw	r2,0(r2)
   4269c:	1880111e 	bne	r3,r2,426e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   426a0:	00800134 	movhi	r2,4
   426a4:	108c5c04 	addi	r2,r2,12656
   426a8:	e0fffe17 	ldw	r3,-8(fp)
   426ac:	18c00324 	muli	r3,r3,12
   426b0:	10c5883a 	add	r2,r2,r3
   426b4:	10800204 	addi	r2,r2,8
   426b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   426bc:	1000090e 	bge	r2,zero,426e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   426c0:	e0bffe17 	ldw	r2,-8(fp)
   426c4:	10c00324 	muli	r3,r2,12
   426c8:	00800134 	movhi	r2,4
   426cc:	108c5c04 	addi	r2,r2,12656
   426d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   426d4:	e0bfff17 	ldw	r2,-4(fp)
   426d8:	18800226 	beq	r3,r2,426e4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   426dc:	00bffcc4 	movi	r2,-13
   426e0:	00000806 	br	42704 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   426e4:	e0bffe17 	ldw	r2,-8(fp)
   426e8:	10800044 	addi	r2,r2,1
   426ec:	e0bffe15 	stw	r2,-8(fp)
   426f0:	d0a00817 	ldw	r2,-32736(gp)
   426f4:	1007883a 	mov	r3,r2
   426f8:	e0bffe17 	ldw	r2,-8(fp)
   426fc:	18bfdf2e 	bgeu	r3,r2,4267c <__alt_data_end+0xfffda67c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   42700:	0005883a 	mov	r2,zero
}
   42704:	e037883a 	mov	sp,fp
   42708:	df000017 	ldw	fp,0(sp)
   4270c:	dec00104 	addi	sp,sp,4
   42710:	f800283a 	ret

00042714 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   42714:	defff604 	addi	sp,sp,-40
   42718:	dfc00915 	stw	ra,36(sp)
   4271c:	df000815 	stw	fp,32(sp)
   42720:	df000804 	addi	fp,sp,32
   42724:	e13ffd15 	stw	r4,-12(fp)
   42728:	e17ffe15 	stw	r5,-8(fp)
   4272c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   42730:	00bfffc4 	movi	r2,-1
   42734:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   42738:	00bffb44 	movi	r2,-19
   4273c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   42740:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   42744:	d1600604 	addi	r5,gp,-32744
   42748:	e13ffd17 	ldw	r4,-12(fp)
   4274c:	0042a940 	call	42a94 <alt_find_dev>
   42750:	e0bff815 	stw	r2,-32(fp)
   42754:	e0bff817 	ldw	r2,-32(fp)
   42758:	1000051e 	bne	r2,zero,42770 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4275c:	e13ffd17 	ldw	r4,-12(fp)
   42760:	0042b240 	call	42b24 <alt_find_file>
   42764:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   42768:	00800044 	movi	r2,1
   4276c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   42770:	e0bff817 	ldw	r2,-32(fp)
   42774:	10002926 	beq	r2,zero,4281c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   42778:	e13ff817 	ldw	r4,-32(fp)
   4277c:	0042c2c0 	call	42c2c <alt_get_fd>
   42780:	e0bff915 	stw	r2,-28(fp)
   42784:	e0bff917 	ldw	r2,-28(fp)
   42788:	1000030e 	bge	r2,zero,42798 <open+0x84>
    {
      status = index;
   4278c:	e0bff917 	ldw	r2,-28(fp)
   42790:	e0bffa15 	stw	r2,-24(fp)
   42794:	00002306 	br	42824 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   42798:	e0bff917 	ldw	r2,-28(fp)
   4279c:	10c00324 	muli	r3,r2,12
   427a0:	00800134 	movhi	r2,4
   427a4:	108c5c04 	addi	r2,r2,12656
   427a8:	1885883a 	add	r2,r3,r2
   427ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   427b0:	e0fffe17 	ldw	r3,-8(fp)
   427b4:	00900034 	movhi	r2,16384
   427b8:	10bfffc4 	addi	r2,r2,-1
   427bc:	1886703a 	and	r3,r3,r2
   427c0:	e0bffc17 	ldw	r2,-16(fp)
   427c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   427c8:	e0bffb17 	ldw	r2,-20(fp)
   427cc:	1000051e 	bne	r2,zero,427e4 <open+0xd0>
   427d0:	e13ffc17 	ldw	r4,-16(fp)
   427d4:	00426500 	call	42650 <alt_file_locked>
   427d8:	e0bffa15 	stw	r2,-24(fp)
   427dc:	e0bffa17 	ldw	r2,-24(fp)
   427e0:	10001016 	blt	r2,zero,42824 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   427e4:	e0bff817 	ldw	r2,-32(fp)
   427e8:	10800317 	ldw	r2,12(r2)
   427ec:	10000826 	beq	r2,zero,42810 <open+0xfc>
   427f0:	e0bff817 	ldw	r2,-32(fp)
   427f4:	10800317 	ldw	r2,12(r2)
   427f8:	e1ffff17 	ldw	r7,-4(fp)
   427fc:	e1bffe17 	ldw	r6,-8(fp)
   42800:	e17ffd17 	ldw	r5,-12(fp)
   42804:	e13ffc17 	ldw	r4,-16(fp)
   42808:	103ee83a 	callr	r2
   4280c:	00000106 	br	42814 <open+0x100>
   42810:	0005883a 	mov	r2,zero
   42814:	e0bffa15 	stw	r2,-24(fp)
   42818:	00000206 	br	42824 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4281c:	00bffb44 	movi	r2,-19
   42820:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   42824:	e0bffa17 	ldw	r2,-24(fp)
   42828:	1000090e 	bge	r2,zero,42850 <open+0x13c>
  {
    alt_release_fd (index);  
   4282c:	e13ff917 	ldw	r4,-28(fp)
   42830:	00428680 	call	42868 <alt_release_fd>
    ALT_ERRNO = -status;
   42834:	00426140 	call	42614 <alt_get_errno>
   42838:	1007883a 	mov	r3,r2
   4283c:	e0bffa17 	ldw	r2,-24(fp)
   42840:	0085c83a 	sub	r2,zero,r2
   42844:	18800015 	stw	r2,0(r3)
    return -1;
   42848:	00bfffc4 	movi	r2,-1
   4284c:	00000106 	br	42854 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   42850:	e0bff917 	ldw	r2,-28(fp)
}
   42854:	e037883a 	mov	sp,fp
   42858:	dfc00117 	ldw	ra,4(sp)
   4285c:	df000017 	ldw	fp,0(sp)
   42860:	dec00204 	addi	sp,sp,8
   42864:	f800283a 	ret

00042868 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   42868:	defffe04 	addi	sp,sp,-8
   4286c:	df000115 	stw	fp,4(sp)
   42870:	df000104 	addi	fp,sp,4
   42874:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   42878:	e0bfff17 	ldw	r2,-4(fp)
   4287c:	108000d0 	cmplti	r2,r2,3
   42880:	10000d1e 	bne	r2,zero,428b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   42884:	00800134 	movhi	r2,4
   42888:	108c5c04 	addi	r2,r2,12656
   4288c:	e0ffff17 	ldw	r3,-4(fp)
   42890:	18c00324 	muli	r3,r3,12
   42894:	10c5883a 	add	r2,r2,r3
   42898:	10800204 	addi	r2,r2,8
   4289c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   428a0:	00800134 	movhi	r2,4
   428a4:	108c5c04 	addi	r2,r2,12656
   428a8:	e0ffff17 	ldw	r3,-4(fp)
   428ac:	18c00324 	muli	r3,r3,12
   428b0:	10c5883a 	add	r2,r2,r3
   428b4:	10000015 	stw	zero,0(r2)
  }
}
   428b8:	0001883a 	nop
   428bc:	e037883a 	mov	sp,fp
   428c0:	df000017 	ldw	fp,0(sp)
   428c4:	dec00104 	addi	sp,sp,4
   428c8:	f800283a 	ret

000428cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   428cc:	defffa04 	addi	sp,sp,-24
   428d0:	df000515 	stw	fp,20(sp)
   428d4:	df000504 	addi	fp,sp,20
   428d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   428dc:	0005303a 	rdctl	r2,status
   428e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   428e4:	e0fffc17 	ldw	r3,-16(fp)
   428e8:	00bfff84 	movi	r2,-2
   428ec:	1884703a 	and	r2,r3,r2
   428f0:	1001703a 	wrctl	status,r2
  
  return context;
   428f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   428f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   428fc:	e0bfff17 	ldw	r2,-4(fp)
   42900:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   42904:	e0bffd17 	ldw	r2,-12(fp)
   42908:	10800017 	ldw	r2,0(r2)
   4290c:	e0fffd17 	ldw	r3,-12(fp)
   42910:	18c00117 	ldw	r3,4(r3)
   42914:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   42918:	e0bffd17 	ldw	r2,-12(fp)
   4291c:	10800117 	ldw	r2,4(r2)
   42920:	e0fffd17 	ldw	r3,-12(fp)
   42924:	18c00017 	ldw	r3,0(r3)
   42928:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4292c:	e0bffd17 	ldw	r2,-12(fp)
   42930:	e0fffd17 	ldw	r3,-12(fp)
   42934:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   42938:	e0bffd17 	ldw	r2,-12(fp)
   4293c:	e0fffd17 	ldw	r3,-12(fp)
   42940:	10c00015 	stw	r3,0(r2)
   42944:	e0bffb17 	ldw	r2,-20(fp)
   42948:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4294c:	e0bffe17 	ldw	r2,-8(fp)
   42950:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   42954:	0001883a 	nop
   42958:	e037883a 	mov	sp,fp
   4295c:	df000017 	ldw	fp,0(sp)
   42960:	dec00104 	addi	sp,sp,4
   42964:	f800283a 	ret

00042968 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   42968:	defffb04 	addi	sp,sp,-20
   4296c:	dfc00415 	stw	ra,16(sp)
   42970:	df000315 	stw	fp,12(sp)
   42974:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   42978:	d0a00a17 	ldw	r2,-32728(gp)
   4297c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   42980:	d0a0d217 	ldw	r2,-31928(gp)
   42984:	10800044 	addi	r2,r2,1
   42988:	d0a0d215 	stw	r2,-31928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4298c:	00002e06 	br	42a48 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   42990:	e0bffd17 	ldw	r2,-12(fp)
   42994:	10800017 	ldw	r2,0(r2)
   42998:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4299c:	e0bffd17 	ldw	r2,-12(fp)
   429a0:	10800403 	ldbu	r2,16(r2)
   429a4:	10803fcc 	andi	r2,r2,255
   429a8:	10000426 	beq	r2,zero,429bc <alt_tick+0x54>
   429ac:	d0a0d217 	ldw	r2,-31928(gp)
   429b0:	1000021e 	bne	r2,zero,429bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   429b4:	e0bffd17 	ldw	r2,-12(fp)
   429b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   429bc:	e0bffd17 	ldw	r2,-12(fp)
   429c0:	10800217 	ldw	r2,8(r2)
   429c4:	d0e0d217 	ldw	r3,-31928(gp)
   429c8:	18801d36 	bltu	r3,r2,42a40 <alt_tick+0xd8>
   429cc:	e0bffd17 	ldw	r2,-12(fp)
   429d0:	10800403 	ldbu	r2,16(r2)
   429d4:	10803fcc 	andi	r2,r2,255
   429d8:	1000191e 	bne	r2,zero,42a40 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   429dc:	e0bffd17 	ldw	r2,-12(fp)
   429e0:	10800317 	ldw	r2,12(r2)
   429e4:	e0fffd17 	ldw	r3,-12(fp)
   429e8:	18c00517 	ldw	r3,20(r3)
   429ec:	1809883a 	mov	r4,r3
   429f0:	103ee83a 	callr	r2
   429f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   429f8:	e0bfff17 	ldw	r2,-4(fp)
   429fc:	1000031e 	bne	r2,zero,42a0c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   42a00:	e13ffd17 	ldw	r4,-12(fp)
   42a04:	00428cc0 	call	428cc <alt_alarm_stop>
   42a08:	00000d06 	br	42a40 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   42a0c:	e0bffd17 	ldw	r2,-12(fp)
   42a10:	10c00217 	ldw	r3,8(r2)
   42a14:	e0bfff17 	ldw	r2,-4(fp)
   42a18:	1887883a 	add	r3,r3,r2
   42a1c:	e0bffd17 	ldw	r2,-12(fp)
   42a20:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   42a24:	e0bffd17 	ldw	r2,-12(fp)
   42a28:	10c00217 	ldw	r3,8(r2)
   42a2c:	d0a0d217 	ldw	r2,-31928(gp)
   42a30:	1880032e 	bgeu	r3,r2,42a40 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   42a34:	e0bffd17 	ldw	r2,-12(fp)
   42a38:	00c00044 	movi	r3,1
   42a3c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   42a40:	e0bffe17 	ldw	r2,-8(fp)
   42a44:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42a48:	e0fffd17 	ldw	r3,-12(fp)
   42a4c:	d0a00a04 	addi	r2,gp,-32728
   42a50:	18bfcf1e 	bne	r3,r2,42990 <__alt_data_end+0xfffda990>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   42a54:	0001883a 	nop
}
   42a58:	0001883a 	nop
   42a5c:	e037883a 	mov	sp,fp
   42a60:	dfc00117 	ldw	ra,4(sp)
   42a64:	df000017 	ldw	fp,0(sp)
   42a68:	dec00204 	addi	sp,sp,8
   42a6c:	f800283a 	ret

00042a70 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   42a70:	deffff04 	addi	sp,sp,-4
   42a74:	df000015 	stw	fp,0(sp)
   42a78:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42a7c:	000170fa 	wrctl	ienable,zero
}
   42a80:	0001883a 	nop
   42a84:	e037883a 	mov	sp,fp
   42a88:	df000017 	ldw	fp,0(sp)
   42a8c:	dec00104 	addi	sp,sp,4
   42a90:	f800283a 	ret

00042a94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   42a94:	defffa04 	addi	sp,sp,-24
   42a98:	dfc00515 	stw	ra,20(sp)
   42a9c:	df000415 	stw	fp,16(sp)
   42aa0:	df000404 	addi	fp,sp,16
   42aa4:	e13ffe15 	stw	r4,-8(fp)
   42aa8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42aac:	e0bfff17 	ldw	r2,-4(fp)
   42ab0:	10800017 	ldw	r2,0(r2)
   42ab4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   42ab8:	e13ffe17 	ldw	r4,-8(fp)
   42abc:	00411d80 	call	411d8 <strlen>
   42ac0:	10800044 	addi	r2,r2,1
   42ac4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42ac8:	00000d06 	br	42b00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   42acc:	e0bffc17 	ldw	r2,-16(fp)
   42ad0:	10800217 	ldw	r2,8(r2)
   42ad4:	e0fffd17 	ldw	r3,-12(fp)
   42ad8:	180d883a 	mov	r6,r3
   42adc:	e17ffe17 	ldw	r5,-8(fp)
   42ae0:	1009883a 	mov	r4,r2
   42ae4:	0042d800 	call	42d80 <memcmp>
   42ae8:	1000021e 	bne	r2,zero,42af4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   42aec:	e0bffc17 	ldw	r2,-16(fp)
   42af0:	00000706 	br	42b10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   42af4:	e0bffc17 	ldw	r2,-16(fp)
   42af8:	10800017 	ldw	r2,0(r2)
   42afc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   42b00:	e0fffc17 	ldw	r3,-16(fp)
   42b04:	e0bfff17 	ldw	r2,-4(fp)
   42b08:	18bff01e 	bne	r3,r2,42acc <__alt_data_end+0xfffdaacc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   42b0c:	0005883a 	mov	r2,zero
}
   42b10:	e037883a 	mov	sp,fp
   42b14:	dfc00117 	ldw	ra,4(sp)
   42b18:	df000017 	ldw	fp,0(sp)
   42b1c:	dec00204 	addi	sp,sp,8
   42b20:	f800283a 	ret

00042b24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   42b24:	defffb04 	addi	sp,sp,-20
   42b28:	dfc00415 	stw	ra,16(sp)
   42b2c:	df000315 	stw	fp,12(sp)
   42b30:	df000304 	addi	fp,sp,12
   42b34:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   42b38:	d0a00417 	ldw	r2,-32752(gp)
   42b3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42b40:	00003106 	br	42c08 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   42b44:	e0bffd17 	ldw	r2,-12(fp)
   42b48:	10800217 	ldw	r2,8(r2)
   42b4c:	1009883a 	mov	r4,r2
   42b50:	00411d80 	call	411d8 <strlen>
   42b54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   42b58:	e0bffd17 	ldw	r2,-12(fp)
   42b5c:	10c00217 	ldw	r3,8(r2)
   42b60:	e0bffe17 	ldw	r2,-8(fp)
   42b64:	10bfffc4 	addi	r2,r2,-1
   42b68:	1885883a 	add	r2,r3,r2
   42b6c:	10800003 	ldbu	r2,0(r2)
   42b70:	10803fcc 	andi	r2,r2,255
   42b74:	1080201c 	xori	r2,r2,128
   42b78:	10bfe004 	addi	r2,r2,-128
   42b7c:	10800bd8 	cmpnei	r2,r2,47
   42b80:	1000031e 	bne	r2,zero,42b90 <alt_find_file+0x6c>
    {
      len -= 1;
   42b84:	e0bffe17 	ldw	r2,-8(fp)
   42b88:	10bfffc4 	addi	r2,r2,-1
   42b8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42b90:	e0bffe17 	ldw	r2,-8(fp)
   42b94:	e0ffff17 	ldw	r3,-4(fp)
   42b98:	1885883a 	add	r2,r3,r2
   42b9c:	10800003 	ldbu	r2,0(r2)
   42ba0:	10803fcc 	andi	r2,r2,255
   42ba4:	1080201c 	xori	r2,r2,128
   42ba8:	10bfe004 	addi	r2,r2,-128
   42bac:	10800be0 	cmpeqi	r2,r2,47
   42bb0:	1000081e 	bne	r2,zero,42bd4 <alt_find_file+0xb0>
   42bb4:	e0bffe17 	ldw	r2,-8(fp)
   42bb8:	e0ffff17 	ldw	r3,-4(fp)
   42bbc:	1885883a 	add	r2,r3,r2
   42bc0:	10800003 	ldbu	r2,0(r2)
   42bc4:	10803fcc 	andi	r2,r2,255
   42bc8:	1080201c 	xori	r2,r2,128
   42bcc:	10bfe004 	addi	r2,r2,-128
   42bd0:	10000a1e 	bne	r2,zero,42bfc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   42bd4:	e0bffd17 	ldw	r2,-12(fp)
   42bd8:	10800217 	ldw	r2,8(r2)
   42bdc:	e0fffe17 	ldw	r3,-8(fp)
   42be0:	180d883a 	mov	r6,r3
   42be4:	e17fff17 	ldw	r5,-4(fp)
   42be8:	1009883a 	mov	r4,r2
   42bec:	0042d800 	call	42d80 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42bf0:	1000021e 	bne	r2,zero,42bfc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   42bf4:	e0bffd17 	ldw	r2,-12(fp)
   42bf8:	00000706 	br	42c18 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   42bfc:	e0bffd17 	ldw	r2,-12(fp)
   42c00:	10800017 	ldw	r2,0(r2)
   42c04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42c08:	e0fffd17 	ldw	r3,-12(fp)
   42c0c:	d0a00404 	addi	r2,gp,-32752
   42c10:	18bfcc1e 	bne	r3,r2,42b44 <__alt_data_end+0xfffdab44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   42c14:	0005883a 	mov	r2,zero
}
   42c18:	e037883a 	mov	sp,fp
   42c1c:	dfc00117 	ldw	ra,4(sp)
   42c20:	df000017 	ldw	fp,0(sp)
   42c24:	dec00204 	addi	sp,sp,8
   42c28:	f800283a 	ret

00042c2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   42c2c:	defffc04 	addi	sp,sp,-16
   42c30:	df000315 	stw	fp,12(sp)
   42c34:	df000304 	addi	fp,sp,12
   42c38:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   42c3c:	00bffa04 	movi	r2,-24
   42c40:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42c44:	e03ffd15 	stw	zero,-12(fp)
   42c48:	00001906 	br	42cb0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   42c4c:	00800134 	movhi	r2,4
   42c50:	108c5c04 	addi	r2,r2,12656
   42c54:	e0fffd17 	ldw	r3,-12(fp)
   42c58:	18c00324 	muli	r3,r3,12
   42c5c:	10c5883a 	add	r2,r2,r3
   42c60:	10800017 	ldw	r2,0(r2)
   42c64:	10000f1e 	bne	r2,zero,42ca4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   42c68:	00800134 	movhi	r2,4
   42c6c:	108c5c04 	addi	r2,r2,12656
   42c70:	e0fffd17 	ldw	r3,-12(fp)
   42c74:	18c00324 	muli	r3,r3,12
   42c78:	10c5883a 	add	r2,r2,r3
   42c7c:	e0ffff17 	ldw	r3,-4(fp)
   42c80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   42c84:	d0e00817 	ldw	r3,-32736(gp)
   42c88:	e0bffd17 	ldw	r2,-12(fp)
   42c8c:	1880020e 	bge	r3,r2,42c98 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   42c90:	e0bffd17 	ldw	r2,-12(fp)
   42c94:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   42c98:	e0bffd17 	ldw	r2,-12(fp)
   42c9c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   42ca0:	00000606 	br	42cbc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42ca4:	e0bffd17 	ldw	r2,-12(fp)
   42ca8:	10800044 	addi	r2,r2,1
   42cac:	e0bffd15 	stw	r2,-12(fp)
   42cb0:	e0bffd17 	ldw	r2,-12(fp)
   42cb4:	10800810 	cmplti	r2,r2,32
   42cb8:	103fe41e 	bne	r2,zero,42c4c <__alt_data_end+0xfffdac4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   42cbc:	e0bffe17 	ldw	r2,-8(fp)
}
   42cc0:	e037883a 	mov	sp,fp
   42cc4:	df000017 	ldw	fp,0(sp)
   42cc8:	dec00104 	addi	sp,sp,4
   42ccc:	f800283a 	ret

00042cd0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   42cd0:	defffb04 	addi	sp,sp,-20
   42cd4:	df000415 	stw	fp,16(sp)
   42cd8:	df000404 	addi	fp,sp,16
   42cdc:	e13ffe15 	stw	r4,-8(fp)
   42ce0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   42ce4:	e0bfff17 	ldw	r2,-4(fp)
   42ce8:	10820070 	cmpltui	r2,r2,2049
   42cec:	1000021e 	bne	r2,zero,42cf8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   42cf0:	00820004 	movi	r2,2048
   42cf4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   42cf8:	e0fffe17 	ldw	r3,-8(fp)
   42cfc:	e0bfff17 	ldw	r2,-4(fp)
   42d00:	1885883a 	add	r2,r3,r2
   42d04:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42d08:	e0bffe17 	ldw	r2,-8(fp)
   42d0c:	e0bffc15 	stw	r2,-16(fp)
   42d10:	00000506 	br	42d28 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   42d14:	e0bffc17 	ldw	r2,-16(fp)
   42d18:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42d1c:	e0bffc17 	ldw	r2,-16(fp)
   42d20:	10800804 	addi	r2,r2,32
   42d24:	e0bffc15 	stw	r2,-16(fp)
   42d28:	e0fffc17 	ldw	r3,-16(fp)
   42d2c:	e0bffd17 	ldw	r2,-12(fp)
   42d30:	18bff836 	bltu	r3,r2,42d14 <__alt_data_end+0xfffdad14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   42d34:	e0bffe17 	ldw	r2,-8(fp)
   42d38:	108007cc 	andi	r2,r2,31
   42d3c:	10000226 	beq	r2,zero,42d48 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   42d40:	e0bffc17 	ldw	r2,-16(fp)
   42d44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   42d48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   42d4c:	0001883a 	nop
   42d50:	e037883a 	mov	sp,fp
   42d54:	df000017 	ldw	fp,0(sp)
   42d58:	dec00104 	addi	sp,sp,4
   42d5c:	f800283a 	ret

00042d60 <exit>:
   42d60:	defffe04 	addi	sp,sp,-8
   42d64:	000b883a 	mov	r5,zero
   42d68:	dc000015 	stw	r16,0(sp)
   42d6c:	dfc00115 	stw	ra,4(sp)
   42d70:	2021883a 	mov	r16,r4
   42d74:	0042db00 	call	42db0 <__call_exitprocs>
   42d78:	8009883a 	mov	r4,r16
   42d7c:	0042f400 	call	42f40 <_exit>

00042d80 <memcmp>:
   42d80:	218d883a 	add	r6,r4,r6
   42d84:	21800826 	beq	r4,r6,42da8 <memcmp+0x28>
   42d88:	20800003 	ldbu	r2,0(r4)
   42d8c:	28c00003 	ldbu	r3,0(r5)
   42d90:	10c00226 	beq	r2,r3,42d9c <memcmp+0x1c>
   42d94:	10c5c83a 	sub	r2,r2,r3
   42d98:	f800283a 	ret
   42d9c:	21000044 	addi	r4,r4,1
   42da0:	29400044 	addi	r5,r5,1
   42da4:	003ff706 	br	42d84 <__alt_data_end+0xfffdad84>
   42da8:	0005883a 	mov	r2,zero
   42dac:	f800283a 	ret

00042db0 <__call_exitprocs>:
   42db0:	defff504 	addi	sp,sp,-44
   42db4:	dd000515 	stw	r20,20(sp)
   42db8:	05000134 	movhi	r20,4
   42dbc:	dc800315 	stw	r18,12(sp)
   42dc0:	dfc00a15 	stw	ra,40(sp)
   42dc4:	df000915 	stw	fp,36(sp)
   42dc8:	ddc00815 	stw	r23,32(sp)
   42dcc:	dd800715 	stw	r22,28(sp)
   42dd0:	dd400615 	stw	r21,24(sp)
   42dd4:	dcc00415 	stw	r19,16(sp)
   42dd8:	dc400215 	stw	r17,8(sp)
   42ddc:	dc000115 	stw	r16,4(sp)
   42de0:	d9000015 	stw	r4,0(sp)
   42de4:	2825883a 	mov	r18,r5
   42de8:	a50cbd04 	addi	r20,r20,13044
   42dec:	a4400017 	ldw	r17,0(r20)
   42df0:	8cc00c17 	ldw	r19,48(r17)
   42df4:	8c400c04 	addi	r17,r17,48
   42df8:	98004526 	beq	r19,zero,42f10 <__call_exitprocs+0x160>
   42dfc:	9c000117 	ldw	r16,4(r19)
   42e00:	00900034 	movhi	r2,16384
   42e04:	10bfffc4 	addi	r2,r2,-1
   42e08:	9d402217 	ldw	r21,136(r19)
   42e0c:	85bfffc4 	addi	r22,r16,-1
   42e10:	80a1883a 	add	r16,r16,r2
   42e14:	8421883a 	add	r16,r16,r16
   42e18:	8421883a 	add	r16,r16,r16
   42e1c:	ac2f883a 	add	r23,r21,r16
   42e20:	84000204 	addi	r16,r16,8
   42e24:	9c21883a 	add	r16,r19,r16
   42e28:	b0002716 	blt	r22,zero,42ec8 <__call_exitprocs+0x118>
   42e2c:	90000726 	beq	r18,zero,42e4c <__call_exitprocs+0x9c>
   42e30:	a800041e 	bne	r21,zero,42e44 <__call_exitprocs+0x94>
   42e34:	b5bfffc4 	addi	r22,r22,-1
   42e38:	bdffff04 	addi	r23,r23,-4
   42e3c:	843fff04 	addi	r16,r16,-4
   42e40:	003ff906 	br	42e28 <__alt_data_end+0xfffdae28>
   42e44:	b9002017 	ldw	r4,128(r23)
   42e48:	913ffa1e 	bne	r18,r4,42e34 <__alt_data_end+0xfffdae34>
   42e4c:	99000117 	ldw	r4,4(r19)
   42e50:	82000017 	ldw	r8,0(r16)
   42e54:	213fffc4 	addi	r4,r4,-1
   42e58:	b100021e 	bne	r22,r4,42e64 <__call_exitprocs+0xb4>
   42e5c:	9d800115 	stw	r22,4(r19)
   42e60:	00000106 	br	42e68 <__call_exitprocs+0xb8>
   42e64:	80000015 	stw	zero,0(r16)
   42e68:	403ff226 	beq	r8,zero,42e34 <__alt_data_end+0xfffdae34>
   42e6c:	9f000117 	ldw	fp,4(r19)
   42e70:	a8000526 	beq	r21,zero,42e88 <__call_exitprocs+0xd8>
   42e74:	00800044 	movi	r2,1
   42e78:	1592983a 	sll	r9,r2,r22
   42e7c:	a9404017 	ldw	r5,256(r21)
   42e80:	494a703a 	and	r5,r9,r5
   42e84:	2800021e 	bne	r5,zero,42e90 <__call_exitprocs+0xe0>
   42e88:	403ee83a 	callr	r8
   42e8c:	00000906 	br	42eb4 <__call_exitprocs+0x104>
   42e90:	a9004117 	ldw	r4,260(r21)
   42e94:	4908703a 	and	r4,r9,r4
   42e98:	2000041e 	bne	r4,zero,42eac <__call_exitprocs+0xfc>
   42e9c:	b9400017 	ldw	r5,0(r23)
   42ea0:	d9000017 	ldw	r4,0(sp)
   42ea4:	403ee83a 	callr	r8
   42ea8:	00000206 	br	42eb4 <__call_exitprocs+0x104>
   42eac:	b9000017 	ldw	r4,0(r23)
   42eb0:	403ee83a 	callr	r8
   42eb4:	99000117 	ldw	r4,4(r19)
   42eb8:	e13fcc1e 	bne	fp,r4,42dec <__alt_data_end+0xfffdadec>
   42ebc:	89000017 	ldw	r4,0(r17)
   42ec0:	993fdc26 	beq	r19,r4,42e34 <__alt_data_end+0xfffdae34>
   42ec4:	003fc906 	br	42dec <__alt_data_end+0xfffdadec>
   42ec8:	00800034 	movhi	r2,0
   42ecc:	10800004 	addi	r2,r2,0
   42ed0:	10000f26 	beq	r2,zero,42f10 <__call_exitprocs+0x160>
   42ed4:	99400117 	ldw	r5,4(r19)
   42ed8:	99000017 	ldw	r4,0(r19)
   42edc:	2800091e 	bne	r5,zero,42f04 <__call_exitprocs+0x154>
   42ee0:	20000826 	beq	r4,zero,42f04 <__call_exitprocs+0x154>
   42ee4:	89000015 	stw	r4,0(r17)
   42ee8:	a8000226 	beq	r21,zero,42ef4 <__call_exitprocs+0x144>
   42eec:	a809883a 	mov	r4,r21
   42ef0:	00000000 	call	0 <__reset-0x40000>
   42ef4:	9809883a 	mov	r4,r19
   42ef8:	00000000 	call	0 <__reset-0x40000>
   42efc:	8cc00017 	ldw	r19,0(r17)
   42f00:	003fbd06 	br	42df8 <__alt_data_end+0xfffdadf8>
   42f04:	9823883a 	mov	r17,r19
   42f08:	2027883a 	mov	r19,r4
   42f0c:	003fba06 	br	42df8 <__alt_data_end+0xfffdadf8>
   42f10:	dfc00a17 	ldw	ra,40(sp)
   42f14:	df000917 	ldw	fp,36(sp)
   42f18:	ddc00817 	ldw	r23,32(sp)
   42f1c:	dd800717 	ldw	r22,28(sp)
   42f20:	dd400617 	ldw	r21,24(sp)
   42f24:	dd000517 	ldw	r20,20(sp)
   42f28:	dcc00417 	ldw	r19,16(sp)
   42f2c:	dc800317 	ldw	r18,12(sp)
   42f30:	dc400217 	ldw	r17,8(sp)
   42f34:	dc000117 	ldw	r16,4(sp)
   42f38:	dec00b04 	addi	sp,sp,44
   42f3c:	f800283a 	ret

00042f40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   42f40:	defffd04 	addi	sp,sp,-12
   42f44:	df000215 	stw	fp,8(sp)
   42f48:	df000204 	addi	fp,sp,8
   42f4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   42f50:	0001883a 	nop
   42f54:	e0bfff17 	ldw	r2,-4(fp)
   42f58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   42f5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   42f60:	10000226 	beq	r2,zero,42f6c <_exit+0x2c>
    ALT_SIM_FAIL();
   42f64:	002af070 	cmpltui	zero,zero,43969
   42f68:	00000106 	br	42f70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   42f6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   42f70:	003fff06 	br	42f70 <__alt_data_end+0xfffdaf70>
