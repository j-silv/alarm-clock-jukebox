
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000736c memsz 0x0000736c flags r-x
    LOAD off    0x0000838c vaddr 0x0004738c paddr 0x0004772c align 2**12
         filesz 0x000003a0 memsz 0x000003a0 flags rw-
    LOAD off    0x00008acc vaddr 0x00047acc paddr 0x00047acc align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005564  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001be4  000457a8  000457a8  000067a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003a0  0004738c  0004772c  0000838c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  00047acc  00047acc  00008acc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00047c04  00047c04  0000872c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000872c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000790  00000000  00000000  00008750  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009543  00000000  00000000  00008ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003600  00000000  00000000  00012423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000405f  00000000  00000000  00015a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001410  00000000  00000000  00019a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002441  00000000  00000000  0001ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000297e  00000000  00000000  0001d2d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000005a0  00000000  00000000  0001fc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000225fe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00022601  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002260b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002260c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002260d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022611  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00022615  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00022619  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00022624  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0002262f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0002263a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  00022645  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  000226a6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000856a0  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
000457a8 l    d  .rodata	00000000 .rodata
0004738c l    d  .rwdata	00000000 .rwdata
00047acc l    d  .bss	00000000 .bss
00047c04 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_pwm_routines.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
00047ae0 l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00043cd8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00047438 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00044634 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
0004478c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000448c0 l     F .text	00000034 alt_dev_reg
00047518 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00044ba4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00044cd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00044cfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00044eac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00044fec l     F .text	0000003c alt_get_errno
00045028 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00047b00 g     O .bss	00000004 alt_instruction_exception_handler
000413e8 g     F .text	000000e4 writePWM
00040824 g     F .text	00000048 timerPWMRegisterISR
0004123c g     F .text	000000cc timerPWMISR
00044720 g     F .text	0000006c alt_main
00043c28 g     F .text	00000080 _puts_r
00047b04 g     O .bss	00000100 alt_irq
0004772c g       *ABS*	00000000 __flash_rwdata_start
00043bdc g     F .text	0000004c printf
000425c0 g     F .text	00000084 getClockTime
000427d8 g     F .text	000000b0 upClockHour
00047adc g     O .bss	00000004 p
000439dc g     F .text	00000070 .hidden __fixsfsi
0004075c g     F .text	00000048 buttonsRegisterISR
00041364 g     F .text	00000038 downVolume
000452a4 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047aec g     O .bss	00000004 errno
00047af8 g     O .bss	00000004 alt_argv
0004f6ec g       *ABS*	00000000 _gp
000434f8 g     F .text	000004e4 .hidden __subsf3
00047705 g     O .rwdata	00000001 time_format
00040938 g     F .text	00000030 alarmLEDon
0004756c g     O .rwdata	00000180 alt_fd_list
000452c8 g     F .text	00000090 alt_find_dev
00044f70 g     F .text	0000007c alt_io_redirect
00043ca8 g     F .text	00000014 puts
00044e10 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00044a24 g     F .text	000000ec altera_avalon_jtag_uart_read
00043ba0 g     F .text	0000003c _printf_r
00042f84 g     F .text	00000064 .hidden __udivsi3
00045504 g     F .text	00000090 alt_icache_flush
000476ec g     O .rwdata	00000001 volume
0004738c g     O .rwdata	0000007c song
00040714 g     F .text	00000048 switchesRegisterISR
00047724 g     O .rwdata	00000004 alt_max_fd
000476fc g     O .rwdata	00000006 unused_switches
00042d80 g     F .text	000000ac downAlarmHour
00041680 g     F .text	00000044 check_return_code
00042954 g     F .text	000000c8 downClockMinute
00047708 g     O .rwdata	00000004 _global_impure_ptr
00042afc g     F .text	00000084 getAlarmTime
0004184c g     F .text	0000008c note2freq
00047c04 g       *ABS*	00000000 __bss_end
00044544 g     F .text	000000f0 alt_iic_isr_register
00040bec g     F .text	00000250 switchesISR
000444f8 g     F .text	0000004c alt_ic_irq_enabled
00047ae6 g     O .bss	00000003 alarm
0004139c g     F .text	0000004c stopPWM
00047af0 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00047544 g     O .rwdata	00000028 alt_dev_null
00044cb0 g     F .text	00000020 alt_dcache_flush_all
00040a44 g     F .text	000001a8 timerSecondISR
0004772c g       *ABS*	00000000 __ram_rwdata_end
00042b80 g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
0004771c g     O .rwdata	00000008 alt_dev_list
000447c8 g     F .text	000000f8 write
00042a1c g     F .text	000000ac downClockHour
00043040 g     F .text	000000bc .hidden __gtsf2
0004738c g       *ABS*	00000000 __ram_rodata_end
000408d8 g     F .text	00000030 timerPWMDisableInterrupt
000457a8 g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00042644 g     F .text	000000cc upClockSecond
00042fe8 g     F .text	00000058 .hidden __umodsi3
00040908 g     F .text	00000030 alarmLEDoff
00040968 g     F .text	0000004c alarmLEDtoggle
00047c04 g       *ABS*	00000000 end
00047acc g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00042cd8 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00043b3c g     F .text	00000064 .hidden __clzsi2
00044b10 g     F .text	00000094 altera_avalon_jtag_uart_write
00043d44 g     F .text	00000524 ___vfprintf_internal_r
000455e4 g     F .text	00000190 __call_exitprocs
000417d0 g     F .text	00000044 upSong
00040244 g     F .text	0000003c _start
00040280 g     F .text	00000064 altera_avalon_pwm_init
0004492c g     F .text	00000038 alt_sys_init
000476f0 g     O .rwdata	00000004 defdur
000424a8 g     F .text	0000009c checkInvalidMode
0004738c g       *ABS*	00000000 __ram_rwdata_start
000457a8 g       *ABS*	00000000 __ram_rodata_start
00047702 g     O .rwdata	00000003 reset_clock_value
000407a4 g     F .text	00000040 switchesEnableInterrupt
00041328 g     F .text	0000003c upVolume
00044964 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00045460 g     F .text	000000a4 alt_get_fd
000455b4 g     F .text	00000030 memcmp
00047c04 g       *ABS*	00000000 __alt_stack_base
000416c4 g     F .text	000000ec print_error
00042544 g     F .text	00000044 isPowerOfTwoOrZero
00045358 g     F .text	00000108 alt_find_file
00044d38 g     F .text	000000a4 alt_dev_llist_insert
00042588 g     F .text	00000038 resetClockTime
00041bc4 g     F .text	00000668 getNote
000476f8 g     O .rwdata	00000004 bpm
000402e4 g     F .text	00000054 altera_avalon_pwm_enable
00044284 g     F .text	000000b8 __sfvwrite_small_dev
00047acc g       *ABS*	00000000 __bss_start
000417b0 g     F .text	00000020 getSong
000409b4 g     F .text	00000090 main
00047408 g     O .rwdata	00000030 notefreq
00047afc g     O .bss	00000004 alt_envp
000449c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004086c g     F .text	0000006c timerPWMEnableInterrupt
000403e0 g     F .text	00000080 resetDisplay
00047728 g     O .rwdata	00000004 alt_errno
00042e8c g     F .text	00000084 .hidden __divsi3
000430fc g     F .text	000003fc .hidden __mulsf3
00042888 g     F .text	000000cc downClockSecond
000457a8 g       *ABS*	00000000 __flash_rodata_start
00040388 g     F .text	00000058 altera_avalon_pwm_change_duty_cycle
000448f4 g     F .text	00000038 alt_irq_init
00045240 g     F .text	00000064 alt_release_fd
00047252 g     O .rodata	00000100 .hidden __clz_tab
00043040 g     F .text	000000bc .hidden __gesf2
00047ad4 g     O .bss	00000001 song_index
0004433c g     F .text	00000058 _write_r
00042710 g     F .text	000000c8 upClockMinute
0004770c g     O .rwdata	00000004 _impure_ptr
00047af4 g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
000406e4 g     F .text	00000030 timerSecondEnableInterrupt
00047714 g     O .rwdata	00000008 alt_fs_list
0004222c g     F .text	0000027c determineMode
00040338 g     F .text	00000050 altera_avalon_pwm_disable
00040020 g       *ABS*	00000000 __ram_exceptions_start
00044394 g     F .text	00000050 alt_ic_isr_register
0004772c g       *ABS*	00000000 _edata
00047c04 g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000407e4 g     F .text	00000040 buttonsEnableInterrupt
0004446c g     F .text	0000008c alt_ic_irq_disable
00045594 g     F .text	00000020 exit
00043a4c g     F .text	000000f0 .hidden __floatunsisf
00042f10 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004069c g     F .text	00000048 timerSecondRegisterISR
00042c28 g     F .text	000000b0 upAlarmHour
00042e2c g     F .text	00000060 .hidden __fixunssfsi
00045774 g     F .text	00000034 _exit
00041814 g     F .text	00000038 downSong
00043cbc g     F .text	0000001c strlen
000450ec g     F .text	00000154 open
000418d8 g     F .text	000002ec playSong
00047ae9 g     O .bss	00000003 clock
000471f2 g     O .rodata	00000060 mode_lookup_table
00044ddc g     F .text	00000034 alt_icache_flush_all
00040e3c g     F .text	00000400 buttonsISR
00047710 g     O .rwdata	00000004 alt_priority_mask
0004581c g     O .rodata	00000034 duty_cycle_lookup_table
000443e4 g     F .text	00000088 alt_ic_irq_enable
00044268 g     F .text	0000001c __vfprintf_internal
00044be0 g     F .text	000000d0 close
00041554 g     F .text	0000012c testPWM
000476f4 g     O .rwdata	00000004 defscale
00041308 g     F .text	00000020 getVolume
00047ad8 g     O .bss	00000004 silence
00042ac8 g     F .text	00000034 resetAlarmTime
0004469c g     F .text	00000084 alt_load
00040460 g     F .text	0000023c updateDisplay
000414cc g     F .text	00000088 default500HzSquareWave



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	109ec104 	addi	r2,r2,31492
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	109ec104 	addi	r2,r2,31492
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a10517 	ldw	r2,-31724(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a10517 	ldw	r2,-31724(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6bdbb14 	ori	gp,gp,63212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	109eb314 	ori	r2,r2,31436

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18df0114 	ori	r3,r3,31748

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	004469c0 	call	4469c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	00447200 	call	44720 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <altera_avalon_pwm_init>:

#include "altera_avalon_pwm_routines.h"


int altera_avalon_pwm_init(unsigned int address, unsigned int clock_divider, unsigned int duty_cycle)
{
   40280:	defffc04 	addi	sp,sp,-16
   40284:	df000315 	stw	fp,12(sp)
   40288:	df000304 	addi	fp,sp,12
   4028c:	e13ffd15 	stw	r4,-12(fp)
   40290:	e17ffe15 	stw	r5,-8(fp)
   40294:	e1bfff15 	stw	r6,-4(fp)
	if(duty_cycle > clock_divider)  //duty cycle reg must be less than or equal to clock divider
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	e0fffe17 	ldw	r3,-8(fp)
   402a0:	1880022e 	bgeu	r3,r2,402ac <altera_avalon_pwm_init+0x2c>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	00000a06 	br	402d4 <altera_avalon_pwm_init+0x54>
	}
	else
	{
		IOWR_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address, clock_divider - 1);
   402ac:	e0bffd17 	ldw	r2,-12(fp)
   402b0:	e0fffe17 	ldw	r3,-8(fp)
   402b4:	18ffffc4 	addi	r3,r3,-1
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800104 	addi	r2,r2,4
   402c4:	1007883a 	mov	r3,r2
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	18800035 	stwio	r2,0(r3)
	}
	 return ALTERA_AVALON_PWM_OK;
   402d0:	0005883a 	mov	r2,zero
}
   402d4:	e037883a 	mov	sp,fp
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00104 	addi	sp,sp,4
   402e0:	f800283a 	ret

000402e4 <altera_avalon_pwm_enable>:

int altera_avalon_pwm_enable(unsigned int address)
{
   402e4:	defffe04 	addi	sp,sp,-8
   402e8:	df000115 	stw	fp,4(sp)
   402ec:	df000104 	addi	fp,sp,4
   402f0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ALTERA_AVALON_PWM_ENABLE_MSK);
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	10800204 	addi	r2,r2,8
   402fc:	1007883a 	mov	r3,r2
   40300:	00800044 	movi	r2,1
   40304:	18800035 	stwio	r2,0(r3)
  
  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_ENABLED) //Confirm PWM is enabled
   40308:	e0bfff17 	ldw	r2,-4(fp)
   4030c:	10800204 	addi	r2,r2,8
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	10800060 	cmpeqi	r2,r2,1
   40318:	1000021e 	bne	r2,zero,40324 <altera_avalon_pwm_enable+0x40>
  {
  	return ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR;
   4031c:	00bfff84 	movi	r2,-2
   40320:	00000106 	br	40328 <altera_avalon_pwm_enable+0x44>
  }
  return ALTERA_AVALON_PWM_OK;
   40324:	0005883a 	mov	r2,zero
}
   40328:	e037883a 	mov	sp,fp
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00104 	addi	sp,sp,4
   40334:	f800283a 	ret

00040338 <altera_avalon_pwm_disable>:

int altera_avalon_pwm_disable(unsigned int address)
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
   40344:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ~ALTERA_AVALON_PWM_ENABLE_MSK);
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800204 	addi	r2,r2,8
   40350:	1007883a 	mov	r3,r2
   40354:	00bfff84 	movi	r2,-2
   40358:	18800035 	stwio	r2,0(r3)

  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_DISABLED)  //Confirm PWM is disabled 
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10800204 	addi	r2,r2,8
   40364:	10800037 	ldwio	r2,0(r2)
   40368:	10000226 	beq	r2,zero,40374 <altera_avalon_pwm_disable+0x3c>
  {
  	return ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR;
   4036c:	00bfff44 	movi	r2,-3
   40370:	00000106 	br	40378 <altera_avalon_pwm_disable+0x40>
  }
  return ALTERA_AVALON_PWM_OK;
   40374:	0005883a 	mov	r2,zero
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <altera_avalon_pwm_change_duty_cycle>:


int altera_avalon_pwm_change_duty_cycle(unsigned int address, unsigned int duty_cycle)
{
   40388:	defffd04 	addi	sp,sp,-12
   4038c:	df000215 	stw	fp,8(sp)
   40390:	df000204 	addi	fp,sp,8
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
	if(duty_cycle > IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address))  //duty cycle reg must be less than or equal to clock divider
   4039c:	e0bffe17 	ldw	r2,-8(fp)
   403a0:	10800037 	ldwio	r2,0(r2)
   403a4:	1007883a 	mov	r3,r2
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	1880022e 	bgeu	r3,r2,403b8 <altera_avalon_pwm_change_duty_cycle+0x30>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	00000606 	br	403d0 <altera_avalon_pwm_change_duty_cycle+0x48>
	}
	else
	{
    IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	10800104 	addi	r2,r2,4
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	18800035 	stwio	r2,0(r3)
	}
  return ALTERA_AVALON_PWM_OK;
   403cc:	0005883a 	mov	r2,zero
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00104 	addi	sp,sp,4
   403dc:	f800283a 	ret

000403e0 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   403e0:	deffff04 	addi	sp,sp,-4
   403e4:	df000015 	stw	fp,0(sp)
   403e8:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   403ec:	00c03004 	movi	r3,192
   403f0:	00800234 	movhi	r2,8
   403f4:	10841004 	addi	r2,r2,4160
   403f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   403fc:	00c03004 	movi	r3,192
   40400:	00800234 	movhi	r2,8
   40404:	10843004 	addi	r2,r2,4288
   40408:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   4040c:	00c03004 	movi	r3,192
   40410:	00800234 	movhi	r2,8
   40414:	10841404 	addi	r2,r2,4176
   40418:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   4041c:	00c03004 	movi	r3,192
   40420:	00800234 	movhi	r2,8
   40424:	10842c04 	addi	r2,r2,4272
   40428:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   4042c:	00c03004 	movi	r3,192
   40430:	00800234 	movhi	r2,8
   40434:	10841804 	addi	r2,r2,4192
   40438:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   4043c:	00c03004 	movi	r3,192
   40440:	00800234 	movhi	r2,8
   40444:	10842804 	addi	r2,r2,4256
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40460:	defffa04 	addi	sp,sp,-24
   40464:	dfc00515 	stw	ra,20(sp)
   40468:	df000415 	stw	fp,16(sp)
   4046c:	df000404 	addi	fp,sp,16
   40470:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40474:	e0bfff03 	ldbu	r2,-4(fp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	10801918 	cmpnei	r2,r2,100
   40480:	1000051e 	bne	r2,zero,40498 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40484:	00800284 	movi	r2,10
   40488:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4048c:	00800284 	movi	r2,10
   40490:	e0bffd05 	stb	r2,-12(fp)
   40494:	00000b06 	br	404c4 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40498:	e0bfff03 	ldbu	r2,-4(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	01400284 	movi	r5,10
   404a4:	1009883a 	mov	r4,r2
   404a8:	0042f840 	call	42f84 <__udivsi3>
   404ac:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   404b0:	e0bfff03 	ldbu	r2,-4(fp)
   404b4:	e0fffd43 	ldbu	r3,-11(fp)
   404b8:	18fffda4 	muli	r3,r3,-10
   404bc:	10c5883a 	add	r2,r2,r3
   404c0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   404c4:	e0bfff43 	ldbu	r2,-3(fp)
   404c8:	10803fcc 	andi	r2,r2,255
   404cc:	10801918 	cmpnei	r2,r2,100
   404d0:	1000051e 	bne	r2,zero,404e8 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   404d4:	00800284 	movi	r2,10
   404d8:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   404dc:	00800284 	movi	r2,10
   404e0:	e0bffc85 	stb	r2,-14(fp)
   404e4:	00000b06 	br	40514 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   404e8:	e0bfff43 	ldbu	r2,-3(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	0042f840 	call	42f84 <__udivsi3>
   404fc:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   40500:	e0bfff43 	ldbu	r2,-3(fp)
   40504:	e0fffcc3 	ldbu	r3,-13(fp)
   40508:	18fffda4 	muli	r3,r3,-10
   4050c:	10c5883a 	add	r2,r2,r3
   40510:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   40514:	e0bfff83 	ldbu	r2,-2(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	10801918 	cmpnei	r2,r2,100
   40520:	1000051e 	bne	r2,zero,40538 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   40524:	00800284 	movi	r2,10
   40528:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   4052c:	00800284 	movi	r2,10
   40530:	e0bffc05 	stb	r2,-16(fp)
   40534:	00000b06 	br	40564 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   40538:	e0bfff83 	ldbu	r2,-2(fp)
   4053c:	10803fcc 	andi	r2,r2,255
   40540:	01400284 	movi	r5,10
   40544:	1009883a 	mov	r4,r2
   40548:	0042f840 	call	42f84 <__udivsi3>
   4054c:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   40550:	e0bfff83 	ldbu	r2,-2(fp)
   40554:	e0fffc43 	ldbu	r3,-15(fp)
   40558:	18fffda4 	muli	r3,r3,-10
   4055c:	10c5883a 	add	r2,r2,r3
   40560:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40564:	e0bffd43 	ldbu	r2,-11(fp)
   40568:	10c03fcc 	andi	r3,r2,255
   4056c:	00800134 	movhi	r2,4
   40570:	1095ea04 	addi	r2,r2,22440
   40574:	10c5883a 	add	r2,r2,r3
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40580:	e0bffd03 	ldbu	r2,-12(fp)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	00800134 	movhi	r2,4
   4058c:	1095ea04 	addi	r2,r2,22440
   40590:	10c5883a 	add	r2,r2,r3
   40594:	10800003 	ldbu	r2,0(r2)
   40598:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4059c:	e0bffcc3 	ldbu	r2,-13(fp)
   405a0:	10c03fcc 	andi	r3,r2,255
   405a4:	00800134 	movhi	r2,4
   405a8:	1095ea04 	addi	r2,r2,22440
   405ac:	10c5883a 	add	r2,r2,r3
   405b0:	10800003 	ldbu	r2,0(r2)
   405b4:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   405b8:	e0bffc83 	ldbu	r2,-14(fp)
   405bc:	10c03fcc 	andi	r3,r2,255
   405c0:	00800134 	movhi	r2,4
   405c4:	1095ea04 	addi	r2,r2,22440
   405c8:	10c5883a 	add	r2,r2,r3
   405cc:	10800003 	ldbu	r2,0(r2)
   405d0:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   405d4:	e0bffc43 	ldbu	r2,-15(fp)
   405d8:	10c03fcc 	andi	r3,r2,255
   405dc:	00800134 	movhi	r2,4
   405e0:	1095ea04 	addi	r2,r2,22440
   405e4:	10c5883a 	add	r2,r2,r3
   405e8:	10800003 	ldbu	r2,0(r2)
   405ec:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   405f0:	e0bffc03 	ldbu	r2,-16(fp)
   405f4:	10c03fcc 	andi	r3,r2,255
   405f8:	00800134 	movhi	r2,4
   405fc:	1095ea04 	addi	r2,r2,22440
   40600:	10c5883a 	add	r2,r2,r3
   40604:	10800003 	ldbu	r2,0(r2)
   40608:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   4060c:	e0bffec3 	ldbu	r2,-5(fp)
   40610:	10c03fcc 	andi	r3,r2,255
   40614:	00800234 	movhi	r2,8
   40618:	10841004 	addi	r2,r2,4160
   4061c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   40620:	e0bffe83 	ldbu	r2,-6(fp)
   40624:	10c03fcc 	andi	r3,r2,255
   40628:	00800234 	movhi	r2,8
   4062c:	10843004 	addi	r2,r2,4288
   40630:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   40634:	e0bffe43 	ldbu	r2,-7(fp)
   40638:	10c03fcc 	andi	r3,r2,255
   4063c:	00800234 	movhi	r2,8
   40640:	10841404 	addi	r2,r2,4176
   40644:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   40648:	e0bffe03 	ldbu	r2,-8(fp)
   4064c:	10c03fcc 	andi	r3,r2,255
   40650:	00800234 	movhi	r2,8
   40654:	10842c04 	addi	r2,r2,4272
   40658:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   4065c:	e0bffdc3 	ldbu	r2,-9(fp)
   40660:	10c03fcc 	andi	r3,r2,255
   40664:	00800234 	movhi	r2,8
   40668:	10841804 	addi	r2,r2,4192
   4066c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40670:	e0bffd83 	ldbu	r2,-10(fp)
   40674:	10c03fcc 	andi	r3,r2,255
   40678:	00800234 	movhi	r2,8
   4067c:	10842804 	addi	r2,r2,4256
   40680:	10c00035 	stwio	r3,0(r2)
   40684:	0001883a 	nop
   40688:	e037883a 	mov	sp,fp
   4068c:	dfc00117 	ldw	ra,4(sp)
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00204 	addi	sp,sp,8
   40698:	f800283a 	ret

0004069c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4069c:	defffb04 	addi	sp,sp,-20
   406a0:	dfc00415 	stw	ra,16(sp)
   406a4:	df000315 	stw	fp,12(sp)
   406a8:	df000304 	addi	fp,sp,12
   406ac:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   406b0:	d8000015 	stw	zero,0(sp)
   406b4:	000f883a 	mov	r7,zero
   406b8:	e1bfff17 	ldw	r6,-4(fp)
   406bc:	01400044 	movi	r5,1
   406c0:	0009883a 	mov	r4,zero
   406c4:	00443940 	call	44394 <alt_ic_isr_register>
   406c8:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   406cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   406d0:	e037883a 	mov	sp,fp
   406d4:	dfc00117 	ldw	ra,4(sp)
   406d8:	df000017 	ldw	fp,0(sp)
   406dc:	dec00204 	addi	sp,sp,8
   406e0:	f800283a 	ret

000406e4 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   406e4:	deffff04 	addi	sp,sp,-4
   406e8:	df000015 	stw	fp,0(sp)
   406ec:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   406f0:	00c001c4 	movi	r3,7
   406f4:	00800234 	movhi	r2,8
   406f8:	10840904 	addi	r2,r2,4132
   406fc:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40700:	0001883a 	nop
   40704:	e037883a 	mov	sp,fp
   40708:	df000017 	ldw	fp,0(sp)
   4070c:	dec00104 	addi	sp,sp,4
   40710:	f800283a 	ret

00040714 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   40714:	defffb04 	addi	sp,sp,-20
   40718:	dfc00415 	stw	ra,16(sp)
   4071c:	df000315 	stw	fp,12(sp)
   40720:	df000304 	addi	fp,sp,12
   40724:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	000f883a 	mov	r7,zero
   40730:	e1bfff17 	ldw	r6,-4(fp)
   40734:	01400084 	movi	r5,2
   40738:	0009883a 	mov	r4,zero
   4073c:	00443940 	call	44394 <alt_ic_isr_register>
   40740:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40744:	e0bffe03 	ldbu	r2,-8(fp)
}
   40748:	e037883a 	mov	sp,fp
   4074c:	dfc00117 	ldw	ra,4(sp)
   40750:	df000017 	ldw	fp,0(sp)
   40754:	dec00204 	addi	sp,sp,8
   40758:	f800283a 	ret

0004075c <buttonsRegisterISR>:


uint8_t buttonsRegisterISR(void (*buttonsISR)(void *isr_context)) {
   4075c:	defffb04 	addi	sp,sp,-20
   40760:	dfc00415 	stw	ra,16(sp)
   40764:	df000315 	stw	fp,12(sp)
   40768:	df000304 	addi	fp,sp,12
   4076c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
   40770:	d8000015 	stw	zero,0(sp)
   40774:	000f883a 	mov	r7,zero
   40778:	e1bfff17 	ldw	r6,-4(fp)
   4077c:	014000c4 	movi	r5,3
   40780:	0009883a 	mov	r4,zero
   40784:	00443940 	call	44394 <alt_ic_isr_register>
   40788:	e0bffe05 	stb	r2,-8(fp)
                                            BUTTONS_IRQ,
                                            buttonsISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4078c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40790:	e037883a 	mov	sp,fp
   40794:	dfc00117 	ldw	ra,4(sp)
   40798:	df000017 	ldw	fp,0(sp)
   4079c:	dec00204 	addi	sp,sp,8
   407a0:	f800283a 	ret

000407a4 <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   407a4:	deffff04 	addi	sp,sp,-4
   407a8:	df000015 	stw	fp,0(sp)
   407ac:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   407b0:	00ffffd4 	movui	r3,65535
   407b4:	00800234 	movhi	r2,8
   407b8:	10843a04 	addi	r2,r2,4328
   407bc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   407c0:	0007883a 	mov	r3,zero
   407c4:	00800234 	movhi	r2,8
   407c8:	10843b04 	addi	r2,r2,4332
   407cc:	10c00035 	stwio	r3,0(r2)
}
   407d0:	0001883a 	nop
   407d4:	e037883a 	mov	sp,fp
   407d8:	df000017 	ldw	fp,0(sp)
   407dc:	dec00104 	addi	sp,sp,4
   407e0:	f800283a 	ret

000407e4 <buttonsEnableInterrupt>:

void buttonsEnableInterrupt(void) {
   407e4:	deffff04 	addi	sp,sp,-4
   407e8:	df000015 	stw	fp,0(sp)
   407ec:	d839883a 	mov	fp,sp
  // enable all buttons to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, BUTTONS_INTERRUPT_MASK);
   407f0:	00c000c4 	movi	r3,3
   407f4:	00800234 	movhi	r2,8
   407f8:	10841e04 	addi	r2,r2,4216
   407fc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40800:	0007883a 	mov	r3,zero
   40804:	00800234 	movhi	r2,8
   40808:	10841f04 	addi	r2,r2,4220
   4080c:	10c00035 	stwio	r3,0(r2)
}
   40810:	0001883a 	nop
   40814:	e037883a 	mov	sp,fp
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00104 	addi	sp,sp,4
   40820:	f800283a 	ret

00040824 <timerPWMRegisterISR>:


uint8_t timerPWMRegisterISR(void (*timerPWMISR)(void *isr_context)) {
   40824:	defffb04 	addi	sp,sp,-20
   40828:	dfc00415 	stw	ra,16(sp)
   4082c:	df000315 	stw	fp,12(sp)
   40830:	df000304 	addi	fp,sp,12
   40834:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_PWM_IRQ_INTERRUPT_CONTROLLER_ID,
   40838:	d8000015 	stw	zero,0(sp)
   4083c:	000f883a 	mov	r7,zero
   40840:	e1bfff17 	ldw	r6,-4(fp)
   40844:	01400104 	movi	r5,4
   40848:	0009883a 	mov	r4,zero
   4084c:	00443940 	call	44394 <alt_ic_isr_register>
   40850:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_PWM_IRQ,
                                            timerPWMISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40854:	e0bffe03 	ldbu	r2,-8(fp)
}
   40858:	e037883a 	mov	sp,fp
   4085c:	dfc00117 	ldw	ra,4(sp)
   40860:	df000017 	ldw	fp,0(sp)
   40864:	dec00204 	addi	sp,sp,8
   40868:	f800283a 	ret

0004086c <timerPWMEnableInterrupt>:

void timerPWMEnableInterrupt(int timeout) {
   4086c:	defffd04 	addi	sp,sp,-12
   40870:	df000215 	stw	fp,8(sp)
   40874:	df000204 	addi	fp,sp,8
   40878:	e13fff15 	stw	r4,-4(fp)
  // timeout is in miliseconds -> convert to seconds
  // set period based on input timeout variable; writing to the period 
  // registers stops the counter which automatically loads reigster value
  uint32_t period = (NIOS_CLOCK_FREQ/1000)*timeout;
   4087c:	e0ffff17 	ldw	r3,-4(fp)
   40880:	00b0d414 	movui	r2,50000
   40884:	1885383a 	mul	r2,r3,r2
   40888:	e0bffe15 	stw	r2,-8(fp)

  //write to high and low registers
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_PWM_BASE, period);
   4088c:	e0fffe17 	ldw	r3,-8(fp)
   40890:	00800234 	movhi	r2,8
   40894:	10840204 	addi	r2,r2,4104
   40898:	10c00035 	stwio	r3,0(r2)
  // shift by 16 to take into account high bits
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_PWM_BASE, (period >> AVALON_TIMER_PERIOD_WIDTH));
   4089c:	e0bffe17 	ldw	r2,-8(fp)
   408a0:	1004d43a 	srli	r2,r2,16
   408a4:	1007883a 	mov	r3,r2
   408a8:	00800234 	movhi	r2,8
   408ac:	10840304 	addi	r2,r2,4108
   408b0:	10c00035 	stwio	r3,0(r2)

  // start timer and enable interrupt
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 
   408b4:	00c00144 	movi	r3,5
   408b8:	00800234 	movhi	r2,8
   408bc:	10840104 	addi	r2,r2,4100
   408c0:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   408c4:	0001883a 	nop
   408c8:	e037883a 	mov	sp,fp
   408cc:	df000017 	ldw	fp,0(sp)
   408d0:	dec00104 	addi	sp,sp,4
   408d4:	f800283a 	ret

000408d8 <timerPWMDisableInterrupt>:

void timerPWMDisableInterrupt(void) {
   408d8:	deffff04 	addi	sp,sp,-4
   408dc:	df000015 	stw	fp,0(sp)
   408e0:	d839883a 	mov	fp,sp
  // set ITO to 0 (thus disabling interrupts)
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 0);
   408e4:	0007883a 	mov	r3,zero
   408e8:	00800234 	movhi	r2,8
   408ec:	10840104 	addi	r2,r2,4100
   408f0:	10c00035 	stwio	r3,0(r2)
}
   408f4:	0001883a 	nop
   408f8:	e037883a 	mov	sp,fp
   408fc:	df000017 	ldw	fp,0(sp)
   40900:	dec00104 	addi	sp,sp,4
   40904:	f800283a 	ret

00040908 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40908:	deffff04 	addi	sp,sp,-4
   4090c:	df000015 	stw	fp,0(sp)
   40910:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40914:	0007883a 	mov	r3,zero
   40918:	00800234 	movhi	r2,8
   4091c:	10842404 	addi	r2,r2,4240
   40920:	10c00035 	stwio	r3,0(r2)
}
   40924:	0001883a 	nop
   40928:	e037883a 	mov	sp,fp
   4092c:	df000017 	ldw	fp,0(sp)
   40930:	dec00104 	addi	sp,sp,4
   40934:	f800283a 	ret

00040938 <alarmLEDon>:

void alarmLEDon(void) {
   40938:	deffff04 	addi	sp,sp,-4
   4093c:	df000015 	stw	fp,0(sp)
   40940:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40944:	00c00044 	movi	r3,1
   40948:	00800234 	movhi	r2,8
   4094c:	10842404 	addi	r2,r2,4240
   40950:	10c00035 	stwio	r3,0(r2)
}
   40954:	0001883a 	nop
   40958:	e037883a 	mov	sp,fp
   4095c:	df000017 	ldw	fp,0(sp)
   40960:	dec00104 	addi	sp,sp,4
   40964:	f800283a 	ret

00040968 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40968:	defffe04 	addi	sp,sp,-8
   4096c:	df000115 	stw	fp,4(sp)
   40970:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40974:	00800234 	movhi	r2,8
   40978:	10842404 	addi	r2,r2,4240
   4097c:	10800037 	ldwio	r2,0(r2)
   40980:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   40984:	e0bfff03 	ldbu	r2,-4(fp)
   40988:	10803fcc 	andi	r2,r2,255
   4098c:	1005003a 	cmpeq	r2,r2,zero
   40990:	10c03fcc 	andi	r3,r2,255
   40994:	00800234 	movhi	r2,8
   40998:	10842404 	addi	r2,r2,4240
   4099c:	10c00035 	stwio	r3,0(r2)
   409a0:	0001883a 	nop
   409a4:	e037883a 	mov	sp,fp
   409a8:	df000017 	ldw	fp,0(sp)
   409ac:	dec00104 	addi	sp,sp,4
   409b0:	f800283a 	ret

000409b4 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   409b4:	defffe04 	addi	sp,sp,-8
   409b8:	dfc00115 	stw	ra,4(sp)
   409bc:	df000015 	stw	fp,0(sp)
   409c0:	d839883a 	mov	fp,sp

  // modde initialization: free running clock mode
  mode.invalid = FALSE;
   409c4:	d020f805 	stb	zero,-31776(gp)
  mode.display = DISP_CLOCK;
   409c8:	d020f845 	stb	zero,-31775(gp)
  mode.alarm = OFF;
   409cc:	d020f885 	stb	zero,-31774(gp)
  mode.config.on = FALSE;
   409d0:	d020f8c5 	stb	zero,-31773(gp)
  mode.config.hour = FALSE;
   409d4:	d020f905 	stb	zero,-31772(gp)
  mode.config.minute = FALSE;
   409d8:	d020f945 	stb	zero,-31771(gp)

  // module intialization
  alarmLEDoff();
   409dc:	00409080 	call	40908 <alarmLEDoff>
  resetClockTime();
   409e0:	00425880 	call	42588 <resetClockTime>
  resetAlarmTime();
   409e4:	0042ac80 	call	42ac8 <resetAlarmTime>
  resetDisplay();
   409e8:	00403e00 	call	403e0 <resetDisplay>

  // ISR registration
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   409ec:	01000134 	movhi	r4,4
   409f0:	21029104 	addi	r4,r4,2628
   409f4:	004069c0 	call	4069c <timerSecondRegisterISR>
   409f8:	10803fcc 	andi	r2,r2,255
   409fc:	1000011e 	bne	r2,zero,40a04 <main+0x50>
    //printf("timerSecondISR successively registered!\n");
    timerSecondEnableInterrupt();
   40a00:	00406e40 	call	406e4 <timerSecondEnableInterrupt>
  }
  else {
   //printf("ERROR: timerSecondISR unsuccessively registered!\n");
  }

  if (switchesRegisterISR(&switchesISR) == ISR_REGISTRATION_SUCCESS) {
   40a04:	01000134 	movhi	r4,4
   40a08:	2102fb04 	addi	r4,r4,3052
   40a0c:	00407140 	call	40714 <switchesRegisterISR>
   40a10:	10803fcc 	andi	r2,r2,255
   40a14:	1000011e 	bne	r2,zero,40a1c <main+0x68>
    //printf("switchesISR successively registered!\n");
    switchesEnableInterrupt();
   40a18:	00407a40 	call	407a4 <switchesEnableInterrupt>
  }
  else {
   //printf("ERROR: switchesISR unsuccessively registered!\n");
  }

  if (buttonsRegisterISR(&buttonsISR) == ISR_REGISTRATION_SUCCESS) {
   40a1c:	01000134 	movhi	r4,4
   40a20:	21038f04 	addi	r4,r4,3644
   40a24:	004075c0 	call	4075c <buttonsRegisterISR>
   40a28:	10803fcc 	andi	r2,r2,255
   40a2c:	1000011e 	bne	r2,zero,40a34 <main+0x80>
    //printf("buttonsISR successively registered!\n");
    buttonsEnableInterrupt();
   40a30:	00407e40 	call	407e4 <buttonsEnableInterrupt>
  }
  else {
   //printf("ERROR: buttonsISR unsuccessively registered!\n");
  }

  if (timerPWMRegisterISR(&timerPWMISR) == ISR_REGISTRATION_SUCCESS) {
   40a34:	01000134 	movhi	r4,4
   40a38:	21048f04 	addi	r4,r4,4668
   40a3c:	00408240 	call	40824 <timerPWMRegisterISR>
  }
  else {
   //printf("ERROR: timerPWMISR unsuccessively registered!\n");
  }

  while(1) {}  
   40a40:	003fff06 	br	40a40 <__alt_data_end+0xfffd8a40>

00040a44 <timerSecondISR>:

// -------------- ISR callbacks -------------------

/* ISR: update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   40a44:	defff804 	addi	sp,sp,-32
   40a48:	dfc00715 	stw	ra,28(sp)
   40a4c:	df000615 	stw	fp,24(sp)
   40a50:	df000604 	addi	fp,sp,24
   40a54:	e13fff15 	stw	r4,-4(fp)

  // clear timeout bit because the internal counter for the timer reached zero
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   40a58:	0007883a 	mov	r3,zero
   40a5c:	00800234 	movhi	r2,8
   40a60:	10840804 	addi	r2,r2,4128
   40a64:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and for //printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   40a68:	d0a0f843 	ldbu	r2,-31775(gp)
   40a6c:	10803fcc 	andi	r2,r2,255
   40a70:	10004b1e 	bne	r2,zero,40ba0 <timerSecondISR+0x15c>
    if (mode.config.on == TRUE) {
   40a74:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40a78:	10803fcc 	andi	r2,r2,255
   40a7c:	10800058 	cmpnei	r2,r2,1
   40a80:	10000e1e 	bne	r2,zero,40abc <timerSecondISR+0x78>

      // digits should not carry over while configuring the time
      clock = upClockSecond(CARRY_OFF);
   40a84:	0009883a 	mov	r4,zero
   40a88:	00426440 	call	42644 <upClockSecond>
   40a8c:	e0bffa05 	stb	r2,-24(fp)
   40a90:	1006d23a 	srli	r3,r2,8
   40a94:	1809883a 	mov	r4,r3
   40a98:	00ffffc4 	movi	r3,-1
   40a9c:	20c6703a 	and	r3,r4,r3
   40aa0:	e0fffa45 	stb	r3,-23(fp)
   40aa4:	1004d43a 	srli	r2,r2,16
   40aa8:	1007883a 	mov	r3,r2
   40aac:	00bfffc4 	movi	r2,-1
   40ab0:	1884703a 	and	r2,r3,r2
   40ab4:	e0bffa85 	stb	r2,-22(fp)
   40ab8:	00003606 	br	40b94 <timerSecondISR+0x150>

    }
    else if (mode.config.on == FALSE) {
   40abc:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40ac0:	10803fcc 	andi	r2,r2,255
   40ac4:	1000331e 	bne	r2,zero,40b94 <timerSecondISR+0x150>

      // since we're not in config mode, the time 
      // should normally count and carry.
      clock = upClockSecond(CARRY_ON);
   40ac8:	01000044 	movi	r4,1
   40acc:	00426440 	call	42644 <upClockSecond>
   40ad0:	e0bffa05 	stb	r2,-24(fp)
   40ad4:	1006d23a 	srli	r3,r2,8
   40ad8:	1809883a 	mov	r4,r3
   40adc:	00ffffc4 	movi	r3,-1
   40ae0:	20c6703a 	and	r3,r4,r3
   40ae4:	e0fffa45 	stb	r3,-23(fp)
   40ae8:	1004d43a 	srli	r2,r2,16
   40aec:	1007883a 	mov	r3,r2
   40af0:	00bfffc4 	movi	r2,-1
   40af4:	1884703a 	and	r2,r3,r2
   40af8:	e0bffa85 	stb	r2,-22(fp)

      // check the alarm
      if (mode.alarm == ON) {
   40afc:	d0a0f883 	ldbu	r2,-31774(gp)
   40b00:	10803fcc 	andi	r2,r2,255
   40b04:	10800058 	cmpnei	r2,r2,1
   40b08:	1000221e 	bne	r2,zero,40b94 <timerSecondISR+0x150>

        struct time alarm;
        alarm = getAlarmTime();
   40b0c:	0042afc0 	call	42afc <getAlarmTime>
   40b10:	e0bffac5 	stb	r2,-21(fp)
   40b14:	1006d23a 	srli	r3,r2,8
   40b18:	1809883a 	mov	r4,r3
   40b1c:	00ffffc4 	movi	r3,-1
   40b20:	20c6703a 	and	r3,r4,r3
   40b24:	e0fffb05 	stb	r3,-20(fp)
   40b28:	1004d43a 	srli	r2,r2,16
   40b2c:	1007883a 	mov	r3,r2
   40b30:	00bfffc4 	movi	r2,-1
   40b34:	1884703a 	and	r2,r3,r2
   40b38:	e0bffb45 	stb	r2,-19(fp)

        /* to avoid executing the following block of code everytime and to only call playSong() once, 
        we have to check whether or not the time is currently at XX:XX:00. 
        --> at 0 seconds, thats when the alarm will be activated */
        if ( (clock.second == 0) && (alarm.hour == clock.hour) && (alarm.minute == clock.minute) ) {
   40b3c:	e0bffa83 	ldbu	r2,-22(fp)
   40b40:	10803fcc 	andi	r2,r2,255
   40b44:	1000131e 	bne	r2,zero,40b94 <timerSecondISR+0x150>
   40b48:	e0fffac3 	ldbu	r3,-21(fp)
   40b4c:	e0bffa03 	ldbu	r2,-24(fp)
   40b50:	18c03fcc 	andi	r3,r3,255
   40b54:	10803fcc 	andi	r2,r2,255
   40b58:	18800e1e 	bne	r3,r2,40b94 <timerSecondISR+0x150>
   40b5c:	e0fffb03 	ldbu	r3,-20(fp)
   40b60:	e0bffa43 	ldbu	r2,-23(fp)
   40b64:	18c03fcc 	andi	r3,r3,255
   40b68:	10803fcc 	andi	r2,r2,255
   40b6c:	1880091e 	bne	r3,r2,40b94 <timerSecondISR+0x150>

          // start the alarm!
          struct note_info note;
          note = playSong();
   40b70:	e0bffc04 	addi	r2,fp,-16
   40b74:	1009883a 	mov	r4,r2
   40b78:	00418d80 	call	418d8 <playSong>
          //printf("BEEP! BEEP! BEEP! Alarm has gone off...\n");
          //printf("note.frequency == %d\n",note.frequency);
          //printf("note.duration == %d\n",note.duration);
          //printf("note.endofsong == %d\n",note.endofsong);

          writePWM(note.frequency);
   40b7c:	e0bffc17 	ldw	r2,-16(fp)
   40b80:	1009883a 	mov	r4,r2
   40b84:	00413e80 	call	413e8 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   40b88:	e0bffd17 	ldw	r2,-12(fp)
   40b8c:	1009883a 	mov	r4,r2
   40b90:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      //printf("ERROR: mode.config.on has an invalid value\n");
    }

    // since we're currently in clock mode, 
    // we have to update the display after every second tick
    updateDisplay(clock);
   40b94:	e13ffa17 	ldw	r4,-24(fp)
   40b98:	00404600 	call	40460 <updateDisplay>
    clock = upClockSecond(CARRY_ON);
  }

  //printf("CLOCK TIME: %d:%d:%d\n",clock.hour,clock.minute,clock.second);

}
   40b9c:	00000d06 	br	40bd4 <timerSecondISR+0x190>

  }
  else {
    // since the current time is not being displayed, 
    // we don't update the display
    clock = upClockSecond(CARRY_ON);
   40ba0:	01000044 	movi	r4,1
   40ba4:	00426440 	call	42644 <upClockSecond>
   40ba8:	e0bffa05 	stb	r2,-24(fp)
   40bac:	1006d23a 	srli	r3,r2,8
   40bb0:	1809883a 	mov	r4,r3
   40bb4:	00ffffc4 	movi	r3,-1
   40bb8:	20c6703a 	and	r3,r4,r3
   40bbc:	e0fffa45 	stb	r3,-23(fp)
   40bc0:	1004d43a 	srli	r2,r2,16
   40bc4:	1007883a 	mov	r3,r2
   40bc8:	00bfffc4 	movi	r2,-1
   40bcc:	1884703a 	and	r2,r3,r2
   40bd0:	e0bffa85 	stb	r2,-22(fp)
  }

  //printf("CLOCK TIME: %d:%d:%d\n",clock.hour,clock.minute,clock.second);

}
   40bd4:	0001883a 	nop
   40bd8:	e037883a 	mov	sp,fp
   40bdc:	dfc00117 	ldw	ra,4(sp)
   40be0:	df000017 	ldw	fp,0(sp)
   40be4:	dec00204 	addi	sp,sp,8
   40be8:	f800283a 	ret

00040bec <switchesISR>:


/* ISR determines user requested mode
Once determined, the system will update the display to match what was requested, 
and perform other actions such as turn on/off the alarm (for example)*/
void switchesISR(void* isr_context) {
   40bec:	defff704 	addi	sp,sp,-36
   40bf0:	dfc00815 	stw	ra,32(sp)
   40bf4:	df000715 	stw	fp,28(sp)
   40bf8:	df000704 	addi	fp,sp,28
   40bfc:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40c00:	0007883a 	mov	r3,zero
   40c04:	00800234 	movhi	r2,8
   40c08:	10843b04 	addi	r2,r2,4332
   40c0c:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40c10:	004222c0 	call	4222c <determineMode>
   40c14:	1009883a 	mov	r4,r2
   40c18:	180b883a 	mov	r5,r3
   40c1c:	e13ff905 	stb	r4,-28(fp)
   40c20:	2004d23a 	srli	r2,r4,8
   40c24:	1007883a 	mov	r3,r2
   40c28:	00bfffc4 	movi	r2,-1
   40c2c:	1884703a 	and	r2,r3,r2
   40c30:	e0bff945 	stb	r2,-27(fp)
   40c34:	2004d43a 	srli	r2,r4,16
   40c38:	1007883a 	mov	r3,r2
   40c3c:	00bfffc4 	movi	r2,-1
   40c40:	1884703a 	and	r2,r3,r2
   40c44:	e0bff985 	stb	r2,-26(fp)
   40c48:	2004d63a 	srli	r2,r4,24
   40c4c:	e0bff9c5 	stb	r2,-25(fp)
   40c50:	e17ffa05 	stb	r5,-24(fp)
   40c54:	2804d23a 	srli	r2,r5,8
   40c58:	1007883a 	mov	r3,r2
   40c5c:	00bfffc4 	movi	r2,-1
   40c60:	1884703a 	and	r2,r3,r2
   40c64:	e0bffa45 	stb	r2,-23(fp)

  /* if an invalid mode is requested, nothing needs to change except for the mode struct.
  if a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40c68:	e0bff903 	ldbu	r2,-28(fp)
   40c6c:	10803fcc 	andi	r2,r2,255
   40c70:	1000601e 	bne	r2,zero,40df4 <switchesISR+0x208>

    /* don't need to update the display if we're currently displaying the 
    the same mode that was requested */
    if (mode_request.display != mode.display) {
   40c74:	e0fff943 	ldbu	r3,-27(fp)
   40c78:	d0a0f843 	ldbu	r2,-31775(gp)
   40c7c:	18c03fcc 	andi	r3,r3,255
   40c80:	10803fcc 	andi	r2,r2,255
   40c84:	18804f26 	beq	r3,r2,40dc4 <switchesISR+0x1d8>
      *** although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well depending on the switch resolution. */
      struct time display;

      switch(mode_request.display) {
   40c88:	e0bff943 	ldbu	r2,-27(fp)
   40c8c:	10803fcc 	andi	r2,r2,255
   40c90:	10c00060 	cmpeqi	r3,r2,1
   40c94:	1800161e 	bne	r3,zero,40cf0 <switchesISR+0x104>
   40c98:	10c00088 	cmpgei	r3,r2,2
   40c9c:	1800021e 	bne	r3,zero,40ca8 <switchesISR+0xbc>
   40ca0:	10000626 	beq	r2,zero,40cbc <switchesISR+0xd0>
   40ca4:	00003606 	br	40d80 <switchesISR+0x194>
   40ca8:	10c000a0 	cmpeqi	r3,r2,2
   40cac:	18001d1e 	bne	r3,zero,40d24 <switchesISR+0x138>
   40cb0:	108000e0 	cmpeqi	r2,r2,3
   40cb4:	1000221e 	bne	r2,zero,40d40 <switchesISR+0x154>
   40cb8:	00003106 	br	40d80 <switchesISR+0x194>
        case DISP_CLOCK: 
          display = getClockTime();
   40cbc:	00425c00 	call	425c0 <getClockTime>
   40cc0:	e0bffa85 	stb	r2,-22(fp)
   40cc4:	1006d23a 	srli	r3,r2,8
   40cc8:	1809883a 	mov	r4,r3
   40ccc:	00ffffc4 	movi	r3,-1
   40cd0:	20c6703a 	and	r3,r4,r3
   40cd4:	e0fffac5 	stb	r3,-21(fp)
   40cd8:	1004d43a 	srli	r2,r2,16
   40cdc:	1007883a 	mov	r3,r2
   40ce0:	00bfffc4 	movi	r2,-1
   40ce4:	1884703a 	and	r2,r3,r2
   40ce8:	e0bffb05 	stb	r2,-20(fp)
          break;
   40cec:	00002706 	br	40d8c <switchesISR+0x1a0>

        case DISP_ALARM:
          display = getAlarmTime();
   40cf0:	0042afc0 	call	42afc <getAlarmTime>
   40cf4:	e0bffa85 	stb	r2,-22(fp)
   40cf8:	1006d23a 	srli	r3,r2,8
   40cfc:	1809883a 	mov	r4,r3
   40d00:	00ffffc4 	movi	r3,-1
   40d04:	20c6703a 	and	r3,r4,r3
   40d08:	e0fffac5 	stb	r3,-21(fp)
   40d0c:	1004d43a 	srli	r2,r2,16
   40d10:	1007883a 	mov	r3,r2
   40d14:	00bfffc4 	movi	r2,-1
   40d18:	1884703a 	and	r2,r3,r2
   40d1c:	e0bffb05 	stb	r2,-20(fp)
          break;
   40d20:	00001a06 	br	40d8c <switchesISR+0x1a0>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" digits for the 7 seg display.
          For the moment this means that we're not going to check if the volume exceeds 99 */
          display.hour = DONT_DISPLAY;
   40d24:	00801904 	movi	r2,100
   40d28:	e0bffa85 	stb	r2,-22(fp)
          display.minute = DONT_DISPLAY;
   40d2c:	00801904 	movi	r2,100
   40d30:	e0bffac5 	stb	r2,-21(fp)
          display.second = getVolume();
   40d34:	00413080 	call	41308 <getVolume>
   40d38:	e0bffb05 	stb	r2,-20(fp)
          break;
   40d3c:	00001306 	br	40d8c <switchesISR+0x1a0>
        case DISP_SONG:

          /* the current song will be displayed on the "second" digits for the 7 seg display.
          7 segment displays. For the moment this means that we're not going to check 
          if the song index exceeds 99  */
          display.hour = DONT_DISPLAY;
   40d40:	00801904 	movi	r2,100
   40d44:	e0bffa85 	stb	r2,-22(fp)
          display.minute = DONT_DISPLAY;
   40d48:	00801904 	movi	r2,100
   40d4c:	e0bffac5 	stb	r2,-21(fp)
          display.second = getSong();
   40d50:	00417b00 	call	417b0 <getSong>
   40d54:	e0bffb05 	stb	r2,-20(fp)

          struct note_info note;
          note = playSong();
   40d58:	e0bffc04 	addi	r2,fp,-16
   40d5c:	1009883a 	mov	r4,r2
   40d60:	00418d80 	call	418d8 <playSong>
          //printf("switch to song display mode...\n");
          //printf("note.frequency == %d\n",note.frequency);
          //printf("note.duration == %d\n",note.duration);
          //printf("note.endofsong == %d\n",note.endofsong);

          writePWM(note.frequency);
   40d64:	e0bffc17 	ldw	r2,-16(fp)
   40d68:	1009883a 	mov	r4,r2
   40d6c:	00413e80 	call	413e8 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   40d70:	e0bffd17 	ldw	r2,-12(fp)
   40d74:	1009883a 	mov	r4,r2
   40d78:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   40d7c:	00000306 	br	40d8c <switchesISR+0x1a0>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40d80:	01000134 	movhi	r4,4
   40d84:	2115ed04 	addi	r4,r4,22452
   40d88:	0043ca80 	call	43ca8 <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40d8c:	e0bffa8b 	ldhu	r2,-22(fp)
   40d90:	e0fffb0b 	ldhu	r3,-20(fp)
   40d94:	18c03fcc 	andi	r3,r3,255
   40d98:	1806943a 	slli	r3,r3,16
   40d9c:	1888b03a 	or	r4,r3,r2
   40da0:	0007883a 	mov	r3,zero
   40da4:	00804034 	movhi	r2,256
   40da8:	10bfffc4 	addi	r2,r2,-1
   40dac:	2084703a 	and	r2,r4,r2
   40db0:	18ffc02c 	andhi	r3,r3,65280
   40db4:	1884b03a 	or	r2,r3,r2
   40db8:	1007883a 	mov	r3,r2
   40dbc:	1809883a 	mov	r4,r3
   40dc0:	00404600 	call	40460 <updateDisplay>
    else { 
      //printf("The requested display mode is already active\n");
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40dc4:	e0bff983 	ldbu	r2,-26(fp)
   40dc8:	10803fcc 	andi	r2,r2,255
   40dcc:	1000081e 	bne	r2,zero,40df0 <switchesISR+0x204>
      alarmLEDoff();
   40dd0:	00409080 	call	40908 <alarmLEDoff>
      /* only stop the song if we're not in the song selection display.
      otherwise, the song that is being sampled while on this display will suddenly
      stop playing. A song should only stop playing if an armed alarm went off,
      and then a user decides to turn off said alarm, OR if a user changes from
      the song display menu to any other menu */
      if (mode_request.display != DISP_SONG) {
   40dd4:	e0bff943 	ldbu	r2,-27(fp)
   40dd8:	10803fcc 	andi	r2,r2,255
   40ddc:	108000e0 	cmpeqi	r2,r2,3
   40de0:	1000041e 	bne	r2,zero,40df4 <switchesISR+0x208>
          //printf("song stopped because alarm is off and system is not currently in song display mode!\n");

        stopPWM();
   40de4:	004139c0 	call	4139c <stopPWM>
        timerPWMDisableInterrupt();
   40de8:	00408d80 	call	408d8 <timerPWMDisableInterrupt>
   40dec:	00000106 	br	40df4 <switchesISR+0x208>
      }
    }

    // occurs when mode_request.alarm == ON
    else {
      alarmLEDon();
   40df0:	00409380 	call	40938 <alarmLEDon>
  else {
    //printf("ERROR: An invalid mode was requested\n");
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40df4:	e0bff903 	ldbu	r2,-28(fp)
   40df8:	d0a0f805 	stb	r2,-31776(gp)
   40dfc:	e0bff943 	ldbu	r2,-27(fp)
   40e00:	d0a0f845 	stb	r2,-31775(gp)
   40e04:	e0bff983 	ldbu	r2,-26(fp)
   40e08:	d0a0f885 	stb	r2,-31774(gp)
   40e0c:	e0bff9c3 	ldbu	r2,-25(fp)
   40e10:	d0a0f8c5 	stb	r2,-31773(gp)
   40e14:	e0bffa03 	ldbu	r2,-24(fp)
   40e18:	d0a0f905 	stb	r2,-31772(gp)
   40e1c:	e0bffa43 	ldbu	r2,-23(fp)
   40e20:	d0a0f945 	stb	r2,-31771(gp)
  return;
   40e24:	0001883a 	nop
}
   40e28:	e037883a 	mov	sp,fp
   40e2c:	dfc00117 	ldw	ra,4(sp)
   40e30:	df000017 	ldw	fp,0(sp)
   40e34:	dec00204 	addi	sp,sp,8
   40e38:	f800283a 	ret

00040e3c <buttonsISR>:

/* ISR determines what sort of operation the user wants to perform for the
correctly active display mode (increase/decrease clock time, song select, etc.).
Once the requested operation is determined, the system will 
update the display to match what was requested */
void buttonsISR(void* isr_context) {
   40e3c:	defff904 	addi	sp,sp,-28
   40e40:	dfc00615 	stw	ra,24(sp)
   40e44:	df000515 	stw	fp,20(sp)
   40e48:	df000504 	addi	fp,sp,20
   40e4c:	e13fff15 	stw	r4,-4(fp)

  /* if the user is not currently configuring something (time, alarm, etc), 
  then a button press won't do anything */
  if (mode.config.on == FALSE) {
   40e50:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40e54:	10803fcc 	andi	r2,r2,255
   40e58:	1000051e 	bne	r2,zero,40e70 <buttonsISR+0x34>
    //printf("ERROR: Not currently in config mode! Button press ignored\n");

    /* don't forget to reset edge capture register by writing to it and before
    exiting ISR */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40e5c:	0007883a 	mov	r3,zero
   40e60:	00800234 	movhi	r2,8
   40e64:	10841f04 	addi	r2,r2,4220
   40e68:	10c00035 	stwio	r3,0(r2)

    return;
   40e6c:	0000ee06 	br	41228 <buttonsISR+0x3ec>
  }
  else {
    // determine the operation requested based on the button's state
    uint8_t buttons_state = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
   40e70:	00800234 	movhi	r2,8
   40e74:	10841f04 	addi	r2,r2,4220
   40e78:	10800037 	ldwio	r2,0(r2)
   40e7c:	e0bffb05 	stb	r2,-20(fp)
      struct time display;

      /* what happens next is entirely dependant on what the current display mode is, whether or not 
      the button press was an UP or DOWN operation, and finally if the config was for the 
      minute or hour time units. This scary case statement figures it out */
      switch(mode.display) {
   40e80:	d0a0f843 	ldbu	r2,-31775(gp)
   40e84:	10803fcc 	andi	r2,r2,255
   40e88:	10c00060 	cmpeqi	r3,r2,1
   40e8c:	1800551e 	bne	r3,zero,40fe4 <buttonsISR+0x1a8>
   40e90:	10c00088 	cmpgei	r3,r2,2
   40e94:	1800021e 	bne	r3,zero,40ea0 <buttonsISR+0x64>
   40e98:	10000626 	beq	r2,zero,40eb4 <buttonsISR+0x78>
   40e9c:	0000c506 	br	411b4 <buttonsISR+0x378>
   40ea0:	10c000a0 	cmpeqi	r3,r2,2
   40ea4:	1800991e 	bne	r3,zero,4110c <buttonsISR+0x2d0>
   40ea8:	108000e0 	cmpeqi	r2,r2,3
   40eac:	1000a71e 	bne	r2,zero,4114c <buttonsISR+0x310>
   40eb0:	0000c006 	br	411b4 <buttonsISR+0x378>

        case DISP_CLOCK: 

          if (buttons_state == UP) {
   40eb4:	e0bffb03 	ldbu	r2,-20(fp)
   40eb8:	10800098 	cmpnei	r2,r2,2
   40ebc:	1000231e 	bne	r2,zero,40f4c <buttonsISR+0x110>
            if (mode.config.hour == TRUE) {
   40ec0:	d0a0f903 	ldbu	r2,-31772(gp)
   40ec4:	10803fcc 	andi	r2,r2,255
   40ec8:	10800058 	cmpnei	r2,r2,1
   40ecc:	10000d1e 	bne	r2,zero,40f04 <buttonsISR+0xc8>
              display = upClockHour();
   40ed0:	00427d80 	call	427d8 <upClockHour>
   40ed4:	e0bffb45 	stb	r2,-19(fp)
   40ed8:	1006d23a 	srli	r3,r2,8
   40edc:	1809883a 	mov	r4,r3
   40ee0:	00ffffc4 	movi	r3,-1
   40ee4:	20c6703a 	and	r3,r4,r3
   40ee8:	e0fffb85 	stb	r3,-18(fp)
   40eec:	1004d43a 	srli	r2,r2,16
   40ef0:	1007883a 	mov	r3,r2
   40ef4:	00bfffc4 	movi	r2,-1
   40ef8:	1884703a 	and	r2,r3,r2
   40efc:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40f00:	0000b006 	br	411c4 <buttonsISR+0x388>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40f04:	d0a0f943 	ldbu	r2,-31771(gp)
   40f08:	10803fcc 	andi	r2,r2,255
   40f0c:	10800058 	cmpnei	r2,r2,1
   40f10:	1000ac1e 	bne	r2,zero,411c4 <buttonsISR+0x388>
              display = upClockMinute(CARRY_OFF);
   40f14:	0009883a 	mov	r4,zero
   40f18:	00427100 	call	42710 <upClockMinute>
   40f1c:	e0bffb45 	stb	r2,-19(fp)
   40f20:	1006d23a 	srli	r3,r2,8
   40f24:	1809883a 	mov	r4,r3
   40f28:	00ffffc4 	movi	r3,-1
   40f2c:	20c6703a 	and	r3,r4,r3
   40f30:	e0fffb85 	stb	r3,-18(fp)
   40f34:	1004d43a 	srli	r2,r2,16
   40f38:	1007883a 	mov	r3,r2
   40f3c:	00bfffc4 	movi	r2,-1
   40f40:	1884703a 	and	r2,r3,r2
   40f44:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40f48:	00009e06 	br	411c4 <buttonsISR+0x388>
            }
            else if (mode.config.minute == TRUE) {
              display = upClockMinute(CARRY_OFF);
            }
          }
          else if (buttons_state == DOWN) {
   40f4c:	e0bffb03 	ldbu	r2,-20(fp)
   40f50:	10800058 	cmpnei	r2,r2,1
   40f54:	10009b1e 	bne	r2,zero,411c4 <buttonsISR+0x388>
            if (mode.config.hour == TRUE) {
   40f58:	d0a0f903 	ldbu	r2,-31772(gp)
   40f5c:	10803fcc 	andi	r2,r2,255
   40f60:	10800058 	cmpnei	r2,r2,1
   40f64:	10000d1e 	bne	r2,zero,40f9c <buttonsISR+0x160>
              display = downClockHour();
   40f68:	0042a1c0 	call	42a1c <downClockHour>
   40f6c:	e0bffb45 	stb	r2,-19(fp)
   40f70:	1006d23a 	srli	r3,r2,8
   40f74:	1809883a 	mov	r4,r3
   40f78:	00ffffc4 	movi	r3,-1
   40f7c:	20c6703a 	and	r3,r4,r3
   40f80:	e0fffb85 	stb	r3,-18(fp)
   40f84:	1004d43a 	srli	r2,r2,16
   40f88:	1007883a 	mov	r3,r2
   40f8c:	00bfffc4 	movi	r2,-1
   40f90:	1884703a 	and	r2,r3,r2
   40f94:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   40f98:	00008a06 	br	411c4 <buttonsISR+0x388>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downClockHour();
            }
            else if (mode.config.minute == TRUE) {
   40f9c:	d0a0f943 	ldbu	r2,-31771(gp)
   40fa0:	10803fcc 	andi	r2,r2,255
   40fa4:	10800058 	cmpnei	r2,r2,1
   40fa8:	1000861e 	bne	r2,zero,411c4 <buttonsISR+0x388>
              display = downClockMinute(CARRY_OFF);
   40fac:	0009883a 	mov	r4,zero
   40fb0:	00429540 	call	42954 <downClockMinute>
   40fb4:	e0bffb45 	stb	r2,-19(fp)
   40fb8:	1006d23a 	srli	r3,r2,8
   40fbc:	1809883a 	mov	r4,r3
   40fc0:	00ffffc4 	movi	r3,-1
   40fc4:	20c6703a 	and	r3,r4,r3
   40fc8:	e0fffb85 	stb	r3,-18(fp)
   40fcc:	1004d43a 	srli	r2,r2,16
   40fd0:	1007883a 	mov	r3,r2
   40fd4:	00bfffc4 	movi	r2,-1
   40fd8:	1884703a 	and	r2,r3,r2
   40fdc:	e0bffbc5 	stb	r2,-17(fp)
            }
          }
          break;
   40fe0:	00007806 	br	411c4 <buttonsISR+0x388>

        case DISP_ALARM:

          if (buttons_state == UP) {
   40fe4:	e0bffb03 	ldbu	r2,-20(fp)
   40fe8:	10800098 	cmpnei	r2,r2,2
   40fec:	1000221e 	bne	r2,zero,41078 <buttonsISR+0x23c>
            if (mode.config.hour == TRUE) {
   40ff0:	d0a0f903 	ldbu	r2,-31772(gp)
   40ff4:	10803fcc 	andi	r2,r2,255
   40ff8:	10800058 	cmpnei	r2,r2,1
   40ffc:	10000d1e 	bne	r2,zero,41034 <buttonsISR+0x1f8>
              display = upAlarmHour();
   41000:	0042c280 	call	42c28 <upAlarmHour>
   41004:	e0bffb45 	stb	r2,-19(fp)
   41008:	1006d23a 	srli	r3,r2,8
   4100c:	1809883a 	mov	r4,r3
   41010:	00ffffc4 	movi	r3,-1
   41014:	20c6703a 	and	r3,r4,r3
   41018:	e0fffb85 	stb	r3,-18(fp)
   4101c:	1004d43a 	srli	r2,r2,16
   41020:	1007883a 	mov	r3,r2
   41024:	00bfffc4 	movi	r2,-1
   41028:	1884703a 	and	r2,r3,r2
   4102c:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41030:	00006606 	br	411cc <buttonsISR+0x390>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   41034:	d0a0f943 	ldbu	r2,-31771(gp)
   41038:	10803fcc 	andi	r2,r2,255
   4103c:	10800058 	cmpnei	r2,r2,1
   41040:	1000621e 	bne	r2,zero,411cc <buttonsISR+0x390>
              display = upAlarmMinute();
   41044:	0042b800 	call	42b80 <upAlarmMinute>
   41048:	e0bffb45 	stb	r2,-19(fp)
   4104c:	1006d23a 	srli	r3,r2,8
   41050:	1809883a 	mov	r4,r3
   41054:	00ffffc4 	movi	r3,-1
   41058:	20c6703a 	and	r3,r4,r3
   4105c:	e0fffb85 	stb	r3,-18(fp)
   41060:	1004d43a 	srli	r2,r2,16
   41064:	1007883a 	mov	r3,r2
   41068:	00bfffc4 	movi	r2,-1
   4106c:	1884703a 	and	r2,r3,r2
   41070:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41074:	00005506 	br	411cc <buttonsISR+0x390>
            }
            else if (mode.config.minute == TRUE) {
              display = upAlarmMinute();
            }
          }
          else if (buttons_state == DOWN) {
   41078:	e0bffb03 	ldbu	r2,-20(fp)
   4107c:	10800058 	cmpnei	r2,r2,1
   41080:	1000521e 	bne	r2,zero,411cc <buttonsISR+0x390>
            if (mode.config.hour == TRUE) {
   41084:	d0a0f903 	ldbu	r2,-31772(gp)
   41088:	10803fcc 	andi	r2,r2,255
   4108c:	10800058 	cmpnei	r2,r2,1
   41090:	10000d1e 	bne	r2,zero,410c8 <buttonsISR+0x28c>
              display = downAlarmHour();
   41094:	0042d800 	call	42d80 <downAlarmHour>
   41098:	e0bffb45 	stb	r2,-19(fp)
   4109c:	1006d23a 	srli	r3,r2,8
   410a0:	1809883a 	mov	r4,r3
   410a4:	00ffffc4 	movi	r3,-1
   410a8:	20c6703a 	and	r3,r4,r3
   410ac:	e0fffb85 	stb	r3,-18(fp)
   410b0:	1004d43a 	srli	r2,r2,16
   410b4:	1007883a 	mov	r3,r2
   410b8:	00bfffc4 	movi	r2,-1
   410bc:	1884703a 	and	r2,r3,r2
   410c0:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   410c4:	00004106 	br	411cc <buttonsISR+0x390>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   410c8:	d0a0f943 	ldbu	r2,-31771(gp)
   410cc:	10803fcc 	andi	r2,r2,255
   410d0:	10800058 	cmpnei	r2,r2,1
   410d4:	10003d1e 	bne	r2,zero,411cc <buttonsISR+0x390>
              display = downAlarmMinute();
   410d8:	0042cd80 	call	42cd8 <downAlarmMinute>
   410dc:	e0bffb45 	stb	r2,-19(fp)
   410e0:	1006d23a 	srli	r3,r2,8
   410e4:	1809883a 	mov	r4,r3
   410e8:	00ffffc4 	movi	r3,-1
   410ec:	20c6703a 	and	r3,r4,r3
   410f0:	e0fffb85 	stb	r3,-18(fp)
   410f4:	1004d43a 	srli	r2,r2,16
   410f8:	1007883a 	mov	r3,r2
   410fc:	00bfffc4 	movi	r2,-1
   41100:	1884703a 	and	r2,r3,r2
   41104:	e0bffbc5 	stb	r2,-17(fp)
            }
          }
          break;
   41108:	00003006 	br	411cc <buttonsISR+0x390>


        case DISP_VOLUME:

          display.hour = DONT_DISPLAY;
   4110c:	00801904 	movi	r2,100
   41110:	e0bffb45 	stb	r2,-19(fp)
          display.minute = DONT_DISPLAY;
   41114:	00801904 	movi	r2,100
   41118:	e0bffb85 	stb	r2,-18(fp)
          if (buttons_state == UP) {
   4111c:	e0bffb03 	ldbu	r2,-20(fp)
   41120:	10800098 	cmpnei	r2,r2,2
   41124:	1000031e 	bne	r2,zero,41134 <buttonsISR+0x2f8>
            display.second = upVolume();
   41128:	00413280 	call	41328 <upVolume>
   4112c:	e0bffbc5 	stb	r2,-17(fp)
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   41130:	00002806 	br	411d4 <buttonsISR+0x398>
          display.hour = DONT_DISPLAY;
          display.minute = DONT_DISPLAY;
          if (buttons_state == UP) {
            display.second = upVolume();
          }
          else if (buttons_state == DOWN) {
   41134:	e0bffb03 	ldbu	r2,-20(fp)
   41138:	10800058 	cmpnei	r2,r2,1
   4113c:	1000251e 	bne	r2,zero,411d4 <buttonsISR+0x398>
            display.second = downVolume();
   41140:	00413640 	call	41364 <downVolume>
   41144:	e0bffbc5 	stb	r2,-17(fp)
          }
          
          break;
   41148:	00002206 	br	411d4 <buttonsISR+0x398>

        case DISP_SONG:

          /* immediately cut the PWM in case -> this should add an artificial 
          "pause" the time it takes to fetch and parse the song */
          stopPWM();
   4114c:	004139c0 	call	4139c <stopPWM>

          display.hour = DONT_DISPLAY;
   41150:	00801904 	movi	r2,100
   41154:	e0bffb45 	stb	r2,-19(fp)
          display.minute = DONT_DISPLAY;
   41158:	00801904 	movi	r2,100
   4115c:	e0bffb85 	stb	r2,-18(fp)
          if (buttons_state == UP) {
   41160:	e0bffb03 	ldbu	r2,-20(fp)
   41164:	10800098 	cmpnei	r2,r2,2
   41168:	1000031e 	bne	r2,zero,41178 <buttonsISR+0x33c>
            display.second = upSong();
   4116c:	00417d00 	call	417d0 <upSong>
   41170:	e0bffbc5 	stb	r2,-17(fp)
   41174:	00000506 	br	4118c <buttonsISR+0x350>
          }
          else if (buttons_state == DOWN) {
   41178:	e0bffb03 	ldbu	r2,-20(fp)
   4117c:	10800058 	cmpnei	r2,r2,1
   41180:	1000021e 	bne	r2,zero,4118c <buttonsISR+0x350>
            display.second = downSong();
   41184:	00418140 	call	41814 <downSong>
   41188:	e0bffbc5 	stb	r2,-17(fp)
          }

          struct note_info note;
          note = playSong();
   4118c:	e0bffc04 	addi	r2,fp,-16
   41190:	1009883a 	mov	r4,r2
   41194:	00418d80 	call	418d8 <playSong>
          //printf("button input while in display song mode...\n");
          //printf("note.frequency == %d\n",note.frequency);
          //printf("note.duration == %d\n",note.duration);
          //printf("note.endofsong == %d\n",note.endofsong);
          
          writePWM(note.frequency);
   41198:	e0bffc17 	ldw	r2,-16(fp)
   4119c:	1009883a 	mov	r4,r2
   411a0:	00413e80 	call	413e8 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   411a4:	e0bffd17 	ldw	r2,-12(fp)
   411a8:	1009883a 	mov	r4,r2
   411ac:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   411b0:	00000906 	br	411d8 <buttonsISR+0x39c>

        default:
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
   411b4:	01000134 	movhi	r4,4
   411b8:	2115f804 	addi	r4,r4,22496
   411bc:	0043ca80 	call	43ca8 <puts>
   411c0:	00000506 	br	411d8 <buttonsISR+0x39c>
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   411c4:	0001883a 	nop
   411c8:	00000306 	br	411d8 <buttonsISR+0x39c>
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   411cc:	0001883a 	nop
   411d0:	00000106 	br	411d8 <buttonsISR+0x39c>
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   411d4:	0001883a 	nop
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   411d8:	e0bffb43 	ldbu	r2,-19(fp)
   411dc:	e0fffb83 	ldbu	r3,-18(fp)
   411e0:	1806923a 	slli	r3,r3,8
   411e4:	1884b03a 	or	r2,r3,r2
   411e8:	e0fffbc3 	ldbu	r3,-17(fp)
   411ec:	1806943a 	slli	r3,r3,16
   411f0:	1888b03a 	or	r4,r3,r2
   411f4:	0007883a 	mov	r3,zero
   411f8:	00804034 	movhi	r2,256
   411fc:	10bfffc4 	addi	r2,r2,-1
   41200:	2084703a 	and	r2,r4,r2
   41204:	18ffc02c 	andhi	r3,r3,65280
   41208:	1884b03a 	or	r2,r3,r2
   4120c:	1007883a 	mov	r3,r2
   41210:	1809883a 	mov	r4,r3
   41214:	00404600 	call	40460 <updateDisplay>
    }

  // we can't forget to reset edge capture register by writing to it!
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   41218:	0007883a 	mov	r3,zero
   4121c:	00800234 	movhi	r2,8
   41220:	10841f04 	addi	r2,r2,4220
   41224:	10c00035 	stwio	r3,0(r2)

}
   41228:	e037883a 	mov	sp,fp
   4122c:	dfc00117 	ldw	ra,4(sp)
   41230:	df000017 	ldw	fp,0(sp)
   41234:	dec00204 	addi	sp,sp,8
   41238:	f800283a 	ret

0004123c <timerPWMISR>:


void timerPWMISR(void* isr_context) {
   4123c:	defff704 	addi	sp,sp,-36
   41240:	dfc00815 	stw	ra,32(sp)
   41244:	df000715 	stw	fp,28(sp)
   41248:	df000704 	addi	fp,sp,28
   4124c:	e13ffc15 	stw	r4,-16(fp)
  //printf("timerPWMISR has fired!\n");

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_PWM_BASE, 0);
   41250:	0007883a 	mov	r3,zero
   41254:	00800234 	movhi	r2,8
   41258:	10840004 	addi	r2,r2,4096
   4125c:	10c00035 	stwio	r3,0(r2)

  struct note_info note;

  note = getNote();
   41260:	e13ff904 	addi	r4,fp,-28
   41264:	0041bc40 	call	41bc4 <getNote>
  //printf("note.frequency == %d\n",note.frequency);
  //printf("note.duration == %d\n",note.duration);
  //printf("note.endofsong == %d\n",note.endofsong);

  if (note.endofsong == FALSE) {
   41268:	e0bffb17 	ldw	r2,-20(fp)
   4126c:	1000071e 	bne	r2,zero,4128c <timerPWMISR+0x50>
    writePWM(note.frequency);
   41270:	e0bff917 	ldw	r2,-28(fp)
   41274:	1009883a 	mov	r4,r2
   41278:	00413e80 	call	413e8 <writePWM>
    timerPWMEnableInterrupt(note.duration);
   4127c:	e0bffa17 	ldw	r2,-24(fp)
   41280:	1009883a 	mov	r4,r2
   41284:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      writePWM(note.frequency);
      timerPWMEnableInterrupt(note.duration);  
    }
  }

}
   41288:	00001906 	br	412f0 <timerPWMISR+0xb4>

  if (note.endofsong == FALSE) {
    writePWM(note.frequency);
    timerPWMEnableInterrupt(note.duration);
  }
  else if (note.endofsong == TRUE) {
   4128c:	e0bffb17 	ldw	r2,-20(fp)
   41290:	10800058 	cmpnei	r2,r2,1
   41294:	1000161e 	bne	r2,zero,412f0 <timerPWMISR+0xb4>
    if (mode.display == DISP_SONG) {
   41298:	d0a0f843 	ldbu	r2,-31775(gp)
   4129c:	10803fcc 	andi	r2,r2,255
   412a0:	108000d8 	cmpnei	r2,r2,3
   412a4:	1000031e 	bne	r2,zero,412b4 <timerPWMISR+0x78>
      //printf("song played through once while in display song mode...\n");
      stopPWM();
   412a8:	004139c0 	call	4139c <stopPWM>
      timerPWMDisableInterrupt();
   412ac:	00408d80 	call	408d8 <timerPWMDisableInterrupt>
      writePWM(note.frequency);
      timerPWMEnableInterrupt(note.duration);  
    }
  }

}
   412b0:	00000f06 	br	412f0 <timerPWMISR+0xb4>
      stopPWM();
      timerPWMDisableInterrupt();
    }
    else {
      //printf("Turn off alarm to stop the song!\n");
      note = playSong();
   412b4:	e0bffd04 	addi	r2,fp,-12
   412b8:	1009883a 	mov	r4,r2
   412bc:	00418d80 	call	418d8 <playSong>
   412c0:	e0bffd17 	ldw	r2,-12(fp)
   412c4:	e0bff915 	stw	r2,-28(fp)
   412c8:	e0bffe17 	ldw	r2,-8(fp)
   412cc:	e0bffa15 	stw	r2,-24(fp)
   412d0:	e0bfff17 	ldw	r2,-4(fp)
   412d4:	e0bffb15 	stw	r2,-20(fp)
      //printf("note.frequency == %d\n",note.frequency);
      //printf("note.duration == %d\n",note.duration);
      //printf("note.endofsong == %d\n",note.endofsong);
      writePWM(note.frequency);
   412d8:	e0bff917 	ldw	r2,-28(fp)
   412dc:	1009883a 	mov	r4,r2
   412e0:	00413e80 	call	413e8 <writePWM>
      timerPWMEnableInterrupt(note.duration);  
   412e4:	e0bffa17 	ldw	r2,-24(fp)
   412e8:	1009883a 	mov	r4,r2
   412ec:	004086c0 	call	4086c <timerPWMEnableInterrupt>
    }
  }

}
   412f0:	0001883a 	nop
   412f4:	e037883a 	mov	sp,fp
   412f8:	dfc00117 	ldw	ra,4(sp)
   412fc:	df000017 	ldw	fp,0(sp)
   41300:	dec00204 	addi	sp,sp,8
   41304:	f800283a 	ret

00041308 <getVolume>:
#include "pwm.h"

uint8_t volume = 1;

uint8_t getVolume(void) {
   41308:	deffff04 	addi	sp,sp,-4
   4130c:	df000015 	stw	fp,0(sp)
   41310:	d839883a 	mov	fp,sp
  return volume;
   41314:	d0a00003 	ldbu	r2,-32768(gp)
}
   41318:	e037883a 	mov	sp,fp
   4131c:	df000017 	ldw	fp,0(sp)
   41320:	dec00104 	addi	sp,sp,4
   41324:	f800283a 	ret

00041328 <upVolume>:

uint8_t upVolume(void) {
   41328:	deffff04 	addi	sp,sp,-4
   4132c:	df000015 	stw	fp,0(sp)
   41330:	d839883a 	mov	fp,sp
  if (volume != MAX_VOLUME) {
   41334:	d0a00003 	ldbu	r2,-32768(gp)
   41338:	10803fcc 	andi	r2,r2,255
   4133c:	10800320 	cmpeqi	r2,r2,12
   41340:	1000031e 	bne	r2,zero,41350 <upVolume+0x28>
    volume++;
   41344:	d0a00003 	ldbu	r2,-32768(gp)
   41348:	10800044 	addi	r2,r2,1
   4134c:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   41350:	d0a00003 	ldbu	r2,-32768(gp)
}
   41354:	e037883a 	mov	sp,fp
   41358:	df000017 	ldw	fp,0(sp)
   4135c:	dec00104 	addi	sp,sp,4
   41360:	f800283a 	ret

00041364 <downVolume>:
uint8_t downVolume(void) {
   41364:	deffff04 	addi	sp,sp,-4
   41368:	df000015 	stw	fp,0(sp)
   4136c:	d839883a 	mov	fp,sp
  if (volume != 0) {
   41370:	d0a00003 	ldbu	r2,-32768(gp)
   41374:	10803fcc 	andi	r2,r2,255
   41378:	10000326 	beq	r2,zero,41388 <downVolume+0x24>
    volume--;
   4137c:	d0a00003 	ldbu	r2,-32768(gp)
   41380:	10bfffc4 	addi	r2,r2,-1
   41384:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   41388:	d0a00003 	ldbu	r2,-32768(gp)
}
   4138c:	e037883a 	mov	sp,fp
   41390:	df000017 	ldw	fp,0(sp)
   41394:	dec00104 	addi	sp,sp,4
   41398:	f800283a 	ret

0004139c <stopPWM>:

void stopPWM(void) {
   4139c:	defffd04 	addi	sp,sp,-12
   413a0:	dfc00215 	stw	ra,8(sp)
   413a4:	df000115 	stw	fp,4(sp)
   413a8:	df000104 	addi	fp,sp,4
  int return_code = ALTERA_AVALON_PWM_OK;
   413ac:	e03fff15 	stw	zero,-4(fp)

  //Disable PWM and Check Return Code
  return_code = altera_avalon_pwm_disable(PWM_BASE); 
   413b0:	01000234 	movhi	r4,8
   413b4:	21043c04 	addi	r4,r4,4336
   413b8:	00403380 	call	40338 <altera_avalon_pwm_disable>
   413bc:	e0bfff15 	stw	r2,-4(fp)
  check_return_code(PWM_BASE, return_code);
   413c0:	e17fff17 	ldw	r5,-4(fp)
   413c4:	01000234 	movhi	r4,8
   413c8:	21043c04 	addi	r4,r4,4336
   413cc:	00416800 	call	41680 <check_return_code>
}
   413d0:	0001883a 	nop
   413d4:	e037883a 	mov	sp,fp
   413d8:	dfc00117 	ldw	ra,4(sp)
   413dc:	df000017 	ldw	fp,0(sp)
   413e0:	dec00204 	addi	sp,sp,8
   413e4:	f800283a 	ret

000413e8 <writePWM>:

void writePWM(int frequency) {
   413e8:	defffa04 	addi	sp,sp,-24
   413ec:	dfc00515 	stw	ra,20(sp)
   413f0:	df000415 	stw	fp,16(sp)
   413f4:	df000404 	addi	fp,sp,16
   413f8:	e13fff15 	stw	r4,-4(fp)

  if (frequency == 0) {
   413fc:	e0bfff17 	ldw	r2,-4(fp)
   41400:	1000021e 	bne	r2,zero,4140c <writePWM+0x24>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
   41404:	004139c0 	call	4139c <stopPWM>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
    check_return_code(PWM_BASE, return_code);
  }
}
   41408:	00002a06 	br	414b4 <writePWM+0xcc>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
  }
  else {
    // conversion of input frequency to PWM clock cycle divide value
    unsigned int clock_divide = NIOS_CLOCK_FREQ/frequency;
   4140c:	e17fff17 	ldw	r5,-4(fp)
   41410:	0100bef4 	movhi	r4,763
   41414:	213c2004 	addi	r4,r4,-3968
   41418:	0042e8c0 	call	42e8c <__divsi3>
   4141c:	e0bffc15 	stw	r2,-16(fp)

    unsigned int duty_cycle = clock_divide*duty_cycle_lookup_table[volume];
   41420:	e13ffc17 	ldw	r4,-16(fp)
   41424:	0043a4c0 	call	43a4c <__floatunsisf>
   41428:	1009883a 	mov	r4,r2
   4142c:	d0a00003 	ldbu	r2,-32768(gp)
   41430:	10c03fcc 	andi	r3,r2,255
   41434:	00800134 	movhi	r2,4
   41438:	10960704 	addi	r2,r2,22556
   4143c:	18c7883a 	add	r3,r3,r3
   41440:	18c7883a 	add	r3,r3,r3
   41444:	10c5883a 	add	r2,r2,r3
   41448:	10c00017 	ldw	r3,0(r2)
   4144c:	180b883a 	mov	r5,r3
   41450:	00430fc0 	call	430fc <__mulsf3>
   41454:	1007883a 	mov	r3,r2
   41458:	1805883a 	mov	r2,r3
   4145c:	1009883a 	mov	r4,r2
   41460:	0042e2c0 	call	42e2c <__fixunssfsi>
   41464:	e0bffd15 	stw	r2,-12(fp)

    int return_code = ALTERA_AVALON_PWM_OK;
   41468:	e03ffe15 	stw	zero,-8(fp)
    
    //Initialize PWM and Check Return Code
    return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   4146c:	e1bffd17 	ldw	r6,-12(fp)
   41470:	e17ffc17 	ldw	r5,-16(fp)
   41474:	01000234 	movhi	r4,8
   41478:	21043c04 	addi	r4,r4,4336
   4147c:	00402800 	call	40280 <altera_avalon_pwm_init>
   41480:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   41484:	e17ffe17 	ldw	r5,-8(fp)
   41488:	01000234 	movhi	r4,8
   4148c:	21043c04 	addi	r4,r4,4336
   41490:	00416800 	call	41680 <check_return_code>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
   41494:	01000234 	movhi	r4,8
   41498:	21043c04 	addi	r4,r4,4336
   4149c:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   414a0:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   414a4:	e17ffe17 	ldw	r5,-8(fp)
   414a8:	01000234 	movhi	r4,8
   414ac:	21043c04 	addi	r4,r4,4336
   414b0:	00416800 	call	41680 <check_return_code>
  }
}
   414b4:	0001883a 	nop
   414b8:	e037883a 	mov	sp,fp
   414bc:	dfc00117 	ldw	ra,4(sp)
   414c0:	df000017 	ldw	fp,0(sp)
   414c4:	dec00204 	addi	sp,sp,8
   414c8:	f800283a 	ret

000414cc <default500HzSquareWave>:

void default500HzSquareWave(void) {
   414cc:	defffb04 	addi	sp,sp,-20
   414d0:	dfc00415 	stw	ra,16(sp)
   414d4:	df000315 	stw	fp,12(sp)
   414d8:	df000304 	addi	fp,sp,12

 unsigned int clock_divide = 100000;
   414dc:	008000b4 	movhi	r2,2
   414e0:	10a1a804 	addi	r2,r2,-31072
   414e4:	e0bffd15 	stw	r2,-12(fp)
 unsigned int duty_cycle =    50000;
   414e8:	00b0d414 	movui	r2,50000
   414ec:	e0bffe15 	stw	r2,-8(fp)
 int return_code = ALTERA_AVALON_PWM_OK;
   414f0:	e03fff15 	stw	zero,-4(fp)
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   414f4:	e1bffe17 	ldw	r6,-8(fp)
   414f8:	e17ffd17 	ldw	r5,-12(fp)
   414fc:	01000234 	movhi	r4,8
   41500:	21043c04 	addi	r4,r4,4336
   41504:	00402800 	call	40280 <altera_avalon_pwm_init>
   41508:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4150c:	e17fff17 	ldw	r5,-4(fp)
   41510:	01000234 	movhi	r4,8
   41514:	21043c04 	addi	r4,r4,4336
   41518:	00416800 	call	41680 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   4151c:	01000234 	movhi	r4,8
   41520:	21043c04 	addi	r4,r4,4336
   41524:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41528:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4152c:	e17fff17 	ldw	r5,-4(fp)
   41530:	01000234 	movhi	r4,8
   41534:	21043c04 	addi	r4,r4,4336
   41538:	00416800 	call	41680 <check_return_code>
}
   4153c:	0001883a 	nop
   41540:	e037883a 	mov	sp,fp
   41544:	dfc00117 	ldw	ra,4(sp)
   41548:	df000017 	ldw	fp,0(sp)
   4154c:	dec00204 	addi	sp,sp,8
   41550:	f800283a 	ret

00041554 <testPWM>:



void testPWM(void) {
   41554:	defffc04 	addi	sp,sp,-16
   41558:	dfc00315 	stw	ra,12(sp)
   4155c:	df000215 	stw	fp,8(sp)
   41560:	df000204 	addi	fp,sp,8
 
 unsigned int duty_cycle;
 int return_code = ALTERA_AVALON_PWM_OK;
   41564:	e03fff15 	stw	zero,-4(fp)
 
 printf("Period = %u\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE) );
   41568:	00800234 	movhi	r2,8
   4156c:	10843c04 	addi	r2,r2,4336
   41570:	10800037 	ldwio	r2,0(r2)
   41574:	100b883a 	mov	r5,r2
   41578:	01000134 	movhi	r4,4
   4157c:	21161404 	addi	r4,r4,22608
   41580:	0043bdc0 	call	43bdc <printf>
 printf("Duty cycle = %u\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE) );
   41584:	00800234 	movhi	r2,8
   41588:	10843d04 	addi	r2,r2,4340
   4158c:	10800037 	ldwio	r2,0(r2)
   41590:	100b883a 	mov	r5,r2
   41594:	01000134 	movhi	r4,4
   41598:	21161804 	addi	r4,r4,22624
   4159c:	0043bdc0 	call	43bdc <printf>
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, 500000, 1);  
   415a0:	01800044 	movi	r6,1
   415a4:	01400234 	movhi	r5,8
   415a8:	29684804 	addi	r5,r5,-24288
   415ac:	01000234 	movhi	r4,8
   415b0:	21043c04 	addi	r4,r4,4336
   415b4:	00402800 	call	40280 <altera_avalon_pwm_init>
   415b8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   415bc:	e17fff17 	ldw	r5,-4(fp)
   415c0:	01000234 	movhi	r4,8
   415c4:	21043c04 	addi	r4,r4,4336
   415c8:	00416800 	call	41680 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   415cc:	01000234 	movhi	r4,8
   415d0:	21043c04 	addi	r4,r4,4336
   415d4:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   415d8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   415dc:	e17fff17 	ldw	r5,-4(fp)
   415e0:	01000234 	movhi	r4,8
   415e4:	21043c04 	addi	r4,r4,4336
   415e8:	00416800 	call	41680 <check_return_code>

//init duty_cycle with the value written to duty_cycle register during initialization
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
   415ec:	00800234 	movhi	r2,8
   415f0:	10843d04 	addi	r2,r2,4340
   415f4:	10800037 	ldwio	r2,0(r2)
   415f8:	e0bffe15 	stw	r2,-8(fp)
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   415fc:	00000906 	br	41624 <testPWM+0xd0>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   41600:	e17ffe17 	ldw	r5,-8(fp)
   41604:	01000234 	movhi	r4,8
   41608:	21043c04 	addi	r4,r4,4336
   4160c:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
   41610:	e0bfff15 	stw	r2,-4(fp)
      	check_return_code(PWM_BASE, return_code);
   41614:	e17fff17 	ldw	r5,-4(fp)
   41618:	01000234 	movhi	r4,8
   4161c:	21043c04 	addi	r4,r4,4336
   41620:	00416800 	call	41680 <check_return_code>
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   41624:	e0fffe17 	ldw	r3,-8(fp)
   41628:	18800044 	addi	r2,r3,1
   4162c:	e0bffe15 	stw	r2,-8(fp)
   41630:	00800234 	movhi	r2,8
   41634:	10843c04 	addi	r2,r2,4336
   41638:	10800037 	ldwio	r2,0(r2)
   4163c:	18bff036 	bltu	r3,r2,41600 <__alt_data_end+0xfffd9600>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   41640:	00000406 	br	41654 <testPWM+0x100>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   41644:	e17ffe17 	ldw	r5,-8(fp)
   41648:	01000234 	movhi	r4,8
   4164c:	21043c04 	addi	r4,r4,4336
   41650:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   41654:	e0bffe17 	ldw	r2,-8(fp)
   41658:	10bfffc4 	addi	r2,r2,-1
   4165c:	e0bffe15 	stw	r2,-8(fp)
   41660:	e0bffe17 	ldw	r2,-8(fp)
   41664:	108000a8 	cmpgeui	r2,r2,2
   41668:	103ff61e 	bne	r2,zero,41644 <__alt_data_end+0xfffd9644>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
        check_return_code(PWM_BASE, return_code);
   4166c:	e17fff17 	ldw	r5,-4(fp)
   41670:	01000234 	movhi	r4,8
   41674:	21043c04 	addi	r4,r4,4336
   41678:	00416800 	call	41680 <check_return_code>
   }
   4167c:	003fdf06 	br	415fc <__alt_data_end+0xfffd95fc>

00041680 <check_return_code>:
}

void check_return_code(unsigned int address, int return_code)
{
   41680:	defffc04 	addi	sp,sp,-16
   41684:	dfc00315 	stw	ra,12(sp)
   41688:	df000215 	stw	fp,8(sp)
   4168c:	df000204 	addi	fp,sp,8
   41690:	e13ffe15 	stw	r4,-8(fp)
   41694:	e17fff15 	stw	r5,-4(fp)
	if(return_code != ALTERA_AVALON_PWM_OK)
   41698:	e0bfff17 	ldw	r2,-4(fp)
   4169c:	10000326 	beq	r2,zero,416ac <check_return_code+0x2c>
      		print_error(address, return_code);	
   416a0:	e17fff17 	ldw	r5,-4(fp)
   416a4:	e13ffe17 	ldw	r4,-8(fp)
   416a8:	00416c40 	call	416c4 <print_error>
}
   416ac:	0001883a 	nop
   416b0:	e037883a 	mov	sp,fp
   416b4:	dfc00117 	ldw	ra,4(sp)
   416b8:	df000017 	ldw	fp,0(sp)
   416bc:	dec00204 	addi	sp,sp,8
   416c0:	f800283a 	ret

000416c4 <print_error>:

void print_error(unsigned int address, int return_code)
{
   416c4:	defffc04 	addi	sp,sp,-16
   416c8:	dfc00315 	stw	ra,12(sp)
   416cc:	df000215 	stw	fp,8(sp)
   416d0:	df000204 	addi	fp,sp,8
   416d4:	e13ffe15 	stw	r4,-8(fp)
   416d8:	e17fff15 	stw	r5,-4(fp)
	printf("Program Terminated Due to an error with Avalon PWM located at 0x%x:\n", address);
   416dc:	e17ffe17 	ldw	r5,-8(fp)
   416e0:	01000134 	movhi	r4,4
   416e4:	21161d04 	addi	r4,r4,22644
   416e8:	0043bdc0 	call	43bdc <printf>
	switch(return_code)
   416ec:	e0bfff17 	ldw	r2,-4(fp)
   416f0:	10ffffa0 	cmpeqi	r3,r2,-2
   416f4:	1800161e 	bne	r3,zero,41750 <print_error+0x8c>
   416f8:	10ffffe0 	cmpeqi	r3,r2,-1
   416fc:	1800031e 	bne	r3,zero,4170c <print_error+0x48>
   41700:	10bfff60 	cmpeqi	r2,r2,-3
   41704:	10001d1e 	bne	r2,zero,4177c <print_error+0xb8>
   41708:	00002706 	br	417a8 <print_error+0xe4>
	{
	case ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR:
		printf("The value in the clock cycle register must be greater than the value in the duty cycle register\n");
   4170c:	01000134 	movhi	r4,4
   41710:	21162f04 	addi	r4,r4,22716
   41714:	0043ca80 	call	43ca8 <puts>
		printf("Value in the Clock Divide Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address)); 
   41718:	e0bffe17 	ldw	r2,-8(fp)
   4171c:	10800037 	ldwio	r2,0(r2)
   41720:	100b883a 	mov	r5,r2
   41724:	01000134 	movhi	r4,4
   41728:	21164704 	addi	r4,r4,22812
   4172c:	0043bdc0 	call	43bdc <printf>
		printf("Value in the Duty Cycle Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(address));
   41730:	e0bffe17 	ldw	r2,-8(fp)
   41734:	10800104 	addi	r2,r2,4
   41738:	10800037 	ldwio	r2,0(r2)
   4173c:	100b883a 	mov	r5,r2
   41740:	01000134 	movhi	r4,4
   41744:	21165204 	addi	r4,r4,22856
   41748:	0043bdc0 	call	43bdc <printf>
		break;
   4174c:	00001706 	br	417ac <print_error+0xe8>
  case ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR:
    printf("Unable to confirm that the PWM is enabled\n");
   41750:	01000134 	movhi	r4,4
   41754:	21165c04 	addi	r4,r4,22896
   41758:	0043ca80 	call	43ca8 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   4175c:	e0bffe17 	ldw	r2,-8(fp)
   41760:	10800204 	addi	r2,r2,8
   41764:	10800037 	ldwio	r2,0(r2)
   41768:	100b883a 	mov	r5,r2
   4176c:	01000134 	movhi	r4,4
   41770:	21166704 	addi	r4,r4,22940
   41774:	0043bdc0 	call	43bdc <printf>
    break;
   41778:	00000c06 	br	417ac <print_error+0xe8>
  case ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR:
  	printf("Unable to confirm that the PWM is disabled\n");
   4177c:	01000134 	movhi	r4,4
   41780:	21167004 	addi	r4,r4,22976
   41784:	0043ca80 	call	43ca8 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   41788:	e0bffe17 	ldw	r2,-8(fp)
   4178c:	10800204 	addi	r2,r2,8
   41790:	10800037 	ldwio	r2,0(r2)
   41794:	100b883a 	mov	r5,r2
   41798:	01000134 	movhi	r4,4
   4179c:	21166704 	addi	r4,r4,22940
   417a0:	0043bdc0 	call	43bdc <printf>
  	break;
   417a4:	00000106 	br	417ac <print_error+0xe8>
  default:
  	break; 		     
   417a8:	0001883a 	nop
	}
while(1);
   417ac:	003fff06 	br	417ac <__alt_data_end+0xfffd97ac>

000417b0 <getSong>:
int defscale = 6;
int bpm = 63;
int silence = 0;
char *p;

uint8_t getSong(void) {
   417b0:	deffff04 	addi	sp,sp,-4
   417b4:	df000015 	stw	fp,0(sp)
   417b8:	d839883a 	mov	fp,sp
  return song_index;
   417bc:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   417c0:	e037883a 	mov	sp,fp
   417c4:	df000017 	ldw	fp,0(sp)
   417c8:	dec00104 	addi	sp,sp,4
   417cc:	f800283a 	ret

000417d0 <upSong>:

uint8_t upSong(void) {
   417d0:	deffff04 	addi	sp,sp,-4
   417d4:	df000015 	stw	fp,0(sp)
   417d8:	d839883a 	mov	fp,sp
  // whoops! this isnt what i want -> i want to get the number of strings (number of songs)
  // implement: sizeof(names)/sizeof(names[0]) to get length array
  if (song_index == sizeof(song)) {
   417dc:	d0a0fa03 	ldbu	r2,-31768(gp)
   417e0:	10803fcc 	andi	r2,r2,255
   417e4:	10801f18 	cmpnei	r2,r2,124
   417e8:	1000021e 	bne	r2,zero,417f4 <upSong+0x24>
    song_index = 0;
   417ec:	d020fa05 	stb	zero,-31768(gp)
   417f0:	00000306 	br	41800 <upSong+0x30>
  }
  else {
    song_index++;
   417f4:	d0a0fa03 	ldbu	r2,-31768(gp)
   417f8:	10800044 	addi	r2,r2,1
   417fc:	d0a0fa05 	stb	r2,-31768(gp)
  }
  return song_index;
   41800:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   41804:	e037883a 	mov	sp,fp
   41808:	df000017 	ldw	fp,0(sp)
   4180c:	dec00104 	addi	sp,sp,4
   41810:	f800283a 	ret

00041814 <downSong>:

uint8_t downSong(void) {
   41814:	deffff04 	addi	sp,sp,-4
   41818:	df000015 	stw	fp,0(sp)
   4181c:	d839883a 	mov	fp,sp
  if (song_index == 0) {
   41820:	d0a0fa03 	ldbu	r2,-31768(gp)
   41824:	10803fcc 	andi	r2,r2,255
   41828:	10000326 	beq	r2,zero,41838 <downSong+0x24>
    // implement: sizeof(names)/sizeof(names[0]) to get length of array
    //song_index = sizeof(song);
  }
  else {
    song_index--;
   4182c:	d0a0fa03 	ldbu	r2,-31768(gp)
   41830:	10bfffc4 	addi	r2,r2,-1
   41834:	d0a0fa05 	stb	r2,-31768(gp)
  }
  return song_index;
   41838:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   4183c:	e037883a 	mov	sp,fp
   41840:	df000017 	ldw	fp,0(sp)
   41844:	dec00104 	addi	sp,sp,4
   41848:	f800283a 	ret

0004184c <note2freq>:

int note2freq(int note) {
   4184c:	defffc04 	addi	sp,sp,-16
   41850:	dfc00315 	stw	ra,12(sp)
   41854:	df000215 	stw	fp,8(sp)
   41858:	dc000115 	stw	r16,4(sp)
   4185c:	df000204 	addi	fp,sp,8
   41860:	e13ffe15 	stw	r4,-8(fp)
  return notefreq[note % 12] / (1 << (9 - (note / 12)));
   41864:	e0bffe17 	ldw	r2,-8(fp)
   41868:	01400304 	movi	r5,12
   4186c:	1009883a 	mov	r4,r2
   41870:	0042f100 	call	42f10 <__modsi3>
   41874:	1007883a 	mov	r3,r2
   41878:	00800134 	movhi	r2,4
   4187c:	109d0204 	addi	r2,r2,29704
   41880:	18c7883a 	add	r3,r3,r3
   41884:	18c7883a 	add	r3,r3,r3
   41888:	10c5883a 	add	r2,r2,r3
   4188c:	14000017 	ldw	r16,0(r2)
   41890:	e0bffe17 	ldw	r2,-8(fp)
   41894:	01400304 	movi	r5,12
   41898:	1009883a 	mov	r4,r2
   4189c:	0042e8c0 	call	42e8c <__divsi3>
   418a0:	1007883a 	mov	r3,r2
   418a4:	00800244 	movi	r2,9
   418a8:	10c5c83a 	sub	r2,r2,r3
   418ac:	00c00044 	movi	r3,1
   418b0:	1884983a 	sll	r2,r3,r2
   418b4:	100b883a 	mov	r5,r2
   418b8:	8009883a 	mov	r4,r16
   418bc:	0042e8c0 	call	42e8c <__divsi3>
}
   418c0:	e6ffff04 	addi	sp,fp,-4
   418c4:	dfc00217 	ldw	ra,8(sp)
   418c8:	df000117 	ldw	fp,4(sp)
   418cc:	dc000017 	ldw	r16,0(sp)
   418d0:	dec00304 	addi	sp,sp,12
   418d4:	f800283a 	ret

000418d8 <playSong>:

struct note_info playSong(void) {
   418d8:	defff804 	addi	sp,sp,-32
   418dc:	dfc00715 	stw	ra,28(sp)
   418e0:	df000615 	stw	fp,24(sp)
   418e4:	df000604 	addi	fp,sp,24
   418e8:	e13fff15 	stw	r4,-4(fp)

  p = song[song_index];
   418ec:	d0a0fa03 	ldbu	r2,-31768(gp)
   418f0:	10c03fcc 	andi	r3,r2,255
   418f4:	00800134 	movhi	r2,4
   418f8:	109ce304 	addi	r2,r2,29580
   418fc:	18c7883a 	add	r3,r3,r3
   41900:	18c7883a 	add	r3,r3,r3
   41904:	10c5883a 	add	r2,r2,r3
   41908:	10800017 	ldw	r2,0(r2)
   4190c:	d0a0fc15 	stw	r2,-31760(gp)
  
  // Skip name
  while (*p && *p != ':') p++;
   41910:	00000306 	br	41920 <playSong+0x48>
   41914:	d0a0fc17 	ldw	r2,-31760(gp)
   41918:	10800044 	addi	r2,r2,1
   4191c:	d0a0fc15 	stw	r2,-31760(gp)
   41920:	d0a0fc17 	ldw	r2,-31760(gp)
   41924:	10800003 	ldbu	r2,0(r2)
   41928:	10803fcc 	andi	r2,r2,255
   4192c:	1080201c 	xori	r2,r2,128
   41930:	10bfe004 	addi	r2,r2,-128
   41934:	10000726 	beq	r2,zero,41954 <playSong+0x7c>
   41938:	d0a0fc17 	ldw	r2,-31760(gp)
   4193c:	10800003 	ldbu	r2,0(r2)
   41940:	10803fcc 	andi	r2,r2,255
   41944:	1080201c 	xori	r2,r2,128
   41948:	10bfe004 	addi	r2,r2,-128
   4194c:	10800e98 	cmpnei	r2,r2,58
   41950:	103ff01e 	bne	r2,zero,41914 <__alt_data_end+0xfffd9914>
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
   41954:	d0a0fc17 	ldw	r2,-31760(gp)
   41958:	10800003 	ldbu	r2,0(r2)
   4195c:	10803fcc 	andi	r2,r2,255
   41960:	1080201c 	xori	r2,r2,128
   41964:	10bfe004 	addi	r2,r2,-128
   41968:	1000041e 	bne	r2,zero,4197c <playSong+0xa4>
   4196c:	01000134 	movhi	r4,4
   41970:	211c5404 	addi	r4,r4,29008
   41974:	0043ca80 	call	43ca8 <puts>
   41978:	00008c06 	br	41bac <playSong+0x2d4>
  p++;
   4197c:	d0a0fc17 	ldw	r2,-31760(gp)
   41980:	10800044 	addi	r2,r2,1
   41984:	d0a0fc15 	stw	r2,-31760(gp)

  // Parse defaults
  while (*p) {
   41988:	00007206 	br	41b54 <playSong+0x27c>
    char param;
    int value;

    while (*p == ' ') p++;
   4198c:	d0a0fc17 	ldw	r2,-31760(gp)
   41990:	10800044 	addi	r2,r2,1
   41994:	d0a0fc15 	stw	r2,-31760(gp)
   41998:	d0a0fc17 	ldw	r2,-31760(gp)
   4199c:	10800003 	ldbu	r2,0(r2)
   419a0:	10803fcc 	andi	r2,r2,255
   419a4:	1080201c 	xori	r2,r2,128
   419a8:	10bfe004 	addi	r2,r2,-128
   419ac:	10800820 	cmpeqi	r2,r2,32
   419b0:	103ff61e 	bne	r2,zero,4198c <__alt_data_end+0xfffd998c>
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
   419b4:	d0a0fc17 	ldw	r2,-31760(gp)
   419b8:	10800003 	ldbu	r2,0(r2)
   419bc:	10803fcc 	andi	r2,r2,255
   419c0:	1080201c 	xori	r2,r2,128
   419c4:	10bfe004 	addi	r2,r2,-128
   419c8:	1000041e 	bne	r2,zero,419dc <playSong+0x104>
   419cc:	01000134 	movhi	r4,4
   419d0:	211c5c04 	addi	r4,r4,29040
   419d4:	0043ca80 	call	43ca8 <puts>
   419d8:	00007406 	br	41bac <playSong+0x2d4>
    if (*p == ':') break;
   419dc:	d0a0fc17 	ldw	r2,-31760(gp)
   419e0:	10800003 	ldbu	r2,0(r2)
   419e4:	10803fcc 	andi	r2,r2,255
   419e8:	1080201c 	xori	r2,r2,128
   419ec:	10bfe004 	addi	r2,r2,-128
   419f0:	10800e98 	cmpnei	r2,r2,58
   419f4:	10005e26 	beq	r2,zero,41b70 <playSong+0x298>

    param = *p++;
   419f8:	d0a0fc17 	ldw	r2,-31760(gp)
   419fc:	10c00044 	addi	r3,r2,1
   41a00:	d0e0fc15 	stw	r3,-31760(gp)
   41a04:	10800003 	ldbu	r2,0(r2)
   41a08:	e0bffb05 	stb	r2,-20(fp)
    if (*p != '=') {printf("ERROR in rtttl.c: = never found\n"); return;}
   41a0c:	d0a0fc17 	ldw	r2,-31760(gp)
   41a10:	10800003 	ldbu	r2,0(r2)
   41a14:	10803fcc 	andi	r2,r2,255
   41a18:	1080201c 	xori	r2,r2,128
   41a1c:	10bfe004 	addi	r2,r2,-128
   41a20:	10800f60 	cmpeqi	r2,r2,61
   41a24:	1000041e 	bne	r2,zero,41a38 <playSong+0x160>
   41a28:	01000134 	movhi	r4,4
   41a2c:	211c6604 	addi	r4,r4,29080
   41a30:	0043ca80 	call	43ca8 <puts>
   41a34:	00005d06 	br	41bac <playSong+0x2d4>
    
    p++;
   41a38:	d0a0fc17 	ldw	r2,-31760(gp)
   41a3c:	10800044 	addi	r2,r2,1
   41a40:	d0a0fc15 	stw	r2,-31760(gp)
    value = 0;
   41a44:	e03ffa15 	stw	zero,-24(fp)
    while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41a48:	00000c06 	br	41a7c <playSong+0x1a4>
   41a4c:	e0bffa17 	ldw	r2,-24(fp)
   41a50:	10c002a4 	muli	r3,r2,10
   41a54:	d0a0fc17 	ldw	r2,-31760(gp)
   41a58:	11000044 	addi	r4,r2,1
   41a5c:	d120fc15 	stw	r4,-31760(gp)
   41a60:	10800003 	ldbu	r2,0(r2)
   41a64:	10803fcc 	andi	r2,r2,255
   41a68:	1080201c 	xori	r2,r2,128
   41a6c:	10bfe004 	addi	r2,r2,-128
   41a70:	10bff404 	addi	r2,r2,-48
   41a74:	1885883a 	add	r2,r3,r2
   41a78:	e0bffa15 	stw	r2,-24(fp)
   41a7c:	d0a0fc17 	ldw	r2,-31760(gp)
   41a80:	10800003 	ldbu	r2,0(r2)
   41a84:	10803fcc 	andi	r2,r2,255
   41a88:	1080201c 	xori	r2,r2,128
   41a8c:	10bfe004 	addi	r2,r2,-128
   41a90:	10800c10 	cmplti	r2,r2,48
   41a94:	1000071e 	bne	r2,zero,41ab4 <playSong+0x1dc>
   41a98:	d0a0fc17 	ldw	r2,-31760(gp)
   41a9c:	10800003 	ldbu	r2,0(r2)
   41aa0:	10803fcc 	andi	r2,r2,255
   41aa4:	1080201c 	xori	r2,r2,128
   41aa8:	10bfe004 	addi	r2,r2,-128
   41aac:	10800e90 	cmplti	r2,r2,58
   41ab0:	103fe61e 	bne	r2,zero,41a4c <__alt_data_end+0xfffd9a4c>

    switch (param) {
   41ab4:	e0bffb07 	ldb	r2,-20(fp)
   41ab8:	10c01920 	cmpeqi	r3,r2,100
   41abc:	1800051e 	bne	r3,zero,41ad4 <playSong+0x1fc>
   41ac0:	10c01be0 	cmpeqi	r3,r2,111
   41ac4:	1800081e 	bne	r3,zero,41ae8 <playSong+0x210>
   41ac8:	108018a0 	cmpeqi	r2,r2,98
   41acc:	1000091e 	bne	r2,zero,41af4 <playSong+0x21c>
   41ad0:	00000b06 	br	41b00 <playSong+0x228>
      case 'd': defdur = 32 / value; break;
   41ad4:	e17ffa17 	ldw	r5,-24(fp)
   41ad8:	01000804 	movi	r4,32
   41adc:	0042e8c0 	call	42e8c <__divsi3>
   41ae0:	d0a00115 	stw	r2,-32764(gp)
   41ae4:	00000606 	br	41b00 <playSong+0x228>
      case 'o': defscale = value; break;
   41ae8:	e0bffa17 	ldw	r2,-24(fp)
   41aec:	d0a00215 	stw	r2,-32760(gp)
   41af0:	00000306 	br	41b00 <playSong+0x228>
      case 'b': bpm = value; break;
   41af4:	e0bffa17 	ldw	r2,-24(fp)
   41af8:	d0a00315 	stw	r2,-32756(gp)
   41afc:	0001883a 	nop
    }

    while (*p == ' ') p++;
   41b00:	00000306 	br	41b10 <playSong+0x238>
   41b04:	d0a0fc17 	ldw	r2,-31760(gp)
   41b08:	10800044 	addi	r2,r2,1
   41b0c:	d0a0fc15 	stw	r2,-31760(gp)
   41b10:	d0a0fc17 	ldw	r2,-31760(gp)
   41b14:	10800003 	ldbu	r2,0(r2)
   41b18:	10803fcc 	andi	r2,r2,255
   41b1c:	1080201c 	xori	r2,r2,128
   41b20:	10bfe004 	addi	r2,r2,-128
   41b24:	10800820 	cmpeqi	r2,r2,32
   41b28:	103ff61e 	bne	r2,zero,41b04 <__alt_data_end+0xfffd9b04>
    if (*p == ',') p++;
   41b2c:	d0a0fc17 	ldw	r2,-31760(gp)
   41b30:	10800003 	ldbu	r2,0(r2)
   41b34:	10803fcc 	andi	r2,r2,255
   41b38:	1080201c 	xori	r2,r2,128
   41b3c:	10bfe004 	addi	r2,r2,-128
   41b40:	10800b18 	cmpnei	r2,r2,44
   41b44:	1000031e 	bne	r2,zero,41b54 <playSong+0x27c>
   41b48:	d0a0fc17 	ldw	r2,-31760(gp)
   41b4c:	10800044 	addi	r2,r2,1
   41b50:	d0a0fc15 	stw	r2,-31760(gp)
  while (*p && *p != ':') p++;
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
  p++;

  // Parse defaults
  while (*p) {
   41b54:	d0a0fc17 	ldw	r2,-31760(gp)
   41b58:	10800003 	ldbu	r2,0(r2)
   41b5c:	10803fcc 	andi	r2,r2,255
   41b60:	1080201c 	xori	r2,r2,128
   41b64:	10bfe004 	addi	r2,r2,-128
   41b68:	103f8b1e 	bne	r2,zero,41998 <__alt_data_end+0xfffd9998>
   41b6c:	00000106 	br	41b74 <playSong+0x29c>
    char param;
    int value;

    while (*p == ' ') p++;
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
    if (*p == ':') break;
   41b70:	0001883a 	nop
    }

    while (*p == ' ') p++;
    if (*p == ',') p++;
  }
  p++;
   41b74:	d0a0fc17 	ldw	r2,-31760(gp)
   41b78:	10800044 	addi	r2,r2,1
   41b7c:	d0a0fc15 	stw	r2,-31760(gp)

  // get the first note of the song
  struct note_info payload;
  payload = getNote();
   41b80:	e0bffc04 	addi	r2,fp,-16
   41b84:	1009883a 	mov	r4,r2
   41b88:	0041bc40 	call	41bc4 <getNote>
  return payload;
   41b8c:	e0bfff17 	ldw	r2,-4(fp)
   41b90:	e0fffc17 	ldw	r3,-16(fp)
   41b94:	10c00015 	stw	r3,0(r2)
   41b98:	e0fffd17 	ldw	r3,-12(fp)
   41b9c:	10c00115 	stw	r3,4(r2)
   41ba0:	e0fffe17 	ldw	r3,-8(fp)
   41ba4:	10c00215 	stw	r3,8(r2)
   41ba8:	00000006 	br	41bac <playSong+0x2d4>

}
   41bac:	e0bfff17 	ldw	r2,-4(fp)
   41bb0:	e037883a 	mov	sp,fp
   41bb4:	dfc00117 	ldw	ra,4(sp)
   41bb8:	df000017 	ldw	fp,0(sp)
   41bbc:	dec00204 	addi	sp,sp,8
   41bc0:	f800283a 	ret

00041bc4 <getNote>:

// used to get the first note of the song and the subsequent ones
struct note_info getNote(void) {
   41bc4:	defff404 	addi	sp,sp,-48
   41bc8:	dfc00b15 	stw	ra,44(sp)
   41bcc:	df000a15 	stw	fp,40(sp)
   41bd0:	df000a04 	addi	fp,sp,40
   41bd4:	e13fff15 	stw	r4,-4(fp)

  int note = -1;
   41bd8:	00bfffc4 	movi	r2,-1
   41bdc:	e0bff615 	stw	r2,-40(fp)
  int scale = defscale;
   41be0:	d0a00217 	ldw	r2,-32760(gp)
   41be4:	e0bff715 	stw	r2,-36(fp)
  int dur = defdur;
   41be8:	d0a00117 	ldw	r2,-32764(gp)
   41bec:	e0bff815 	stw	r2,-32(fp)
  int ms;
  int freq;
  struct note_info payload;

  if (!*p) {printf("End of song!\n");payload.endofsong = TRUE; return payload;}
   41bf0:	d0a0fc17 	ldw	r2,-31760(gp)
   41bf4:	10800003 	ldbu	r2,0(r2)
   41bf8:	10803fcc 	andi	r2,r2,255
   41bfc:	1080201c 	xori	r2,r2,128
   41c00:	10bfe004 	addi	r2,r2,-128
   41c04:	1000101e 	bne	r2,zero,41c48 <getNote+0x84>
   41c08:	01000134 	movhi	r4,4
   41c0c:	211c6e04 	addi	r4,r4,29112
   41c10:	0043ca80 	call	43ca8 <puts>
   41c14:	00800044 	movi	r2,1
   41c18:	e0bffe15 	stw	r2,-8(fp)
   41c1c:	e0bfff17 	ldw	r2,-4(fp)
   41c20:	e0fffc17 	ldw	r3,-16(fp)
   41c24:	10c00015 	stw	r3,0(r2)
   41c28:	e0fffd17 	ldw	r3,-12(fp)
   41c2c:	10c00115 	stw	r3,4(r2)
   41c30:	e0fffe17 	ldw	r3,-8(fp)
   41c34:	10c00215 	stw	r3,8(r2)
   41c38:	00017606 	br	42214 <getNote+0x650>

  else {


    // Skip whitespace
    while (*p == ' ') p++;
   41c3c:	d0a0fc17 	ldw	r2,-31760(gp)
   41c40:	10800044 	addi	r2,r2,1
   41c44:	d0a0fc15 	stw	r2,-31760(gp)
   41c48:	d0a0fc17 	ldw	r2,-31760(gp)
   41c4c:	10800003 	ldbu	r2,0(r2)
   41c50:	10803fcc 	andi	r2,r2,255
   41c54:	1080201c 	xori	r2,r2,128
   41c58:	10bfe004 	addi	r2,r2,-128
   41c5c:	10800820 	cmpeqi	r2,r2,32
   41c60:	103ff61e 	bne	r2,zero,41c3c <__alt_data_end+0xfffd9c3c>
    if (!*p) {printf("ERROR in rtttl.c: 0 found during getNote\n"); return;}
   41c64:	d0a0fc17 	ldw	r2,-31760(gp)
   41c68:	10800003 	ldbu	r2,0(r2)
   41c6c:	10803fcc 	andi	r2,r2,255
   41c70:	1080201c 	xori	r2,r2,128
   41c74:	10bfe004 	addi	r2,r2,-128
   41c78:	1000041e 	bne	r2,zero,41c8c <getNote+0xc8>
   41c7c:	01000134 	movhi	r4,4
   41c80:	211c7204 	addi	r4,r4,29128
   41c84:	0043ca80 	call	43ca8 <puts>
   41c88:	00016206 	br	42214 <getNote+0x650>

    // Parse duration
    if (*p >= '0' && *p <= '9') {
   41c8c:	d0a0fc17 	ldw	r2,-31760(gp)
   41c90:	10800003 	ldbu	r2,0(r2)
   41c94:	10803fcc 	andi	r2,r2,255
   41c98:	1080201c 	xori	r2,r2,128
   41c9c:	10bfe004 	addi	r2,r2,-128
   41ca0:	10800c10 	cmplti	r2,r2,48
   41ca4:	1000271e 	bne	r2,zero,41d44 <getNote+0x180>
   41ca8:	d0a0fc17 	ldw	r2,-31760(gp)
   41cac:	10800003 	ldbu	r2,0(r2)
   41cb0:	10803fcc 	andi	r2,r2,255
   41cb4:	1080201c 	xori	r2,r2,128
   41cb8:	10bfe004 	addi	r2,r2,-128
   41cbc:	10800e88 	cmpgei	r2,r2,58
   41cc0:	1000201e 	bne	r2,zero,41d44 <getNote+0x180>
      int value = 0;
   41cc4:	e03ffa15 	stw	zero,-24(fp)
      while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41cc8:	00000c06 	br	41cfc <getNote+0x138>
   41ccc:	e0bffa17 	ldw	r2,-24(fp)
   41cd0:	10c002a4 	muli	r3,r2,10
   41cd4:	d0a0fc17 	ldw	r2,-31760(gp)
   41cd8:	11000044 	addi	r4,r2,1
   41cdc:	d120fc15 	stw	r4,-31760(gp)
   41ce0:	10800003 	ldbu	r2,0(r2)
   41ce4:	10803fcc 	andi	r2,r2,255
   41ce8:	1080201c 	xori	r2,r2,128
   41cec:	10bfe004 	addi	r2,r2,-128
   41cf0:	10bff404 	addi	r2,r2,-48
   41cf4:	1885883a 	add	r2,r3,r2
   41cf8:	e0bffa15 	stw	r2,-24(fp)
   41cfc:	d0a0fc17 	ldw	r2,-31760(gp)
   41d00:	10800003 	ldbu	r2,0(r2)
   41d04:	10803fcc 	andi	r2,r2,255
   41d08:	1080201c 	xori	r2,r2,128
   41d0c:	10bfe004 	addi	r2,r2,-128
   41d10:	10800c10 	cmplti	r2,r2,48
   41d14:	1000071e 	bne	r2,zero,41d34 <getNote+0x170>
   41d18:	d0a0fc17 	ldw	r2,-31760(gp)
   41d1c:	10800003 	ldbu	r2,0(r2)
   41d20:	10803fcc 	andi	r2,r2,255
   41d24:	1080201c 	xori	r2,r2,128
   41d28:	10bfe004 	addi	r2,r2,-128
   41d2c:	10800e90 	cmplti	r2,r2,58
   41d30:	103fe61e 	bne	r2,zero,41ccc <__alt_data_end+0xfffd9ccc>

      dur = 32 / value;
   41d34:	e17ffa17 	ldw	r5,-24(fp)
   41d38:	01000804 	movi	r4,32
   41d3c:	0042e8c0 	call	42e8c <__divsi3>
   41d40:	e0bff815 	stw	r2,-32(fp)
    }

    // Parse note
    switch (*p) {
   41d44:	d0a0fc17 	ldw	r2,-31760(gp)
   41d48:	10800003 	ldbu	r2,0(r2)
   41d4c:	10803fcc 	andi	r2,r2,255
   41d50:	1080201c 	xori	r2,r2,128
   41d54:	10bfe004 	addi	r2,r2,-128
   41d58:	10c01c68 	cmpgeui	r3,r2,113
   41d5c:	18009e1e 	bne	r3,zero,41fd8 <getNote+0x414>
   41d60:	100690ba 	slli	r3,r2,2
   41d64:	00800134 	movhi	r2,4
   41d68:	10875e04 	addi	r2,r2,7544
   41d6c:	1885883a 	add	r2,r3,r2
   41d70:	10800017 	ldw	r2,0(r2)
   41d74:	1000683a 	jmp	r2
   41d78:	00041f3c 	xorhi	zero,zero,4220
   41d7c:	00041fd8 	cmpnei	zero,zero,4223
   41d80:	00041fd8 	cmpnei	zero,zero,4223
   41d84:	00041fd8 	cmpnei	zero,zero,4223
   41d88:	00041fd8 	cmpnei	zero,zero,4223
   41d8c:	00041fd8 	cmpnei	zero,zero,4223
   41d90:	00041fd8 	cmpnei	zero,zero,4223
   41d94:	00041fd8 	cmpnei	zero,zero,4223
   41d98:	00041fd8 	cmpnei	zero,zero,4223
   41d9c:	00041fd8 	cmpnei	zero,zero,4223
   41da0:	00041fd8 	cmpnei	zero,zero,4223
   41da4:	00041fd8 	cmpnei	zero,zero,4223
   41da8:	00041fd8 	cmpnei	zero,zero,4223
   41dac:	00041fd8 	cmpnei	zero,zero,4223
   41db0:	00041fd8 	cmpnei	zero,zero,4223
   41db4:	00041fd8 	cmpnei	zero,zero,4223
   41db8:	00041fd8 	cmpnei	zero,zero,4223
   41dbc:	00041fd8 	cmpnei	zero,zero,4223
   41dc0:	00041fd8 	cmpnei	zero,zero,4223
   41dc4:	00041fd8 	cmpnei	zero,zero,4223
   41dc8:	00041fd8 	cmpnei	zero,zero,4223
   41dcc:	00041fd8 	cmpnei	zero,zero,4223
   41dd0:	00041fd8 	cmpnei	zero,zero,4223
   41dd4:	00041fd8 	cmpnei	zero,zero,4223
   41dd8:	00041fd8 	cmpnei	zero,zero,4223
   41ddc:	00041fd8 	cmpnei	zero,zero,4223
   41de0:	00041fd8 	cmpnei	zero,zero,4223
   41de4:	00041fd8 	cmpnei	zero,zero,4223
   41de8:	00041fd8 	cmpnei	zero,zero,4223
   41dec:	00041fd8 	cmpnei	zero,zero,4223
   41df0:	00041fd8 	cmpnei	zero,zero,4223
   41df4:	00041fd8 	cmpnei	zero,zero,4223
   41df8:	00041fd8 	cmpnei	zero,zero,4223
   41dfc:	00041fd8 	cmpnei	zero,zero,4223
   41e00:	00041fd8 	cmpnei	zero,zero,4223
   41e04:	00041fd8 	cmpnei	zero,zero,4223
   41e08:	00041fd8 	cmpnei	zero,zero,4223
   41e0c:	00041fd8 	cmpnei	zero,zero,4223
   41e10:	00041fd8 	cmpnei	zero,zero,4223
   41e14:	00041fd8 	cmpnei	zero,zero,4223
   41e18:	00041fd8 	cmpnei	zero,zero,4223
   41e1c:	00041fd8 	cmpnei	zero,zero,4223
   41e20:	00041fd8 	cmpnei	zero,zero,4223
   41e24:	00041fd8 	cmpnei	zero,zero,4223
   41e28:	00041fd8 	cmpnei	zero,zero,4223
   41e2c:	00041fd8 	cmpnei	zero,zero,4223
   41e30:	00041fd8 	cmpnei	zero,zero,4223
   41e34:	00041fd8 	cmpnei	zero,zero,4223
   41e38:	00041fd8 	cmpnei	zero,zero,4223
   41e3c:	00041fd8 	cmpnei	zero,zero,4223
   41e40:	00041fd8 	cmpnei	zero,zero,4223
   41e44:	00041fd8 	cmpnei	zero,zero,4223
   41e48:	00041fd8 	cmpnei	zero,zero,4223
   41e4c:	00041fd8 	cmpnei	zero,zero,4223
   41e50:	00041fd8 	cmpnei	zero,zero,4223
   41e54:	00041fd8 	cmpnei	zero,zero,4223
   41e58:	00041fd8 	cmpnei	zero,zero,4223
   41e5c:	00041fd8 	cmpnei	zero,zero,4223
   41e60:	00041fd8 	cmpnei	zero,zero,4223
   41e64:	00041fd8 	cmpnei	zero,zero,4223
   41e68:	00041fd8 	cmpnei	zero,zero,4223
   41e6c:	00041fd8 	cmpnei	zero,zero,4223
   41e70:	00041fd8 	cmpnei	zero,zero,4223
   41e74:	00041fd8 	cmpnei	zero,zero,4223
   41e78:	00041fd8 	cmpnei	zero,zero,4223
   41e7c:	00041fa8 	cmpgeui	zero,zero,4222
   41e80:	00041fc0 	call	41fc <__alt_mem_onchip_memory-0x3be04>
   41e84:	00041f70 	cmpltui	zero,zero,4221
   41e88:	00041f78 	rdprs	zero,zero,4221
   41e8c:	00041f84 	movi	zero,4222
   41e90:	00041f90 	cmplti	zero,zero,4222
   41e94:	00041f9c 	xori	zero,zero,4222
   41e98:	00041fb4 	movhi	zero,4222
   41e9c:	00041fd8 	cmpnei	zero,zero,4223
   41ea0:	00041fd8 	cmpnei	zero,zero,4223
   41ea4:	00041fd8 	cmpnei	zero,zero,4223
   41ea8:	00041fd8 	cmpnei	zero,zero,4223
   41eac:	00041fd8 	cmpnei	zero,zero,4223
   41eb0:	00041fd8 	cmpnei	zero,zero,4223
   41eb4:	00041fd8 	cmpnei	zero,zero,4223
   41eb8:	00041fcc 	andi	zero,zero,4223
   41ebc:	00041fd8 	cmpnei	zero,zero,4223
   41ec0:	00041fd8 	cmpnei	zero,zero,4223
   41ec4:	00041fd8 	cmpnei	zero,zero,4223
   41ec8:	00041fd8 	cmpnei	zero,zero,4223
   41ecc:	00041fd8 	cmpnei	zero,zero,4223
   41ed0:	00041fd8 	cmpnei	zero,zero,4223
   41ed4:	00041fd8 	cmpnei	zero,zero,4223
   41ed8:	00041fd8 	cmpnei	zero,zero,4223
   41edc:	00041fd8 	cmpnei	zero,zero,4223
   41ee0:	00041fd8 	cmpnei	zero,zero,4223
   41ee4:	00041fd8 	cmpnei	zero,zero,4223
   41ee8:	00041fd8 	cmpnei	zero,zero,4223
   41eec:	00041fd8 	cmpnei	zero,zero,4223
   41ef0:	00041fd8 	cmpnei	zero,zero,4223
   41ef4:	00041fd8 	cmpnei	zero,zero,4223
   41ef8:	00041fd8 	cmpnei	zero,zero,4223
   41efc:	00041fa8 	cmpgeui	zero,zero,4222
   41f00:	00041fc0 	call	41fc <__alt_mem_onchip_memory-0x3be04>
   41f04:	00041f70 	cmpltui	zero,zero,4221
   41f08:	00041f78 	rdprs	zero,zero,4221
   41f0c:	00041f84 	movi	zero,4222
   41f10:	00041f90 	cmplti	zero,zero,4222
   41f14:	00041f9c 	xori	zero,zero,4222
   41f18:	00041fb4 	movhi	zero,4222
   41f1c:	00041fd8 	cmpnei	zero,zero,4223
   41f20:	00041fd8 	cmpnei	zero,zero,4223
   41f24:	00041fd8 	cmpnei	zero,zero,4223
   41f28:	00041fd8 	cmpnei	zero,zero,4223
   41f2c:	00041fd8 	cmpnei	zero,zero,4223
   41f30:	00041fd8 	cmpnei	zero,zero,4223
   41f34:	00041fd8 	cmpnei	zero,zero,4223
   41f38:	00041fcc 	andi	zero,zero,4223
      case 0: printf("End of song!\n"); payload.endofsong = TRUE; return payload; // i *think* means the null-terminated character is reached
   41f3c:	01000134 	movhi	r4,4
   41f40:	211c6e04 	addi	r4,r4,29112
   41f44:	0043ca80 	call	43ca8 <puts>
   41f48:	00800044 	movi	r2,1
   41f4c:	e0bffe15 	stw	r2,-8(fp)
   41f50:	e0bfff17 	ldw	r2,-4(fp)
   41f54:	e0fffc17 	ldw	r3,-16(fp)
   41f58:	10c00015 	stw	r3,0(r2)
   41f5c:	e0fffd17 	ldw	r3,-12(fp)
   41f60:	10c00115 	stw	r3,4(r2)
   41f64:	e0fffe17 	ldw	r3,-8(fp)
   41f68:	10c00215 	stw	r3,8(r2)
   41f6c:	0000a906 	br	42214 <getNote+0x650>
      case 'C': case 'c': note = 0; break;
   41f70:	e03ff615 	stw	zero,-40(fp)
   41f74:	00001806 	br	41fd8 <getNote+0x414>
      case 'D': case 'd': note = 2; break;
   41f78:	00800084 	movi	r2,2
   41f7c:	e0bff615 	stw	r2,-40(fp)
   41f80:	00001506 	br	41fd8 <getNote+0x414>
      case 'E': case 'e': note = 4; break;
   41f84:	00800104 	movi	r2,4
   41f88:	e0bff615 	stw	r2,-40(fp)
   41f8c:	00001206 	br	41fd8 <getNote+0x414>
      case 'F': case 'f': note = 5; break;
   41f90:	00800144 	movi	r2,5
   41f94:	e0bff615 	stw	r2,-40(fp)
   41f98:	00000f06 	br	41fd8 <getNote+0x414>
      case 'G': case 'g': note = 7; break;
   41f9c:	008001c4 	movi	r2,7
   41fa0:	e0bff615 	stw	r2,-40(fp)
   41fa4:	00000c06 	br	41fd8 <getNote+0x414>
      case 'A': case 'a': note = 9; break;
   41fa8:	00800244 	movi	r2,9
   41fac:	e0bff615 	stw	r2,-40(fp)
   41fb0:	00000906 	br	41fd8 <getNote+0x414>
      case 'H': case 'h': note = 11; break;
   41fb4:	008002c4 	movi	r2,11
   41fb8:	e0bff615 	stw	r2,-40(fp)
   41fbc:	00000606 	br	41fd8 <getNote+0x414>
      case 'B': case 'b': note = 11; break;
   41fc0:	008002c4 	movi	r2,11
   41fc4:	e0bff615 	stw	r2,-40(fp)
   41fc8:	00000306 	br	41fd8 <getNote+0x414>
      case 'P': case 'p': note = -1; break;
   41fcc:	00bfffc4 	movi	r2,-1
   41fd0:	e0bff615 	stw	r2,-40(fp)
   41fd4:	0001883a 	nop
    }
    p++;
   41fd8:	d0a0fc17 	ldw	r2,-31760(gp)
   41fdc:	10800044 	addi	r2,r2,1
   41fe0:	d0a0fc15 	stw	r2,-31760(gp)
    if (*p == '#') {
   41fe4:	d0a0fc17 	ldw	r2,-31760(gp)
   41fe8:	10800003 	ldbu	r2,0(r2)
   41fec:	10803fcc 	andi	r2,r2,255
   41ff0:	1080201c 	xori	r2,r2,128
   41ff4:	10bfe004 	addi	r2,r2,-128
   41ff8:	108008d8 	cmpnei	r2,r2,35
   41ffc:	1000061e 	bne	r2,zero,42018 <getNote+0x454>
      note++;
   42000:	e0bff617 	ldw	r2,-40(fp)
   42004:	10800044 	addi	r2,r2,1
   42008:	e0bff615 	stw	r2,-40(fp)
      p++;
   4200c:	d0a0fc17 	ldw	r2,-31760(gp)
   42010:	10800044 	addi	r2,r2,1
   42014:	d0a0fc15 	stw	r2,-31760(gp)
    }
    if (*p == 'b') {
   42018:	d0a0fc17 	ldw	r2,-31760(gp)
   4201c:	10800003 	ldbu	r2,0(r2)
   42020:	10803fcc 	andi	r2,r2,255
   42024:	1080201c 	xori	r2,r2,128
   42028:	10bfe004 	addi	r2,r2,-128
   4202c:	10801898 	cmpnei	r2,r2,98
   42030:	1000061e 	bne	r2,zero,4204c <getNote+0x488>
      note--;
   42034:	e0bff617 	ldw	r2,-40(fp)
   42038:	10bfffc4 	addi	r2,r2,-1
   4203c:	e0bff615 	stw	r2,-40(fp)
      p++;
   42040:	d0a0fc17 	ldw	r2,-31760(gp)
   42044:	10800044 	addi	r2,r2,1
   42048:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Parse special duration
    if (*p == '.') {
   4204c:	d0a0fc17 	ldw	r2,-31760(gp)
   42050:	10800003 	ldbu	r2,0(r2)
   42054:	10803fcc 	andi	r2,r2,255
   42058:	1080201c 	xori	r2,r2,128
   4205c:	10bfe004 	addi	r2,r2,-128
   42060:	10800b98 	cmpnei	r2,r2,46
   42064:	10000b1e 	bne	r2,zero,42094 <getNote+0x4d0>
      dur += dur / 2;
   42068:	e0bff817 	ldw	r2,-32(fp)
   4206c:	1006d7fa 	srli	r3,r2,31
   42070:	1885883a 	add	r2,r3,r2
   42074:	1005d07a 	srai	r2,r2,1
   42078:	1007883a 	mov	r3,r2
   4207c:	e0bff817 	ldw	r2,-32(fp)
   42080:	10c5883a 	add	r2,r2,r3
   42084:	e0bff815 	stw	r2,-32(fp)
      p++;
   42088:	d0a0fc17 	ldw	r2,-31760(gp)
   4208c:	10800044 	addi	r2,r2,1
   42090:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Parse scale
    if (*p >= '0' && *p <= '9') scale = (*p++ - '0');
   42094:	d0a0fc17 	ldw	r2,-31760(gp)
   42098:	10800003 	ldbu	r2,0(r2)
   4209c:	10803fcc 	andi	r2,r2,255
   420a0:	1080201c 	xori	r2,r2,128
   420a4:	10bfe004 	addi	r2,r2,-128
   420a8:	10800c10 	cmplti	r2,r2,48
   420ac:	1000101e 	bne	r2,zero,420f0 <getNote+0x52c>
   420b0:	d0a0fc17 	ldw	r2,-31760(gp)
   420b4:	10800003 	ldbu	r2,0(r2)
   420b8:	10803fcc 	andi	r2,r2,255
   420bc:	1080201c 	xori	r2,r2,128
   420c0:	10bfe004 	addi	r2,r2,-128
   420c4:	10800e88 	cmpgei	r2,r2,58
   420c8:	1000091e 	bne	r2,zero,420f0 <getNote+0x52c>
   420cc:	d0a0fc17 	ldw	r2,-31760(gp)
   420d0:	10c00044 	addi	r3,r2,1
   420d4:	d0e0fc15 	stw	r3,-31760(gp)
   420d8:	10800003 	ldbu	r2,0(r2)
   420dc:	10803fcc 	andi	r2,r2,255
   420e0:	1080201c 	xori	r2,r2,128
   420e4:	10bfe004 	addi	r2,r2,-128
   420e8:	10bff404 	addi	r2,r2,-48
   420ec:	e0bff715 	stw	r2,-36(fp)

    // Parse special duration (again...)
    if (*p == '.') {
   420f0:	d0a0fc17 	ldw	r2,-31760(gp)
   420f4:	10800003 	ldbu	r2,0(r2)
   420f8:	10803fcc 	andi	r2,r2,255
   420fc:	1080201c 	xori	r2,r2,128
   42100:	10bfe004 	addi	r2,r2,-128
   42104:	10800b98 	cmpnei	r2,r2,46
   42108:	10000f1e 	bne	r2,zero,42148 <getNote+0x584>
      dur += dur / 2;
   4210c:	e0bff817 	ldw	r2,-32(fp)
   42110:	1006d7fa 	srli	r3,r2,31
   42114:	1885883a 	add	r2,r3,r2
   42118:	1005d07a 	srai	r2,r2,1
   4211c:	1007883a 	mov	r3,r2
   42120:	e0bff817 	ldw	r2,-32(fp)
   42124:	10c5883a 	add	r2,r2,r3
   42128:	e0bff815 	stw	r2,-32(fp)
      p++;
   4212c:	d0a0fc17 	ldw	r2,-31760(gp)
   42130:	10800044 	addi	r2,r2,1
   42134:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Skip delimiter
    while (*p == ' ') p++;
   42138:	00000306 	br	42148 <getNote+0x584>
   4213c:	d0a0fc17 	ldw	r2,-31760(gp)
   42140:	10800044 	addi	r2,r2,1
   42144:	d0a0fc15 	stw	r2,-31760(gp)
   42148:	d0a0fc17 	ldw	r2,-31760(gp)
   4214c:	10800003 	ldbu	r2,0(r2)
   42150:	10803fcc 	andi	r2,r2,255
   42154:	1080201c 	xori	r2,r2,128
   42158:	10bfe004 	addi	r2,r2,-128
   4215c:	10800820 	cmpeqi	r2,r2,32
   42160:	103ff61e 	bne	r2,zero,4213c <__alt_data_end+0xfffda13c>
    if (*p == ',') p++;
   42164:	d0a0fc17 	ldw	r2,-31760(gp)
   42168:	10800003 	ldbu	r2,0(r2)
   4216c:	10803fcc 	andi	r2,r2,255
   42170:	1080201c 	xori	r2,r2,128
   42174:	10bfe004 	addi	r2,r2,-128
   42178:	10800b18 	cmpnei	r2,r2,44
   4217c:	1000031e 	bne	r2,zero,4218c <getNote+0x5c8>
   42180:	d0a0fc17 	ldw	r2,-31760(gp)
   42184:	10800044 	addi	r2,r2,1
   42188:	d0a0fc15 	stw	r2,-31760(gp)

    // Play note
    ms = dur * 60000 / (bpm * 8);
   4218c:	e0fff817 	ldw	r3,-32(fp)
   42190:	00ba9814 	movui	r2,60000
   42194:	1887383a 	mul	r3,r3,r2
   42198:	d0a00317 	ldw	r2,-32756(gp)
   4219c:	100490fa 	slli	r2,r2,3
   421a0:	100b883a 	mov	r5,r2
   421a4:	1809883a 	mov	r4,r3
   421a8:	0042e8c0 	call	42e8c <__divsi3>
   421ac:	e0bffb15 	stw	r2,-20(fp)
    if (note == -1) {
   421b0:	e0bff617 	ldw	r2,-40(fp)
   421b4:	10bfffd8 	cmpnei	r2,r2,-1
   421b8:	1000021e 	bne	r2,zero,421c4 <getNote+0x600>
      freq = 0;
   421bc:	e03ff915 	stw	zero,-28(fp)
   421c0:	00000806 	br	421e4 <getNote+0x620>
    } else {
      freq = note2freq((scale + 1) * 12 + note);
   421c4:	e0bff717 	ldw	r2,-36(fp)
   421c8:	10800044 	addi	r2,r2,1
   421cc:	10c00324 	muli	r3,r2,12
   421d0:	e0bff617 	ldw	r2,-40(fp)
   421d4:	1885883a 	add	r2,r3,r2
   421d8:	1009883a 	mov	r4,r2
   421dc:	004184c0 	call	4184c <note2freq>
   421e0:	e0bff915 	stw	r2,-28(fp)
    }


    payload.frequency = freq;
   421e4:	e0bff917 	ldw	r2,-28(fp)
   421e8:	e0bffc15 	stw	r2,-16(fp)
    payload.duration = ms;
   421ec:	e0bffb17 	ldw	r2,-20(fp)
   421f0:	e0bffd15 	stw	r2,-12(fp)
    payload.endofsong = FALSE;
   421f4:	e03ffe15 	stw	zero,-8(fp)
    
    return payload;   
   421f8:	e0bfff17 	ldw	r2,-4(fp)
   421fc:	e0fffc17 	ldw	r3,-16(fp)
   42200:	10c00015 	stw	r3,0(r2)
   42204:	e0fffd17 	ldw	r3,-12(fp)
   42208:	10c00115 	stw	r3,4(r2)
   4220c:	e0fffe17 	ldw	r3,-8(fp)
   42210:	10c00215 	stw	r3,8(r2)
    
  }
   42214:	e0bfff17 	ldw	r2,-4(fp)
   42218:	e037883a 	mov	sp,fp
   4221c:	dfc00117 	ldw	ra,4(sp)
   42220:	df000017 	ldw	fp,0(sp)
   42224:	dec00204 	addi	sp,sp,8
   42228:	f800283a 	ret

0004222c <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   4222c:	defff904 	addi	sp,sp,-28
   42230:	dfc00615 	stw	ra,24(sp)
   42234:	df000515 	stw	fp,20(sp)
   42238:	dc400415 	stw	r17,16(sp)
   4223c:	dc000315 	stw	r16,12(sp)
   42240:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   42244:	00800234 	movhi	r2,8
   42248:	10843804 	addi	r2,r2,4320
   4224c:	10800037 	ldwio	r2,0(r2)
   42250:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   42254:	e0bffd0b 	ldhu	r2,-12(fp)
   42258:	10bfffcc 	andi	r2,r2,65535
   4225c:	1009883a 	mov	r4,r2
   42260:	00424a80 	call	424a8 <checkInvalidMode>
   42264:	10803fcc 	andi	r2,r2,255
   42268:	10800058 	cmpnei	r2,r2,1
   4226c:	10000f1e 	bne	r2,zero,422ac <determineMode+0x80>
    mode.invalid = TRUE;
   42270:	00800044 	movi	r2,1
   42274:	d0a0fd05 	stb	r2,-31756(gp)
    return mode;
   42278:	d0a0fd03 	ldbu	r2,-31756(gp)
   4227c:	e0bffb45 	stb	r2,-19(fp)
   42280:	d0a0fd43 	ldbu	r2,-31755(gp)
   42284:	e0bffb85 	stb	r2,-18(fp)
   42288:	d0a0fd83 	ldbu	r2,-31754(gp)
   4228c:	e0bffbc5 	stb	r2,-17(fp)
   42290:	d0a0fdc3 	ldbu	r2,-31753(gp)
   42294:	e0bffc05 	stb	r2,-16(fp)
   42298:	d0a0fe03 	ldbu	r2,-31752(gp)
   4229c:	e0bffc45 	stb	r2,-15(fp)
   422a0:	d0a0fe43 	ldbu	r2,-31751(gp)
   422a4:	e0bffc85 	stb	r2,-14(fp)
   422a8:	00004906 	br	423d0 <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   422ac:	d020fd05 	stb	zero,-31756(gp)

    uint8_t i = 0;
   422b0:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   422b4:	00000606 	br	422d0 <determineMode+0xa4>
      i++;
   422b8:	e0bffb03 	ldbu	r2,-20(fp)
   422bc:	10800044 	addi	r2,r2,1
   422c0:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   422c4:	e0bffb03 	ldbu	r2,-20(fp)
   422c8:	10800218 	cmpnei	r2,r2,8
   422cc:	10000b26 	beq	r2,zero,422fc <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   422d0:	e0fffb03 	ldbu	r3,-20(fp)
   422d4:	00800134 	movhi	r2,4
   422d8:	109c7c84 	addi	r2,r2,29170
   422dc:	18c00324 	muli	r3,r3,12
   422e0:	10c5883a 	add	r2,r2,r3
   422e4:	10c0000b 	ldhu	r3,0(r2)
   422e8:	e0bffd0b 	ldhu	r2,-12(fp)
   422ec:	18ffffcc 	andi	r3,r3,65535
   422f0:	10bfffcc 	andi	r2,r2,65535
   422f4:	18bff01e 	bne	r3,r2,422b8 <__alt_data_end+0xfffda2b8>
   422f8:	00000106 	br	42300 <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   422fc:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   42300:	e0fffb03 	ldbu	r3,-20(fp)
   42304:	00800134 	movhi	r2,4
   42308:	109c7c84 	addi	r2,r2,29170
   4230c:	18c00324 	muli	r3,r3,12
   42310:	10c5883a 	add	r2,r2,r3
   42314:	10800084 	addi	r2,r2,2
   42318:	1080000b 	ldhu	r2,0(r2)
   4231c:	d0a0fd45 	stb	r2,-31755(gp)
    mode.config.on = mode_lookup_table[i][2];
   42320:	e0fffb03 	ldbu	r3,-20(fp)
   42324:	00800134 	movhi	r2,4
   42328:	109c7c84 	addi	r2,r2,29170
   4232c:	18c00324 	muli	r3,r3,12
   42330:	10c5883a 	add	r2,r2,r3
   42334:	10800104 	addi	r2,r2,4
   42338:	1080000b 	ldhu	r2,0(r2)
   4233c:	d0a0fdc5 	stb	r2,-31753(gp)
    mode.config.hour = mode_lookup_table[i][3];
   42340:	e0fffb03 	ldbu	r3,-20(fp)
   42344:	00800134 	movhi	r2,4
   42348:	109c7c84 	addi	r2,r2,29170
   4234c:	18c00324 	muli	r3,r3,12
   42350:	10c5883a 	add	r2,r2,r3
   42354:	10800184 	addi	r2,r2,6
   42358:	1080000b 	ldhu	r2,0(r2)
   4235c:	d0a0fe05 	stb	r2,-31752(gp)
    mode.config.minute = mode_lookup_table[i][4];
   42360:	e0fffb03 	ldbu	r3,-20(fp)
   42364:	00800134 	movhi	r2,4
   42368:	109c7c84 	addi	r2,r2,29170
   4236c:	18c00324 	muli	r3,r3,12
   42370:	10c5883a 	add	r2,r2,r3
   42374:	10800204 	addi	r2,r2,8
   42378:	1080000b 	ldhu	r2,0(r2)
   4237c:	d0a0fe45 	stb	r2,-31751(gp)
    mode.alarm = mode_lookup_table[i][5];
   42380:	e0fffb03 	ldbu	r3,-20(fp)
   42384:	00800134 	movhi	r2,4
   42388:	109c7c84 	addi	r2,r2,29170
   4238c:	18c00324 	muli	r3,r3,12
   42390:	10c5883a 	add	r2,r2,r3
   42394:	10800284 	addi	r2,r2,10
   42398:	1080000b 	ldhu	r2,0(r2)
   4239c:	d0a0fd85 	stb	r2,-31754(gp)

    return mode;
   423a0:	d0a0fd03 	ldbu	r2,-31756(gp)
   423a4:	e0bffb45 	stb	r2,-19(fp)
   423a8:	d0a0fd43 	ldbu	r2,-31755(gp)
   423ac:	e0bffb85 	stb	r2,-18(fp)
   423b0:	d0a0fd83 	ldbu	r2,-31754(gp)
   423b4:	e0bffbc5 	stb	r2,-17(fp)
   423b8:	d0a0fdc3 	ldbu	r2,-31753(gp)
   423bc:	e0bffc05 	stb	r2,-16(fp)
   423c0:	d0a0fe03 	ldbu	r2,-31752(gp)
   423c4:	e0bffc45 	stb	r2,-15(fp)
   423c8:	d0a0fe43 	ldbu	r2,-31751(gp)
   423cc:	e0bffc85 	stb	r2,-14(fp)
   423d0:	0005883a 	mov	r2,zero
   423d4:	e0fffb43 	ldbu	r3,-19(fp)
   423d8:	18c03fcc 	andi	r3,r3,255
   423dc:	013fc004 	movi	r4,-256
   423e0:	1104703a 	and	r2,r2,r4
   423e4:	10c4b03a 	or	r2,r2,r3
   423e8:	e0fffb83 	ldbu	r3,-18(fp)
   423ec:	18c03fcc 	andi	r3,r3,255
   423f0:	1808923a 	slli	r4,r3,8
   423f4:	00fffff4 	movhi	r3,65535
   423f8:	18c03fc4 	addi	r3,r3,255
   423fc:	10c4703a 	and	r2,r2,r3
   42400:	1104b03a 	or	r2,r2,r4
   42404:	e0fffbc3 	ldbu	r3,-17(fp)
   42408:	18c03fcc 	andi	r3,r3,255
   4240c:	1808943a 	slli	r4,r3,16
   42410:	00ffc074 	movhi	r3,65281
   42414:	18ffffc4 	addi	r3,r3,-1
   42418:	10c4703a 	and	r2,r2,r3
   4241c:	1104b03a 	or	r2,r2,r4
   42420:	e0fffc03 	ldbu	r3,-16(fp)
   42424:	1808963a 	slli	r4,r3,24
   42428:	00c04034 	movhi	r3,256
   4242c:	18ffffc4 	addi	r3,r3,-1
   42430:	10c4703a 	and	r2,r2,r3
   42434:	1104b03a 	or	r2,r2,r4
   42438:	0009883a 	mov	r4,zero
   4243c:	e0fffc43 	ldbu	r3,-15(fp)
   42440:	18c03fcc 	andi	r3,r3,255
   42444:	017fc004 	movi	r5,-256
   42448:	2148703a 	and	r4,r4,r5
   4244c:	20c6b03a 	or	r3,r4,r3
   42450:	1809883a 	mov	r4,r3
   42454:	e0fffc83 	ldbu	r3,-14(fp)
   42458:	18c03fcc 	andi	r3,r3,255
   4245c:	180a923a 	slli	r5,r3,8
   42460:	00fffff4 	movhi	r3,65535
   42464:	18c03fc4 	addi	r3,r3,255
   42468:	20c6703a 	and	r3,r4,r3
   4246c:	1946b03a 	or	r3,r3,r5
   42470:	1809883a 	mov	r4,r3
   42474:	1021883a 	mov	r16,r2
   42478:	2023883a 	mov	r17,r4
   4247c:	8007883a 	mov	r3,r16
   42480:	8809883a 	mov	r4,r17
  }

}
   42484:	1805883a 	mov	r2,r3
   42488:	2007883a 	mov	r3,r4
   4248c:	e6fffe04 	addi	sp,fp,-8
   42490:	dfc00317 	ldw	ra,12(sp)
   42494:	df000217 	ldw	fp,8(sp)
   42498:	dc400117 	ldw	r17,4(sp)
   4249c:	dc000017 	ldw	r16,0(sp)
   424a0:	dec00404 	addi	sp,sp,16
   424a4:	f800283a 	ret

000424a8 <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   424a8:	defffc04 	addi	sp,sp,-16
   424ac:	dfc00315 	stw	ra,12(sp)
   424b0:	df000215 	stw	fp,8(sp)
   424b4:	df000204 	addi	fp,sp,8
   424b8:	2005883a 	mov	r2,r4
   424bc:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   424c0:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   424c4:	e0bffe03 	ldbu	r2,-8(fp)
   424c8:	108000d8 	cmpnei	r2,r2,3
   424cc:	10000e26 	beq	r2,zero,42508 <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   424d0:	e0bffe03 	ldbu	r2,-8(fp)
   424d4:	1087883a 	add	r3,r2,r2
   424d8:	d0a00404 	addi	r2,gp,-32752
   424dc:	1885883a 	add	r2,r3,r2
   424e0:	1080000b 	ldhu	r2,0(r2)
   424e4:	10ffffcc 	andi	r3,r2,65535
   424e8:	e0bfff0b 	ldhu	r2,-4(fp)
   424ec:	1880021e 	bne	r3,r2,424f8 <checkInvalidMode+0x50>
      return INVALID;
   424f0:	00800044 	movi	r2,1
   424f4:	00000e06 	br	42530 <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   424f8:	e0bffe03 	ldbu	r2,-8(fp)
   424fc:	10800044 	addi	r2,r2,1
   42500:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   42504:	003fef06 	br	424c4 <__alt_data_end+0xfffda4c4>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   42508:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   4250c:	e0bfff0b 	ldhu	r2,-4(fp)
   42510:	1009883a 	mov	r4,r2
   42514:	00425440 	call	42544 <isPowerOfTwoOrZero>
   42518:	10803fcc 	andi	r2,r2,255
   4251c:	10800058 	cmpnei	r2,r2,1
   42520:	1000021e 	bne	r2,zero,4252c <checkInvalidMode+0x84>
    return VALID;
   42524:	0005883a 	mov	r2,zero
   42528:	00000106 	br	42530 <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   4252c:	00800044 	movi	r2,1
  }
}
   42530:	e037883a 	mov	sp,fp
   42534:	dfc00117 	ldw	ra,4(sp)
   42538:	df000017 	ldw	fp,0(sp)
   4253c:	dec00204 	addi	sp,sp,8
   42540:	f800283a 	ret

00042544 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   42544:	defffe04 	addi	sp,sp,-8
   42548:	df000115 	stw	fp,4(sp)
   4254c:	df000104 	addi	fp,sp,4
   42550:	2005883a 	mov	r2,r4
   42554:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   42558:	e0ffff0b 	ldhu	r3,-4(fp)
   4255c:	e0bfff0b 	ldhu	r2,-4(fp)
   42560:	10bfffc4 	addi	r2,r2,-1
   42564:	1884703a 	and	r2,r3,r2
   42568:	1000021e 	bne	r2,zero,42574 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   4256c:	00800044 	movi	r2,1
   42570:	00000106 	br	42578 <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   42574:	0005883a 	mov	r2,zero
  }
   42578:	e037883a 	mov	sp,fp
   4257c:	df000017 	ldw	fp,0(sp)
   42580:	dec00104 	addi	sp,sp,4
   42584:	f800283a 	ret

00042588 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   42588:	deffff04 	addi	sp,sp,-4
   4258c:	df000015 	stw	fp,0(sp)
   42590:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   42594:	008002c4 	movi	r2,11
   42598:	d0a0ff45 	stb	r2,-31747(gp)
  clock.minute = reset_clock_value[1];
   4259c:	00800ec4 	movi	r2,59
   425a0:	d0a0ff85 	stb	r2,-31746(gp)
  clock.second = reset_clock_value[2];
   425a4:	0005883a 	mov	r2,zero
   425a8:	d0a0ffc5 	stb	r2,-31745(gp)
}
   425ac:	0001883a 	nop
   425b0:	e037883a 	mov	sp,fp
   425b4:	df000017 	ldw	fp,0(sp)
   425b8:	dec00104 	addi	sp,sp,4
   425bc:	f800283a 	ret

000425c0 <getClockTime>:

struct time getClockTime(void) {
   425c0:	defffe04 	addi	sp,sp,-8
   425c4:	df000115 	stw	fp,4(sp)
   425c8:	df000104 	addi	fp,sp,4
  return clock;
   425cc:	d0a0ff43 	ldbu	r2,-31747(gp)
   425d0:	e0bfff05 	stb	r2,-4(fp)
   425d4:	d0a0ff83 	ldbu	r2,-31746(gp)
   425d8:	e0bfff45 	stb	r2,-3(fp)
   425dc:	d0a0ffc3 	ldbu	r2,-31745(gp)
   425e0:	e0bfff85 	stb	r2,-2(fp)
   425e4:	0005883a 	mov	r2,zero
   425e8:	e0ffff03 	ldbu	r3,-4(fp)
   425ec:	18c03fcc 	andi	r3,r3,255
   425f0:	013fc004 	movi	r4,-256
   425f4:	1104703a 	and	r2,r2,r4
   425f8:	10c4b03a 	or	r2,r2,r3
   425fc:	e0ffff43 	ldbu	r3,-3(fp)
   42600:	18c03fcc 	andi	r3,r3,255
   42604:	1808923a 	slli	r4,r3,8
   42608:	00fffff4 	movhi	r3,65535
   4260c:	18c03fc4 	addi	r3,r3,255
   42610:	10c4703a 	and	r2,r2,r3
   42614:	1104b03a 	or	r2,r2,r4
   42618:	e0ffff83 	ldbu	r3,-2(fp)
   4261c:	18c03fcc 	andi	r3,r3,255
   42620:	1808943a 	slli	r4,r3,16
   42624:	00ffc074 	movhi	r3,65281
   42628:	18ffffc4 	addi	r3,r3,-1
   4262c:	10c4703a 	and	r2,r2,r3
   42630:	1104b03a 	or	r2,r2,r4
}
   42634:	e037883a 	mov	sp,fp
   42638:	df000017 	ldw	fp,0(sp)
   4263c:	dec00104 	addi	sp,sp,4
   42640:	f800283a 	ret

00042644 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   42644:	defffc04 	addi	sp,sp,-16
   42648:	dfc00315 	stw	ra,12(sp)
   4264c:	df000215 	stw	fp,8(sp)
   42650:	df000204 	addi	fp,sp,8
   42654:	2005883a 	mov	r2,r4
   42658:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   4265c:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42660:	10803fcc 	andi	r2,r2,255
   42664:	10800ed8 	cmpnei	r2,r2,59
   42668:	1000071e 	bne	r2,zero,42688 <upClockSecond+0x44>
    clock.second = 0;
   4266c:	d020ffc5 	stb	zero,-31745(gp)
    
    if (carry_setting == CARRY_ON) {
   42670:	e0bfff03 	ldbu	r2,-4(fp)
   42674:	10800058 	cmpnei	r2,r2,1
   42678:	1000061e 	bne	r2,zero,42694 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   4267c:	01000044 	movi	r4,1
   42680:	00427100 	call	42710 <upClockMinute>
   42684:	00000306 	br	42694 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   42688:	d0a0ffc3 	ldbu	r2,-31745(gp)
   4268c:	10800044 	addi	r2,r2,1
   42690:	d0a0ffc5 	stb	r2,-31745(gp)
  }
  return clock;
   42694:	d0a0ff43 	ldbu	r2,-31747(gp)
   42698:	e0bffe05 	stb	r2,-8(fp)
   4269c:	d0a0ff83 	ldbu	r2,-31746(gp)
   426a0:	e0bffe45 	stb	r2,-7(fp)
   426a4:	d0a0ffc3 	ldbu	r2,-31745(gp)
   426a8:	e0bffe85 	stb	r2,-6(fp)
   426ac:	0005883a 	mov	r2,zero
   426b0:	e0fffe03 	ldbu	r3,-8(fp)
   426b4:	18c03fcc 	andi	r3,r3,255
   426b8:	013fc004 	movi	r4,-256
   426bc:	1104703a 	and	r2,r2,r4
   426c0:	10c4b03a 	or	r2,r2,r3
   426c4:	e0fffe43 	ldbu	r3,-7(fp)
   426c8:	18c03fcc 	andi	r3,r3,255
   426cc:	1808923a 	slli	r4,r3,8
   426d0:	00fffff4 	movhi	r3,65535
   426d4:	18c03fc4 	addi	r3,r3,255
   426d8:	10c4703a 	and	r2,r2,r3
   426dc:	1104b03a 	or	r2,r2,r4
   426e0:	e0fffe83 	ldbu	r3,-6(fp)
   426e4:	18c03fcc 	andi	r3,r3,255
   426e8:	1808943a 	slli	r4,r3,16
   426ec:	00ffc074 	movhi	r3,65281
   426f0:	18ffffc4 	addi	r3,r3,-1
   426f4:	10c4703a 	and	r2,r2,r3
   426f8:	1104b03a 	or	r2,r2,r4
}
   426fc:	e037883a 	mov	sp,fp
   42700:	dfc00117 	ldw	ra,4(sp)
   42704:	df000017 	ldw	fp,0(sp)
   42708:	dec00204 	addi	sp,sp,8
   4270c:	f800283a 	ret

00042710 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   42710:	defffc04 	addi	sp,sp,-16
   42714:	dfc00315 	stw	ra,12(sp)
   42718:	df000215 	stw	fp,8(sp)
   4271c:	df000204 	addi	fp,sp,8
   42720:	2005883a 	mov	r2,r4
   42724:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   42728:	d0a0ff83 	ldbu	r2,-31746(gp)
   4272c:	10803fcc 	andi	r2,r2,255
   42730:	10800ed8 	cmpnei	r2,r2,59
   42734:	1000061e 	bne	r2,zero,42750 <upClockMinute+0x40>
    clock.minute = 0;
   42738:	d020ff85 	stb	zero,-31746(gp)
    
    if (carry_setting == CARRY_ON) {
   4273c:	e0bfff03 	ldbu	r2,-4(fp)
   42740:	10800058 	cmpnei	r2,r2,1
   42744:	1000051e 	bne	r2,zero,4275c <upClockMinute+0x4c>
      upClockHour();
   42748:	00427d80 	call	427d8 <upClockHour>
   4274c:	00000306 	br	4275c <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   42750:	d0a0ff83 	ldbu	r2,-31746(gp)
   42754:	10800044 	addi	r2,r2,1
   42758:	d0a0ff85 	stb	r2,-31746(gp)
  }
  return clock;
   4275c:	d0a0ff43 	ldbu	r2,-31747(gp)
   42760:	e0bffe05 	stb	r2,-8(fp)
   42764:	d0a0ff83 	ldbu	r2,-31746(gp)
   42768:	e0bffe45 	stb	r2,-7(fp)
   4276c:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42770:	e0bffe85 	stb	r2,-6(fp)
   42774:	0005883a 	mov	r2,zero
   42778:	e0fffe03 	ldbu	r3,-8(fp)
   4277c:	18c03fcc 	andi	r3,r3,255
   42780:	013fc004 	movi	r4,-256
   42784:	1104703a 	and	r2,r2,r4
   42788:	10c4b03a 	or	r2,r2,r3
   4278c:	e0fffe43 	ldbu	r3,-7(fp)
   42790:	18c03fcc 	andi	r3,r3,255
   42794:	1808923a 	slli	r4,r3,8
   42798:	00fffff4 	movhi	r3,65535
   4279c:	18c03fc4 	addi	r3,r3,255
   427a0:	10c4703a 	and	r2,r2,r3
   427a4:	1104b03a 	or	r2,r2,r4
   427a8:	e0fffe83 	ldbu	r3,-6(fp)
   427ac:	18c03fcc 	andi	r3,r3,255
   427b0:	1808943a 	slli	r4,r3,16
   427b4:	00ffc074 	movhi	r3,65281
   427b8:	18ffffc4 	addi	r3,r3,-1
   427bc:	10c4703a 	and	r2,r2,r3
   427c0:	1104b03a 	or	r2,r2,r4
}
   427c4:	e037883a 	mov	sp,fp
   427c8:	dfc00117 	ldw	ra,4(sp)
   427cc:	df000017 	ldw	fp,0(sp)
   427d0:	dec00204 	addi	sp,sp,8
   427d4:	f800283a 	ret

000427d8 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   427d8:	defffe04 	addi	sp,sp,-8
   427dc:	df000115 	stw	fp,4(sp)
   427e0:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   427e4:	d0a0ff43 	ldbu	r2,-31747(gp)
   427e8:	10c03fcc 	andi	r3,r2,255
   427ec:	d0a00643 	ldbu	r2,-32743(gp)
   427f0:	10803fcc 	andi	r2,r2,255
   427f4:	10bfffc4 	addi	r2,r2,-1
   427f8:	1880021e 	bne	r3,r2,42804 <upClockHour+0x2c>
    clock.hour = 0;
   427fc:	d020ff45 	stb	zero,-31747(gp)
   42800:	00000306 	br	42810 <upClockHour+0x38>
  }
  else {
    clock.hour++;
   42804:	d0a0ff43 	ldbu	r2,-31747(gp)
   42808:	10800044 	addi	r2,r2,1
   4280c:	d0a0ff45 	stb	r2,-31747(gp)
  }
  return clock;
   42810:	d0a0ff43 	ldbu	r2,-31747(gp)
   42814:	e0bfff05 	stb	r2,-4(fp)
   42818:	d0a0ff83 	ldbu	r2,-31746(gp)
   4281c:	e0bfff45 	stb	r2,-3(fp)
   42820:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42824:	e0bfff85 	stb	r2,-2(fp)
   42828:	0005883a 	mov	r2,zero
   4282c:	e0ffff03 	ldbu	r3,-4(fp)
   42830:	18c03fcc 	andi	r3,r3,255
   42834:	013fc004 	movi	r4,-256
   42838:	1104703a 	and	r2,r2,r4
   4283c:	10c4b03a 	or	r2,r2,r3
   42840:	e0ffff43 	ldbu	r3,-3(fp)
   42844:	18c03fcc 	andi	r3,r3,255
   42848:	1808923a 	slli	r4,r3,8
   4284c:	00fffff4 	movhi	r3,65535
   42850:	18c03fc4 	addi	r3,r3,255
   42854:	10c4703a 	and	r2,r2,r3
   42858:	1104b03a 	or	r2,r2,r4
   4285c:	e0ffff83 	ldbu	r3,-2(fp)
   42860:	18c03fcc 	andi	r3,r3,255
   42864:	1808943a 	slli	r4,r3,16
   42868:	00ffc074 	movhi	r3,65281
   4286c:	18ffffc4 	addi	r3,r3,-1
   42870:	10c4703a 	and	r2,r2,r3
   42874:	1104b03a 	or	r2,r2,r4
}
   42878:	e037883a 	mov	sp,fp
   4287c:	df000017 	ldw	fp,0(sp)
   42880:	dec00104 	addi	sp,sp,4
   42884:	f800283a 	ret

00042888 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   42888:	defffc04 	addi	sp,sp,-16
   4288c:	dfc00315 	stw	ra,12(sp)
   42890:	df000215 	stw	fp,8(sp)
   42894:	df000204 	addi	fp,sp,8
   42898:	2005883a 	mov	r2,r4
   4289c:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   428a0:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428a4:	10803fcc 	andi	r2,r2,255
   428a8:	1000081e 	bne	r2,zero,428cc <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   428ac:	00800ec4 	movi	r2,59
   428b0:	d0a0ffc5 	stb	r2,-31745(gp)
    
    if (carry_setting == CARRY_ON) {
   428b4:	e0bfff03 	ldbu	r2,-4(fp)
   428b8:	10800058 	cmpnei	r2,r2,1
   428bc:	1000061e 	bne	r2,zero,428d8 <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   428c0:	01000044 	movi	r4,1
   428c4:	00429540 	call	42954 <downClockMinute>
   428c8:	00000306 	br	428d8 <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   428cc:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428d0:	10bfffc4 	addi	r2,r2,-1
   428d4:	d0a0ffc5 	stb	r2,-31745(gp)
  }
  return clock;
   428d8:	d0a0ff43 	ldbu	r2,-31747(gp)
   428dc:	e0bffe05 	stb	r2,-8(fp)
   428e0:	d0a0ff83 	ldbu	r2,-31746(gp)
   428e4:	e0bffe45 	stb	r2,-7(fp)
   428e8:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428ec:	e0bffe85 	stb	r2,-6(fp)
   428f0:	0005883a 	mov	r2,zero
   428f4:	e0fffe03 	ldbu	r3,-8(fp)
   428f8:	18c03fcc 	andi	r3,r3,255
   428fc:	013fc004 	movi	r4,-256
   42900:	1104703a 	and	r2,r2,r4
   42904:	10c4b03a 	or	r2,r2,r3
   42908:	e0fffe43 	ldbu	r3,-7(fp)
   4290c:	18c03fcc 	andi	r3,r3,255
   42910:	1808923a 	slli	r4,r3,8
   42914:	00fffff4 	movhi	r3,65535
   42918:	18c03fc4 	addi	r3,r3,255
   4291c:	10c4703a 	and	r2,r2,r3
   42920:	1104b03a 	or	r2,r2,r4
   42924:	e0fffe83 	ldbu	r3,-6(fp)
   42928:	18c03fcc 	andi	r3,r3,255
   4292c:	1808943a 	slli	r4,r3,16
   42930:	00ffc074 	movhi	r3,65281
   42934:	18ffffc4 	addi	r3,r3,-1
   42938:	10c4703a 	and	r2,r2,r3
   4293c:	1104b03a 	or	r2,r2,r4
}
   42940:	e037883a 	mov	sp,fp
   42944:	dfc00117 	ldw	ra,4(sp)
   42948:	df000017 	ldw	fp,0(sp)
   4294c:	dec00204 	addi	sp,sp,8
   42950:	f800283a 	ret

00042954 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   42954:	defffc04 	addi	sp,sp,-16
   42958:	dfc00315 	stw	ra,12(sp)
   4295c:	df000215 	stw	fp,8(sp)
   42960:	df000204 	addi	fp,sp,8
   42964:	2005883a 	mov	r2,r4
   42968:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   4296c:	d0a0ff83 	ldbu	r2,-31746(gp)
   42970:	10803fcc 	andi	r2,r2,255
   42974:	1000071e 	bne	r2,zero,42994 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   42978:	00800ec4 	movi	r2,59
   4297c:	d0a0ff85 	stb	r2,-31746(gp)
    
    if (carry_setting == CARRY_ON) {
   42980:	e0bfff03 	ldbu	r2,-4(fp)
   42984:	10800058 	cmpnei	r2,r2,1
   42988:	1000051e 	bne	r2,zero,429a0 <downClockMinute+0x4c>
      downClockHour();
   4298c:	0042a1c0 	call	42a1c <downClockHour>
   42990:	00000306 	br	429a0 <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   42994:	d0a0ff83 	ldbu	r2,-31746(gp)
   42998:	10bfffc4 	addi	r2,r2,-1
   4299c:	d0a0ff85 	stb	r2,-31746(gp)
  }
  return clock;
   429a0:	d0a0ff43 	ldbu	r2,-31747(gp)
   429a4:	e0bffe05 	stb	r2,-8(fp)
   429a8:	d0a0ff83 	ldbu	r2,-31746(gp)
   429ac:	e0bffe45 	stb	r2,-7(fp)
   429b0:	d0a0ffc3 	ldbu	r2,-31745(gp)
   429b4:	e0bffe85 	stb	r2,-6(fp)
   429b8:	0005883a 	mov	r2,zero
   429bc:	e0fffe03 	ldbu	r3,-8(fp)
   429c0:	18c03fcc 	andi	r3,r3,255
   429c4:	013fc004 	movi	r4,-256
   429c8:	1104703a 	and	r2,r2,r4
   429cc:	10c4b03a 	or	r2,r2,r3
   429d0:	e0fffe43 	ldbu	r3,-7(fp)
   429d4:	18c03fcc 	andi	r3,r3,255
   429d8:	1808923a 	slli	r4,r3,8
   429dc:	00fffff4 	movhi	r3,65535
   429e0:	18c03fc4 	addi	r3,r3,255
   429e4:	10c4703a 	and	r2,r2,r3
   429e8:	1104b03a 	or	r2,r2,r4
   429ec:	e0fffe83 	ldbu	r3,-6(fp)
   429f0:	18c03fcc 	andi	r3,r3,255
   429f4:	1808943a 	slli	r4,r3,16
   429f8:	00ffc074 	movhi	r3,65281
   429fc:	18ffffc4 	addi	r3,r3,-1
   42a00:	10c4703a 	and	r2,r2,r3
   42a04:	1104b03a 	or	r2,r2,r4
}
   42a08:	e037883a 	mov	sp,fp
   42a0c:	dfc00117 	ldw	ra,4(sp)
   42a10:	df000017 	ldw	fp,0(sp)
   42a14:	dec00204 	addi	sp,sp,8
   42a18:	f800283a 	ret

00042a1c <downClockHour>:

// HOURS
struct time downClockHour(void) {
   42a1c:	defffe04 	addi	sp,sp,-8
   42a20:	df000115 	stw	fp,4(sp)
   42a24:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   42a28:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a2c:	10803fcc 	andi	r2,r2,255
   42a30:	1000041e 	bne	r2,zero,42a44 <downClockHour+0x28>
    clock.hour = (time_format-1);
   42a34:	d0a00643 	ldbu	r2,-32743(gp)
   42a38:	10bfffc4 	addi	r2,r2,-1
   42a3c:	d0a0ff45 	stb	r2,-31747(gp)
   42a40:	00000306 	br	42a50 <downClockHour+0x34>
  }
  else {
    clock.hour--;
   42a44:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a48:	10bfffc4 	addi	r2,r2,-1
   42a4c:	d0a0ff45 	stb	r2,-31747(gp)
  }
  return clock;
   42a50:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a54:	e0bfff05 	stb	r2,-4(fp)
   42a58:	d0a0ff83 	ldbu	r2,-31746(gp)
   42a5c:	e0bfff45 	stb	r2,-3(fp)
   42a60:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42a64:	e0bfff85 	stb	r2,-2(fp)
   42a68:	0005883a 	mov	r2,zero
   42a6c:	e0ffff03 	ldbu	r3,-4(fp)
   42a70:	18c03fcc 	andi	r3,r3,255
   42a74:	013fc004 	movi	r4,-256
   42a78:	1104703a 	and	r2,r2,r4
   42a7c:	10c4b03a 	or	r2,r2,r3
   42a80:	e0ffff43 	ldbu	r3,-3(fp)
   42a84:	18c03fcc 	andi	r3,r3,255
   42a88:	1808923a 	slli	r4,r3,8
   42a8c:	00fffff4 	movhi	r3,65535
   42a90:	18c03fc4 	addi	r3,r3,255
   42a94:	10c4703a 	and	r2,r2,r3
   42a98:	1104b03a 	or	r2,r2,r4
   42a9c:	e0ffff83 	ldbu	r3,-2(fp)
   42aa0:	18c03fcc 	andi	r3,r3,255
   42aa4:	1808943a 	slli	r4,r3,16
   42aa8:	00ffc074 	movhi	r3,65281
   42aac:	18ffffc4 	addi	r3,r3,-1
   42ab0:	10c4703a 	and	r2,r2,r3
   42ab4:	1104b03a 	or	r2,r2,r4
}
   42ab8:	e037883a 	mov	sp,fp
   42abc:	df000017 	ldw	fp,0(sp)
   42ac0:	dec00104 	addi	sp,sp,4
   42ac4:	f800283a 	ret

00042ac8 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   42ac8:	deffff04 	addi	sp,sp,-4
   42acc:	df000015 	stw	fp,0(sp)
   42ad0:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   42ad4:	d020fe85 	stb	zero,-31750(gp)
   42ad8:	d020fec5 	stb	zero,-31749(gp)
   42adc:	d020ff05 	stb	zero,-31748(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   42ae0:	00801904 	movi	r2,100
   42ae4:	d0a0ff05 	stb	r2,-31748(gp)
}
   42ae8:	0001883a 	nop
   42aec:	e037883a 	mov	sp,fp
   42af0:	df000017 	ldw	fp,0(sp)
   42af4:	dec00104 	addi	sp,sp,4
   42af8:	f800283a 	ret

00042afc <getAlarmTime>:

struct time getAlarmTime(void) {
   42afc:	defffe04 	addi	sp,sp,-8
   42b00:	df000115 	stw	fp,4(sp)
   42b04:	df000104 	addi	fp,sp,4
  return alarm;
   42b08:	d0a0fe83 	ldbu	r2,-31750(gp)
   42b0c:	e0bfff05 	stb	r2,-4(fp)
   42b10:	d0a0fec3 	ldbu	r2,-31749(gp)
   42b14:	e0bfff45 	stb	r2,-3(fp)
   42b18:	d0a0ff03 	ldbu	r2,-31748(gp)
   42b1c:	e0bfff85 	stb	r2,-2(fp)
   42b20:	0005883a 	mov	r2,zero
   42b24:	e0ffff03 	ldbu	r3,-4(fp)
   42b28:	18c03fcc 	andi	r3,r3,255
   42b2c:	013fc004 	movi	r4,-256
   42b30:	1104703a 	and	r2,r2,r4
   42b34:	10c4b03a 	or	r2,r2,r3
   42b38:	e0ffff43 	ldbu	r3,-3(fp)
   42b3c:	18c03fcc 	andi	r3,r3,255
   42b40:	1808923a 	slli	r4,r3,8
   42b44:	00fffff4 	movhi	r3,65535
   42b48:	18c03fc4 	addi	r3,r3,255
   42b4c:	10c4703a 	and	r2,r2,r3
   42b50:	1104b03a 	or	r2,r2,r4
   42b54:	e0ffff83 	ldbu	r3,-2(fp)
   42b58:	18c03fcc 	andi	r3,r3,255
   42b5c:	1808943a 	slli	r4,r3,16
   42b60:	00ffc074 	movhi	r3,65281
   42b64:	18ffffc4 	addi	r3,r3,-1
   42b68:	10c4703a 	and	r2,r2,r3
   42b6c:	1104b03a 	or	r2,r2,r4
}
   42b70:	e037883a 	mov	sp,fp
   42b74:	df000017 	ldw	fp,0(sp)
   42b78:	dec00104 	addi	sp,sp,4
   42b7c:	f800283a 	ret

00042b80 <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute(void) {
   42b80:	defffe04 	addi	sp,sp,-8
   42b84:	df000115 	stw	fp,4(sp)
   42b88:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   42b8c:	d0a0fec3 	ldbu	r2,-31749(gp)
   42b90:	10803fcc 	andi	r2,r2,255
   42b94:	10800ed8 	cmpnei	r2,r2,59
   42b98:	1000021e 	bne	r2,zero,42ba4 <upAlarmMinute+0x24>
    alarm.minute = 0;
   42b9c:	d020fec5 	stb	zero,-31749(gp)
   42ba0:	00000306 	br	42bb0 <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   42ba4:	d0a0fec3 	ldbu	r2,-31749(gp)
   42ba8:	10800044 	addi	r2,r2,1
   42bac:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return alarm;
   42bb0:	d0a0fe83 	ldbu	r2,-31750(gp)
   42bb4:	e0bfff05 	stb	r2,-4(fp)
   42bb8:	d0a0fec3 	ldbu	r2,-31749(gp)
   42bbc:	e0bfff45 	stb	r2,-3(fp)
   42bc0:	d0a0ff03 	ldbu	r2,-31748(gp)
   42bc4:	e0bfff85 	stb	r2,-2(fp)
   42bc8:	0005883a 	mov	r2,zero
   42bcc:	e0ffff03 	ldbu	r3,-4(fp)
   42bd0:	18c03fcc 	andi	r3,r3,255
   42bd4:	013fc004 	movi	r4,-256
   42bd8:	1104703a 	and	r2,r2,r4
   42bdc:	10c4b03a 	or	r2,r2,r3
   42be0:	e0ffff43 	ldbu	r3,-3(fp)
   42be4:	18c03fcc 	andi	r3,r3,255
   42be8:	1808923a 	slli	r4,r3,8
   42bec:	00fffff4 	movhi	r3,65535
   42bf0:	18c03fc4 	addi	r3,r3,255
   42bf4:	10c4703a 	and	r2,r2,r3
   42bf8:	1104b03a 	or	r2,r2,r4
   42bfc:	e0ffff83 	ldbu	r3,-2(fp)
   42c00:	18c03fcc 	andi	r3,r3,255
   42c04:	1808943a 	slli	r4,r3,16
   42c08:	00ffc074 	movhi	r3,65281
   42c0c:	18ffffc4 	addi	r3,r3,-1
   42c10:	10c4703a 	and	r2,r2,r3
   42c14:	1104b03a 	or	r2,r2,r4
}
   42c18:	e037883a 	mov	sp,fp
   42c1c:	df000017 	ldw	fp,0(sp)
   42c20:	dec00104 	addi	sp,sp,4
   42c24:	f800283a 	ret

00042c28 <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   42c28:	defffe04 	addi	sp,sp,-8
   42c2c:	df000115 	stw	fp,4(sp)
   42c30:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   42c34:	d0a0fe83 	ldbu	r2,-31750(gp)
   42c38:	10c03fcc 	andi	r3,r2,255
   42c3c:	d0a00643 	ldbu	r2,-32743(gp)
   42c40:	10803fcc 	andi	r2,r2,255
   42c44:	10bfffc4 	addi	r2,r2,-1
   42c48:	1880021e 	bne	r3,r2,42c54 <upAlarmHour+0x2c>
    alarm.hour = 0;
   42c4c:	d020fe85 	stb	zero,-31750(gp)
   42c50:	00000306 	br	42c60 <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   42c54:	d0a0fe83 	ldbu	r2,-31750(gp)
   42c58:	10800044 	addi	r2,r2,1
   42c5c:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return alarm;
   42c60:	d0a0fe83 	ldbu	r2,-31750(gp)
   42c64:	e0bfff05 	stb	r2,-4(fp)
   42c68:	d0a0fec3 	ldbu	r2,-31749(gp)
   42c6c:	e0bfff45 	stb	r2,-3(fp)
   42c70:	d0a0ff03 	ldbu	r2,-31748(gp)
   42c74:	e0bfff85 	stb	r2,-2(fp)
   42c78:	0005883a 	mov	r2,zero
   42c7c:	e0ffff03 	ldbu	r3,-4(fp)
   42c80:	18c03fcc 	andi	r3,r3,255
   42c84:	013fc004 	movi	r4,-256
   42c88:	1104703a 	and	r2,r2,r4
   42c8c:	10c4b03a 	or	r2,r2,r3
   42c90:	e0ffff43 	ldbu	r3,-3(fp)
   42c94:	18c03fcc 	andi	r3,r3,255
   42c98:	1808923a 	slli	r4,r3,8
   42c9c:	00fffff4 	movhi	r3,65535
   42ca0:	18c03fc4 	addi	r3,r3,255
   42ca4:	10c4703a 	and	r2,r2,r3
   42ca8:	1104b03a 	or	r2,r2,r4
   42cac:	e0ffff83 	ldbu	r3,-2(fp)
   42cb0:	18c03fcc 	andi	r3,r3,255
   42cb4:	1808943a 	slli	r4,r3,16
   42cb8:	00ffc074 	movhi	r3,65281
   42cbc:	18ffffc4 	addi	r3,r3,-1
   42cc0:	10c4703a 	and	r2,r2,r3
   42cc4:	1104b03a 	or	r2,r2,r4
}
   42cc8:	e037883a 	mov	sp,fp
   42ccc:	df000017 	ldw	fp,0(sp)
   42cd0:	dec00104 	addi	sp,sp,4
   42cd4:	f800283a 	ret

00042cd8 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute(void) {
   42cd8:	defffe04 	addi	sp,sp,-8
   42cdc:	df000115 	stw	fp,4(sp)
   42ce0:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   42ce4:	d0a0fec3 	ldbu	r2,-31749(gp)
   42ce8:	10803fcc 	andi	r2,r2,255
   42cec:	1000031e 	bne	r2,zero,42cfc <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   42cf0:	00800ec4 	movi	r2,59
   42cf4:	d0a0fec5 	stb	r2,-31749(gp)
   42cf8:	00000306 	br	42d08 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   42cfc:	d0a0fec3 	ldbu	r2,-31749(gp)
   42d00:	10bfffc4 	addi	r2,r2,-1
   42d04:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return alarm;
   42d08:	d0a0fe83 	ldbu	r2,-31750(gp)
   42d0c:	e0bfff05 	stb	r2,-4(fp)
   42d10:	d0a0fec3 	ldbu	r2,-31749(gp)
   42d14:	e0bfff45 	stb	r2,-3(fp)
   42d18:	d0a0ff03 	ldbu	r2,-31748(gp)
   42d1c:	e0bfff85 	stb	r2,-2(fp)
   42d20:	0005883a 	mov	r2,zero
   42d24:	e0ffff03 	ldbu	r3,-4(fp)
   42d28:	18c03fcc 	andi	r3,r3,255
   42d2c:	013fc004 	movi	r4,-256
   42d30:	1104703a 	and	r2,r2,r4
   42d34:	10c4b03a 	or	r2,r2,r3
   42d38:	e0ffff43 	ldbu	r3,-3(fp)
   42d3c:	18c03fcc 	andi	r3,r3,255
   42d40:	1808923a 	slli	r4,r3,8
   42d44:	00fffff4 	movhi	r3,65535
   42d48:	18c03fc4 	addi	r3,r3,255
   42d4c:	10c4703a 	and	r2,r2,r3
   42d50:	1104b03a 	or	r2,r2,r4
   42d54:	e0ffff83 	ldbu	r3,-2(fp)
   42d58:	18c03fcc 	andi	r3,r3,255
   42d5c:	1808943a 	slli	r4,r3,16
   42d60:	00ffc074 	movhi	r3,65281
   42d64:	18ffffc4 	addi	r3,r3,-1
   42d68:	10c4703a 	and	r2,r2,r3
   42d6c:	1104b03a 	or	r2,r2,r4
}
   42d70:	e037883a 	mov	sp,fp
   42d74:	df000017 	ldw	fp,0(sp)
   42d78:	dec00104 	addi	sp,sp,4
   42d7c:	f800283a 	ret

00042d80 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   42d80:	defffe04 	addi	sp,sp,-8
   42d84:	df000115 	stw	fp,4(sp)
   42d88:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   42d8c:	d0a0fe83 	ldbu	r2,-31750(gp)
   42d90:	10803fcc 	andi	r2,r2,255
   42d94:	1000041e 	bne	r2,zero,42da8 <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   42d98:	d0a00643 	ldbu	r2,-32743(gp)
   42d9c:	10bfffc4 	addi	r2,r2,-1
   42da0:	d0a0fe85 	stb	r2,-31750(gp)
   42da4:	00000306 	br	42db4 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   42da8:	d0a0fe83 	ldbu	r2,-31750(gp)
   42dac:	10bfffc4 	addi	r2,r2,-1
   42db0:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return alarm;
   42db4:	d0a0fe83 	ldbu	r2,-31750(gp)
   42db8:	e0bfff05 	stb	r2,-4(fp)
   42dbc:	d0a0fec3 	ldbu	r2,-31749(gp)
   42dc0:	e0bfff45 	stb	r2,-3(fp)
   42dc4:	d0a0ff03 	ldbu	r2,-31748(gp)
   42dc8:	e0bfff85 	stb	r2,-2(fp)
   42dcc:	0005883a 	mov	r2,zero
   42dd0:	e0ffff03 	ldbu	r3,-4(fp)
   42dd4:	18c03fcc 	andi	r3,r3,255
   42dd8:	013fc004 	movi	r4,-256
   42ddc:	1104703a 	and	r2,r2,r4
   42de0:	10c4b03a 	or	r2,r2,r3
   42de4:	e0ffff43 	ldbu	r3,-3(fp)
   42de8:	18c03fcc 	andi	r3,r3,255
   42dec:	1808923a 	slli	r4,r3,8
   42df0:	00fffff4 	movhi	r3,65535
   42df4:	18c03fc4 	addi	r3,r3,255
   42df8:	10c4703a 	and	r2,r2,r3
   42dfc:	1104b03a 	or	r2,r2,r4
   42e00:	e0ffff83 	ldbu	r3,-2(fp)
   42e04:	18c03fcc 	andi	r3,r3,255
   42e08:	1808943a 	slli	r4,r3,16
   42e0c:	00ffc074 	movhi	r3,65281
   42e10:	18ffffc4 	addi	r3,r3,-1
   42e14:	10c4703a 	and	r2,r2,r3
   42e18:	1104b03a 	or	r2,r2,r4
}
   42e1c:	e037883a 	mov	sp,fp
   42e20:	df000017 	ldw	fp,0(sp)
   42e24:	dec00104 	addi	sp,sp,4
   42e28:	f800283a 	ret

00042e2c <__fixunssfsi>:
   42e2c:	defffd04 	addi	sp,sp,-12
   42e30:	dc000015 	stw	r16,0(sp)
   42e34:	0413c034 	movhi	r16,20224
   42e38:	800b883a 	mov	r5,r16
   42e3c:	dc400115 	stw	r17,4(sp)
   42e40:	dfc00215 	stw	ra,8(sp)
   42e44:	2023883a 	mov	r17,r4
   42e48:	00430400 	call	43040 <__gesf2>
   42e4c:	1000070e 	bge	r2,zero,42e6c <__fixunssfsi+0x40>
   42e50:	8809883a 	mov	r4,r17
   42e54:	00439dc0 	call	439dc <__fixsfsi>
   42e58:	dfc00217 	ldw	ra,8(sp)
   42e5c:	dc400117 	ldw	r17,4(sp)
   42e60:	dc000017 	ldw	r16,0(sp)
   42e64:	dec00304 	addi	sp,sp,12
   42e68:	f800283a 	ret
   42e6c:	800b883a 	mov	r5,r16
   42e70:	8809883a 	mov	r4,r17
   42e74:	00434f80 	call	434f8 <__subsf3>
   42e78:	1009883a 	mov	r4,r2
   42e7c:	00439dc0 	call	439dc <__fixsfsi>
   42e80:	00e00034 	movhi	r3,32768
   42e84:	10c5883a 	add	r2,r2,r3
   42e88:	003ff306 	br	42e58 <__alt_data_end+0xfffdae58>

00042e8c <__divsi3>:
   42e8c:	20001b16 	blt	r4,zero,42efc <__divsi3+0x70>
   42e90:	000f883a 	mov	r7,zero
   42e94:	28001616 	blt	r5,zero,42ef0 <__divsi3+0x64>
   42e98:	200d883a 	mov	r6,r4
   42e9c:	29001a2e 	bgeu	r5,r4,42f08 <__divsi3+0x7c>
   42ea0:	00800804 	movi	r2,32
   42ea4:	00c00044 	movi	r3,1
   42ea8:	00000106 	br	42eb0 <__divsi3+0x24>
   42eac:	10000d26 	beq	r2,zero,42ee4 <__divsi3+0x58>
   42eb0:	294b883a 	add	r5,r5,r5
   42eb4:	10bfffc4 	addi	r2,r2,-1
   42eb8:	18c7883a 	add	r3,r3,r3
   42ebc:	293ffb36 	bltu	r5,r4,42eac <__alt_data_end+0xfffdaeac>
   42ec0:	0005883a 	mov	r2,zero
   42ec4:	18000726 	beq	r3,zero,42ee4 <__divsi3+0x58>
   42ec8:	0005883a 	mov	r2,zero
   42ecc:	31400236 	bltu	r6,r5,42ed8 <__divsi3+0x4c>
   42ed0:	314dc83a 	sub	r6,r6,r5
   42ed4:	10c4b03a 	or	r2,r2,r3
   42ed8:	1806d07a 	srli	r3,r3,1
   42edc:	280ad07a 	srli	r5,r5,1
   42ee0:	183ffa1e 	bne	r3,zero,42ecc <__alt_data_end+0xfffdaecc>
   42ee4:	38000126 	beq	r7,zero,42eec <__divsi3+0x60>
   42ee8:	0085c83a 	sub	r2,zero,r2
   42eec:	f800283a 	ret
   42ef0:	014bc83a 	sub	r5,zero,r5
   42ef4:	39c0005c 	xori	r7,r7,1
   42ef8:	003fe706 	br	42e98 <__alt_data_end+0xfffdae98>
   42efc:	0109c83a 	sub	r4,zero,r4
   42f00:	01c00044 	movi	r7,1
   42f04:	003fe306 	br	42e94 <__alt_data_end+0xfffdae94>
   42f08:	00c00044 	movi	r3,1
   42f0c:	003fee06 	br	42ec8 <__alt_data_end+0xfffdaec8>

00042f10 <__modsi3>:
   42f10:	20001716 	blt	r4,zero,42f70 <__modsi3+0x60>
   42f14:	000f883a 	mov	r7,zero
   42f18:	2005883a 	mov	r2,r4
   42f1c:	28001216 	blt	r5,zero,42f68 <__modsi3+0x58>
   42f20:	2900162e 	bgeu	r5,r4,42f7c <__modsi3+0x6c>
   42f24:	01800804 	movi	r6,32
   42f28:	00c00044 	movi	r3,1
   42f2c:	00000106 	br	42f34 <__modsi3+0x24>
   42f30:	30000a26 	beq	r6,zero,42f5c <__modsi3+0x4c>
   42f34:	294b883a 	add	r5,r5,r5
   42f38:	31bfffc4 	addi	r6,r6,-1
   42f3c:	18c7883a 	add	r3,r3,r3
   42f40:	293ffb36 	bltu	r5,r4,42f30 <__alt_data_end+0xfffdaf30>
   42f44:	18000526 	beq	r3,zero,42f5c <__modsi3+0x4c>
   42f48:	1806d07a 	srli	r3,r3,1
   42f4c:	11400136 	bltu	r2,r5,42f54 <__modsi3+0x44>
   42f50:	1145c83a 	sub	r2,r2,r5
   42f54:	280ad07a 	srli	r5,r5,1
   42f58:	183ffb1e 	bne	r3,zero,42f48 <__alt_data_end+0xfffdaf48>
   42f5c:	38000126 	beq	r7,zero,42f64 <__modsi3+0x54>
   42f60:	0085c83a 	sub	r2,zero,r2
   42f64:	f800283a 	ret
   42f68:	014bc83a 	sub	r5,zero,r5
   42f6c:	003fec06 	br	42f20 <__alt_data_end+0xfffdaf20>
   42f70:	0109c83a 	sub	r4,zero,r4
   42f74:	01c00044 	movi	r7,1
   42f78:	003fe706 	br	42f18 <__alt_data_end+0xfffdaf18>
   42f7c:	00c00044 	movi	r3,1
   42f80:	003ff106 	br	42f48 <__alt_data_end+0xfffdaf48>

00042f84 <__udivsi3>:
   42f84:	200d883a 	mov	r6,r4
   42f88:	2900152e 	bgeu	r5,r4,42fe0 <__udivsi3+0x5c>
   42f8c:	28001416 	blt	r5,zero,42fe0 <__udivsi3+0x5c>
   42f90:	00800804 	movi	r2,32
   42f94:	00c00044 	movi	r3,1
   42f98:	00000206 	br	42fa4 <__udivsi3+0x20>
   42f9c:	10000e26 	beq	r2,zero,42fd8 <__udivsi3+0x54>
   42fa0:	28000516 	blt	r5,zero,42fb8 <__udivsi3+0x34>
   42fa4:	294b883a 	add	r5,r5,r5
   42fa8:	10bfffc4 	addi	r2,r2,-1
   42fac:	18c7883a 	add	r3,r3,r3
   42fb0:	293ffa36 	bltu	r5,r4,42f9c <__alt_data_end+0xfffdaf9c>
   42fb4:	18000826 	beq	r3,zero,42fd8 <__udivsi3+0x54>
   42fb8:	0005883a 	mov	r2,zero
   42fbc:	31400236 	bltu	r6,r5,42fc8 <__udivsi3+0x44>
   42fc0:	314dc83a 	sub	r6,r6,r5
   42fc4:	10c4b03a 	or	r2,r2,r3
   42fc8:	1806d07a 	srli	r3,r3,1
   42fcc:	280ad07a 	srli	r5,r5,1
   42fd0:	183ffa1e 	bne	r3,zero,42fbc <__alt_data_end+0xfffdafbc>
   42fd4:	f800283a 	ret
   42fd8:	0005883a 	mov	r2,zero
   42fdc:	f800283a 	ret
   42fe0:	00c00044 	movi	r3,1
   42fe4:	003ff406 	br	42fb8 <__alt_data_end+0xfffdafb8>

00042fe8 <__umodsi3>:
   42fe8:	2005883a 	mov	r2,r4
   42fec:	2900122e 	bgeu	r5,r4,43038 <__umodsi3+0x50>
   42ff0:	28001116 	blt	r5,zero,43038 <__umodsi3+0x50>
   42ff4:	01800804 	movi	r6,32
   42ff8:	00c00044 	movi	r3,1
   42ffc:	00000206 	br	43008 <__umodsi3+0x20>
   43000:	30000c26 	beq	r6,zero,43034 <__umodsi3+0x4c>
   43004:	28000516 	blt	r5,zero,4301c <__umodsi3+0x34>
   43008:	294b883a 	add	r5,r5,r5
   4300c:	31bfffc4 	addi	r6,r6,-1
   43010:	18c7883a 	add	r3,r3,r3
   43014:	293ffa36 	bltu	r5,r4,43000 <__alt_data_end+0xfffdb000>
   43018:	18000626 	beq	r3,zero,43034 <__umodsi3+0x4c>
   4301c:	1806d07a 	srli	r3,r3,1
   43020:	11400136 	bltu	r2,r5,43028 <__umodsi3+0x40>
   43024:	1145c83a 	sub	r2,r2,r5
   43028:	280ad07a 	srli	r5,r5,1
   4302c:	183ffb1e 	bne	r3,zero,4301c <__alt_data_end+0xfffdb01c>
   43030:	f800283a 	ret
   43034:	f800283a 	ret
   43038:	00c00044 	movi	r3,1
   4303c:	003ff706 	br	4301c <__alt_data_end+0xfffdb01c>

00043040 <__gesf2>:
   43040:	2004d5fa 	srli	r2,r4,23
   43044:	2806d5fa 	srli	r3,r5,23
   43048:	01802034 	movhi	r6,128
   4304c:	31bfffc4 	addi	r6,r6,-1
   43050:	10803fcc 	andi	r2,r2,255
   43054:	01c03fc4 	movi	r7,255
   43058:	3110703a 	and	r8,r6,r4
   4305c:	18c03fcc 	andi	r3,r3,255
   43060:	314c703a 	and	r6,r6,r5
   43064:	2008d7fa 	srli	r4,r4,31
   43068:	280ad7fa 	srli	r5,r5,31
   4306c:	11c01926 	beq	r2,r7,430d4 <__gesf2+0x94>
   43070:	01c03fc4 	movi	r7,255
   43074:	19c00f26 	beq	r3,r7,430b4 <__gesf2+0x74>
   43078:	1000061e 	bne	r2,zero,43094 <__gesf2+0x54>
   4307c:	400f003a 	cmpeq	r7,r8,zero
   43080:	1800071e 	bne	r3,zero,430a0 <__gesf2+0x60>
   43084:	3000061e 	bne	r6,zero,430a0 <__gesf2+0x60>
   43088:	0005883a 	mov	r2,zero
   4308c:	40000e1e 	bne	r8,zero,430c8 <__gesf2+0x88>
   43090:	f800283a 	ret
   43094:	18000a1e 	bne	r3,zero,430c0 <__gesf2+0x80>
   43098:	30000b26 	beq	r6,zero,430c8 <__gesf2+0x88>
   4309c:	000f883a 	mov	r7,zero
   430a0:	29403fcc 	andi	r5,r5,255
   430a4:	38000726 	beq	r7,zero,430c4 <__gesf2+0x84>
   430a8:	28000826 	beq	r5,zero,430cc <__gesf2+0x8c>
   430ac:	00800044 	movi	r2,1
   430b0:	f800283a 	ret
   430b4:	303ff026 	beq	r6,zero,43078 <__alt_data_end+0xfffdb078>
   430b8:	00bfff84 	movi	r2,-2
   430bc:	f800283a 	ret
   430c0:	29403fcc 	andi	r5,r5,255
   430c4:	21400526 	beq	r4,r5,430dc <__gesf2+0x9c>
   430c8:	203ff826 	beq	r4,zero,430ac <__alt_data_end+0xfffdb0ac>
   430cc:	00bfffc4 	movi	r2,-1
   430d0:	f800283a 	ret
   430d4:	403fe626 	beq	r8,zero,43070 <__alt_data_end+0xfffdb070>
   430d8:	003ff706 	br	430b8 <__alt_data_end+0xfffdb0b8>
   430dc:	18bffa16 	blt	r3,r2,430c8 <__alt_data_end+0xfffdb0c8>
   430e0:	10c00216 	blt	r2,r3,430ec <__gesf2+0xac>
   430e4:	323ff836 	bltu	r6,r8,430c8 <__alt_data_end+0xfffdb0c8>
   430e8:	4180022e 	bgeu	r8,r6,430f4 <__gesf2+0xb4>
   430ec:	203fef1e 	bne	r4,zero,430ac <__alt_data_end+0xfffdb0ac>
   430f0:	003ff606 	br	430cc <__alt_data_end+0xfffdb0cc>
   430f4:	0005883a 	mov	r2,zero
   430f8:	f800283a 	ret

000430fc <__mulsf3>:
   430fc:	defff504 	addi	sp,sp,-44
   43100:	dc000115 	stw	r16,4(sp)
   43104:	2020d5fa 	srli	r16,r4,23
   43108:	dd400615 	stw	r21,24(sp)
   4310c:	202ad7fa 	srli	r21,r4,31
   43110:	dc800315 	stw	r18,12(sp)
   43114:	04802034 	movhi	r18,128
   43118:	df000915 	stw	fp,36(sp)
   4311c:	dd000515 	stw	r20,20(sp)
   43120:	94bfffc4 	addi	r18,r18,-1
   43124:	dfc00a15 	stw	ra,40(sp)
   43128:	ddc00815 	stw	r23,32(sp)
   4312c:	dd800715 	stw	r22,28(sp)
   43130:	dcc00415 	stw	r19,16(sp)
   43134:	dc400215 	stw	r17,8(sp)
   43138:	84003fcc 	andi	r16,r16,255
   4313c:	9124703a 	and	r18,r18,r4
   43140:	a829883a 	mov	r20,r21
   43144:	af003fcc 	andi	fp,r21,255
   43148:	80005426 	beq	r16,zero,4329c <__mulsf3+0x1a0>
   4314c:	00803fc4 	movi	r2,255
   43150:	80802f26 	beq	r16,r2,43210 <__mulsf3+0x114>
   43154:	91002034 	orhi	r4,r18,128
   43158:	202490fa 	slli	r18,r4,3
   4315c:	843fe044 	addi	r16,r16,-127
   43160:	0023883a 	mov	r17,zero
   43164:	002f883a 	mov	r23,zero
   43168:	2804d5fa 	srli	r2,r5,23
   4316c:	282cd7fa 	srli	r22,r5,31
   43170:	01002034 	movhi	r4,128
   43174:	213fffc4 	addi	r4,r4,-1
   43178:	10803fcc 	andi	r2,r2,255
   4317c:	2166703a 	and	r19,r4,r5
   43180:	b1803fcc 	andi	r6,r22,255
   43184:	10004c26 	beq	r2,zero,432b8 <__mulsf3+0x1bc>
   43188:	00c03fc4 	movi	r3,255
   4318c:	10c04726 	beq	r2,r3,432ac <__mulsf3+0x1b0>
   43190:	99002034 	orhi	r4,r19,128
   43194:	202690fa 	slli	r19,r4,3
   43198:	10bfe044 	addi	r2,r2,-127
   4319c:	0007883a 	mov	r3,zero
   431a0:	80a1883a 	add	r16,r16,r2
   431a4:	010003c4 	movi	r4,15
   431a8:	1c44b03a 	or	r2,r3,r17
   431ac:	b56af03a 	xor	r21,r22,r21
   431b0:	81c00044 	addi	r7,r16,1
   431b4:	20806b36 	bltu	r4,r2,43364 <__mulsf3+0x268>
   431b8:	100490ba 	slli	r2,r2,2
   431bc:	01000134 	movhi	r4,4
   431c0:	210c7404 	addi	r4,r4,12752
   431c4:	1105883a 	add	r2,r2,r4
   431c8:	10800017 	ldw	r2,0(r2)
   431cc:	1000683a 	jmp	r2
   431d0:	00043364 	muli	zero,zero,4301
   431d4:	00043224 	muli	zero,zero,4296
   431d8:	00043224 	muli	zero,zero,4296
   431dc:	00043220 	cmpeqi	zero,zero,4296
   431e0:	00043348 	cmpgei	zero,zero,4301
   431e4:	00043348 	cmpgei	zero,zero,4301
   431e8:	00043334 	movhi	zero,4300
   431ec:	00043220 	cmpeqi	zero,zero,4296
   431f0:	00043348 	cmpgei	zero,zero,4301
   431f4:	00043334 	movhi	zero,4300
   431f8:	00043348 	cmpgei	zero,zero,4301
   431fc:	00043220 	cmpeqi	zero,zero,4296
   43200:	00043354 	movui	zero,4301
   43204:	00043354 	movui	zero,4301
   43208:	00043354 	movui	zero,4301
   4320c:	00043430 	cmpltui	zero,zero,4304
   43210:	90003b1e 	bne	r18,zero,43300 <__mulsf3+0x204>
   43214:	04400204 	movi	r17,8
   43218:	05c00084 	movi	r23,2
   4321c:	003fd206 	br	43168 <__alt_data_end+0xfffdb168>
   43220:	302b883a 	mov	r21,r6
   43224:	00800084 	movi	r2,2
   43228:	18802626 	beq	r3,r2,432c4 <__mulsf3+0x1c8>
   4322c:	008000c4 	movi	r2,3
   43230:	1880ab26 	beq	r3,r2,434e0 <__mulsf3+0x3e4>
   43234:	00800044 	movi	r2,1
   43238:	1880a21e 	bne	r3,r2,434c4 <__mulsf3+0x3c8>
   4323c:	a829883a 	mov	r20,r21
   43240:	0007883a 	mov	r3,zero
   43244:	0009883a 	mov	r4,zero
   43248:	18803fcc 	andi	r2,r3,255
   4324c:	100695fa 	slli	r3,r2,23
   43250:	a0803fcc 	andi	r2,r20,255
   43254:	100a97fa 	slli	r5,r2,31
   43258:	00802034 	movhi	r2,128
   4325c:	10bfffc4 	addi	r2,r2,-1
   43260:	2084703a 	and	r2,r4,r2
   43264:	10c4b03a 	or	r2,r2,r3
   43268:	1144b03a 	or	r2,r2,r5
   4326c:	dfc00a17 	ldw	ra,40(sp)
   43270:	df000917 	ldw	fp,36(sp)
   43274:	ddc00817 	ldw	r23,32(sp)
   43278:	dd800717 	ldw	r22,28(sp)
   4327c:	dd400617 	ldw	r21,24(sp)
   43280:	dd000517 	ldw	r20,20(sp)
   43284:	dcc00417 	ldw	r19,16(sp)
   43288:	dc800317 	ldw	r18,12(sp)
   4328c:	dc400217 	ldw	r17,8(sp)
   43290:	dc000117 	ldw	r16,4(sp)
   43294:	dec00b04 	addi	sp,sp,44
   43298:	f800283a 	ret
   4329c:	90000d1e 	bne	r18,zero,432d4 <__mulsf3+0x1d8>
   432a0:	04400104 	movi	r17,4
   432a4:	05c00044 	movi	r23,1
   432a8:	003faf06 	br	43168 <__alt_data_end+0xfffdb168>
   432ac:	9806c03a 	cmpne	r3,r19,zero
   432b0:	18c00084 	addi	r3,r3,2
   432b4:	003fba06 	br	431a0 <__alt_data_end+0xfffdb1a0>
   432b8:	9800141e 	bne	r19,zero,4330c <__mulsf3+0x210>
   432bc:	00c00044 	movi	r3,1
   432c0:	003fb706 	br	431a0 <__alt_data_end+0xfffdb1a0>
   432c4:	a829883a 	mov	r20,r21
   432c8:	00ffffc4 	movi	r3,-1
   432cc:	0009883a 	mov	r4,zero
   432d0:	003fdd06 	br	43248 <__alt_data_end+0xfffdb248>
   432d4:	9009883a 	mov	r4,r18
   432d8:	d9400015 	stw	r5,0(sp)
   432dc:	0043b3c0 	call	43b3c <__clzsi2>
   432e0:	10fffec4 	addi	r3,r2,-5
   432e4:	10801d84 	addi	r2,r2,118
   432e8:	90e4983a 	sll	r18,r18,r3
   432ec:	00a1c83a 	sub	r16,zero,r2
   432f0:	0023883a 	mov	r17,zero
   432f4:	002f883a 	mov	r23,zero
   432f8:	d9400017 	ldw	r5,0(sp)
   432fc:	003f9a06 	br	43168 <__alt_data_end+0xfffdb168>
   43300:	04400304 	movi	r17,12
   43304:	05c000c4 	movi	r23,3
   43308:	003f9706 	br	43168 <__alt_data_end+0xfffdb168>
   4330c:	9809883a 	mov	r4,r19
   43310:	d9800015 	stw	r6,0(sp)
   43314:	0043b3c0 	call	43b3c <__clzsi2>
   43318:	10fffec4 	addi	r3,r2,-5
   4331c:	10801d84 	addi	r2,r2,118
   43320:	98e6983a 	sll	r19,r19,r3
   43324:	0085c83a 	sub	r2,zero,r2
   43328:	0007883a 	mov	r3,zero
   4332c:	d9800017 	ldw	r6,0(sp)
   43330:	003f9b06 	br	431a0 <__alt_data_end+0xfffdb1a0>
   43334:	01002034 	movhi	r4,128
   43338:	0029883a 	mov	r20,zero
   4333c:	213fffc4 	addi	r4,r4,-1
   43340:	00ffffc4 	movi	r3,-1
   43344:	003fc006 	br	43248 <__alt_data_end+0xfffdb248>
   43348:	9027883a 	mov	r19,r18
   4334c:	b807883a 	mov	r3,r23
   43350:	003fb406 	br	43224 <__alt_data_end+0xfffdb224>
   43354:	9027883a 	mov	r19,r18
   43358:	e02b883a 	mov	r21,fp
   4335c:	b807883a 	mov	r3,r23
   43360:	003fb006 	br	43224 <__alt_data_end+0xfffdb224>
   43364:	9004d43a 	srli	r2,r18,16
   43368:	9810d43a 	srli	r8,r19,16
   4336c:	94bfffcc 	andi	r18,r18,65535
   43370:	993fffcc 	andi	r4,r19,65535
   43374:	910d383a 	mul	r6,r18,r4
   43378:	20a7383a 	mul	r19,r4,r2
   4337c:	9225383a 	mul	r18,r18,r8
   43380:	3006d43a 	srli	r3,r6,16
   43384:	1211383a 	mul	r8,r2,r8
   43388:	94e5883a 	add	r18,r18,r19
   4338c:	1c87883a 	add	r3,r3,r18
   43390:	1cc0022e 	bgeu	r3,r19,4339c <__mulsf3+0x2a0>
   43394:	00800074 	movhi	r2,1
   43398:	4091883a 	add	r8,r8,r2
   4339c:	1804943a 	slli	r2,r3,16
   433a0:	31bfffcc 	andi	r6,r6,65535
   433a4:	1806d43a 	srli	r3,r3,16
   433a8:	1185883a 	add	r2,r2,r6
   433ac:	102691ba 	slli	r19,r2,6
   433b0:	1a07883a 	add	r3,r3,r8
   433b4:	1004d6ba 	srli	r2,r2,26
   433b8:	180891ba 	slli	r4,r3,6
   433bc:	9826c03a 	cmpne	r19,r19,zero
   433c0:	9884b03a 	or	r2,r19,r2
   433c4:	1126b03a 	or	r19,r2,r4
   433c8:	9882002c 	andhi	r2,r19,2048
   433cc:	10000426 	beq	r2,zero,433e0 <__mulsf3+0x2e4>
   433d0:	9804d07a 	srli	r2,r19,1
   433d4:	9900004c 	andi	r4,r19,1
   433d8:	3821883a 	mov	r16,r7
   433dc:	1126b03a 	or	r19,r2,r4
   433e0:	80c01fc4 	addi	r3,r16,127
   433e4:	00c0210e 	bge	zero,r3,4346c <__mulsf3+0x370>
   433e8:	988001cc 	andi	r2,r19,7
   433ec:	10000426 	beq	r2,zero,43400 <__mulsf3+0x304>
   433f0:	988003cc 	andi	r2,r19,15
   433f4:	01000104 	movi	r4,4
   433f8:	11000126 	beq	r2,r4,43400 <__mulsf3+0x304>
   433fc:	9927883a 	add	r19,r19,r4
   43400:	9882002c 	andhi	r2,r19,2048
   43404:	10000426 	beq	r2,zero,43418 <__mulsf3+0x31c>
   43408:	00be0034 	movhi	r2,63488
   4340c:	10bfffc4 	addi	r2,r2,-1
   43410:	80c02004 	addi	r3,r16,128
   43414:	98a6703a 	and	r19,r19,r2
   43418:	00803f84 	movi	r2,254
   4341c:	10ffa916 	blt	r2,r3,432c4 <__alt_data_end+0xfffdb2c4>
   43420:	980891ba 	slli	r4,r19,6
   43424:	a829883a 	mov	r20,r21
   43428:	2008d27a 	srli	r4,r4,9
   4342c:	003f8606 	br	43248 <__alt_data_end+0xfffdb248>
   43430:	9080102c 	andhi	r2,r18,64
   43434:	10000826 	beq	r2,zero,43458 <__mulsf3+0x35c>
   43438:	9880102c 	andhi	r2,r19,64
   4343c:	1000061e 	bne	r2,zero,43458 <__mulsf3+0x35c>
   43440:	00802034 	movhi	r2,128
   43444:	99001034 	orhi	r4,r19,64
   43448:	10bfffc4 	addi	r2,r2,-1
   4344c:	b029883a 	mov	r20,r22
   43450:	2088703a 	and	r4,r4,r2
   43454:	003fba06 	br	43340 <__alt_data_end+0xfffdb340>
   43458:	00802034 	movhi	r2,128
   4345c:	91001034 	orhi	r4,r18,64
   43460:	10bfffc4 	addi	r2,r2,-1
   43464:	2088703a 	and	r4,r4,r2
   43468:	003fb506 	br	43340 <__alt_data_end+0xfffdb340>
   4346c:	00800044 	movi	r2,1
   43470:	10c7c83a 	sub	r3,r2,r3
   43474:	008006c4 	movi	r2,27
   43478:	10ff7016 	blt	r2,r3,4323c <__alt_data_end+0xfffdb23c>
   4347c:	00800804 	movi	r2,32
   43480:	10c5c83a 	sub	r2,r2,r3
   43484:	9884983a 	sll	r2,r19,r2
   43488:	98c6d83a 	srl	r3,r19,r3
   4348c:	1004c03a 	cmpne	r2,r2,zero
   43490:	1884b03a 	or	r2,r3,r2
   43494:	10c001cc 	andi	r3,r2,7
   43498:	18000426 	beq	r3,zero,434ac <__mulsf3+0x3b0>
   4349c:	10c003cc 	andi	r3,r2,15
   434a0:	01000104 	movi	r4,4
   434a4:	19000126 	beq	r3,r4,434ac <__mulsf3+0x3b0>
   434a8:	1105883a 	add	r2,r2,r4
   434ac:	10c1002c 	andhi	r3,r2,1024
   434b0:	18000626 	beq	r3,zero,434cc <__mulsf3+0x3d0>
   434b4:	a829883a 	mov	r20,r21
   434b8:	00c00044 	movi	r3,1
   434bc:	0009883a 	mov	r4,zero
   434c0:	003f6106 	br	43248 <__alt_data_end+0xfffdb248>
   434c4:	3821883a 	mov	r16,r7
   434c8:	003fc506 	br	433e0 <__alt_data_end+0xfffdb3e0>
   434cc:	100491ba 	slli	r2,r2,6
   434d0:	a829883a 	mov	r20,r21
   434d4:	0007883a 	mov	r3,zero
   434d8:	1008d27a 	srli	r4,r2,9
   434dc:	003f5a06 	br	43248 <__alt_data_end+0xfffdb248>
   434e0:	00802034 	movhi	r2,128
   434e4:	99001034 	orhi	r4,r19,64
   434e8:	10bfffc4 	addi	r2,r2,-1
   434ec:	a829883a 	mov	r20,r21
   434f0:	2088703a 	and	r4,r4,r2
   434f4:	003f9206 	br	43340 <__alt_data_end+0xfffdb340>

000434f8 <__subsf3>:
   434f8:	defffc04 	addi	sp,sp,-16
   434fc:	280cd5fa 	srli	r6,r5,23
   43500:	dc000015 	stw	r16,0(sp)
   43504:	01c02034 	movhi	r7,128
   43508:	2020d5fa 	srli	r16,r4,23
   4350c:	39ffffc4 	addi	r7,r7,-1
   43510:	3906703a 	and	r3,r7,r4
   43514:	dc400115 	stw	r17,4(sp)
   43518:	394e703a 	and	r7,r7,r5
   4351c:	2022d7fa 	srli	r17,r4,31
   43520:	dfc00315 	stw	ra,12(sp)
   43524:	dc800215 	stw	r18,8(sp)
   43528:	31803fcc 	andi	r6,r6,255
   4352c:	01003fc4 	movi	r4,255
   43530:	84003fcc 	andi	r16,r16,255
   43534:	180690fa 	slli	r3,r3,3
   43538:	2804d7fa 	srli	r2,r5,31
   4353c:	380e90fa 	slli	r7,r7,3
   43540:	31006d26 	beq	r6,r4,436f8 <__subsf3+0x200>
   43544:	1080005c 	xori	r2,r2,1
   43548:	8189c83a 	sub	r4,r16,r6
   4354c:	14404f26 	beq	r2,r17,4368c <__subsf3+0x194>
   43550:	0100770e 	bge	zero,r4,43730 <__subsf3+0x238>
   43554:	30001e1e 	bne	r6,zero,435d0 <__subsf3+0xd8>
   43558:	38006a1e 	bne	r7,zero,43704 <__subsf3+0x20c>
   4355c:	188001cc 	andi	r2,r3,7
   43560:	10000426 	beq	r2,zero,43574 <__subsf3+0x7c>
   43564:	188003cc 	andi	r2,r3,15
   43568:	01000104 	movi	r4,4
   4356c:	11000126 	beq	r2,r4,43574 <__subsf3+0x7c>
   43570:	1907883a 	add	r3,r3,r4
   43574:	1881002c 	andhi	r2,r3,1024
   43578:	10003926 	beq	r2,zero,43660 <__subsf3+0x168>
   4357c:	84000044 	addi	r16,r16,1
   43580:	00803fc4 	movi	r2,255
   43584:	80807526 	beq	r16,r2,4375c <__subsf3+0x264>
   43588:	180691ba 	slli	r3,r3,6
   4358c:	8880004c 	andi	r2,r17,1
   43590:	180ad27a 	srli	r5,r3,9
   43594:	84003fcc 	andi	r16,r16,255
   43598:	800695fa 	slli	r3,r16,23
   4359c:	10803fcc 	andi	r2,r2,255
   435a0:	01002034 	movhi	r4,128
   435a4:	213fffc4 	addi	r4,r4,-1
   435a8:	100497fa 	slli	r2,r2,31
   435ac:	2920703a 	and	r16,r5,r4
   435b0:	80e0b03a 	or	r16,r16,r3
   435b4:	8084b03a 	or	r2,r16,r2
   435b8:	dfc00317 	ldw	ra,12(sp)
   435bc:	dc800217 	ldw	r18,8(sp)
   435c0:	dc400117 	ldw	r17,4(sp)
   435c4:	dc000017 	ldw	r16,0(sp)
   435c8:	dec00404 	addi	sp,sp,16
   435cc:	f800283a 	ret
   435d0:	00803fc4 	movi	r2,255
   435d4:	80bfe126 	beq	r16,r2,4355c <__alt_data_end+0xfffdb55c>
   435d8:	39c10034 	orhi	r7,r7,1024
   435dc:	008006c4 	movi	r2,27
   435e0:	11007416 	blt	r2,r4,437b4 <__subsf3+0x2bc>
   435e4:	00800804 	movi	r2,32
   435e8:	1105c83a 	sub	r2,r2,r4
   435ec:	3884983a 	sll	r2,r7,r2
   435f0:	390ed83a 	srl	r7,r7,r4
   435f4:	1008c03a 	cmpne	r4,r2,zero
   435f8:	390eb03a 	or	r7,r7,r4
   435fc:	19c7c83a 	sub	r3,r3,r7
   43600:	1881002c 	andhi	r2,r3,1024
   43604:	10001426 	beq	r2,zero,43658 <__subsf3+0x160>
   43608:	04810034 	movhi	r18,1024
   4360c:	94bfffc4 	addi	r18,r18,-1
   43610:	1ca4703a 	and	r18,r3,r18
   43614:	9009883a 	mov	r4,r18
   43618:	0043b3c0 	call	43b3c <__clzsi2>
   4361c:	10bffec4 	addi	r2,r2,-5
   43620:	90a4983a 	sll	r18,r18,r2
   43624:	14005116 	blt	r2,r16,4376c <__subsf3+0x274>
   43628:	1405c83a 	sub	r2,r2,r16
   4362c:	10c00044 	addi	r3,r2,1
   43630:	00800804 	movi	r2,32
   43634:	10c5c83a 	sub	r2,r2,r3
   43638:	9084983a 	sll	r2,r18,r2
   4363c:	90e4d83a 	srl	r18,r18,r3
   43640:	0021883a 	mov	r16,zero
   43644:	1006c03a 	cmpne	r3,r2,zero
   43648:	90c6b03a 	or	r3,r18,r3
   4364c:	003fc306 	br	4355c <__alt_data_end+0xfffdb55c>
   43650:	2000e026 	beq	r4,zero,439d4 <__subsf3+0x4dc>
   43654:	2007883a 	mov	r3,r4
   43658:	188001cc 	andi	r2,r3,7
   4365c:	103fc11e 	bne	r2,zero,43564 <__alt_data_end+0xfffdb564>
   43660:	180ad0fa 	srli	r5,r3,3
   43664:	00c03fc4 	movi	r3,255
   43668:	8880004c 	andi	r2,r17,1
   4366c:	80c0031e 	bne	r16,r3,4367c <__subsf3+0x184>
   43670:	28006d26 	beq	r5,zero,43828 <__subsf3+0x330>
   43674:	29401034 	orhi	r5,r5,64
   43678:	043fffc4 	movi	r16,-1
   4367c:	00c02034 	movhi	r3,128
   43680:	18ffffc4 	addi	r3,r3,-1
   43684:	28ca703a 	and	r5,r5,r3
   43688:	003fc206 	br	43594 <__alt_data_end+0xfffdb594>
   4368c:	01003c0e 	bge	zero,r4,43780 <__subsf3+0x288>
   43690:	30002126 	beq	r6,zero,43718 <__subsf3+0x220>
   43694:	01403fc4 	movi	r5,255
   43698:	817fb026 	beq	r16,r5,4355c <__alt_data_end+0xfffdb55c>
   4369c:	39c10034 	orhi	r7,r7,1024
   436a0:	014006c4 	movi	r5,27
   436a4:	29007416 	blt	r5,r4,43878 <__subsf3+0x380>
   436a8:	01400804 	movi	r5,32
   436ac:	290bc83a 	sub	r5,r5,r4
   436b0:	394a983a 	sll	r5,r7,r5
   436b4:	390ed83a 	srl	r7,r7,r4
   436b8:	2808c03a 	cmpne	r4,r5,zero
   436bc:	390eb03a 	or	r7,r7,r4
   436c0:	19c7883a 	add	r3,r3,r7
   436c4:	1901002c 	andhi	r4,r3,1024
   436c8:	20003826 	beq	r4,zero,437ac <__subsf3+0x2b4>
   436cc:	84000044 	addi	r16,r16,1
   436d0:	01003fc4 	movi	r4,255
   436d4:	81005426 	beq	r16,r4,43828 <__subsf3+0x330>
   436d8:	1023883a 	mov	r17,r2
   436dc:	00bf0034 	movhi	r2,64512
   436e0:	10bfffc4 	addi	r2,r2,-1
   436e4:	1900004c 	andi	r4,r3,1
   436e8:	1886703a 	and	r3,r3,r2
   436ec:	1806d07a 	srli	r3,r3,1
   436f0:	1906b03a 	or	r3,r3,r4
   436f4:	003f9906 	br	4355c <__alt_data_end+0xfffdb55c>
   436f8:	383f9226 	beq	r7,zero,43544 <__alt_data_end+0xfffdb544>
   436fc:	10803fcc 	andi	r2,r2,255
   43700:	003f9106 	br	43548 <__alt_data_end+0xfffdb548>
   43704:	213fffc4 	addi	r4,r4,-1
   43708:	203fbc26 	beq	r4,zero,435fc <__alt_data_end+0xfffdb5fc>
   4370c:	00803fc4 	movi	r2,255
   43710:	80bfb21e 	bne	r16,r2,435dc <__alt_data_end+0xfffdb5dc>
   43714:	003f9106 	br	4355c <__alt_data_end+0xfffdb55c>
   43718:	383f9026 	beq	r7,zero,4355c <__alt_data_end+0xfffdb55c>
   4371c:	213fffc4 	addi	r4,r4,-1
   43720:	203fe726 	beq	r4,zero,436c0 <__alt_data_end+0xfffdb6c0>
   43724:	01403fc4 	movi	r5,255
   43728:	817fdd1e 	bne	r16,r5,436a0 <__alt_data_end+0xfffdb6a0>
   4372c:	003f8b06 	br	4355c <__alt_data_end+0xfffdb55c>
   43730:	2000221e 	bne	r4,zero,437bc <__subsf3+0x2c4>
   43734:	81000044 	addi	r4,r16,1
   43738:	21003fcc 	andi	r4,r4,255
   4373c:	01400044 	movi	r5,1
   43740:	2900470e 	bge	r5,r4,43860 <__subsf3+0x368>
   43744:	19e5c83a 	sub	r18,r3,r7
   43748:	9141002c 	andhi	r5,r18,1024
   4374c:	28002d26 	beq	r5,zero,43804 <__subsf3+0x30c>
   43750:	38e5c83a 	sub	r18,r7,r3
   43754:	1023883a 	mov	r17,r2
   43758:	003fae06 	br	43614 <__alt_data_end+0xfffdb614>
   4375c:	8880004c 	andi	r2,r17,1
   43760:	043fffc4 	movi	r16,-1
   43764:	000b883a 	mov	r5,zero
   43768:	003f8a06 	br	43594 <__alt_data_end+0xfffdb594>
   4376c:	00ff0034 	movhi	r3,64512
   43770:	18ffffc4 	addi	r3,r3,-1
   43774:	80a1c83a 	sub	r16,r16,r2
   43778:	90c6703a 	and	r3,r18,r3
   4377c:	003f7706 	br	4355c <__alt_data_end+0xfffdb55c>
   43780:	2000431e 	bne	r4,zero,43890 <__subsf3+0x398>
   43784:	81000044 	addi	r4,r16,1
   43788:	21803fcc 	andi	r6,r4,255
   4378c:	01400044 	movi	r5,1
   43790:	2980280e 	bge	r5,r6,43834 <__subsf3+0x33c>
   43794:	01403fc4 	movi	r5,255
   43798:	21402326 	beq	r4,r5,43828 <__subsf3+0x330>
   4379c:	19c7883a 	add	r3,r3,r7
   437a0:	1806d07a 	srli	r3,r3,1
   437a4:	2021883a 	mov	r16,r4
   437a8:	003f6c06 	br	4355c <__alt_data_end+0xfffdb55c>
   437ac:	1023883a 	mov	r17,r2
   437b0:	003fa906 	br	43658 <__alt_data_end+0xfffdb658>
   437b4:	01c00044 	movi	r7,1
   437b8:	003f9006 	br	435fc <__alt_data_end+0xfffdb5fc>
   437bc:	8000151e 	bne	r16,zero,43814 <__subsf3+0x31c>
   437c0:	18002f26 	beq	r3,zero,43880 <__subsf3+0x388>
   437c4:	0108303a 	nor	r4,zero,r4
   437c8:	20000a26 	beq	r4,zero,437f4 <__subsf3+0x2fc>
   437cc:	01403fc4 	movi	r5,255
   437d0:	31402b26 	beq	r6,r5,43880 <__subsf3+0x388>
   437d4:	014006c4 	movi	r5,27
   437d8:	29006e16 	blt	r5,r4,43994 <__subsf3+0x49c>
   437dc:	01400804 	movi	r5,32
   437e0:	290bc83a 	sub	r5,r5,r4
   437e4:	194a983a 	sll	r5,r3,r5
   437e8:	1908d83a 	srl	r4,r3,r4
   437ec:	2806c03a 	cmpne	r3,r5,zero
   437f0:	20c6b03a 	or	r3,r4,r3
   437f4:	38c7c83a 	sub	r3,r7,r3
   437f8:	3021883a 	mov	r16,r6
   437fc:	1023883a 	mov	r17,r2
   43800:	003f7f06 	br	43600 <__alt_data_end+0xfffdb600>
   43804:	903f831e 	bne	r18,zero,43614 <__alt_data_end+0xfffdb614>
   43808:	0005883a 	mov	r2,zero
   4380c:	0021883a 	mov	r16,zero
   43810:	003f9a06 	br	4367c <__alt_data_end+0xfffdb67c>
   43814:	01403fc4 	movi	r5,255
   43818:	31401926 	beq	r6,r5,43880 <__subsf3+0x388>
   4381c:	0109c83a 	sub	r4,zero,r4
   43820:	18c10034 	orhi	r3,r3,1024
   43824:	003feb06 	br	437d4 <__alt_data_end+0xfffdb7d4>
   43828:	043fffc4 	movi	r16,-1
   4382c:	000b883a 	mov	r5,zero
   43830:	003f5806 	br	43594 <__alt_data_end+0xfffdb594>
   43834:	8000481e 	bne	r16,zero,43958 <__subsf3+0x460>
   43838:	18006226 	beq	r3,zero,439c4 <__subsf3+0x4cc>
   4383c:	383f4726 	beq	r7,zero,4355c <__alt_data_end+0xfffdb55c>
   43840:	19c7883a 	add	r3,r3,r7
   43844:	1881002c 	andhi	r2,r3,1024
   43848:	103f8326 	beq	r2,zero,43658 <__alt_data_end+0xfffdb658>
   4384c:	00bf0034 	movhi	r2,64512
   43850:	10bfffc4 	addi	r2,r2,-1
   43854:	2821883a 	mov	r16,r5
   43858:	1886703a 	and	r3,r3,r2
   4385c:	003f3f06 	br	4355c <__alt_data_end+0xfffdb55c>
   43860:	80001c1e 	bne	r16,zero,438d4 <__subsf3+0x3dc>
   43864:	1800261e 	bne	r3,zero,43900 <__subsf3+0x408>
   43868:	38004c26 	beq	r7,zero,4399c <__subsf3+0x4a4>
   4386c:	3807883a 	mov	r3,r7
   43870:	1023883a 	mov	r17,r2
   43874:	003f3906 	br	4355c <__alt_data_end+0xfffdb55c>
   43878:	01c00044 	movi	r7,1
   4387c:	003f9006 	br	436c0 <__alt_data_end+0xfffdb6c0>
   43880:	3807883a 	mov	r3,r7
   43884:	3021883a 	mov	r16,r6
   43888:	1023883a 	mov	r17,r2
   4388c:	003f3306 	br	4355c <__alt_data_end+0xfffdb55c>
   43890:	8000161e 	bne	r16,zero,438ec <__subsf3+0x3f4>
   43894:	18002d26 	beq	r3,zero,4394c <__subsf3+0x454>
   43898:	0108303a 	nor	r4,zero,r4
   4389c:	20000a26 	beq	r4,zero,438c8 <__subsf3+0x3d0>
   438a0:	01403fc4 	movi	r5,255
   438a4:	31402926 	beq	r6,r5,4394c <__subsf3+0x454>
   438a8:	014006c4 	movi	r5,27
   438ac:	29004716 	blt	r5,r4,439cc <__subsf3+0x4d4>
   438b0:	01400804 	movi	r5,32
   438b4:	290bc83a 	sub	r5,r5,r4
   438b8:	194a983a 	sll	r5,r3,r5
   438bc:	1908d83a 	srl	r4,r3,r4
   438c0:	2806c03a 	cmpne	r3,r5,zero
   438c4:	20c6b03a 	or	r3,r4,r3
   438c8:	19c7883a 	add	r3,r3,r7
   438cc:	3021883a 	mov	r16,r6
   438d0:	003f7c06 	br	436c4 <__alt_data_end+0xfffdb6c4>
   438d4:	1800111e 	bne	r3,zero,4391c <__subsf3+0x424>
   438d8:	38003326 	beq	r7,zero,439a8 <__subsf3+0x4b0>
   438dc:	3807883a 	mov	r3,r7
   438e0:	1023883a 	mov	r17,r2
   438e4:	04003fc4 	movi	r16,255
   438e8:	003f1c06 	br	4355c <__alt_data_end+0xfffdb55c>
   438ec:	01403fc4 	movi	r5,255
   438f0:	31401626 	beq	r6,r5,4394c <__subsf3+0x454>
   438f4:	0109c83a 	sub	r4,zero,r4
   438f8:	18c10034 	orhi	r3,r3,1024
   438fc:	003fea06 	br	438a8 <__alt_data_end+0xfffdb8a8>
   43900:	383f1626 	beq	r7,zero,4355c <__alt_data_end+0xfffdb55c>
   43904:	19c9c83a 	sub	r4,r3,r7
   43908:	2141002c 	andhi	r5,r4,1024
   4390c:	283f5026 	beq	r5,zero,43650 <__alt_data_end+0xfffdb650>
   43910:	38c7c83a 	sub	r3,r7,r3
   43914:	1023883a 	mov	r17,r2
   43918:	003f1006 	br	4355c <__alt_data_end+0xfffdb55c>
   4391c:	38001b26 	beq	r7,zero,4398c <__subsf3+0x494>
   43920:	1806d0fa 	srli	r3,r3,3
   43924:	1900102c 	andhi	r4,r3,64
   43928:	20000526 	beq	r4,zero,43940 <__subsf3+0x448>
   4392c:	380ed0fa 	srli	r7,r7,3
   43930:	3900102c 	andhi	r4,r7,64
   43934:	2000021e 	bne	r4,zero,43940 <__subsf3+0x448>
   43938:	3807883a 	mov	r3,r7
   4393c:	1023883a 	mov	r17,r2
   43940:	180690fa 	slli	r3,r3,3
   43944:	04003fc4 	movi	r16,255
   43948:	003f0406 	br	4355c <__alt_data_end+0xfffdb55c>
   4394c:	3807883a 	mov	r3,r7
   43950:	3021883a 	mov	r16,r6
   43954:	003f0106 	br	4355c <__alt_data_end+0xfffdb55c>
   43958:	18001726 	beq	r3,zero,439b8 <__subsf3+0x4c0>
   4395c:	38000b26 	beq	r7,zero,4398c <__subsf3+0x494>
   43960:	1806d0fa 	srli	r3,r3,3
   43964:	1900102c 	andhi	r4,r3,64
   43968:	20000426 	beq	r4,zero,4397c <__subsf3+0x484>
   4396c:	380ed0fa 	srli	r7,r7,3
   43970:	3900102c 	andhi	r4,r7,64
   43974:	2000011e 	bne	r4,zero,4397c <__subsf3+0x484>
   43978:	3807883a 	mov	r3,r7
   4397c:	180690fa 	slli	r3,r3,3
   43980:	1023883a 	mov	r17,r2
   43984:	04003fc4 	movi	r16,255
   43988:	003ef406 	br	4355c <__alt_data_end+0xfffdb55c>
   4398c:	04003fc4 	movi	r16,255
   43990:	003ef206 	br	4355c <__alt_data_end+0xfffdb55c>
   43994:	00c00044 	movi	r3,1
   43998:	003f9606 	br	437f4 <__alt_data_end+0xfffdb7f4>
   4399c:	000b883a 	mov	r5,zero
   439a0:	0005883a 	mov	r2,zero
   439a4:	003f3506 	br	4367c <__alt_data_end+0xfffdb67c>
   439a8:	01402034 	movhi	r5,128
   439ac:	297fffc4 	addi	r5,r5,-1
   439b0:	0005883a 	mov	r2,zero
   439b4:	003f2f06 	br	43674 <__alt_data_end+0xfffdb674>
   439b8:	3807883a 	mov	r3,r7
   439bc:	04003fc4 	movi	r16,255
   439c0:	003ee606 	br	4355c <__alt_data_end+0xfffdb55c>
   439c4:	3807883a 	mov	r3,r7
   439c8:	003ee406 	br	4355c <__alt_data_end+0xfffdb55c>
   439cc:	00c00044 	movi	r3,1
   439d0:	003fbd06 	br	438c8 <__alt_data_end+0xfffdb8c8>
   439d4:	0005883a 	mov	r2,zero
   439d8:	003f2806 	br	4367c <__alt_data_end+0xfffdb67c>

000439dc <__fixsfsi>:
   439dc:	200ad5fa 	srli	r5,r4,23
   439e0:	00c02034 	movhi	r3,128
   439e4:	18ffffc4 	addi	r3,r3,-1
   439e8:	29403fcc 	andi	r5,r5,255
   439ec:	00801f84 	movi	r2,126
   439f0:	1906703a 	and	r3,r3,r4
   439f4:	2008d7fa 	srli	r4,r4,31
   439f8:	11400e0e 	bge	r2,r5,43a34 <__fixsfsi+0x58>
   439fc:	00802744 	movi	r2,157
   43a00:	11400816 	blt	r2,r5,43a24 <__fixsfsi+0x48>
   43a04:	00802544 	movi	r2,149
   43a08:	18c02034 	orhi	r3,r3,128
   43a0c:	11400b0e 	bge	r2,r5,43a3c <__fixsfsi+0x60>
   43a10:	28bfda84 	addi	r2,r5,-150
   43a14:	1884983a 	sll	r2,r3,r2
   43a18:	20000726 	beq	r4,zero,43a38 <__fixsfsi+0x5c>
   43a1c:	0085c83a 	sub	r2,zero,r2
   43a20:	f800283a 	ret
   43a24:	00a00034 	movhi	r2,32768
   43a28:	10bfffc4 	addi	r2,r2,-1
   43a2c:	2085883a 	add	r2,r4,r2
   43a30:	f800283a 	ret
   43a34:	0005883a 	mov	r2,zero
   43a38:	f800283a 	ret
   43a3c:	00802584 	movi	r2,150
   43a40:	1145c83a 	sub	r2,r2,r5
   43a44:	1884d83a 	srl	r2,r3,r2
   43a48:	003ff306 	br	43a18 <__alt_data_end+0xfffdba18>

00043a4c <__floatunsisf>:
   43a4c:	defffe04 	addi	sp,sp,-8
   43a50:	dfc00115 	stw	ra,4(sp)
   43a54:	dc000015 	stw	r16,0(sp)
   43a58:	20002c26 	beq	r4,zero,43b0c <__floatunsisf+0xc0>
   43a5c:	2021883a 	mov	r16,r4
   43a60:	0043b3c0 	call	43b3c <__clzsi2>
   43a64:	00c02784 	movi	r3,158
   43a68:	1887c83a 	sub	r3,r3,r2
   43a6c:	01002584 	movi	r4,150
   43a70:	20c00f16 	blt	r4,r3,43ab0 <__floatunsisf+0x64>
   43a74:	20c9c83a 	sub	r4,r4,r3
   43a78:	8108983a 	sll	r4,r16,r4
   43a7c:	00802034 	movhi	r2,128
   43a80:	10bfffc4 	addi	r2,r2,-1
   43a84:	2088703a 	and	r4,r4,r2
   43a88:	18803fcc 	andi	r2,r3,255
   43a8c:	100695fa 	slli	r3,r2,23
   43a90:	00802034 	movhi	r2,128
   43a94:	10bfffc4 	addi	r2,r2,-1
   43a98:	2084703a 	and	r2,r4,r2
   43a9c:	10c4b03a 	or	r2,r2,r3
   43aa0:	dfc00117 	ldw	ra,4(sp)
   43aa4:	dc000017 	ldw	r16,0(sp)
   43aa8:	dec00204 	addi	sp,sp,8
   43aac:	f800283a 	ret
   43ab0:	01002644 	movi	r4,153
   43ab4:	20c01816 	blt	r4,r3,43b18 <__floatunsisf+0xcc>
   43ab8:	20c9c83a 	sub	r4,r4,r3
   43abc:	8108983a 	sll	r4,r16,r4
   43ac0:	017f0034 	movhi	r5,64512
   43ac4:	297fffc4 	addi	r5,r5,-1
   43ac8:	218001cc 	andi	r6,r4,7
   43acc:	214a703a 	and	r5,r4,r5
   43ad0:	30000426 	beq	r6,zero,43ae4 <__floatunsisf+0x98>
   43ad4:	210003cc 	andi	r4,r4,15
   43ad8:	01800104 	movi	r6,4
   43adc:	21800126 	beq	r4,r6,43ae4 <__floatunsisf+0x98>
   43ae0:	298b883a 	add	r5,r5,r6
   43ae4:	2901002c 	andhi	r4,r5,1024
   43ae8:	20000526 	beq	r4,zero,43b00 <__floatunsisf+0xb4>
   43aec:	00c027c4 	movi	r3,159
   43af0:	1887c83a 	sub	r3,r3,r2
   43af4:	00bf0034 	movhi	r2,64512
   43af8:	10bfffc4 	addi	r2,r2,-1
   43afc:	288a703a 	and	r5,r5,r2
   43b00:	280891ba 	slli	r4,r5,6
   43b04:	2008d27a 	srli	r4,r4,9
   43b08:	003fdf06 	br	43a88 <__alt_data_end+0xfffdba88>
   43b0c:	0007883a 	mov	r3,zero
   43b10:	0009883a 	mov	r4,zero
   43b14:	003fdc06 	br	43a88 <__alt_data_end+0xfffdba88>
   43b18:	01402e44 	movi	r5,185
   43b1c:	28cbc83a 	sub	r5,r5,r3
   43b20:	01000144 	movi	r4,5
   43b24:	2089c83a 	sub	r4,r4,r2
   43b28:	814a983a 	sll	r5,r16,r5
   43b2c:	8108d83a 	srl	r4,r16,r4
   43b30:	2820c03a 	cmpne	r16,r5,zero
   43b34:	2408b03a 	or	r4,r4,r16
   43b38:	003fe106 	br	43ac0 <__alt_data_end+0xfffdbac0>

00043b3c <__clzsi2>:
   43b3c:	00bfffd4 	movui	r2,65535
   43b40:	11000536 	bltu	r2,r4,43b58 <__clzsi2+0x1c>
   43b44:	00803fc4 	movi	r2,255
   43b48:	11000f36 	bltu	r2,r4,43b88 <__clzsi2+0x4c>
   43b4c:	00800804 	movi	r2,32
   43b50:	0007883a 	mov	r3,zero
   43b54:	00000506 	br	43b6c <__clzsi2+0x30>
   43b58:	00804034 	movhi	r2,256
   43b5c:	10bfffc4 	addi	r2,r2,-1
   43b60:	11000c2e 	bgeu	r2,r4,43b94 <__clzsi2+0x58>
   43b64:	00800204 	movi	r2,8
   43b68:	00c00604 	movi	r3,24
   43b6c:	20c8d83a 	srl	r4,r4,r3
   43b70:	00c00134 	movhi	r3,4
   43b74:	18dc9484 	addi	r3,r3,29266
   43b78:	1909883a 	add	r4,r3,r4
   43b7c:	20c00003 	ldbu	r3,0(r4)
   43b80:	10c5c83a 	sub	r2,r2,r3
   43b84:	f800283a 	ret
   43b88:	00800604 	movi	r2,24
   43b8c:	00c00204 	movi	r3,8
   43b90:	003ff606 	br	43b6c <__alt_data_end+0xfffdbb6c>
   43b94:	00800404 	movi	r2,16
   43b98:	1007883a 	mov	r3,r2
   43b9c:	003ff306 	br	43b6c <__alt_data_end+0xfffdbb6c>

00043ba0 <_printf_r>:
   43ba0:	defffd04 	addi	sp,sp,-12
   43ba4:	dfc00015 	stw	ra,0(sp)
   43ba8:	d9800115 	stw	r6,4(sp)
   43bac:	d9c00215 	stw	r7,8(sp)
   43bb0:	20c00217 	ldw	r3,8(r4)
   43bb4:	01800134 	movhi	r6,4
   43bb8:	3190a104 	addi	r6,r6,17028
   43bbc:	19800115 	stw	r6,4(r3)
   43bc0:	280d883a 	mov	r6,r5
   43bc4:	21400217 	ldw	r5,8(r4)
   43bc8:	d9c00104 	addi	r7,sp,4
   43bcc:	0043d440 	call	43d44 <___vfprintf_internal_r>
   43bd0:	dfc00017 	ldw	ra,0(sp)
   43bd4:	dec00304 	addi	sp,sp,12
   43bd8:	f800283a 	ret

00043bdc <printf>:
   43bdc:	defffc04 	addi	sp,sp,-16
   43be0:	dfc00015 	stw	ra,0(sp)
   43be4:	d9400115 	stw	r5,4(sp)
   43be8:	d9800215 	stw	r6,8(sp)
   43bec:	d9c00315 	stw	r7,12(sp)
   43bf0:	00800134 	movhi	r2,4
   43bf4:	109dc304 	addi	r2,r2,30476
   43bf8:	10800017 	ldw	r2,0(r2)
   43bfc:	01400134 	movhi	r5,4
   43c00:	2950a104 	addi	r5,r5,17028
   43c04:	10c00217 	ldw	r3,8(r2)
   43c08:	d9800104 	addi	r6,sp,4
   43c0c:	19400115 	stw	r5,4(r3)
   43c10:	200b883a 	mov	r5,r4
   43c14:	11000217 	ldw	r4,8(r2)
   43c18:	00442680 	call	44268 <__vfprintf_internal>
   43c1c:	dfc00017 	ldw	ra,0(sp)
   43c20:	dec00404 	addi	sp,sp,16
   43c24:	f800283a 	ret

00043c28 <_puts_r>:
   43c28:	defffd04 	addi	sp,sp,-12
   43c2c:	dc000015 	stw	r16,0(sp)
   43c30:	2021883a 	mov	r16,r4
   43c34:	2809883a 	mov	r4,r5
   43c38:	dfc00215 	stw	ra,8(sp)
   43c3c:	dc400115 	stw	r17,4(sp)
   43c40:	2823883a 	mov	r17,r5
   43c44:	0043cbc0 	call	43cbc <strlen>
   43c48:	81400217 	ldw	r5,8(r16)
   43c4c:	01000134 	movhi	r4,4
   43c50:	2110a104 	addi	r4,r4,17028
   43c54:	29000115 	stw	r4,4(r5)
   43c58:	100f883a 	mov	r7,r2
   43c5c:	880d883a 	mov	r6,r17
   43c60:	8009883a 	mov	r4,r16
   43c64:	00442840 	call	44284 <__sfvwrite_small_dev>
   43c68:	00ffffc4 	movi	r3,-1
   43c6c:	10c00926 	beq	r2,r3,43c94 <_puts_r+0x6c>
   43c70:	81400217 	ldw	r5,8(r16)
   43c74:	01800134 	movhi	r6,4
   43c78:	01c00044 	movi	r7,1
   43c7c:	28800117 	ldw	r2,4(r5)
   43c80:	319cd504 	addi	r6,r6,29524
   43c84:	8009883a 	mov	r4,r16
   43c88:	103ee83a 	callr	r2
   43c8c:	10bfffe0 	cmpeqi	r2,r2,-1
   43c90:	0085c83a 	sub	r2,zero,r2
   43c94:	dfc00217 	ldw	ra,8(sp)
   43c98:	dc400117 	ldw	r17,4(sp)
   43c9c:	dc000017 	ldw	r16,0(sp)
   43ca0:	dec00304 	addi	sp,sp,12
   43ca4:	f800283a 	ret

00043ca8 <puts>:
   43ca8:	00800134 	movhi	r2,4
   43cac:	109dc304 	addi	r2,r2,30476
   43cb0:	200b883a 	mov	r5,r4
   43cb4:	11000017 	ldw	r4,0(r2)
   43cb8:	0043c281 	jmpi	43c28 <_puts_r>

00043cbc <strlen>:
   43cbc:	2005883a 	mov	r2,r4
   43cc0:	10c00007 	ldb	r3,0(r2)
   43cc4:	18000226 	beq	r3,zero,43cd0 <strlen+0x14>
   43cc8:	10800044 	addi	r2,r2,1
   43ccc:	003ffc06 	br	43cc0 <__alt_data_end+0xfffdbcc0>
   43cd0:	1105c83a 	sub	r2,r2,r4
   43cd4:	f800283a 	ret

00043cd8 <print_repeat>:
   43cd8:	defffb04 	addi	sp,sp,-20
   43cdc:	dc800315 	stw	r18,12(sp)
   43ce0:	dc400215 	stw	r17,8(sp)
   43ce4:	dc000115 	stw	r16,4(sp)
   43ce8:	dfc00415 	stw	ra,16(sp)
   43cec:	2025883a 	mov	r18,r4
   43cf0:	2823883a 	mov	r17,r5
   43cf4:	d9800005 	stb	r6,0(sp)
   43cf8:	3821883a 	mov	r16,r7
   43cfc:	04000a0e 	bge	zero,r16,43d28 <print_repeat+0x50>
   43d00:	88800117 	ldw	r2,4(r17)
   43d04:	01c00044 	movi	r7,1
   43d08:	d80d883a 	mov	r6,sp
   43d0c:	880b883a 	mov	r5,r17
   43d10:	9009883a 	mov	r4,r18
   43d14:	103ee83a 	callr	r2
   43d18:	843fffc4 	addi	r16,r16,-1
   43d1c:	103ff726 	beq	r2,zero,43cfc <__alt_data_end+0xfffdbcfc>
   43d20:	00bfffc4 	movi	r2,-1
   43d24:	00000106 	br	43d2c <print_repeat+0x54>
   43d28:	0005883a 	mov	r2,zero
   43d2c:	dfc00417 	ldw	ra,16(sp)
   43d30:	dc800317 	ldw	r18,12(sp)
   43d34:	dc400217 	ldw	r17,8(sp)
   43d38:	dc000117 	ldw	r16,4(sp)
   43d3c:	dec00504 	addi	sp,sp,20
   43d40:	f800283a 	ret

00043d44 <___vfprintf_internal_r>:
   43d44:	deffe504 	addi	sp,sp,-108
   43d48:	d8c00804 	addi	r3,sp,32
   43d4c:	df001915 	stw	fp,100(sp)
   43d50:	ddc01815 	stw	r23,96(sp)
   43d54:	dd801715 	stw	r22,92(sp)
   43d58:	dd401615 	stw	r21,88(sp)
   43d5c:	dd001515 	stw	r20,84(sp)
   43d60:	dcc01415 	stw	r19,80(sp)
   43d64:	dc801315 	stw	r18,76(sp)
   43d68:	dc401215 	stw	r17,72(sp)
   43d6c:	dc001115 	stw	r16,68(sp)
   43d70:	dfc01a15 	stw	ra,104(sp)
   43d74:	2027883a 	mov	r19,r4
   43d78:	2839883a 	mov	fp,r5
   43d7c:	382d883a 	mov	r22,r7
   43d80:	d9800f15 	stw	r6,60(sp)
   43d84:	0021883a 	mov	r16,zero
   43d88:	d8000e15 	stw	zero,56(sp)
   43d8c:	002f883a 	mov	r23,zero
   43d90:	002b883a 	mov	r21,zero
   43d94:	0025883a 	mov	r18,zero
   43d98:	0023883a 	mov	r17,zero
   43d9c:	d8000c15 	stw	zero,48(sp)
   43da0:	d8000b15 	stw	zero,44(sp)
   43da4:	0029883a 	mov	r20,zero
   43da8:	d8c00915 	stw	r3,36(sp)
   43dac:	d8c00f17 	ldw	r3,60(sp)
   43db0:	19000003 	ldbu	r4,0(r3)
   43db4:	20803fcc 	andi	r2,r4,255
   43db8:	1080201c 	xori	r2,r2,128
   43dbc:	10bfe004 	addi	r2,r2,-128
   43dc0:	10011c26 	beq	r2,zero,44234 <___vfprintf_internal_r+0x4f0>
   43dc4:	00c00044 	movi	r3,1
   43dc8:	a0c01426 	beq	r20,r3,43e1c <___vfprintf_internal_r+0xd8>
   43dcc:	1d000216 	blt	r3,r20,43dd8 <___vfprintf_internal_r+0x94>
   43dd0:	a0000626 	beq	r20,zero,43dec <___vfprintf_internal_r+0xa8>
   43dd4:	00011306 	br	44224 <___vfprintf_internal_r+0x4e0>
   43dd8:	01400084 	movi	r5,2
   43ddc:	a1401d26 	beq	r20,r5,43e54 <___vfprintf_internal_r+0x110>
   43de0:	014000c4 	movi	r5,3
   43de4:	a1402926 	beq	r20,r5,43e8c <___vfprintf_internal_r+0x148>
   43de8:	00010e06 	br	44224 <___vfprintf_internal_r+0x4e0>
   43dec:	01400944 	movi	r5,37
   43df0:	1140fb26 	beq	r2,r5,441e0 <___vfprintf_internal_r+0x49c>
   43df4:	e0800117 	ldw	r2,4(fp)
   43df8:	d9000005 	stb	r4,0(sp)
   43dfc:	01c00044 	movi	r7,1
   43e00:	d80d883a 	mov	r6,sp
   43e04:	e00b883a 	mov	r5,fp
   43e08:	9809883a 	mov	r4,r19
   43e0c:	103ee83a 	callr	r2
   43e10:	1000d61e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   43e14:	84000044 	addi	r16,r16,1
   43e18:	00010206 	br	44224 <___vfprintf_internal_r+0x4e0>
   43e1c:	01400c04 	movi	r5,48
   43e20:	1140f826 	beq	r2,r5,44204 <___vfprintf_internal_r+0x4c0>
   43e24:	01400944 	movi	r5,37
   43e28:	11400a1e 	bne	r2,r5,43e54 <___vfprintf_internal_r+0x110>
   43e2c:	d8800005 	stb	r2,0(sp)
   43e30:	e0800117 	ldw	r2,4(fp)
   43e34:	a00f883a 	mov	r7,r20
   43e38:	d80d883a 	mov	r6,sp
   43e3c:	e00b883a 	mov	r5,fp
   43e40:	9809883a 	mov	r4,r19
   43e44:	103ee83a 	callr	r2
   43e48:	1000c81e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   43e4c:	84000044 	addi	r16,r16,1
   43e50:	0000f306 	br	44220 <___vfprintf_internal_r+0x4dc>
   43e54:	217ff404 	addi	r5,r4,-48
   43e58:	29403fcc 	andi	r5,r5,255
   43e5c:	00c00244 	movi	r3,9
   43e60:	19400736 	bltu	r3,r5,43e80 <___vfprintf_internal_r+0x13c>
   43e64:	00bfffc4 	movi	r2,-1
   43e68:	88800226 	beq	r17,r2,43e74 <___vfprintf_internal_r+0x130>
   43e6c:	8c4002a4 	muli	r17,r17,10
   43e70:	00000106 	br	43e78 <___vfprintf_internal_r+0x134>
   43e74:	0023883a 	mov	r17,zero
   43e78:	2c63883a 	add	r17,r5,r17
   43e7c:	0000e206 	br	44208 <___vfprintf_internal_r+0x4c4>
   43e80:	01400b84 	movi	r5,46
   43e84:	1140e426 	beq	r2,r5,44218 <___vfprintf_internal_r+0x4d4>
   43e88:	05000084 	movi	r20,2
   43e8c:	213ff404 	addi	r4,r4,-48
   43e90:	21003fcc 	andi	r4,r4,255
   43e94:	00c00244 	movi	r3,9
   43e98:	19000736 	bltu	r3,r4,43eb8 <___vfprintf_internal_r+0x174>
   43e9c:	00bfffc4 	movi	r2,-1
   43ea0:	90800226 	beq	r18,r2,43eac <___vfprintf_internal_r+0x168>
   43ea4:	948002a4 	muli	r18,r18,10
   43ea8:	00000106 	br	43eb0 <___vfprintf_internal_r+0x16c>
   43eac:	0025883a 	mov	r18,zero
   43eb0:	24a5883a 	add	r18,r4,r18
   43eb4:	0000db06 	br	44224 <___vfprintf_internal_r+0x4e0>
   43eb8:	00c01b04 	movi	r3,108
   43ebc:	10c0d426 	beq	r2,r3,44210 <___vfprintf_internal_r+0x4cc>
   43ec0:	013fffc4 	movi	r4,-1
   43ec4:	91000226 	beq	r18,r4,43ed0 <___vfprintf_internal_r+0x18c>
   43ec8:	d8000b15 	stw	zero,44(sp)
   43ecc:	00000106 	br	43ed4 <___vfprintf_internal_r+0x190>
   43ed0:	04800044 	movi	r18,1
   43ed4:	01001a44 	movi	r4,105
   43ed8:	11001626 	beq	r2,r4,43f34 <___vfprintf_internal_r+0x1f0>
   43edc:	20800916 	blt	r4,r2,43f04 <___vfprintf_internal_r+0x1c0>
   43ee0:	010018c4 	movi	r4,99
   43ee4:	11008a26 	beq	r2,r4,44110 <___vfprintf_internal_r+0x3cc>
   43ee8:	01001904 	movi	r4,100
   43eec:	11001126 	beq	r2,r4,43f34 <___vfprintf_internal_r+0x1f0>
   43ef0:	01001604 	movi	r4,88
   43ef4:	1100ca1e 	bne	r2,r4,44220 <___vfprintf_internal_r+0x4dc>
   43ef8:	00c00044 	movi	r3,1
   43efc:	d8c00e15 	stw	r3,56(sp)
   43f00:	00001406 	br	43f54 <___vfprintf_internal_r+0x210>
   43f04:	01001cc4 	movi	r4,115
   43f08:	11009a26 	beq	r2,r4,44174 <___vfprintf_internal_r+0x430>
   43f0c:	20800416 	blt	r4,r2,43f20 <___vfprintf_internal_r+0x1dc>
   43f10:	01001bc4 	movi	r4,111
   43f14:	1100c21e 	bne	r2,r4,44220 <___vfprintf_internal_r+0x4dc>
   43f18:	05400204 	movi	r21,8
   43f1c:	00000e06 	br	43f58 <___vfprintf_internal_r+0x214>
   43f20:	01001d44 	movi	r4,117
   43f24:	11000c26 	beq	r2,r4,43f58 <___vfprintf_internal_r+0x214>
   43f28:	01001e04 	movi	r4,120
   43f2c:	11000926 	beq	r2,r4,43f54 <___vfprintf_internal_r+0x210>
   43f30:	0000bb06 	br	44220 <___vfprintf_internal_r+0x4dc>
   43f34:	b5000104 	addi	r20,r22,4
   43f38:	b8000726 	beq	r23,zero,43f58 <___vfprintf_internal_r+0x214>
   43f3c:	dd000d15 	stw	r20,52(sp)
   43f40:	b5800017 	ldw	r22,0(r22)
   43f44:	b000080e 	bge	r22,zero,43f68 <___vfprintf_internal_r+0x224>
   43f48:	05adc83a 	sub	r22,zero,r22
   43f4c:	02800044 	movi	r10,1
   43f50:	00000606 	br	43f6c <___vfprintf_internal_r+0x228>
   43f54:	05400404 	movi	r21,16
   43f58:	b0c00104 	addi	r3,r22,4
   43f5c:	d8c00d15 	stw	r3,52(sp)
   43f60:	b5800017 	ldw	r22,0(r22)
   43f64:	002f883a 	mov	r23,zero
   43f68:	0015883a 	mov	r10,zero
   43f6c:	d829883a 	mov	r20,sp
   43f70:	b0001426 	beq	r22,zero,43fc4 <___vfprintf_internal_r+0x280>
   43f74:	b009883a 	mov	r4,r22
   43f78:	a80b883a 	mov	r5,r21
   43f7c:	da801015 	stw	r10,64(sp)
   43f80:	0042f840 	call	42f84 <__udivsi3>
   43f84:	1549383a 	mul	r4,r2,r21
   43f88:	00c00244 	movi	r3,9
   43f8c:	da801017 	ldw	r10,64(sp)
   43f90:	b12dc83a 	sub	r22,r22,r4
   43f94:	1d800216 	blt	r3,r22,43fa0 <___vfprintf_internal_r+0x25c>
   43f98:	b5800c04 	addi	r22,r22,48
   43f9c:	00000506 	br	43fb4 <___vfprintf_internal_r+0x270>
   43fa0:	d8c00e17 	ldw	r3,56(sp)
   43fa4:	18000226 	beq	r3,zero,43fb0 <___vfprintf_internal_r+0x26c>
   43fa8:	b5800dc4 	addi	r22,r22,55
   43fac:	00000106 	br	43fb4 <___vfprintf_internal_r+0x270>
   43fb0:	b58015c4 	addi	r22,r22,87
   43fb4:	a5800005 	stb	r22,0(r20)
   43fb8:	a5000044 	addi	r20,r20,1
   43fbc:	102d883a 	mov	r22,r2
   43fc0:	003feb06 	br	43f70 <__alt_data_end+0xfffdbf70>
   43fc4:	a6c7c83a 	sub	r3,r20,sp
   43fc8:	d8c00a15 	stw	r3,40(sp)
   43fcc:	90c5c83a 	sub	r2,r18,r3
   43fd0:	00800a0e 	bge	zero,r2,43ffc <___vfprintf_internal_r+0x2b8>
   43fd4:	a085883a 	add	r2,r20,r2
   43fd8:	01400c04 	movi	r5,48
   43fdc:	d8c00917 	ldw	r3,36(sp)
   43fe0:	a009883a 	mov	r4,r20
   43fe4:	a0c0032e 	bgeu	r20,r3,43ff4 <___vfprintf_internal_r+0x2b0>
   43fe8:	a5000044 	addi	r20,r20,1
   43fec:	21400005 	stb	r5,0(r4)
   43ff0:	a0bffa1e 	bne	r20,r2,43fdc <__alt_data_end+0xfffdbfdc>
   43ff4:	a6c7c83a 	sub	r3,r20,sp
   43ff8:	d8c00a15 	stw	r3,40(sp)
   43ffc:	d8c00a17 	ldw	r3,40(sp)
   44000:	50d3883a 	add	r9,r10,r3
   44004:	d8c00b17 	ldw	r3,44(sp)
   44008:	8a6dc83a 	sub	r22,r17,r9
   4400c:	18001726 	beq	r3,zero,4406c <___vfprintf_internal_r+0x328>
   44010:	50000a26 	beq	r10,zero,4403c <___vfprintf_internal_r+0x2f8>
   44014:	00800b44 	movi	r2,45
   44018:	d8800805 	stb	r2,32(sp)
   4401c:	e0800117 	ldw	r2,4(fp)
   44020:	01c00044 	movi	r7,1
   44024:	d9800804 	addi	r6,sp,32
   44028:	e00b883a 	mov	r5,fp
   4402c:	9809883a 	mov	r4,r19
   44030:	103ee83a 	callr	r2
   44034:	10004d1e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   44038:	84000044 	addi	r16,r16,1
   4403c:	0580070e 	bge	zero,r22,4405c <___vfprintf_internal_r+0x318>
   44040:	b00f883a 	mov	r7,r22
   44044:	01800c04 	movi	r6,48
   44048:	e00b883a 	mov	r5,fp
   4404c:	9809883a 	mov	r4,r19
   44050:	0043cd80 	call	43cd8 <print_repeat>
   44054:	1000451e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   44058:	85a1883a 	add	r16,r16,r22
   4405c:	d8c00a17 	ldw	r3,40(sp)
   44060:	a013883a 	mov	r9,r20
   44064:	1d2dc83a 	sub	r22,r3,r20
   44068:	00002206 	br	440f4 <___vfprintf_internal_r+0x3b0>
   4406c:	0580090e 	bge	zero,r22,44094 <___vfprintf_internal_r+0x350>
   44070:	b00f883a 	mov	r7,r22
   44074:	01800804 	movi	r6,32
   44078:	e00b883a 	mov	r5,fp
   4407c:	9809883a 	mov	r4,r19
   44080:	da801015 	stw	r10,64(sp)
   44084:	0043cd80 	call	43cd8 <print_repeat>
   44088:	da801017 	ldw	r10,64(sp)
   4408c:	1000371e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   44090:	85a1883a 	add	r16,r16,r22
   44094:	503ff126 	beq	r10,zero,4405c <__alt_data_end+0xfffdc05c>
   44098:	00800b44 	movi	r2,45
   4409c:	d8800805 	stb	r2,32(sp)
   440a0:	e0800117 	ldw	r2,4(fp)
   440a4:	01c00044 	movi	r7,1
   440a8:	d9800804 	addi	r6,sp,32
   440ac:	e00b883a 	mov	r5,fp
   440b0:	9809883a 	mov	r4,r19
   440b4:	103ee83a 	callr	r2
   440b8:	10002c1e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   440bc:	84000044 	addi	r16,r16,1
   440c0:	003fe606 	br	4405c <__alt_data_end+0xfffdc05c>
   440c4:	4a7fffc4 	addi	r9,r9,-1
   440c8:	48800003 	ldbu	r2,0(r9)
   440cc:	01c00044 	movi	r7,1
   440d0:	d9800804 	addi	r6,sp,32
   440d4:	d8800805 	stb	r2,32(sp)
   440d8:	e0800117 	ldw	r2,4(fp)
   440dc:	e00b883a 	mov	r5,fp
   440e0:	da401015 	stw	r9,64(sp)
   440e4:	9809883a 	mov	r4,r19
   440e8:	103ee83a 	callr	r2
   440ec:	da401017 	ldw	r9,64(sp)
   440f0:	10001e1e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   440f4:	8245c83a 	sub	r2,r16,r9
   440f8:	4d89883a 	add	r4,r9,r22
   440fc:	a085883a 	add	r2,r20,r2
   44100:	013ff016 	blt	zero,r4,440c4 <__alt_data_end+0xfffdc0c4>
   44104:	1021883a 	mov	r16,r2
   44108:	dd800d17 	ldw	r22,52(sp)
   4410c:	00004406 	br	44220 <___vfprintf_internal_r+0x4dc>
   44110:	00800044 	movi	r2,1
   44114:	1440080e 	bge	r2,r17,44138 <___vfprintf_internal_r+0x3f4>
   44118:	8d3fffc4 	addi	r20,r17,-1
   4411c:	a00f883a 	mov	r7,r20
   44120:	01800804 	movi	r6,32
   44124:	e00b883a 	mov	r5,fp
   44128:	9809883a 	mov	r4,r19
   4412c:	0043cd80 	call	43cd8 <print_repeat>
   44130:	10000e1e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   44134:	8521883a 	add	r16,r16,r20
   44138:	b0800017 	ldw	r2,0(r22)
   4413c:	01c00044 	movi	r7,1
   44140:	d80d883a 	mov	r6,sp
   44144:	d8800005 	stb	r2,0(sp)
   44148:	e0800117 	ldw	r2,4(fp)
   4414c:	e00b883a 	mov	r5,fp
   44150:	9809883a 	mov	r4,r19
   44154:	b5000104 	addi	r20,r22,4
   44158:	103ee83a 	callr	r2
   4415c:	1000031e 	bne	r2,zero,4416c <___vfprintf_internal_r+0x428>
   44160:	84000044 	addi	r16,r16,1
   44164:	a02d883a 	mov	r22,r20
   44168:	00002d06 	br	44220 <___vfprintf_internal_r+0x4dc>
   4416c:	00bfffc4 	movi	r2,-1
   44170:	00003106 	br	44238 <___vfprintf_internal_r+0x4f4>
   44174:	b5000017 	ldw	r20,0(r22)
   44178:	b0c00104 	addi	r3,r22,4
   4417c:	d8c00a15 	stw	r3,40(sp)
   44180:	a009883a 	mov	r4,r20
   44184:	0043cbc0 	call	43cbc <strlen>
   44188:	8893c83a 	sub	r9,r17,r2
   4418c:	102d883a 	mov	r22,r2
   44190:	0240090e 	bge	zero,r9,441b8 <___vfprintf_internal_r+0x474>
   44194:	480f883a 	mov	r7,r9
   44198:	01800804 	movi	r6,32
   4419c:	e00b883a 	mov	r5,fp
   441a0:	9809883a 	mov	r4,r19
   441a4:	da401015 	stw	r9,64(sp)
   441a8:	0043cd80 	call	43cd8 <print_repeat>
   441ac:	da401017 	ldw	r9,64(sp)
   441b0:	103fee1e 	bne	r2,zero,4416c <__alt_data_end+0xfffdc16c>
   441b4:	8261883a 	add	r16,r16,r9
   441b8:	e0800117 	ldw	r2,4(fp)
   441bc:	b00f883a 	mov	r7,r22
   441c0:	a00d883a 	mov	r6,r20
   441c4:	e00b883a 	mov	r5,fp
   441c8:	9809883a 	mov	r4,r19
   441cc:	103ee83a 	callr	r2
   441d0:	103fe61e 	bne	r2,zero,4416c <__alt_data_end+0xfffdc16c>
   441d4:	85a1883a 	add	r16,r16,r22
   441d8:	dd800a17 	ldw	r22,40(sp)
   441dc:	00001006 	br	44220 <___vfprintf_internal_r+0x4dc>
   441e0:	05c00044 	movi	r23,1
   441e4:	04bfffc4 	movi	r18,-1
   441e8:	d8000e15 	stw	zero,56(sp)
   441ec:	05400284 	movi	r21,10
   441f0:	9023883a 	mov	r17,r18
   441f4:	d8000c15 	stw	zero,48(sp)
   441f8:	d8000b15 	stw	zero,44(sp)
   441fc:	b829883a 	mov	r20,r23
   44200:	00000806 	br	44224 <___vfprintf_internal_r+0x4e0>
   44204:	dd000b15 	stw	r20,44(sp)
   44208:	05000084 	movi	r20,2
   4420c:	00000506 	br	44224 <___vfprintf_internal_r+0x4e0>
   44210:	00c00044 	movi	r3,1
   44214:	d8c00c15 	stw	r3,48(sp)
   44218:	050000c4 	movi	r20,3
   4421c:	00000106 	br	44224 <___vfprintf_internal_r+0x4e0>
   44220:	0029883a 	mov	r20,zero
   44224:	d8c00f17 	ldw	r3,60(sp)
   44228:	18c00044 	addi	r3,r3,1
   4422c:	d8c00f15 	stw	r3,60(sp)
   44230:	003ede06 	br	43dac <__alt_data_end+0xfffdbdac>
   44234:	8005883a 	mov	r2,r16
   44238:	dfc01a17 	ldw	ra,104(sp)
   4423c:	df001917 	ldw	fp,100(sp)
   44240:	ddc01817 	ldw	r23,96(sp)
   44244:	dd801717 	ldw	r22,92(sp)
   44248:	dd401617 	ldw	r21,88(sp)
   4424c:	dd001517 	ldw	r20,84(sp)
   44250:	dcc01417 	ldw	r19,80(sp)
   44254:	dc801317 	ldw	r18,76(sp)
   44258:	dc401217 	ldw	r17,72(sp)
   4425c:	dc001117 	ldw	r16,68(sp)
   44260:	dec01b04 	addi	sp,sp,108
   44264:	f800283a 	ret

00044268 <__vfprintf_internal>:
   44268:	00800134 	movhi	r2,4
   4426c:	109dc304 	addi	r2,r2,30476
   44270:	300f883a 	mov	r7,r6
   44274:	280d883a 	mov	r6,r5
   44278:	200b883a 	mov	r5,r4
   4427c:	11000017 	ldw	r4,0(r2)
   44280:	0043d441 	jmpi	43d44 <___vfprintf_internal_r>

00044284 <__sfvwrite_small_dev>:
   44284:	2880000b 	ldhu	r2,0(r5)
   44288:	1080020c 	andi	r2,r2,8
   4428c:	10002126 	beq	r2,zero,44314 <__sfvwrite_small_dev+0x90>
   44290:	2880008f 	ldh	r2,2(r5)
   44294:	defffa04 	addi	sp,sp,-24
   44298:	dc000015 	stw	r16,0(sp)
   4429c:	dfc00515 	stw	ra,20(sp)
   442a0:	dd000415 	stw	r20,16(sp)
   442a4:	dcc00315 	stw	r19,12(sp)
   442a8:	dc800215 	stw	r18,8(sp)
   442ac:	dc400115 	stw	r17,4(sp)
   442b0:	2821883a 	mov	r16,r5
   442b4:	10001216 	blt	r2,zero,44300 <__sfvwrite_small_dev+0x7c>
   442b8:	2027883a 	mov	r19,r4
   442bc:	3025883a 	mov	r18,r6
   442c0:	3823883a 	mov	r17,r7
   442c4:	05010004 	movi	r20,1024
   442c8:	04400b0e 	bge	zero,r17,442f8 <__sfvwrite_small_dev+0x74>
   442cc:	880f883a 	mov	r7,r17
   442d0:	a440010e 	bge	r20,r17,442d8 <__sfvwrite_small_dev+0x54>
   442d4:	01c10004 	movi	r7,1024
   442d8:	8140008f 	ldh	r5,2(r16)
   442dc:	900d883a 	mov	r6,r18
   442e0:	9809883a 	mov	r4,r19
   442e4:	004433c0 	call	4433c <_write_r>
   442e8:	0080050e 	bge	zero,r2,44300 <__sfvwrite_small_dev+0x7c>
   442ec:	88a3c83a 	sub	r17,r17,r2
   442f0:	90a5883a 	add	r18,r18,r2
   442f4:	003ff406 	br	442c8 <__alt_data_end+0xfffdc2c8>
   442f8:	0005883a 	mov	r2,zero
   442fc:	00000706 	br	4431c <__sfvwrite_small_dev+0x98>
   44300:	8080000b 	ldhu	r2,0(r16)
   44304:	10801014 	ori	r2,r2,64
   44308:	8080000d 	sth	r2,0(r16)
   4430c:	00bfffc4 	movi	r2,-1
   44310:	00000206 	br	4431c <__sfvwrite_small_dev+0x98>
   44314:	00bfffc4 	movi	r2,-1
   44318:	f800283a 	ret
   4431c:	dfc00517 	ldw	ra,20(sp)
   44320:	dd000417 	ldw	r20,16(sp)
   44324:	dcc00317 	ldw	r19,12(sp)
   44328:	dc800217 	ldw	r18,8(sp)
   4432c:	dc400117 	ldw	r17,4(sp)
   44330:	dc000017 	ldw	r16,0(sp)
   44334:	dec00604 	addi	sp,sp,24
   44338:	f800283a 	ret

0004433c <_write_r>:
   4433c:	defffd04 	addi	sp,sp,-12
   44340:	dc000015 	stw	r16,0(sp)
   44344:	04000134 	movhi	r16,4
   44348:	dc400115 	stw	r17,4(sp)
   4434c:	841ebb04 	addi	r16,r16,31468
   44350:	2023883a 	mov	r17,r4
   44354:	2809883a 	mov	r4,r5
   44358:	300b883a 	mov	r5,r6
   4435c:	380d883a 	mov	r6,r7
   44360:	dfc00215 	stw	ra,8(sp)
   44364:	80000015 	stw	zero,0(r16)
   44368:	00447c80 	call	447c8 <write>
   4436c:	00ffffc4 	movi	r3,-1
   44370:	10c0031e 	bne	r2,r3,44380 <_write_r+0x44>
   44374:	80c00017 	ldw	r3,0(r16)
   44378:	18000126 	beq	r3,zero,44380 <_write_r+0x44>
   4437c:	88c00015 	stw	r3,0(r17)
   44380:	dfc00217 	ldw	ra,8(sp)
   44384:	dc400117 	ldw	r17,4(sp)
   44388:	dc000017 	ldw	r16,0(sp)
   4438c:	dec00304 	addi	sp,sp,12
   44390:	f800283a 	ret

00044394 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44394:	defff904 	addi	sp,sp,-28
   44398:	dfc00615 	stw	ra,24(sp)
   4439c:	df000515 	stw	fp,20(sp)
   443a0:	df000504 	addi	fp,sp,20
   443a4:	e13ffc15 	stw	r4,-16(fp)
   443a8:	e17ffd15 	stw	r5,-12(fp)
   443ac:	e1bffe15 	stw	r6,-8(fp)
   443b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   443b4:	e0800217 	ldw	r2,8(fp)
   443b8:	d8800015 	stw	r2,0(sp)
   443bc:	e1ffff17 	ldw	r7,-4(fp)
   443c0:	e1bffe17 	ldw	r6,-8(fp)
   443c4:	e17ffd17 	ldw	r5,-12(fp)
   443c8:	e13ffc17 	ldw	r4,-16(fp)
   443cc:	00445440 	call	44544 <alt_iic_isr_register>
}  
   443d0:	e037883a 	mov	sp,fp
   443d4:	dfc00117 	ldw	ra,4(sp)
   443d8:	df000017 	ldw	fp,0(sp)
   443dc:	dec00204 	addi	sp,sp,8
   443e0:	f800283a 	ret

000443e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   443e4:	defff904 	addi	sp,sp,-28
   443e8:	df000615 	stw	fp,24(sp)
   443ec:	df000604 	addi	fp,sp,24
   443f0:	e13ffe15 	stw	r4,-8(fp)
   443f4:	e17fff15 	stw	r5,-4(fp)
   443f8:	e0bfff17 	ldw	r2,-4(fp)
   443fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44400:	0005303a 	rdctl	r2,status
   44404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44408:	e0fffb17 	ldw	r3,-20(fp)
   4440c:	00bfff84 	movi	r2,-2
   44410:	1884703a 	and	r2,r3,r2
   44414:	1001703a 	wrctl	status,r2
  
  return context;
   44418:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4441c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   44420:	00c00044 	movi	r3,1
   44424:	e0bffa17 	ldw	r2,-24(fp)
   44428:	1884983a 	sll	r2,r3,r2
   4442c:	1007883a 	mov	r3,r2
   44430:	d0a10117 	ldw	r2,-31740(gp)
   44434:	1884b03a 	or	r2,r3,r2
   44438:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4443c:	d0a10117 	ldw	r2,-31740(gp)
   44440:	100170fa 	wrctl	ienable,r2
   44444:	e0bffc17 	ldw	r2,-16(fp)
   44448:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4444c:	e0bffd17 	ldw	r2,-12(fp)
   44450:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   44454:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   44458:	0001883a 	nop
}
   4445c:	e037883a 	mov	sp,fp
   44460:	df000017 	ldw	fp,0(sp)
   44464:	dec00104 	addi	sp,sp,4
   44468:	f800283a 	ret

0004446c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4446c:	defff904 	addi	sp,sp,-28
   44470:	df000615 	stw	fp,24(sp)
   44474:	df000604 	addi	fp,sp,24
   44478:	e13ffe15 	stw	r4,-8(fp)
   4447c:	e17fff15 	stw	r5,-4(fp)
   44480:	e0bfff17 	ldw	r2,-4(fp)
   44484:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44488:	0005303a 	rdctl	r2,status
   4448c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44490:	e0fffb17 	ldw	r3,-20(fp)
   44494:	00bfff84 	movi	r2,-2
   44498:	1884703a 	and	r2,r3,r2
   4449c:	1001703a 	wrctl	status,r2
  
  return context;
   444a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   444a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   444a8:	00c00044 	movi	r3,1
   444ac:	e0bffa17 	ldw	r2,-24(fp)
   444b0:	1884983a 	sll	r2,r3,r2
   444b4:	0084303a 	nor	r2,zero,r2
   444b8:	1007883a 	mov	r3,r2
   444bc:	d0a10117 	ldw	r2,-31740(gp)
   444c0:	1884703a 	and	r2,r3,r2
   444c4:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   444c8:	d0a10117 	ldw	r2,-31740(gp)
   444cc:	100170fa 	wrctl	ienable,r2
   444d0:	e0bffc17 	ldw	r2,-16(fp)
   444d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   444d8:	e0bffd17 	ldw	r2,-12(fp)
   444dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   444e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   444e4:	0001883a 	nop
}
   444e8:	e037883a 	mov	sp,fp
   444ec:	df000017 	ldw	fp,0(sp)
   444f0:	dec00104 	addi	sp,sp,4
   444f4:	f800283a 	ret

000444f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   444f8:	defffc04 	addi	sp,sp,-16
   444fc:	df000315 	stw	fp,12(sp)
   44500:	df000304 	addi	fp,sp,12
   44504:	e13ffe15 	stw	r4,-8(fp)
   44508:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4450c:	000530fa 	rdctl	r2,ienable
   44510:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   44514:	00c00044 	movi	r3,1
   44518:	e0bfff17 	ldw	r2,-4(fp)
   4451c:	1884983a 	sll	r2,r3,r2
   44520:	1007883a 	mov	r3,r2
   44524:	e0bffd17 	ldw	r2,-12(fp)
   44528:	1884703a 	and	r2,r3,r2
   4452c:	1004c03a 	cmpne	r2,r2,zero
   44530:	10803fcc 	andi	r2,r2,255
}
   44534:	e037883a 	mov	sp,fp
   44538:	df000017 	ldw	fp,0(sp)
   4453c:	dec00104 	addi	sp,sp,4
   44540:	f800283a 	ret

00044544 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   44544:	defff504 	addi	sp,sp,-44
   44548:	dfc00a15 	stw	ra,40(sp)
   4454c:	df000915 	stw	fp,36(sp)
   44550:	df000904 	addi	fp,sp,36
   44554:	e13ffc15 	stw	r4,-16(fp)
   44558:	e17ffd15 	stw	r5,-12(fp)
   4455c:	e1bffe15 	stw	r6,-8(fp)
   44560:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   44564:	00bffa84 	movi	r2,-22
   44568:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4456c:	e0bffd17 	ldw	r2,-12(fp)
   44570:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   44574:	e0bff817 	ldw	r2,-32(fp)
   44578:	10800808 	cmpgei	r2,r2,32
   4457c:	1000271e 	bne	r2,zero,4461c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   44580:	0005303a 	rdctl	r2,status
   44584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   44588:	e0fffb17 	ldw	r3,-20(fp)
   4458c:	00bfff84 	movi	r2,-2
   44590:	1884703a 	and	r2,r3,r2
   44594:	1001703a 	wrctl	status,r2
  
  return context;
   44598:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4459c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   445a0:	00800134 	movhi	r2,4
   445a4:	109ec104 	addi	r2,r2,31492
   445a8:	e0fff817 	ldw	r3,-32(fp)
   445ac:	180690fa 	slli	r3,r3,3
   445b0:	10c5883a 	add	r2,r2,r3
   445b4:	e0fffe17 	ldw	r3,-8(fp)
   445b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   445bc:	00800134 	movhi	r2,4
   445c0:	109ec104 	addi	r2,r2,31492
   445c4:	e0fff817 	ldw	r3,-32(fp)
   445c8:	180690fa 	slli	r3,r3,3
   445cc:	10c5883a 	add	r2,r2,r3
   445d0:	10800104 	addi	r2,r2,4
   445d4:	e0ffff17 	ldw	r3,-4(fp)
   445d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   445dc:	e0bffe17 	ldw	r2,-8(fp)
   445e0:	10000526 	beq	r2,zero,445f8 <alt_iic_isr_register+0xb4>
   445e4:	e0bff817 	ldw	r2,-32(fp)
   445e8:	100b883a 	mov	r5,r2
   445ec:	e13ffc17 	ldw	r4,-16(fp)
   445f0:	00443e40 	call	443e4 <alt_ic_irq_enable>
   445f4:	00000406 	br	44608 <alt_iic_isr_register+0xc4>
   445f8:	e0bff817 	ldw	r2,-32(fp)
   445fc:	100b883a 	mov	r5,r2
   44600:	e13ffc17 	ldw	r4,-16(fp)
   44604:	004446c0 	call	4446c <alt_ic_irq_disable>
   44608:	e0bff715 	stw	r2,-36(fp)
   4460c:	e0bffa17 	ldw	r2,-24(fp)
   44610:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   44614:	e0bff917 	ldw	r2,-28(fp)
   44618:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4461c:	e0bff717 	ldw	r2,-36(fp)
}
   44620:	e037883a 	mov	sp,fp
   44624:	dfc00117 	ldw	ra,4(sp)
   44628:	df000017 	ldw	fp,0(sp)
   4462c:	dec00204 	addi	sp,sp,8
   44630:	f800283a 	ret

00044634 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   44634:	defffc04 	addi	sp,sp,-16
   44638:	df000315 	stw	fp,12(sp)
   4463c:	df000304 	addi	fp,sp,12
   44640:	e13ffd15 	stw	r4,-12(fp)
   44644:	e17ffe15 	stw	r5,-8(fp)
   44648:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4464c:	e0fffe17 	ldw	r3,-8(fp)
   44650:	e0bffd17 	ldw	r2,-12(fp)
   44654:	18800c26 	beq	r3,r2,44688 <alt_load_section+0x54>
  {
    while( to != end )
   44658:	00000806 	br	4467c <alt_load_section+0x48>
    {
      *to++ = *from++;
   4465c:	e0bffe17 	ldw	r2,-8(fp)
   44660:	10c00104 	addi	r3,r2,4
   44664:	e0fffe15 	stw	r3,-8(fp)
   44668:	e0fffd17 	ldw	r3,-12(fp)
   4466c:	19000104 	addi	r4,r3,4
   44670:	e13ffd15 	stw	r4,-12(fp)
   44674:	18c00017 	ldw	r3,0(r3)
   44678:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4467c:	e0fffe17 	ldw	r3,-8(fp)
   44680:	e0bfff17 	ldw	r2,-4(fp)
   44684:	18bff51e 	bne	r3,r2,4465c <__alt_data_end+0xfffdc65c>
    {
      *to++ = *from++;
    }
  }
}
   44688:	0001883a 	nop
   4468c:	e037883a 	mov	sp,fp
   44690:	df000017 	ldw	fp,0(sp)
   44694:	dec00104 	addi	sp,sp,4
   44698:	f800283a 	ret

0004469c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4469c:	defffe04 	addi	sp,sp,-8
   446a0:	dfc00115 	stw	ra,4(sp)
   446a4:	df000015 	stw	fp,0(sp)
   446a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   446ac:	01800134 	movhi	r6,4
   446b0:	319dcb04 	addi	r6,r6,30508
   446b4:	01400134 	movhi	r5,4
   446b8:	295ce304 	addi	r5,r5,29580
   446bc:	01000134 	movhi	r4,4
   446c0:	211dcb04 	addi	r4,r4,30508
   446c4:	00446340 	call	44634 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   446c8:	01800134 	movhi	r6,4
   446cc:	31809104 	addi	r6,r6,580
   446d0:	01400134 	movhi	r5,4
   446d4:	29400804 	addi	r5,r5,32
   446d8:	01000134 	movhi	r4,4
   446dc:	21000804 	addi	r4,r4,32
   446e0:	00446340 	call	44634 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   446e4:	01800134 	movhi	r6,4
   446e8:	319ce304 	addi	r6,r6,29580
   446ec:	01400134 	movhi	r5,4
   446f0:	2955ea04 	addi	r5,r5,22440
   446f4:	01000134 	movhi	r4,4
   446f8:	2115ea04 	addi	r4,r4,22440
   446fc:	00446340 	call	44634 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   44700:	0044cb00 	call	44cb0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   44704:	0044ddc0 	call	44ddc <alt_icache_flush_all>
}
   44708:	0001883a 	nop
   4470c:	e037883a 	mov	sp,fp
   44710:	dfc00117 	ldw	ra,4(sp)
   44714:	df000017 	ldw	fp,0(sp)
   44718:	dec00204 	addi	sp,sp,8
   4471c:	f800283a 	ret

00044720 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   44720:	defffd04 	addi	sp,sp,-12
   44724:	dfc00215 	stw	ra,8(sp)
   44728:	df000115 	stw	fp,4(sp)
   4472c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   44730:	0009883a 	mov	r4,zero
   44734:	00448f40 	call	448f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   44738:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4473c:	004492c0 	call	4492c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   44740:	01800134 	movhi	r6,4
   44744:	319cd604 	addi	r6,r6,29528
   44748:	01400134 	movhi	r5,4
   4474c:	295cd604 	addi	r5,r5,29528
   44750:	01000134 	movhi	r4,4
   44754:	211cd604 	addi	r4,r4,29528
   44758:	0044f700 	call	44f70 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4475c:	d0a10217 	ldw	r2,-31736(gp)
   44760:	d0e10317 	ldw	r3,-31732(gp)
   44764:	d1210417 	ldw	r4,-31728(gp)
   44768:	200d883a 	mov	r6,r4
   4476c:	180b883a 	mov	r5,r3
   44770:	1009883a 	mov	r4,r2
   44774:	00409b40 	call	409b4 <main>
   44778:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4477c:	01000044 	movi	r4,1
   44780:	0044be00 	call	44be0 <close>
  exit (result);
   44784:	e13fff17 	ldw	r4,-4(fp)
   44788:	00455940 	call	45594 <exit>

0004478c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4478c:	defffe04 	addi	sp,sp,-8
   44790:	dfc00115 	stw	ra,4(sp)
   44794:	df000015 	stw	fp,0(sp)
   44798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4479c:	d0a00f17 	ldw	r2,-32708(gp)
   447a0:	10000326 	beq	r2,zero,447b0 <alt_get_errno+0x24>
   447a4:	d0a00f17 	ldw	r2,-32708(gp)
   447a8:	103ee83a 	callr	r2
   447ac:	00000106 	br	447b4 <alt_get_errno+0x28>
   447b0:	d0a10004 	addi	r2,gp,-31744
}
   447b4:	e037883a 	mov	sp,fp
   447b8:	dfc00117 	ldw	ra,4(sp)
   447bc:	df000017 	ldw	fp,0(sp)
   447c0:	dec00204 	addi	sp,sp,8
   447c4:	f800283a 	ret

000447c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   447c8:	defff904 	addi	sp,sp,-28
   447cc:	dfc00615 	stw	ra,24(sp)
   447d0:	df000515 	stw	fp,20(sp)
   447d4:	df000504 	addi	fp,sp,20
   447d8:	e13ffd15 	stw	r4,-12(fp)
   447dc:	e17ffe15 	stw	r5,-8(fp)
   447e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   447e4:	e0bffd17 	ldw	r2,-12(fp)
   447e8:	10000616 	blt	r2,zero,44804 <write+0x3c>
   447ec:	e0bffd17 	ldw	r2,-12(fp)
   447f0:	10c00324 	muli	r3,r2,12
   447f4:	00800134 	movhi	r2,4
   447f8:	109d5b04 	addi	r2,r2,30060
   447fc:	1885883a 	add	r2,r3,r2
   44800:	00000106 	br	44808 <write+0x40>
   44804:	0005883a 	mov	r2,zero
   44808:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4480c:	e0bffb17 	ldw	r2,-20(fp)
   44810:	10002126 	beq	r2,zero,44898 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   44814:	e0bffb17 	ldw	r2,-20(fp)
   44818:	10800217 	ldw	r2,8(r2)
   4481c:	108000cc 	andi	r2,r2,3
   44820:	10001826 	beq	r2,zero,44884 <write+0xbc>
   44824:	e0bffb17 	ldw	r2,-20(fp)
   44828:	10800017 	ldw	r2,0(r2)
   4482c:	10800617 	ldw	r2,24(r2)
   44830:	10001426 	beq	r2,zero,44884 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   44834:	e0bffb17 	ldw	r2,-20(fp)
   44838:	10800017 	ldw	r2,0(r2)
   4483c:	10800617 	ldw	r2,24(r2)
   44840:	e0ffff17 	ldw	r3,-4(fp)
   44844:	180d883a 	mov	r6,r3
   44848:	e17ffe17 	ldw	r5,-8(fp)
   4484c:	e13ffb17 	ldw	r4,-20(fp)
   44850:	103ee83a 	callr	r2
   44854:	e0bffc15 	stw	r2,-16(fp)
   44858:	e0bffc17 	ldw	r2,-16(fp)
   4485c:	1000070e 	bge	r2,zero,4487c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   44860:	004478c0 	call	4478c <alt_get_errno>
   44864:	1007883a 	mov	r3,r2
   44868:	e0bffc17 	ldw	r2,-16(fp)
   4486c:	0085c83a 	sub	r2,zero,r2
   44870:	18800015 	stw	r2,0(r3)
        return -1;
   44874:	00bfffc4 	movi	r2,-1
   44878:	00000c06 	br	448ac <write+0xe4>
      }
      return rval;
   4487c:	e0bffc17 	ldw	r2,-16(fp)
   44880:	00000a06 	br	448ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   44884:	004478c0 	call	4478c <alt_get_errno>
   44888:	1007883a 	mov	r3,r2
   4488c:	00800344 	movi	r2,13
   44890:	18800015 	stw	r2,0(r3)
   44894:	00000406 	br	448a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   44898:	004478c0 	call	4478c <alt_get_errno>
   4489c:	1007883a 	mov	r3,r2
   448a0:	00801444 	movi	r2,81
   448a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   448a8:	00bfffc4 	movi	r2,-1
}
   448ac:	e037883a 	mov	sp,fp
   448b0:	dfc00117 	ldw	ra,4(sp)
   448b4:	df000017 	ldw	fp,0(sp)
   448b8:	dec00204 	addi	sp,sp,8
   448bc:	f800283a 	ret

000448c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   448c0:	defffd04 	addi	sp,sp,-12
   448c4:	dfc00215 	stw	ra,8(sp)
   448c8:	df000115 	stw	fp,4(sp)
   448cc:	df000104 	addi	fp,sp,4
   448d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   448d4:	d1600c04 	addi	r5,gp,-32720
   448d8:	e13fff17 	ldw	r4,-4(fp)
   448dc:	0044d380 	call	44d38 <alt_dev_llist_insert>
}
   448e0:	e037883a 	mov	sp,fp
   448e4:	dfc00117 	ldw	ra,4(sp)
   448e8:	df000017 	ldw	fp,0(sp)
   448ec:	dec00204 	addi	sp,sp,8
   448f0:	f800283a 	ret

000448f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   448f4:	defffd04 	addi	sp,sp,-12
   448f8:	dfc00215 	stw	ra,8(sp)
   448fc:	df000115 	stw	fp,4(sp)
   44900:	df000104 	addi	fp,sp,4
   44904:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   44908:	00452a40 	call	452a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4490c:	00800044 	movi	r2,1
   44910:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   44914:	0001883a 	nop
   44918:	e037883a 	mov	sp,fp
   4491c:	dfc00117 	ldw	ra,4(sp)
   44920:	df000017 	ldw	fp,0(sp)
   44924:	dec00204 	addi	sp,sp,8
   44928:	f800283a 	ret

0004492c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4492c:	defffe04 	addi	sp,sp,-8
   44930:	dfc00115 	stw	ra,4(sp)
   44934:	df000015 	stw	fp,0(sp)
   44938:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_PWM, timer_pwm);
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4493c:	01000134 	movhi	r4,4
   44940:	211d4604 	addi	r4,r4,29976
   44944:	00448c00 	call	448c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   44948:	0001883a 	nop
}
   4494c:	0001883a 	nop
   44950:	e037883a 	mov	sp,fp
   44954:	dfc00117 	ldw	ra,4(sp)
   44958:	df000017 	ldw	fp,0(sp)
   4495c:	dec00204 	addi	sp,sp,8
   44960:	f800283a 	ret

00044964 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   44964:	defffa04 	addi	sp,sp,-24
   44968:	dfc00515 	stw	ra,20(sp)
   4496c:	df000415 	stw	fp,16(sp)
   44970:	df000404 	addi	fp,sp,16
   44974:	e13ffd15 	stw	r4,-12(fp)
   44978:	e17ffe15 	stw	r5,-8(fp)
   4497c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44980:	e0bffd17 	ldw	r2,-12(fp)
   44984:	10800017 	ldw	r2,0(r2)
   44988:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4498c:	e0bffc17 	ldw	r2,-16(fp)
   44990:	10c00a04 	addi	r3,r2,40
   44994:	e0bffd17 	ldw	r2,-12(fp)
   44998:	10800217 	ldw	r2,8(r2)
   4499c:	100f883a 	mov	r7,r2
   449a0:	e1bfff17 	ldw	r6,-4(fp)
   449a4:	e17ffe17 	ldw	r5,-8(fp)
   449a8:	1809883a 	mov	r4,r3
   449ac:	0044a240 	call	44a24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   449b0:	e037883a 	mov	sp,fp
   449b4:	dfc00117 	ldw	ra,4(sp)
   449b8:	df000017 	ldw	fp,0(sp)
   449bc:	dec00204 	addi	sp,sp,8
   449c0:	f800283a 	ret

000449c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   449c4:	defffa04 	addi	sp,sp,-24
   449c8:	dfc00515 	stw	ra,20(sp)
   449cc:	df000415 	stw	fp,16(sp)
   449d0:	df000404 	addi	fp,sp,16
   449d4:	e13ffd15 	stw	r4,-12(fp)
   449d8:	e17ffe15 	stw	r5,-8(fp)
   449dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   449e0:	e0bffd17 	ldw	r2,-12(fp)
   449e4:	10800017 	ldw	r2,0(r2)
   449e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   449ec:	e0bffc17 	ldw	r2,-16(fp)
   449f0:	10c00a04 	addi	r3,r2,40
   449f4:	e0bffd17 	ldw	r2,-12(fp)
   449f8:	10800217 	ldw	r2,8(r2)
   449fc:	100f883a 	mov	r7,r2
   44a00:	e1bfff17 	ldw	r6,-4(fp)
   44a04:	e17ffe17 	ldw	r5,-8(fp)
   44a08:	1809883a 	mov	r4,r3
   44a0c:	0044b100 	call	44b10 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44a10:	e037883a 	mov	sp,fp
   44a14:	dfc00117 	ldw	ra,4(sp)
   44a18:	df000017 	ldw	fp,0(sp)
   44a1c:	dec00204 	addi	sp,sp,8
   44a20:	f800283a 	ret

00044a24 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   44a24:	defff704 	addi	sp,sp,-36
   44a28:	df000815 	stw	fp,32(sp)
   44a2c:	df000804 	addi	fp,sp,32
   44a30:	e13ffc15 	stw	r4,-16(fp)
   44a34:	e17ffd15 	stw	r5,-12(fp)
   44a38:	e1bffe15 	stw	r6,-8(fp)
   44a3c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   44a40:	e0bffc17 	ldw	r2,-16(fp)
   44a44:	10800017 	ldw	r2,0(r2)
   44a48:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   44a4c:	e0bffd17 	ldw	r2,-12(fp)
   44a50:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   44a54:	e0bffe17 	ldw	r2,-8(fp)
   44a58:	e0fffd17 	ldw	r3,-12(fp)
   44a5c:	1885883a 	add	r2,r3,r2
   44a60:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   44a64:	00001206 	br	44ab0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   44a68:	e0bff917 	ldw	r2,-28(fp)
   44a6c:	10800037 	ldwio	r2,0(r2)
   44a70:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   44a74:	e0bffb17 	ldw	r2,-20(fp)
   44a78:	10a0000c 	andi	r2,r2,32768
   44a7c:	10000626 	beq	r2,zero,44a98 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44a80:	e0bff817 	ldw	r2,-32(fp)
   44a84:	10c00044 	addi	r3,r2,1
   44a88:	e0fff815 	stw	r3,-32(fp)
   44a8c:	e0fffb17 	ldw	r3,-20(fp)
   44a90:	10c00005 	stb	r3,0(r2)
   44a94:	00000606 	br	44ab0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   44a98:	e0fff817 	ldw	r3,-32(fp)
   44a9c:	e0bffd17 	ldw	r2,-12(fp)
   44aa0:	1880071e 	bne	r3,r2,44ac0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   44aa4:	e0bfff17 	ldw	r2,-4(fp)
   44aa8:	1090000c 	andi	r2,r2,16384
   44aac:	1000061e 	bne	r2,zero,44ac8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   44ab0:	e0fff817 	ldw	r3,-32(fp)
   44ab4:	e0bffa17 	ldw	r2,-24(fp)
   44ab8:	18bfeb36 	bltu	r3,r2,44a68 <__alt_data_end+0xfffdca68>
   44abc:	00000306 	br	44acc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   44ac0:	0001883a 	nop
   44ac4:	00000106 	br	44acc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   44ac8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   44acc:	e0fff817 	ldw	r3,-32(fp)
   44ad0:	e0bffd17 	ldw	r2,-12(fp)
   44ad4:	18800426 	beq	r3,r2,44ae8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   44ad8:	e0fff817 	ldw	r3,-32(fp)
   44adc:	e0bffd17 	ldw	r2,-12(fp)
   44ae0:	1885c83a 	sub	r2,r3,r2
   44ae4:	00000606 	br	44b00 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   44ae8:	e0bfff17 	ldw	r2,-4(fp)
   44aec:	1090000c 	andi	r2,r2,16384
   44af0:	10000226 	beq	r2,zero,44afc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   44af4:	00bffd44 	movi	r2,-11
   44af8:	00000106 	br	44b00 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   44afc:	00bffec4 	movi	r2,-5
}
   44b00:	e037883a 	mov	sp,fp
   44b04:	df000017 	ldw	fp,0(sp)
   44b08:	dec00104 	addi	sp,sp,4
   44b0c:	f800283a 	ret

00044b10 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44b10:	defff904 	addi	sp,sp,-28
   44b14:	df000615 	stw	fp,24(sp)
   44b18:	df000604 	addi	fp,sp,24
   44b1c:	e13ffc15 	stw	r4,-16(fp)
   44b20:	e17ffd15 	stw	r5,-12(fp)
   44b24:	e1bffe15 	stw	r6,-8(fp)
   44b28:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   44b2c:	e0bffc17 	ldw	r2,-16(fp)
   44b30:	10800017 	ldw	r2,0(r2)
   44b34:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   44b38:	e0bffe17 	ldw	r2,-8(fp)
   44b3c:	e0fffd17 	ldw	r3,-12(fp)
   44b40:	1885883a 	add	r2,r3,r2
   44b44:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   44b48:	00000e06 	br	44b84 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   44b4c:	e0bffa17 	ldw	r2,-24(fp)
   44b50:	10800104 	addi	r2,r2,4
   44b54:	10800037 	ldwio	r2,0(r2)
   44b58:	10bfffec 	andhi	r2,r2,65535
   44b5c:	10000926 	beq	r2,zero,44b84 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   44b60:	e0fffa17 	ldw	r3,-24(fp)
   44b64:	e0bffd17 	ldw	r2,-12(fp)
   44b68:	11000044 	addi	r4,r2,1
   44b6c:	e13ffd15 	stw	r4,-12(fp)
   44b70:	10800003 	ldbu	r2,0(r2)
   44b74:	10803fcc 	andi	r2,r2,255
   44b78:	1080201c 	xori	r2,r2,128
   44b7c:	10bfe004 	addi	r2,r2,-128
   44b80:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   44b84:	e0fffd17 	ldw	r3,-12(fp)
   44b88:	e0bffb17 	ldw	r2,-20(fp)
   44b8c:	18bfef36 	bltu	r3,r2,44b4c <__alt_data_end+0xfffdcb4c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   44b90:	e0bffe17 	ldw	r2,-8(fp)
}
   44b94:	e037883a 	mov	sp,fp
   44b98:	df000017 	ldw	fp,0(sp)
   44b9c:	dec00104 	addi	sp,sp,4
   44ba0:	f800283a 	ret

00044ba4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44ba4:	defffe04 	addi	sp,sp,-8
   44ba8:	dfc00115 	stw	ra,4(sp)
   44bac:	df000015 	stw	fp,0(sp)
   44bb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44bb4:	d0a00f17 	ldw	r2,-32708(gp)
   44bb8:	10000326 	beq	r2,zero,44bc8 <alt_get_errno+0x24>
   44bbc:	d0a00f17 	ldw	r2,-32708(gp)
   44bc0:	103ee83a 	callr	r2
   44bc4:	00000106 	br	44bcc <alt_get_errno+0x28>
   44bc8:	d0a10004 	addi	r2,gp,-31744
}
   44bcc:	e037883a 	mov	sp,fp
   44bd0:	dfc00117 	ldw	ra,4(sp)
   44bd4:	df000017 	ldw	fp,0(sp)
   44bd8:	dec00204 	addi	sp,sp,8
   44bdc:	f800283a 	ret

00044be0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   44be0:	defffb04 	addi	sp,sp,-20
   44be4:	dfc00415 	stw	ra,16(sp)
   44be8:	df000315 	stw	fp,12(sp)
   44bec:	df000304 	addi	fp,sp,12
   44bf0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   44bf4:	e0bfff17 	ldw	r2,-4(fp)
   44bf8:	10000616 	blt	r2,zero,44c14 <close+0x34>
   44bfc:	e0bfff17 	ldw	r2,-4(fp)
   44c00:	10c00324 	muli	r3,r2,12
   44c04:	00800134 	movhi	r2,4
   44c08:	109d5b04 	addi	r2,r2,30060
   44c0c:	1885883a 	add	r2,r3,r2
   44c10:	00000106 	br	44c18 <close+0x38>
   44c14:	0005883a 	mov	r2,zero
   44c18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   44c1c:	e0bffd17 	ldw	r2,-12(fp)
   44c20:	10001926 	beq	r2,zero,44c88 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   44c24:	e0bffd17 	ldw	r2,-12(fp)
   44c28:	10800017 	ldw	r2,0(r2)
   44c2c:	10800417 	ldw	r2,16(r2)
   44c30:	10000626 	beq	r2,zero,44c4c <close+0x6c>
   44c34:	e0bffd17 	ldw	r2,-12(fp)
   44c38:	10800017 	ldw	r2,0(r2)
   44c3c:	10800417 	ldw	r2,16(r2)
   44c40:	e13ffd17 	ldw	r4,-12(fp)
   44c44:	103ee83a 	callr	r2
   44c48:	00000106 	br	44c50 <close+0x70>
   44c4c:	0005883a 	mov	r2,zero
   44c50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   44c54:	e13fff17 	ldw	r4,-4(fp)
   44c58:	00452400 	call	45240 <alt_release_fd>
    if (rval < 0)
   44c5c:	e0bffe17 	ldw	r2,-8(fp)
   44c60:	1000070e 	bge	r2,zero,44c80 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   44c64:	0044ba40 	call	44ba4 <alt_get_errno>
   44c68:	1007883a 	mov	r3,r2
   44c6c:	e0bffe17 	ldw	r2,-8(fp)
   44c70:	0085c83a 	sub	r2,zero,r2
   44c74:	18800015 	stw	r2,0(r3)
      return -1;
   44c78:	00bfffc4 	movi	r2,-1
   44c7c:	00000706 	br	44c9c <close+0xbc>
    }
    return 0;
   44c80:	0005883a 	mov	r2,zero
   44c84:	00000506 	br	44c9c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   44c88:	0044ba40 	call	44ba4 <alt_get_errno>
   44c8c:	1007883a 	mov	r3,r2
   44c90:	00801444 	movi	r2,81
   44c94:	18800015 	stw	r2,0(r3)
    return -1;
   44c98:	00bfffc4 	movi	r2,-1
  }
}
   44c9c:	e037883a 	mov	sp,fp
   44ca0:	dfc00117 	ldw	ra,4(sp)
   44ca4:	df000017 	ldw	fp,0(sp)
   44ca8:	dec00204 	addi	sp,sp,8
   44cac:	f800283a 	ret

00044cb0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44cb0:	deffff04 	addi	sp,sp,-4
   44cb4:	df000015 	stw	fp,0(sp)
   44cb8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   44cbc:	0001883a 	nop
   44cc0:	e037883a 	mov	sp,fp
   44cc4:	df000017 	ldw	fp,0(sp)
   44cc8:	dec00104 	addi	sp,sp,4
   44ccc:	f800283a 	ret

00044cd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   44cd0:	defffc04 	addi	sp,sp,-16
   44cd4:	df000315 	stw	fp,12(sp)
   44cd8:	df000304 	addi	fp,sp,12
   44cdc:	e13ffd15 	stw	r4,-12(fp)
   44ce0:	e17ffe15 	stw	r5,-8(fp)
   44ce4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   44ce8:	e0bfff17 	ldw	r2,-4(fp)
}
   44cec:	e037883a 	mov	sp,fp
   44cf0:	df000017 	ldw	fp,0(sp)
   44cf4:	dec00104 	addi	sp,sp,4
   44cf8:	f800283a 	ret

00044cfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44cfc:	defffe04 	addi	sp,sp,-8
   44d00:	dfc00115 	stw	ra,4(sp)
   44d04:	df000015 	stw	fp,0(sp)
   44d08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44d0c:	d0a00f17 	ldw	r2,-32708(gp)
   44d10:	10000326 	beq	r2,zero,44d20 <alt_get_errno+0x24>
   44d14:	d0a00f17 	ldw	r2,-32708(gp)
   44d18:	103ee83a 	callr	r2
   44d1c:	00000106 	br	44d24 <alt_get_errno+0x28>
   44d20:	d0a10004 	addi	r2,gp,-31744
}
   44d24:	e037883a 	mov	sp,fp
   44d28:	dfc00117 	ldw	ra,4(sp)
   44d2c:	df000017 	ldw	fp,0(sp)
   44d30:	dec00204 	addi	sp,sp,8
   44d34:	f800283a 	ret

00044d38 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   44d38:	defffa04 	addi	sp,sp,-24
   44d3c:	dfc00515 	stw	ra,20(sp)
   44d40:	df000415 	stw	fp,16(sp)
   44d44:	df000404 	addi	fp,sp,16
   44d48:	e13ffe15 	stw	r4,-8(fp)
   44d4c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   44d50:	e0bffe17 	ldw	r2,-8(fp)
   44d54:	10000326 	beq	r2,zero,44d64 <alt_dev_llist_insert+0x2c>
   44d58:	e0bffe17 	ldw	r2,-8(fp)
   44d5c:	10800217 	ldw	r2,8(r2)
   44d60:	1000061e 	bne	r2,zero,44d7c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   44d64:	0044cfc0 	call	44cfc <alt_get_errno>
   44d68:	1007883a 	mov	r3,r2
   44d6c:	00800584 	movi	r2,22
   44d70:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   44d74:	00bffa84 	movi	r2,-22
   44d78:	00001306 	br	44dc8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   44d7c:	e0bffe17 	ldw	r2,-8(fp)
   44d80:	e0ffff17 	ldw	r3,-4(fp)
   44d84:	e0fffc15 	stw	r3,-16(fp)
   44d88:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   44d8c:	e0bffd17 	ldw	r2,-12(fp)
   44d90:	e0fffc17 	ldw	r3,-16(fp)
   44d94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44d98:	e0bffc17 	ldw	r2,-16(fp)
   44d9c:	10c00017 	ldw	r3,0(r2)
   44da0:	e0bffd17 	ldw	r2,-12(fp)
   44da4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44da8:	e0bffc17 	ldw	r2,-16(fp)
   44dac:	10800017 	ldw	r2,0(r2)
   44db0:	e0fffd17 	ldw	r3,-12(fp)
   44db4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44db8:	e0bffc17 	ldw	r2,-16(fp)
   44dbc:	e0fffd17 	ldw	r3,-12(fp)
   44dc0:	10c00015 	stw	r3,0(r2)

  return 0;  
   44dc4:	0005883a 	mov	r2,zero
}
   44dc8:	e037883a 	mov	sp,fp
   44dcc:	dfc00117 	ldw	ra,4(sp)
   44dd0:	df000017 	ldw	fp,0(sp)
   44dd4:	dec00204 	addi	sp,sp,8
   44dd8:	f800283a 	ret

00044ddc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   44ddc:	defffe04 	addi	sp,sp,-8
   44de0:	dfc00115 	stw	ra,4(sp)
   44de4:	df000015 	stw	fp,0(sp)
   44de8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   44dec:	01420004 	movi	r5,2048
   44df0:	0009883a 	mov	r4,zero
   44df4:	00455040 	call	45504 <alt_icache_flush>
#endif
}
   44df8:	0001883a 	nop
   44dfc:	e037883a 	mov	sp,fp
   44e00:	dfc00117 	ldw	ra,4(sp)
   44e04:	df000017 	ldw	fp,0(sp)
   44e08:	dec00204 	addi	sp,sp,8
   44e0c:	f800283a 	ret

00044e10 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   44e10:	defffe04 	addi	sp,sp,-8
   44e14:	df000115 	stw	fp,4(sp)
   44e18:	df000104 	addi	fp,sp,4
   44e1c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   44e20:	e0bfff17 	ldw	r2,-4(fp)
   44e24:	10bffe84 	addi	r2,r2,-6
   44e28:	10c00428 	cmpgeui	r3,r2,16
   44e2c:	18001a1e 	bne	r3,zero,44e98 <alt_exception_cause_generated_bad_addr+0x88>
   44e30:	100690ba 	slli	r3,r2,2
   44e34:	00800134 	movhi	r2,4
   44e38:	10939204 	addi	r2,r2,20040
   44e3c:	1885883a 	add	r2,r3,r2
   44e40:	10800017 	ldw	r2,0(r2)
   44e44:	1000683a 	jmp	r2
   44e48:	00044e88 	cmpgei	zero,zero,4410
   44e4c:	00044e88 	cmpgei	zero,zero,4410
   44e50:	00044e98 	cmpnei	zero,zero,4410
   44e54:	00044e98 	cmpnei	zero,zero,4410
   44e58:	00044e98 	cmpnei	zero,zero,4410
   44e5c:	00044e88 	cmpgei	zero,zero,4410
   44e60:	00044e90 	cmplti	zero,zero,4410
   44e64:	00044e98 	cmpnei	zero,zero,4410
   44e68:	00044e88 	cmpgei	zero,zero,4410
   44e6c:	00044e88 	cmpgei	zero,zero,4410
   44e70:	00044e98 	cmpnei	zero,zero,4410
   44e74:	00044e88 	cmpgei	zero,zero,4410
   44e78:	00044e90 	cmplti	zero,zero,4410
   44e7c:	00044e98 	cmpnei	zero,zero,4410
   44e80:	00044e98 	cmpnei	zero,zero,4410
   44e84:	00044e88 	cmpgei	zero,zero,4410
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   44e88:	00800044 	movi	r2,1
   44e8c:	00000306 	br	44e9c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   44e90:	0005883a 	mov	r2,zero
   44e94:	00000106 	br	44e9c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   44e98:	0005883a 	mov	r2,zero
  }
}
   44e9c:	e037883a 	mov	sp,fp
   44ea0:	df000017 	ldw	fp,0(sp)
   44ea4:	dec00104 	addi	sp,sp,4
   44ea8:	f800283a 	ret

00044eac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   44eac:	defff904 	addi	sp,sp,-28
   44eb0:	dfc00615 	stw	ra,24(sp)
   44eb4:	df000515 	stw	fp,20(sp)
   44eb8:	df000504 	addi	fp,sp,20
   44ebc:	e13ffc15 	stw	r4,-16(fp)
   44ec0:	e17ffd15 	stw	r5,-12(fp)
   44ec4:	e1bffe15 	stw	r6,-8(fp)
   44ec8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   44ecc:	e1bfff17 	ldw	r6,-4(fp)
   44ed0:	e17ffe17 	ldw	r5,-8(fp)
   44ed4:	e13ffd17 	ldw	r4,-12(fp)
   44ed8:	00450ec0 	call	450ec <open>
   44edc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   44ee0:	e0bffb17 	ldw	r2,-20(fp)
   44ee4:	10001c16 	blt	r2,zero,44f58 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   44ee8:	00800134 	movhi	r2,4
   44eec:	109d5b04 	addi	r2,r2,30060
   44ef0:	e0fffb17 	ldw	r3,-20(fp)
   44ef4:	18c00324 	muli	r3,r3,12
   44ef8:	10c5883a 	add	r2,r2,r3
   44efc:	10c00017 	ldw	r3,0(r2)
   44f00:	e0bffc17 	ldw	r2,-16(fp)
   44f04:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44f08:	00800134 	movhi	r2,4
   44f0c:	109d5b04 	addi	r2,r2,30060
   44f10:	e0fffb17 	ldw	r3,-20(fp)
   44f14:	18c00324 	muli	r3,r3,12
   44f18:	10c5883a 	add	r2,r2,r3
   44f1c:	10800104 	addi	r2,r2,4
   44f20:	10c00017 	ldw	r3,0(r2)
   44f24:	e0bffc17 	ldw	r2,-16(fp)
   44f28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   44f2c:	00800134 	movhi	r2,4
   44f30:	109d5b04 	addi	r2,r2,30060
   44f34:	e0fffb17 	ldw	r3,-20(fp)
   44f38:	18c00324 	muli	r3,r3,12
   44f3c:	10c5883a 	add	r2,r2,r3
   44f40:	10800204 	addi	r2,r2,8
   44f44:	10c00017 	ldw	r3,0(r2)
   44f48:	e0bffc17 	ldw	r2,-16(fp)
   44f4c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   44f50:	e13ffb17 	ldw	r4,-20(fp)
   44f54:	00452400 	call	45240 <alt_release_fd>
  }
} 
   44f58:	0001883a 	nop
   44f5c:	e037883a 	mov	sp,fp
   44f60:	dfc00117 	ldw	ra,4(sp)
   44f64:	df000017 	ldw	fp,0(sp)
   44f68:	dec00204 	addi	sp,sp,8
   44f6c:	f800283a 	ret

00044f70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   44f70:	defffb04 	addi	sp,sp,-20
   44f74:	dfc00415 	stw	ra,16(sp)
   44f78:	df000315 	stw	fp,12(sp)
   44f7c:	df000304 	addi	fp,sp,12
   44f80:	e13ffd15 	stw	r4,-12(fp)
   44f84:	e17ffe15 	stw	r5,-8(fp)
   44f88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44f8c:	01c07fc4 	movi	r7,511
   44f90:	01800044 	movi	r6,1
   44f94:	e17ffd17 	ldw	r5,-12(fp)
   44f98:	01000134 	movhi	r4,4
   44f9c:	211d5e04 	addi	r4,r4,30072
   44fa0:	0044eac0 	call	44eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44fa4:	01c07fc4 	movi	r7,511
   44fa8:	000d883a 	mov	r6,zero
   44fac:	e17ffe17 	ldw	r5,-8(fp)
   44fb0:	01000134 	movhi	r4,4
   44fb4:	211d5b04 	addi	r4,r4,30060
   44fb8:	0044eac0 	call	44eac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44fbc:	01c07fc4 	movi	r7,511
   44fc0:	01800044 	movi	r6,1
   44fc4:	e17fff17 	ldw	r5,-4(fp)
   44fc8:	01000134 	movhi	r4,4
   44fcc:	211d6104 	addi	r4,r4,30084
   44fd0:	0044eac0 	call	44eac <alt_open_fd>
}  
   44fd4:	0001883a 	nop
   44fd8:	e037883a 	mov	sp,fp
   44fdc:	dfc00117 	ldw	ra,4(sp)
   44fe0:	df000017 	ldw	fp,0(sp)
   44fe4:	dec00204 	addi	sp,sp,8
   44fe8:	f800283a 	ret

00044fec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44fec:	defffe04 	addi	sp,sp,-8
   44ff0:	dfc00115 	stw	ra,4(sp)
   44ff4:	df000015 	stw	fp,0(sp)
   44ff8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44ffc:	d0a00f17 	ldw	r2,-32708(gp)
   45000:	10000326 	beq	r2,zero,45010 <alt_get_errno+0x24>
   45004:	d0a00f17 	ldw	r2,-32708(gp)
   45008:	103ee83a 	callr	r2
   4500c:	00000106 	br	45014 <alt_get_errno+0x28>
   45010:	d0a10004 	addi	r2,gp,-31744
}
   45014:	e037883a 	mov	sp,fp
   45018:	dfc00117 	ldw	ra,4(sp)
   4501c:	df000017 	ldw	fp,0(sp)
   45020:	dec00204 	addi	sp,sp,8
   45024:	f800283a 	ret

00045028 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   45028:	defffd04 	addi	sp,sp,-12
   4502c:	df000215 	stw	fp,8(sp)
   45030:	df000204 	addi	fp,sp,8
   45034:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   45038:	e0bfff17 	ldw	r2,-4(fp)
   4503c:	10800217 	ldw	r2,8(r2)
   45040:	10d00034 	orhi	r3,r2,16384
   45044:	e0bfff17 	ldw	r2,-4(fp)
   45048:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4504c:	e03ffe15 	stw	zero,-8(fp)
   45050:	00001d06 	br	450c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45054:	00800134 	movhi	r2,4
   45058:	109d5b04 	addi	r2,r2,30060
   4505c:	e0fffe17 	ldw	r3,-8(fp)
   45060:	18c00324 	muli	r3,r3,12
   45064:	10c5883a 	add	r2,r2,r3
   45068:	10c00017 	ldw	r3,0(r2)
   4506c:	e0bfff17 	ldw	r2,-4(fp)
   45070:	10800017 	ldw	r2,0(r2)
   45074:	1880111e 	bne	r3,r2,450bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   45078:	00800134 	movhi	r2,4
   4507c:	109d5b04 	addi	r2,r2,30060
   45080:	e0fffe17 	ldw	r3,-8(fp)
   45084:	18c00324 	muli	r3,r3,12
   45088:	10c5883a 	add	r2,r2,r3
   4508c:	10800204 	addi	r2,r2,8
   45090:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   45094:	1000090e 	bge	r2,zero,450bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   45098:	e0bffe17 	ldw	r2,-8(fp)
   4509c:	10c00324 	muli	r3,r2,12
   450a0:	00800134 	movhi	r2,4
   450a4:	109d5b04 	addi	r2,r2,30060
   450a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   450ac:	e0bfff17 	ldw	r2,-4(fp)
   450b0:	18800226 	beq	r3,r2,450bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   450b4:	00bffcc4 	movi	r2,-13
   450b8:	00000806 	br	450dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   450bc:	e0bffe17 	ldw	r2,-8(fp)
   450c0:	10800044 	addi	r2,r2,1
   450c4:	e0bffe15 	stw	r2,-8(fp)
   450c8:	d0a00e17 	ldw	r2,-32712(gp)
   450cc:	1007883a 	mov	r3,r2
   450d0:	e0bffe17 	ldw	r2,-8(fp)
   450d4:	18bfdf2e 	bgeu	r3,r2,45054 <__alt_data_end+0xfffdd054>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   450d8:	0005883a 	mov	r2,zero
}
   450dc:	e037883a 	mov	sp,fp
   450e0:	df000017 	ldw	fp,0(sp)
   450e4:	dec00104 	addi	sp,sp,4
   450e8:	f800283a 	ret

000450ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   450ec:	defff604 	addi	sp,sp,-40
   450f0:	dfc00915 	stw	ra,36(sp)
   450f4:	df000815 	stw	fp,32(sp)
   450f8:	df000804 	addi	fp,sp,32
   450fc:	e13ffd15 	stw	r4,-12(fp)
   45100:	e17ffe15 	stw	r5,-8(fp)
   45104:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   45108:	00bfffc4 	movi	r2,-1
   4510c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   45110:	00bffb44 	movi	r2,-19
   45114:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   45118:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4511c:	d1600c04 	addi	r5,gp,-32720
   45120:	e13ffd17 	ldw	r4,-12(fp)
   45124:	00452c80 	call	452c8 <alt_find_dev>
   45128:	e0bff815 	stw	r2,-32(fp)
   4512c:	e0bff817 	ldw	r2,-32(fp)
   45130:	1000051e 	bne	r2,zero,45148 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   45134:	e13ffd17 	ldw	r4,-12(fp)
   45138:	00453580 	call	45358 <alt_find_file>
   4513c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   45140:	00800044 	movi	r2,1
   45144:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   45148:	e0bff817 	ldw	r2,-32(fp)
   4514c:	10002926 	beq	r2,zero,451f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   45150:	e13ff817 	ldw	r4,-32(fp)
   45154:	00454600 	call	45460 <alt_get_fd>
   45158:	e0bff915 	stw	r2,-28(fp)
   4515c:	e0bff917 	ldw	r2,-28(fp)
   45160:	1000030e 	bge	r2,zero,45170 <open+0x84>
    {
      status = index;
   45164:	e0bff917 	ldw	r2,-28(fp)
   45168:	e0bffa15 	stw	r2,-24(fp)
   4516c:	00002306 	br	451fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   45170:	e0bff917 	ldw	r2,-28(fp)
   45174:	10c00324 	muli	r3,r2,12
   45178:	00800134 	movhi	r2,4
   4517c:	109d5b04 	addi	r2,r2,30060
   45180:	1885883a 	add	r2,r3,r2
   45184:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   45188:	e0fffe17 	ldw	r3,-8(fp)
   4518c:	00900034 	movhi	r2,16384
   45190:	10bfffc4 	addi	r2,r2,-1
   45194:	1886703a 	and	r3,r3,r2
   45198:	e0bffc17 	ldw	r2,-16(fp)
   4519c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   451a0:	e0bffb17 	ldw	r2,-20(fp)
   451a4:	1000051e 	bne	r2,zero,451bc <open+0xd0>
   451a8:	e13ffc17 	ldw	r4,-16(fp)
   451ac:	00450280 	call	45028 <alt_file_locked>
   451b0:	e0bffa15 	stw	r2,-24(fp)
   451b4:	e0bffa17 	ldw	r2,-24(fp)
   451b8:	10001016 	blt	r2,zero,451fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   451bc:	e0bff817 	ldw	r2,-32(fp)
   451c0:	10800317 	ldw	r2,12(r2)
   451c4:	10000826 	beq	r2,zero,451e8 <open+0xfc>
   451c8:	e0bff817 	ldw	r2,-32(fp)
   451cc:	10800317 	ldw	r2,12(r2)
   451d0:	e1ffff17 	ldw	r7,-4(fp)
   451d4:	e1bffe17 	ldw	r6,-8(fp)
   451d8:	e17ffd17 	ldw	r5,-12(fp)
   451dc:	e13ffc17 	ldw	r4,-16(fp)
   451e0:	103ee83a 	callr	r2
   451e4:	00000106 	br	451ec <open+0x100>
   451e8:	0005883a 	mov	r2,zero
   451ec:	e0bffa15 	stw	r2,-24(fp)
   451f0:	00000206 	br	451fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   451f4:	00bffb44 	movi	r2,-19
   451f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   451fc:	e0bffa17 	ldw	r2,-24(fp)
   45200:	1000090e 	bge	r2,zero,45228 <open+0x13c>
  {
    alt_release_fd (index);  
   45204:	e13ff917 	ldw	r4,-28(fp)
   45208:	00452400 	call	45240 <alt_release_fd>
    ALT_ERRNO = -status;
   4520c:	0044fec0 	call	44fec <alt_get_errno>
   45210:	1007883a 	mov	r3,r2
   45214:	e0bffa17 	ldw	r2,-24(fp)
   45218:	0085c83a 	sub	r2,zero,r2
   4521c:	18800015 	stw	r2,0(r3)
    return -1;
   45220:	00bfffc4 	movi	r2,-1
   45224:	00000106 	br	4522c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   45228:	e0bff917 	ldw	r2,-28(fp)
}
   4522c:	e037883a 	mov	sp,fp
   45230:	dfc00117 	ldw	ra,4(sp)
   45234:	df000017 	ldw	fp,0(sp)
   45238:	dec00204 	addi	sp,sp,8
   4523c:	f800283a 	ret

00045240 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   45240:	defffe04 	addi	sp,sp,-8
   45244:	df000115 	stw	fp,4(sp)
   45248:	df000104 	addi	fp,sp,4
   4524c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   45250:	e0bfff17 	ldw	r2,-4(fp)
   45254:	108000d0 	cmplti	r2,r2,3
   45258:	10000d1e 	bne	r2,zero,45290 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   4525c:	00800134 	movhi	r2,4
   45260:	109d5b04 	addi	r2,r2,30060
   45264:	e0ffff17 	ldw	r3,-4(fp)
   45268:	18c00324 	muli	r3,r3,12
   4526c:	10c5883a 	add	r2,r2,r3
   45270:	10800204 	addi	r2,r2,8
   45274:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   45278:	00800134 	movhi	r2,4
   4527c:	109d5b04 	addi	r2,r2,30060
   45280:	e0ffff17 	ldw	r3,-4(fp)
   45284:	18c00324 	muli	r3,r3,12
   45288:	10c5883a 	add	r2,r2,r3
   4528c:	10000015 	stw	zero,0(r2)
  }
}
   45290:	0001883a 	nop
   45294:	e037883a 	mov	sp,fp
   45298:	df000017 	ldw	fp,0(sp)
   4529c:	dec00104 	addi	sp,sp,4
   452a0:	f800283a 	ret

000452a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   452a4:	deffff04 	addi	sp,sp,-4
   452a8:	df000015 	stw	fp,0(sp)
   452ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   452b0:	000170fa 	wrctl	ienable,zero
}
   452b4:	0001883a 	nop
   452b8:	e037883a 	mov	sp,fp
   452bc:	df000017 	ldw	fp,0(sp)
   452c0:	dec00104 	addi	sp,sp,4
   452c4:	f800283a 	ret

000452c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   452c8:	defffa04 	addi	sp,sp,-24
   452cc:	dfc00515 	stw	ra,20(sp)
   452d0:	df000415 	stw	fp,16(sp)
   452d4:	df000404 	addi	fp,sp,16
   452d8:	e13ffe15 	stw	r4,-8(fp)
   452dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   452e0:	e0bfff17 	ldw	r2,-4(fp)
   452e4:	10800017 	ldw	r2,0(r2)
   452e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   452ec:	e13ffe17 	ldw	r4,-8(fp)
   452f0:	0043cbc0 	call	43cbc <strlen>
   452f4:	10800044 	addi	r2,r2,1
   452f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   452fc:	00000d06 	br	45334 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   45300:	e0bffc17 	ldw	r2,-16(fp)
   45304:	10800217 	ldw	r2,8(r2)
   45308:	e0fffd17 	ldw	r3,-12(fp)
   4530c:	180d883a 	mov	r6,r3
   45310:	e17ffe17 	ldw	r5,-8(fp)
   45314:	1009883a 	mov	r4,r2
   45318:	00455b40 	call	455b4 <memcmp>
   4531c:	1000021e 	bne	r2,zero,45328 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   45320:	e0bffc17 	ldw	r2,-16(fp)
   45324:	00000706 	br	45344 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   45328:	e0bffc17 	ldw	r2,-16(fp)
   4532c:	10800017 	ldw	r2,0(r2)
   45330:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   45334:	e0fffc17 	ldw	r3,-16(fp)
   45338:	e0bfff17 	ldw	r2,-4(fp)
   4533c:	18bff01e 	bne	r3,r2,45300 <__alt_data_end+0xfffdd300>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   45340:	0005883a 	mov	r2,zero
}
   45344:	e037883a 	mov	sp,fp
   45348:	dfc00117 	ldw	ra,4(sp)
   4534c:	df000017 	ldw	fp,0(sp)
   45350:	dec00204 	addi	sp,sp,8
   45354:	f800283a 	ret

00045358 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   45358:	defffb04 	addi	sp,sp,-20
   4535c:	dfc00415 	stw	ra,16(sp)
   45360:	df000315 	stw	fp,12(sp)
   45364:	df000304 	addi	fp,sp,12
   45368:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4536c:	d0a00a17 	ldw	r2,-32728(gp)
   45370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   45374:	00003106 	br	4543c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   45378:	e0bffd17 	ldw	r2,-12(fp)
   4537c:	10800217 	ldw	r2,8(r2)
   45380:	1009883a 	mov	r4,r2
   45384:	0043cbc0 	call	43cbc <strlen>
   45388:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4538c:	e0bffd17 	ldw	r2,-12(fp)
   45390:	10c00217 	ldw	r3,8(r2)
   45394:	e0bffe17 	ldw	r2,-8(fp)
   45398:	10bfffc4 	addi	r2,r2,-1
   4539c:	1885883a 	add	r2,r3,r2
   453a0:	10800003 	ldbu	r2,0(r2)
   453a4:	10803fcc 	andi	r2,r2,255
   453a8:	1080201c 	xori	r2,r2,128
   453ac:	10bfe004 	addi	r2,r2,-128
   453b0:	10800bd8 	cmpnei	r2,r2,47
   453b4:	1000031e 	bne	r2,zero,453c4 <alt_find_file+0x6c>
    {
      len -= 1;
   453b8:	e0bffe17 	ldw	r2,-8(fp)
   453bc:	10bfffc4 	addi	r2,r2,-1
   453c0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   453c4:	e0bffe17 	ldw	r2,-8(fp)
   453c8:	e0ffff17 	ldw	r3,-4(fp)
   453cc:	1885883a 	add	r2,r3,r2
   453d0:	10800003 	ldbu	r2,0(r2)
   453d4:	10803fcc 	andi	r2,r2,255
   453d8:	1080201c 	xori	r2,r2,128
   453dc:	10bfe004 	addi	r2,r2,-128
   453e0:	10800be0 	cmpeqi	r2,r2,47
   453e4:	1000081e 	bne	r2,zero,45408 <alt_find_file+0xb0>
   453e8:	e0bffe17 	ldw	r2,-8(fp)
   453ec:	e0ffff17 	ldw	r3,-4(fp)
   453f0:	1885883a 	add	r2,r3,r2
   453f4:	10800003 	ldbu	r2,0(r2)
   453f8:	10803fcc 	andi	r2,r2,255
   453fc:	1080201c 	xori	r2,r2,128
   45400:	10bfe004 	addi	r2,r2,-128
   45404:	10000a1e 	bne	r2,zero,45430 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   45408:	e0bffd17 	ldw	r2,-12(fp)
   4540c:	10800217 	ldw	r2,8(r2)
   45410:	e0fffe17 	ldw	r3,-8(fp)
   45414:	180d883a 	mov	r6,r3
   45418:	e17fff17 	ldw	r5,-4(fp)
   4541c:	1009883a 	mov	r4,r2
   45420:	00455b40 	call	455b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   45424:	1000021e 	bne	r2,zero,45430 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   45428:	e0bffd17 	ldw	r2,-12(fp)
   4542c:	00000706 	br	4544c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   45430:	e0bffd17 	ldw	r2,-12(fp)
   45434:	10800017 	ldw	r2,0(r2)
   45438:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4543c:	e0fffd17 	ldw	r3,-12(fp)
   45440:	d0a00a04 	addi	r2,gp,-32728
   45444:	18bfcc1e 	bne	r3,r2,45378 <__alt_data_end+0xfffdd378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   45448:	0005883a 	mov	r2,zero
}
   4544c:	e037883a 	mov	sp,fp
   45450:	dfc00117 	ldw	ra,4(sp)
   45454:	df000017 	ldw	fp,0(sp)
   45458:	dec00204 	addi	sp,sp,8
   4545c:	f800283a 	ret

00045460 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   45460:	defffc04 	addi	sp,sp,-16
   45464:	df000315 	stw	fp,12(sp)
   45468:	df000304 	addi	fp,sp,12
   4546c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   45470:	00bffa04 	movi	r2,-24
   45474:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   45478:	e03ffd15 	stw	zero,-12(fp)
   4547c:	00001906 	br	454e4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   45480:	00800134 	movhi	r2,4
   45484:	109d5b04 	addi	r2,r2,30060
   45488:	e0fffd17 	ldw	r3,-12(fp)
   4548c:	18c00324 	muli	r3,r3,12
   45490:	10c5883a 	add	r2,r2,r3
   45494:	10800017 	ldw	r2,0(r2)
   45498:	10000f1e 	bne	r2,zero,454d8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   4549c:	00800134 	movhi	r2,4
   454a0:	109d5b04 	addi	r2,r2,30060
   454a4:	e0fffd17 	ldw	r3,-12(fp)
   454a8:	18c00324 	muli	r3,r3,12
   454ac:	10c5883a 	add	r2,r2,r3
   454b0:	e0ffff17 	ldw	r3,-4(fp)
   454b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   454b8:	d0e00e17 	ldw	r3,-32712(gp)
   454bc:	e0bffd17 	ldw	r2,-12(fp)
   454c0:	1880020e 	bge	r3,r2,454cc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   454c4:	e0bffd17 	ldw	r2,-12(fp)
   454c8:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   454cc:	e0bffd17 	ldw	r2,-12(fp)
   454d0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   454d4:	00000606 	br	454f0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   454d8:	e0bffd17 	ldw	r2,-12(fp)
   454dc:	10800044 	addi	r2,r2,1
   454e0:	e0bffd15 	stw	r2,-12(fp)
   454e4:	e0bffd17 	ldw	r2,-12(fp)
   454e8:	10800810 	cmplti	r2,r2,32
   454ec:	103fe41e 	bne	r2,zero,45480 <__alt_data_end+0xfffdd480>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   454f0:	e0bffe17 	ldw	r2,-8(fp)
}
   454f4:	e037883a 	mov	sp,fp
   454f8:	df000017 	ldw	fp,0(sp)
   454fc:	dec00104 	addi	sp,sp,4
   45500:	f800283a 	ret

00045504 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   45504:	defffb04 	addi	sp,sp,-20
   45508:	df000415 	stw	fp,16(sp)
   4550c:	df000404 	addi	fp,sp,16
   45510:	e13ffe15 	stw	r4,-8(fp)
   45514:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   45518:	e0bfff17 	ldw	r2,-4(fp)
   4551c:	10820070 	cmpltui	r2,r2,2049
   45520:	1000021e 	bne	r2,zero,4552c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   45524:	00820004 	movi	r2,2048
   45528:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   4552c:	e0fffe17 	ldw	r3,-8(fp)
   45530:	e0bfff17 	ldw	r2,-4(fp)
   45534:	1885883a 	add	r2,r3,r2
   45538:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4553c:	e0bffe17 	ldw	r2,-8(fp)
   45540:	e0bffc15 	stw	r2,-16(fp)
   45544:	00000506 	br	4555c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   45548:	e0bffc17 	ldw	r2,-16(fp)
   4554c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   45550:	e0bffc17 	ldw	r2,-16(fp)
   45554:	10800804 	addi	r2,r2,32
   45558:	e0bffc15 	stw	r2,-16(fp)
   4555c:	e0fffc17 	ldw	r3,-16(fp)
   45560:	e0bffd17 	ldw	r2,-12(fp)
   45564:	18bff836 	bltu	r3,r2,45548 <__alt_data_end+0xfffdd548>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   45568:	e0bffe17 	ldw	r2,-8(fp)
   4556c:	108007cc 	andi	r2,r2,31
   45570:	10000226 	beq	r2,zero,4557c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   45574:	e0bffc17 	ldw	r2,-16(fp)
   45578:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4557c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   45580:	0001883a 	nop
   45584:	e037883a 	mov	sp,fp
   45588:	df000017 	ldw	fp,0(sp)
   4558c:	dec00104 	addi	sp,sp,4
   45590:	f800283a 	ret

00045594 <exit>:
   45594:	defffe04 	addi	sp,sp,-8
   45598:	000b883a 	mov	r5,zero
   4559c:	dc000015 	stw	r16,0(sp)
   455a0:	dfc00115 	stw	ra,4(sp)
   455a4:	2021883a 	mov	r16,r4
   455a8:	00455e40 	call	455e4 <__call_exitprocs>
   455ac:	8009883a 	mov	r4,r16
   455b0:	00457740 	call	45774 <_exit>

000455b4 <memcmp>:
   455b4:	218d883a 	add	r6,r4,r6
   455b8:	21800826 	beq	r4,r6,455dc <memcmp+0x28>
   455bc:	20800003 	ldbu	r2,0(r4)
   455c0:	28c00003 	ldbu	r3,0(r5)
   455c4:	10c00226 	beq	r2,r3,455d0 <memcmp+0x1c>
   455c8:	10c5c83a 	sub	r2,r2,r3
   455cc:	f800283a 	ret
   455d0:	21000044 	addi	r4,r4,1
   455d4:	29400044 	addi	r5,r5,1
   455d8:	003ff706 	br	455b8 <__alt_data_end+0xfffdd5b8>
   455dc:	0005883a 	mov	r2,zero
   455e0:	f800283a 	ret

000455e4 <__call_exitprocs>:
   455e4:	defff504 	addi	sp,sp,-44
   455e8:	dd000515 	stw	r20,20(sp)
   455ec:	05000134 	movhi	r20,4
   455f0:	dc800315 	stw	r18,12(sp)
   455f4:	dfc00a15 	stw	ra,40(sp)
   455f8:	df000915 	stw	fp,36(sp)
   455fc:	ddc00815 	stw	r23,32(sp)
   45600:	dd800715 	stw	r22,28(sp)
   45604:	dd400615 	stw	r21,24(sp)
   45608:	dcc00415 	stw	r19,16(sp)
   4560c:	dc400215 	stw	r17,8(sp)
   45610:	dc000115 	stw	r16,4(sp)
   45614:	d9000015 	stw	r4,0(sp)
   45618:	2825883a 	mov	r18,r5
   4561c:	a51dc204 	addi	r20,r20,30472
   45620:	a4400017 	ldw	r17,0(r20)
   45624:	8cc00c17 	ldw	r19,48(r17)
   45628:	8c400c04 	addi	r17,r17,48
   4562c:	98004526 	beq	r19,zero,45744 <__call_exitprocs+0x160>
   45630:	9c000117 	ldw	r16,4(r19)
   45634:	00900034 	movhi	r2,16384
   45638:	10bfffc4 	addi	r2,r2,-1
   4563c:	9d402217 	ldw	r21,136(r19)
   45640:	85bfffc4 	addi	r22,r16,-1
   45644:	80a1883a 	add	r16,r16,r2
   45648:	8421883a 	add	r16,r16,r16
   4564c:	8421883a 	add	r16,r16,r16
   45650:	ac2f883a 	add	r23,r21,r16
   45654:	84000204 	addi	r16,r16,8
   45658:	9c21883a 	add	r16,r19,r16
   4565c:	b0002716 	blt	r22,zero,456fc <__call_exitprocs+0x118>
   45660:	90000726 	beq	r18,zero,45680 <__call_exitprocs+0x9c>
   45664:	a800041e 	bne	r21,zero,45678 <__call_exitprocs+0x94>
   45668:	b5bfffc4 	addi	r22,r22,-1
   4566c:	bdffff04 	addi	r23,r23,-4
   45670:	843fff04 	addi	r16,r16,-4
   45674:	003ff906 	br	4565c <__alt_data_end+0xfffdd65c>
   45678:	b9002017 	ldw	r4,128(r23)
   4567c:	913ffa1e 	bne	r18,r4,45668 <__alt_data_end+0xfffdd668>
   45680:	99000117 	ldw	r4,4(r19)
   45684:	82000017 	ldw	r8,0(r16)
   45688:	213fffc4 	addi	r4,r4,-1
   4568c:	b100021e 	bne	r22,r4,45698 <__call_exitprocs+0xb4>
   45690:	9d800115 	stw	r22,4(r19)
   45694:	00000106 	br	4569c <__call_exitprocs+0xb8>
   45698:	80000015 	stw	zero,0(r16)
   4569c:	403ff226 	beq	r8,zero,45668 <__alt_data_end+0xfffdd668>
   456a0:	9f000117 	ldw	fp,4(r19)
   456a4:	a8000526 	beq	r21,zero,456bc <__call_exitprocs+0xd8>
   456a8:	00800044 	movi	r2,1
   456ac:	1592983a 	sll	r9,r2,r22
   456b0:	a9404017 	ldw	r5,256(r21)
   456b4:	494a703a 	and	r5,r9,r5
   456b8:	2800021e 	bne	r5,zero,456c4 <__call_exitprocs+0xe0>
   456bc:	403ee83a 	callr	r8
   456c0:	00000906 	br	456e8 <__call_exitprocs+0x104>
   456c4:	a9004117 	ldw	r4,260(r21)
   456c8:	4908703a 	and	r4,r9,r4
   456cc:	2000041e 	bne	r4,zero,456e0 <__call_exitprocs+0xfc>
   456d0:	b9400017 	ldw	r5,0(r23)
   456d4:	d9000017 	ldw	r4,0(sp)
   456d8:	403ee83a 	callr	r8
   456dc:	00000206 	br	456e8 <__call_exitprocs+0x104>
   456e0:	b9000017 	ldw	r4,0(r23)
   456e4:	403ee83a 	callr	r8
   456e8:	99000117 	ldw	r4,4(r19)
   456ec:	e13fcc1e 	bne	fp,r4,45620 <__alt_data_end+0xfffdd620>
   456f0:	89000017 	ldw	r4,0(r17)
   456f4:	993fdc26 	beq	r19,r4,45668 <__alt_data_end+0xfffdd668>
   456f8:	003fc906 	br	45620 <__alt_data_end+0xfffdd620>
   456fc:	00800034 	movhi	r2,0
   45700:	10800004 	addi	r2,r2,0
   45704:	10000f26 	beq	r2,zero,45744 <__call_exitprocs+0x160>
   45708:	99400117 	ldw	r5,4(r19)
   4570c:	99000017 	ldw	r4,0(r19)
   45710:	2800091e 	bne	r5,zero,45738 <__call_exitprocs+0x154>
   45714:	20000826 	beq	r4,zero,45738 <__call_exitprocs+0x154>
   45718:	89000015 	stw	r4,0(r17)
   4571c:	a8000226 	beq	r21,zero,45728 <__call_exitprocs+0x144>
   45720:	a809883a 	mov	r4,r21
   45724:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45728:	9809883a 	mov	r4,r19
   4572c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   45730:	8cc00017 	ldw	r19,0(r17)
   45734:	003fbd06 	br	4562c <__alt_data_end+0xfffdd62c>
   45738:	9823883a 	mov	r17,r19
   4573c:	2027883a 	mov	r19,r4
   45740:	003fba06 	br	4562c <__alt_data_end+0xfffdd62c>
   45744:	dfc00a17 	ldw	ra,40(sp)
   45748:	df000917 	ldw	fp,36(sp)
   4574c:	ddc00817 	ldw	r23,32(sp)
   45750:	dd800717 	ldw	r22,28(sp)
   45754:	dd400617 	ldw	r21,24(sp)
   45758:	dd000517 	ldw	r20,20(sp)
   4575c:	dcc00417 	ldw	r19,16(sp)
   45760:	dc800317 	ldw	r18,12(sp)
   45764:	dc400217 	ldw	r17,8(sp)
   45768:	dc000117 	ldw	r16,4(sp)
   4576c:	dec00b04 	addi	sp,sp,44
   45770:	f800283a 	ret

00045774 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   45774:	defffd04 	addi	sp,sp,-12
   45778:	df000215 	stw	fp,8(sp)
   4577c:	df000204 	addi	fp,sp,8
   45780:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   45784:	0001883a 	nop
   45788:	e0bfff17 	ldw	r2,-4(fp)
   4578c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   45790:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   45794:	10000226 	beq	r2,zero,457a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   45798:	002af070 	cmpltui	zero,zero,43969
   4579c:	00000106 	br	457a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   457a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   457a4:	003fff06 	br	457a4 <__alt_data_end+0xfffdd7a4>
