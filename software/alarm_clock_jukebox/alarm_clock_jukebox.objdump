
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00006c84 memsz 0x00006c84 flags r-x
    LOAD off    0x00007ca4 vaddr 0x00046ca4 paddr 0x00047044 align 2**12
         filesz 0x000003a0 memsz 0x000003a0 flags rw-
    LOAD off    0x000083e4 vaddr 0x000473e4 paddr 0x000473e4 align 2**12
         filesz 0x00000000 memsz 0x00000138 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004be4  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001e7c  00044e28  00044e28  00005e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003a0  00046ca4  00047044  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000138  000473e4  000473e4  000083e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0004751c  0004751c  00008044  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000698  00000000  00000000  00008068  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000087b2  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e7a  00000000  00000000  00010eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000392d  00000000  00000000  00013d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000012ac  00000000  00000000  0001765c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000020fe  00000000  00000000  00018908  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001308  00000000  00000000  0001aa06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001bd10  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b8  00000000  00000000  0001bd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e22a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0001e22d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e237  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e238  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001e239  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001e23d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001e241  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001e245  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001e250  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001e25b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001e266  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  0001e271  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0001e2d2  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000856a0  00000000  00000000  00023c6c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
00044e28 l    d  .rodata	00000000 .rodata
00046ca4 l    d  .rwdata	00000000 .rwdata
000473e4 l    d  .bss	00000000 .bss
0004751c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0004027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 altera_avalon_pwm_routines.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtttl.c
00000000 l    df *ABS*	00000000 switches.c
000473f8 l     O .bss	00000006 mode.1651
00000000 l    df *ABS*	00000000 time_keeper.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00043358 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00046d50 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00043cb4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00043e0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00043f40 l     F .text	00000034 alt_dev_reg
00046e30 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00044224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00044350 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004437c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004452c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004466c l     F .text	0000003c alt_get_errno
000446a8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00047418 g     O .bss	00000004 alt_instruction_exception_handler
00041648 g     F .text	000000c4 writePWM
00040824 g     F .text	00000048 timerPWMRegisterISR
00041400 g     F .text	00000168 timerPWMISR
00043da0 g     F .text	0000006c alt_main
000432a8 g     F .text	00000080 _puts_r
0004741c g     O .bss	00000100 alt_irq
00047044 g       *ABS*	00000000 __flash_rwdata_start
0004325c g     F .text	0000004c printf
00042800 g     F .text	00000084 getClockTime
00042a18 g     F .text	000000b0 upClockHour
000473f4 g     O .bss	00000004 p
0004075c g     F .text	00000048 buttonsRegisterISR
000415c4 g     F .text	00000038 downVolume
00044924 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047404 g     O .bss	00000004 errno
00047410 g     O .bss	00000004 alt_argv
0004f004 g       *ABS*	00000000 _gp
0004701d g     O .rwdata	00000001 time_format
00040938 g     F .text	00000030 alarmLEDon
00046e84 g     O .rwdata	00000180 alt_fd_list
00044948 g     F .text	00000090 alt_find_dev
000445f0 g     F .text	0000007c alt_io_redirect
00043328 g     F .text	00000014 puts
00044490 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000440a4 g     F .text	000000ec altera_avalon_jtag_uart_read
00043220 g     F .text	0000003c _printf_r
00043164 g     F .text	00000064 .hidden __udivsi3
00044b84 g     F .text	00000090 alt_icache_flush
00047004 g     O .rwdata	00000001 volume
00046ca4 g     O .rwdata	0000007c song
00040714 g     F .text	00000048 switchesRegisterISR
0004703c g     O .rwdata	00000004 alt_max_fd
00047014 g     O .rwdata	00000006 unused_switches
00042fc0 g     F .text	000000ac downAlarmHour
000418c0 g     F .text	00000044 check_return_code
00042b94 g     F .text	000000c8 downClockMinute
00047020 g     O .rwdata	00000004 _global_impure_ptr
00042d3c g     F .text	00000084 getAlarmTime
00041a8c g     F .text	0000008c note2freq
0004751c g       *ABS*	00000000 __bss_end
00043bc4 g     F .text	000000f0 alt_iic_isr_register
00040cec g     F .text	000002c4 switchesISR
00043b78 g     F .text	0000004c alt_ic_irq_enabled
000473fe g     O .bss	00000003 alarm
000415fc g     F .text	0000004c stopPWM
00047408 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00046e5c g     O .rwdata	00000028 alt_dev_null
00044330 g     F .text	00000020 alt_dcache_flush_all
00040abc g     F .text	00000230 timerSecondISR
00047044 g       *ABS*	00000000 __ram_rwdata_end
00042dc0 g     F .text	000000a8 upAlarmMinute
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory
00047034 g     O .rwdata	00000008 alt_dev_list
00043e48 g     F .text	000000f8 write
00042c5c g     F .text	000000ac downClockHour
00046ca4 g       *ABS*	00000000 __ram_rodata_end
000408d8 g     F .text	00000030 timerPWMDisableInterrupt
00044e28 g     O .rodata	0000000b COM_ANODE_SEG_TABLE
00042884 g     F .text	000000cc upClockSecond
000431c8 g     F .text	00000058 .hidden __umodsi3
00040908 g     F .text	00000030 alarmLEDoff
00040968 g     F .text	0000004c alarmLEDtoggle
0004751c g       *ABS*	00000000 end
000473e4 g     O .bss	00000006 mode
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00042f18 g     F .text	000000a8 downAlarmMinute
00068000 g       *ABS*	00000000 __alt_stack_pointer
00044190 g     F .text	00000094 altera_avalon_jtag_uart_write
000433c4 g     F .text	00000524 ___vfprintf_internal_r
00044c64 g     F .text	00000190 __call_exitprocs
00041a10 g     F .text	00000044 upSong
00040244 g     F .text	0000003c _start
00040280 g     F .text	00000064 altera_avalon_pwm_init
00043fac g     F .text	00000038 alt_sys_init
00047008 g     O .rwdata	00000004 defdur
000426e8 g     F .text	0000009c checkInvalidMode
00046ca4 g       *ABS*	00000000 __ram_rwdata_start
00044e28 g       *ABS*	00000000 __ram_rodata_start
0004701a g     O .rwdata	00000003 reset_clock_value
000407a4 g     F .text	00000040 switchesEnableInterrupt
00041588 g     F .text	0000003c upVolume
00043fe4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00044ae0 g     F .text	000000a4 alt_get_fd
00044c34 g     F .text	00000030 memcmp
0004751c g       *ABS*	00000000 __alt_stack_base
00041904 g     F .text	000000ec print_error
00042784 g     F .text	00000044 isPowerOfTwoOrZero
000449d8 g     F .text	00000108 alt_find_file
000443b8 g     F .text	000000a4 alt_dev_llist_insert
000427c8 g     F .text	00000038 resetClockTime
00041e04 g     F .text	00000668 getNote
00047010 g     O .rwdata	00000004 bpm
000402e4 g     F .text	00000054 altera_avalon_pwm_enable
00043904 g     F .text	000000b8 __sfvwrite_small_dev
000473e4 g       *ABS*	00000000 __bss_start
000419f0 g     F .text	00000020 getSong
000409b4 g     F .text	00000108 main
00046d20 g     O .rwdata	00000030 notefreq
00047414 g     O .bss	00000004 alt_envp
00044044 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004086c g     F .text	0000006c timerPWMEnableInterrupt
000403e0 g     F .text	00000080 resetDisplay
00047040 g     O .rwdata	00000004 alt_errno
0004306c g     F .text	00000084 .hidden __divsi3
00042ac8 g     F .text	000000cc downClockSecond
00044e28 g       *ABS*	00000000 __flash_rodata_start
00040388 g     F .text	00000058 altera_avalon_pwm_change_duty_cycle
00043f74 g     F .text	00000038 alt_irq_init
000448c0 g     F .text	00000064 alt_release_fd
000473ec g     O .bss	00000001 song_index
000439bc g     F .text	00000058 _write_r
00042950 g     F .text	000000c8 upClockMinute
00047024 g     O .rwdata	00000004 _impure_ptr
0004740c g     O .bss	00000004 alt_argc
00040020 g       .exceptions	00000000 alt_irq_entry
000406e4 g     F .text	00000030 timerSecondEnableInterrupt
0004702c g     O .rwdata	00000008 alt_fs_list
0004246c g     F .text	0000027c determineMode
00040338 g     F .text	00000050 altera_avalon_pwm_disable
00040020 g       *ABS*	00000000 __ram_exceptions_start
00043a14 g     F .text	00000050 alt_ic_isr_register
00047044 g       *ABS*	00000000 _edata
0004751c g       *ABS*	00000000 _end
00040244 g       *ABS*	00000000 __ram_exceptions_end
000407e4 g     F .text	00000040 buttonsEnableInterrupt
00043aec g     F .text	0000008c alt_ic_irq_disable
00044c14 g     F .text	00000020 exit
000430f0 g     F .text	00000074 .hidden __modsi3
00068000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
0004069c g     F .text	00000048 timerSecondRegisterISR
00042e68 g     F .text	000000b0 upAlarmHour
00044df4 g     F .text	00000034 _exit
00041a54 g     F .text	00000038 downSong
0004333c g     F .text	0000001c strlen
0004476c g     F .text	00000154 open
00041b18 g     F .text	000002ec playSong
00047401 g     O .bss	00000003 clock
00046c0a g     O .rodata	00000060 mode_lookup_table
0004445c g     F .text	00000034 alt_icache_flush_all
00040fb0 g     F .text	00000450 buttonsISR
00047028 g     O .rwdata	00000004 alt_priority_mask
00045258 g     O .rodata	0000000d duty_cycle_lookup_table
00043a64 g     F .text	00000088 alt_ic_irq_enable
000438e8 g     F .text	0000001c __vfprintf_internal
00044260 g     F .text	000000d0 close
00041794 g     F .text	0000012c testPWM
0004700c g     O .rwdata	00000004 defscale
00041568 g     F .text	00000020 getVolume
000473f0 g     O .bss	00000004 silence
00042d08 g     F .text	00000034 resetAlarmTime
00043d1c g     F .text	00000084 alt_load
00040460 g     F .text	0000023c updateDisplay
0004170c g     F .text	00000088 default500HzSquareWave



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd8004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800134 	movhi	r2,4
   40140:	109d0704 	addi	r2,r2,29724
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800134 	movhi	r2,4
   40158:	109d0704 	addi	r2,r2,29724
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffd812c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffd8120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a10517 	ldw	r2,-31724(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a10517 	ldw	r2,-31724(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40244:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   40248:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
   4024c:	06800134 	movhi	gp,4
    ori gp, gp, %lo(_gp)
   40250:	d6bc0114 	ori	gp,gp,61444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40254:	00800134 	movhi	r2,4
    ori r2, r2, %lo(__bss_start)
   40258:	109cf914 	ori	r2,r2,29668

    movhi r3, %hi(__bss_end)
   4025c:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
   40260:	18dd4714 	ori	r3,r3,29980

    beq r2, r3, 1f
   40264:	10c00326 	beq	r2,r3,40274 <_start+0x30>

0:
    stw zero, (r2)
   40268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40270:	10fffd36 	bltu	r2,r3,40268 <__alt_data_end+0xfffd8268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40274:	0043d1c0 	call	43d1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40278:	0043da00 	call	43da0 <alt_main>

0004027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4027c:	003fff06 	br	4027c <__alt_data_end+0xfffd827c>

00040280 <altera_avalon_pwm_init>:

#include "altera_avalon_pwm_routines.h"


int altera_avalon_pwm_init(unsigned int address, unsigned int clock_divider, unsigned int duty_cycle)
{
   40280:	defffc04 	addi	sp,sp,-16
   40284:	df000315 	stw	fp,12(sp)
   40288:	df000304 	addi	fp,sp,12
   4028c:	e13ffd15 	stw	r4,-12(fp)
   40290:	e17ffe15 	stw	r5,-8(fp)
   40294:	e1bfff15 	stw	r6,-4(fp)
	if(duty_cycle > clock_divider)  //duty cycle reg must be less than or equal to clock divider
   40298:	e0bfff17 	ldw	r2,-4(fp)
   4029c:	e0fffe17 	ldw	r3,-8(fp)
   402a0:	1880022e 	bgeu	r3,r2,402ac <altera_avalon_pwm_init+0x2c>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   402a4:	00bfffc4 	movi	r2,-1
   402a8:	00000a06 	br	402d4 <altera_avalon_pwm_init+0x54>
	}
	else
	{
		IOWR_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address, clock_divider - 1);
   402ac:	e0bffd17 	ldw	r2,-12(fp)
   402b0:	e0fffe17 	ldw	r3,-8(fp)
   402b4:	18ffffc4 	addi	r3,r3,-1
   402b8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	10800104 	addi	r2,r2,4
   402c4:	1007883a 	mov	r3,r2
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	18800035 	stwio	r2,0(r3)
	}
	 return ALTERA_AVALON_PWM_OK;
   402d0:	0005883a 	mov	r2,zero
}
   402d4:	e037883a 	mov	sp,fp
   402d8:	df000017 	ldw	fp,0(sp)
   402dc:	dec00104 	addi	sp,sp,4
   402e0:	f800283a 	ret

000402e4 <altera_avalon_pwm_enable>:

int altera_avalon_pwm_enable(unsigned int address)
{
   402e4:	defffe04 	addi	sp,sp,-8
   402e8:	df000115 	stw	fp,4(sp)
   402ec:	df000104 	addi	fp,sp,4
   402f0:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ALTERA_AVALON_PWM_ENABLE_MSK);
   402f4:	e0bfff17 	ldw	r2,-4(fp)
   402f8:	10800204 	addi	r2,r2,8
   402fc:	1007883a 	mov	r3,r2
   40300:	00800044 	movi	r2,1
   40304:	18800035 	stwio	r2,0(r3)
  
  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_ENABLED) //Confirm PWM is enabled
   40308:	e0bfff17 	ldw	r2,-4(fp)
   4030c:	10800204 	addi	r2,r2,8
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	10800060 	cmpeqi	r2,r2,1
   40318:	1000021e 	bne	r2,zero,40324 <altera_avalon_pwm_enable+0x40>
  {
  	return ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR;
   4031c:	00bfff84 	movi	r2,-2
   40320:	00000106 	br	40328 <altera_avalon_pwm_enable+0x44>
  }
  return ALTERA_AVALON_PWM_OK;
   40324:	0005883a 	mov	r2,zero
}
   40328:	e037883a 	mov	sp,fp
   4032c:	df000017 	ldw	fp,0(sp)
   40330:	dec00104 	addi	sp,sp,4
   40334:	f800283a 	ret

00040338 <altera_avalon_pwm_disable>:

int altera_avalon_pwm_disable(unsigned int address)
{
   40338:	defffe04 	addi	sp,sp,-8
   4033c:	df000115 	stw	fp,4(sp)
   40340:	df000104 	addi	fp,sp,4
   40344:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PWM_ENABLE(address, ~ALTERA_AVALON_PWM_ENABLE_MSK);
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10800204 	addi	r2,r2,8
   40350:	1007883a 	mov	r3,r2
   40354:	00bfff84 	movi	r2,-2
   40358:	18800035 	stwio	r2,0(r3)

  if(IORD_ALTERA_AVALON_PWM_ENABLE(address) != ALTERA_AVALON_PWM_DISABLED)  //Confirm PWM is disabled 
   4035c:	e0bfff17 	ldw	r2,-4(fp)
   40360:	10800204 	addi	r2,r2,8
   40364:	10800037 	ldwio	r2,0(r2)
   40368:	10000226 	beq	r2,zero,40374 <altera_avalon_pwm_disable+0x3c>
  {
  	return ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR;
   4036c:	00bfff44 	movi	r2,-3
   40370:	00000106 	br	40378 <altera_avalon_pwm_disable+0x40>
  }
  return ALTERA_AVALON_PWM_OK;
   40374:	0005883a 	mov	r2,zero
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <altera_avalon_pwm_change_duty_cycle>:


int altera_avalon_pwm_change_duty_cycle(unsigned int address, unsigned int duty_cycle)
{
   40388:	defffd04 	addi	sp,sp,-12
   4038c:	df000215 	stw	fp,8(sp)
   40390:	df000204 	addi	fp,sp,8
   40394:	e13ffe15 	stw	r4,-8(fp)
   40398:	e17fff15 	stw	r5,-4(fp)
	if(duty_cycle > IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address))  //duty cycle reg must be less than or equal to clock divider
   4039c:	e0bffe17 	ldw	r2,-8(fp)
   403a0:	10800037 	ldwio	r2,0(r2)
   403a4:	1007883a 	mov	r3,r2
   403a8:	e0bfff17 	ldw	r2,-4(fp)
   403ac:	1880022e 	bgeu	r3,r2,403b8 <altera_avalon_pwm_change_duty_cycle+0x30>
	{
		return ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR;
   403b0:	00bfffc4 	movi	r2,-1
   403b4:	00000606 	br	403d0 <altera_avalon_pwm_change_duty_cycle+0x48>
	}
	else
	{
    IOWR_ALTERA_AVALON_PWM_DUTY_CYCLE(address, duty_cycle);
   403b8:	e0bffe17 	ldw	r2,-8(fp)
   403bc:	10800104 	addi	r2,r2,4
   403c0:	1007883a 	mov	r3,r2
   403c4:	e0bfff17 	ldw	r2,-4(fp)
   403c8:	18800035 	stwio	r2,0(r3)
	}
  return ALTERA_AVALON_PWM_OK;
   403cc:	0005883a 	mov	r2,zero
}
   403d0:	e037883a 	mov	sp,fp
   403d4:	df000017 	ldw	fp,0(sp)
   403d8:	dec00104 	addi	sp,sp,4
   403dc:	f800283a 	ret

000403e0 <resetDisplay>:
#include "display.h"

void resetDisplay(void) {
   403e0:	deffff04 	addi	sp,sp,-4
   403e4:	df000015 	stw	fp,0(sp)
   403e8:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, RESET_DISPLAY_VALUE);
   403ec:	00c03004 	movi	r3,192
   403f0:	00800234 	movhi	r2,8
   403f4:	10841004 	addi	r2,r2,4160
   403f8:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, RESET_DISPLAY_VALUE);
   403fc:	00c03004 	movi	r3,192
   40400:	00800234 	movhi	r2,8
   40404:	10843004 	addi	r2,r2,4288
   40408:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, RESET_DISPLAY_VALUE);
   4040c:	00c03004 	movi	r3,192
   40410:	00800234 	movhi	r2,8
   40414:	10841404 	addi	r2,r2,4176
   40418:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, RESET_DISPLAY_VALUE);
   4041c:	00c03004 	movi	r3,192
   40420:	00800234 	movhi	r2,8
   40424:	10842c04 	addi	r2,r2,4272
   40428:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, RESET_DISPLAY_VALUE);
   4042c:	00c03004 	movi	r3,192
   40430:	00800234 	movhi	r2,8
   40434:	10841804 	addi	r2,r2,4192
   40438:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, RESET_DISPLAY_VALUE);
   4043c:	00c03004 	movi	r3,192
   40440:	00800234 	movhi	r2,8
   40444:	10842804 	addi	r2,r2,4256
   40448:	10c00035 	stwio	r3,0(r2)
}
   4044c:	0001883a 	nop
   40450:	e037883a 	mov	sp,fp
   40454:	df000017 	ldw	fp,0(sp)
   40458:	dec00104 	addi	sp,sp,4
   4045c:	f800283a 	ret

00040460 <updateDisplay>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/
// for the moment, this is hard coded without any for loops
void updateDisplay(struct time time) {
   40460:	defffa04 	addi	sp,sp,-24
   40464:	dfc00515 	stw	ra,20(sp)
   40468:	df000415 	stw	fp,16(sp)
   4046c:	df000404 	addi	fp,sp,16
   40470:	e13fff15 	stw	r4,-4(fp)
  /* determine BCD values for hours, minutes, seconds...
  it's possible that the particular time struct member was set to a predefined
  DIGITS_OFF value, which signifies that the display should CLEAR the associated time unit digits..
  this is a sort of hacky way to check, but for right now it's fine.*/

  if (time.hour == DONT_DISPLAY) {
   40474:	e0bfff03 	ldbu	r2,-4(fp)
   40478:	10803fcc 	andi	r2,r2,255
   4047c:	10801918 	cmpnei	r2,r2,100
   40480:	1000051e 	bne	r2,zero,40498 <updateDisplay+0x38>
    bcd[5] = DIGITS_OFF;
   40484:	00800284 	movi	r2,10
   40488:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = DIGITS_OFF;
   4048c:	00800284 	movi	r2,10
   40490:	e0bffd05 	stb	r2,-12(fp)
   40494:	00000b06 	br	404c4 <updateDisplay+0x64>
  }
  else {
    bcd[5] = time.hour/10;
   40498:	e0bfff03 	ldbu	r2,-4(fp)
   4049c:	10803fcc 	andi	r2,r2,255
   404a0:	01400284 	movi	r5,10
   404a4:	1009883a 	mov	r4,r2
   404a8:	00431640 	call	43164 <__udivsi3>
   404ac:	e0bffd45 	stb	r2,-11(fp)
    bcd[4] = time.hour - bcd[5]*10;
   404b0:	e0bfff03 	ldbu	r2,-4(fp)
   404b4:	e0fffd43 	ldbu	r3,-11(fp)
   404b8:	18fffda4 	muli	r3,r3,-10
   404bc:	10c5883a 	add	r2,r2,r3
   404c0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (time.minute == DONT_DISPLAY) {
   404c4:	e0bfff43 	ldbu	r2,-3(fp)
   404c8:	10803fcc 	andi	r2,r2,255
   404cc:	10801918 	cmpnei	r2,r2,100
   404d0:	1000051e 	bne	r2,zero,404e8 <updateDisplay+0x88>
    bcd[3] = DIGITS_OFF;
   404d4:	00800284 	movi	r2,10
   404d8:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = DIGITS_OFF;
   404dc:	00800284 	movi	r2,10
   404e0:	e0bffc85 	stb	r2,-14(fp)
   404e4:	00000b06 	br	40514 <updateDisplay+0xb4>
  }
  else {
    bcd[3] = time.minute/10;
   404e8:	e0bfff43 	ldbu	r2,-3(fp)
   404ec:	10803fcc 	andi	r2,r2,255
   404f0:	01400284 	movi	r5,10
   404f4:	1009883a 	mov	r4,r2
   404f8:	00431640 	call	43164 <__udivsi3>
   404fc:	e0bffcc5 	stb	r2,-13(fp)
    bcd[2] = time.minute - bcd[3]*10;
   40500:	e0bfff43 	ldbu	r2,-3(fp)
   40504:	e0fffcc3 	ldbu	r3,-13(fp)
   40508:	18fffda4 	muli	r3,r3,-10
   4050c:	10c5883a 	add	r2,r2,r3
   40510:	e0bffc85 	stb	r2,-14(fp)
  }

  if (time.second == DONT_DISPLAY) {
   40514:	e0bfff83 	ldbu	r2,-2(fp)
   40518:	10803fcc 	andi	r2,r2,255
   4051c:	10801918 	cmpnei	r2,r2,100
   40520:	1000051e 	bne	r2,zero,40538 <updateDisplay+0xd8>
    bcd[1] = DIGITS_OFF;
   40524:	00800284 	movi	r2,10
   40528:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = DIGITS_OFF;
   4052c:	00800284 	movi	r2,10
   40530:	e0bffc05 	stb	r2,-16(fp)
   40534:	00000b06 	br	40564 <updateDisplay+0x104>
  }

  else {
    bcd[1] = time.second/10;
   40538:	e0bfff83 	ldbu	r2,-2(fp)
   4053c:	10803fcc 	andi	r2,r2,255
   40540:	01400284 	movi	r5,10
   40544:	1009883a 	mov	r4,r2
   40548:	00431640 	call	43164 <__udivsi3>
   4054c:	e0bffc45 	stb	r2,-15(fp)
    bcd[0] = time.second - bcd[1]*10;
   40550:	e0bfff83 	ldbu	r2,-2(fp)
   40554:	e0fffc43 	ldbu	r3,-15(fp)
   40558:	18fffda4 	muli	r3,r3,-10
   4055c:	10c5883a 	add	r2,r2,r3
   40560:	e0bffc05 	stb	r2,-16(fp)
  }

  // convert BCD values to LED segment values
  ledseg[5] = COM_ANODE_SEG_TABLE[(bcd[5])];
   40564:	e0bffd43 	ldbu	r2,-11(fp)
   40568:	10c03fcc 	andi	r3,r2,255
   4056c:	00800134 	movhi	r2,4
   40570:	10938a04 	addi	r2,r2,20008
   40574:	10c5883a 	add	r2,r2,r3
   40578:	10800003 	ldbu	r2,0(r2)
   4057c:	e0bffec5 	stb	r2,-5(fp)
  ledseg[4] = COM_ANODE_SEG_TABLE[(bcd[4])];
   40580:	e0bffd03 	ldbu	r2,-12(fp)
   40584:	10c03fcc 	andi	r3,r2,255
   40588:	00800134 	movhi	r2,4
   4058c:	10938a04 	addi	r2,r2,20008
   40590:	10c5883a 	add	r2,r2,r3
   40594:	10800003 	ldbu	r2,0(r2)
   40598:	e0bffe85 	stb	r2,-6(fp)
  ledseg[3] = COM_ANODE_SEG_TABLE[(bcd[3])];
   4059c:	e0bffcc3 	ldbu	r2,-13(fp)
   405a0:	10c03fcc 	andi	r3,r2,255
   405a4:	00800134 	movhi	r2,4
   405a8:	10938a04 	addi	r2,r2,20008
   405ac:	10c5883a 	add	r2,r2,r3
   405b0:	10800003 	ldbu	r2,0(r2)
   405b4:	e0bffe45 	stb	r2,-7(fp)
  ledseg[2] = COM_ANODE_SEG_TABLE[(bcd[2])];
   405b8:	e0bffc83 	ldbu	r2,-14(fp)
   405bc:	10c03fcc 	andi	r3,r2,255
   405c0:	00800134 	movhi	r2,4
   405c4:	10938a04 	addi	r2,r2,20008
   405c8:	10c5883a 	add	r2,r2,r3
   405cc:	10800003 	ldbu	r2,0(r2)
   405d0:	e0bffe05 	stb	r2,-8(fp)
  ledseg[1] = COM_ANODE_SEG_TABLE[(bcd[1])];
   405d4:	e0bffc43 	ldbu	r2,-15(fp)
   405d8:	10c03fcc 	andi	r3,r2,255
   405dc:	00800134 	movhi	r2,4
   405e0:	10938a04 	addi	r2,r2,20008
   405e4:	10c5883a 	add	r2,r2,r3
   405e8:	10800003 	ldbu	r2,0(r2)
   405ec:	e0bffdc5 	stb	r2,-9(fp)
  ledseg[0] = COM_ANODE_SEG_TABLE[(bcd[0])];
   405f0:	e0bffc03 	ldbu	r2,-16(fp)
   405f4:	10c03fcc 	andi	r3,r2,255
   405f8:	00800134 	movhi	r2,4
   405fc:	10938a04 	addi	r2,r2,20008
   40600:	10c5883a 	add	r2,r2,r3
   40604:	10800003 	ldbu	r2,0(r2)
   40608:	e0bffd85 	stb	r2,-10(fp)

  // write to display port
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, ledseg[5]);
   4060c:	e0bffec3 	ldbu	r2,-5(fp)
   40610:	10c03fcc 	andi	r3,r2,255
   40614:	00800234 	movhi	r2,8
   40618:	10841004 	addi	r2,r2,4160
   4061c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, ledseg[4]);
   40620:	e0bffe83 	ldbu	r2,-6(fp)
   40624:	10c03fcc 	andi	r3,r2,255
   40628:	00800234 	movhi	r2,8
   4062c:	10843004 	addi	r2,r2,4288
   40630:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE1_BASE, ledseg[3]);
   40634:	e0bffe43 	ldbu	r2,-7(fp)
   40638:	10c03fcc 	andi	r3,r2,255
   4063c:	00800234 	movhi	r2,8
   40640:	10841404 	addi	r2,r2,4176
   40644:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MINUTE0_BASE, ledseg[2]);
   40648:	e0bffe03 	ldbu	r2,-8(fp)
   4064c:	10c03fcc 	andi	r3,r2,255
   40650:	00800234 	movhi	r2,8
   40654:	10842c04 	addi	r2,r2,4272
   40658:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND1_BASE, ledseg[1]);
   4065c:	e0bffdc3 	ldbu	r2,-9(fp)
   40660:	10c03fcc 	andi	r3,r2,255
   40664:	00800234 	movhi	r2,8
   40668:	10841804 	addi	r2,r2,4192
   4066c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SECOND0_BASE, ledseg[0]);
   40670:	e0bffd83 	ldbu	r2,-10(fp)
   40674:	10c03fcc 	andi	r3,r2,255
   40678:	00800234 	movhi	r2,8
   4067c:	10842804 	addi	r2,r2,4256
   40680:	10c00035 	stwio	r3,0(r2)
   40684:	0001883a 	nop
   40688:	e037883a 	mov	sp,fp
   4068c:	dfc00117 	ldw	ra,4(sp)
   40690:	df000017 	ldw	fp,0(sp)
   40694:	dec00204 	addi	sp,sp,8
   40698:	f800283a 	ret

0004069c <timerSecondRegisterISR>:

/* this registration functions receives a pointer to an ISR function which takes
in a pointer to a data structure (isr_context) as a parameter, and does not
return any value (void). ISRFunction() will be called once the timerSecond
interrupt fires, and this ISR resides in main.c */
uint8_t timerSecondRegisterISR(void (*timerSecondISR)(void *isr_context)) {
   4069c:	defffb04 	addi	sp,sp,-20
   406a0:	dfc00415 	stw	ra,16(sp)
   406a4:	df000315 	stw	fp,12(sp)
   406a8:	df000304 	addi	fp,sp,12
   406ac:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   406b0:	d8000015 	stw	zero,0(sp)
   406b4:	000f883a 	mov	r7,zero
   406b8:	e1bfff17 	ldw	r6,-4(fp)
   406bc:	01400044 	movi	r5,1
   406c0:	0009883a 	mov	r4,zero
   406c4:	0043a140 	call	43a14 <alt_ic_isr_register>
   406c8:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_SECOND_IRQ,
                                            timerSecondISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   406cc:	e0bffe03 	ldbu	r2,-8(fp)
}
   406d0:	e037883a 	mov	sp,fp
   406d4:	dfc00117 	ldw	ra,4(sp)
   406d8:	df000017 	ldw	fp,0(sp)
   406dc:	dec00204 	addi	sp,sp,8
   406e0:	f800283a 	ret

000406e4 <timerSecondEnableInterrupt>:

void timerSecondEnableInterrupt(void) {
   406e4:	deffff04 	addi	sp,sp,-4
   406e8:	df000015 	stw	fp,0(sp)
   406ec:	d839883a 	mov	fp,sp
 IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SECOND_BASE,
   406f0:	00c001c4 	movi	r3,7
   406f4:	00800234 	movhi	r2,8
   406f8:	10840904 	addi	r2,r2,4132
   406fc:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   40700:	0001883a 	nop
   40704:	e037883a 	mov	sp,fp
   40708:	df000017 	ldw	fp,0(sp)
   4070c:	dec00104 	addi	sp,sp,4
   40710:	f800283a 	ret

00040714 <switchesRegisterISR>:

uint8_t switchesRegisterISR(void (*switchesISR)(void *isr_context)) {
   40714:	defffb04 	addi	sp,sp,-20
   40718:	dfc00415 	stw	ra,16(sp)
   4071c:	df000315 	stw	fp,12(sp)
   40720:	df000304 	addi	fp,sp,12
   40724:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,
   40728:	d8000015 	stw	zero,0(sp)
   4072c:	000f883a 	mov	r7,zero
   40730:	e1bfff17 	ldw	r6,-4(fp)
   40734:	01400084 	movi	r5,2
   40738:	0009883a 	mov	r4,zero
   4073c:	0043a140 	call	43a14 <alt_ic_isr_register>
   40740:	e0bffe05 	stb	r2,-8(fp)
                                            SWITCHES_IRQ,
                                            switchesISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40744:	e0bffe03 	ldbu	r2,-8(fp)
}
   40748:	e037883a 	mov	sp,fp
   4074c:	dfc00117 	ldw	ra,4(sp)
   40750:	df000017 	ldw	fp,0(sp)
   40754:	dec00204 	addi	sp,sp,8
   40758:	f800283a 	ret

0004075c <buttonsRegisterISR>:


uint8_t buttonsRegisterISR(void (*buttonsISR)(void *isr_context)) {
   4075c:	defffb04 	addi	sp,sp,-20
   40760:	dfc00415 	stw	ra,16(sp)
   40764:	df000315 	stw	fp,12(sp)
   40768:	df000304 	addi	fp,sp,12
   4076c:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
   40770:	d8000015 	stw	zero,0(sp)
   40774:	000f883a 	mov	r7,zero
   40778:	e1bfff17 	ldw	r6,-4(fp)
   4077c:	014000c4 	movi	r5,3
   40780:	0009883a 	mov	r4,zero
   40784:	0043a140 	call	43a14 <alt_ic_isr_register>
   40788:	e0bffe05 	stb	r2,-8(fp)
                                            BUTTONS_IRQ,
                                            buttonsISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   4078c:	e0bffe03 	ldbu	r2,-8(fp)
}
   40790:	e037883a 	mov	sp,fp
   40794:	dfc00117 	ldw	ra,4(sp)
   40798:	df000017 	ldw	fp,0(sp)
   4079c:	dec00204 	addi	sp,sp,8
   407a0:	f800283a 	ret

000407a4 <switchesEnableInterrupt>:


void switchesEnableInterrupt(void) {
   407a4:	deffff04 	addi	sp,sp,-4
   407a8:	df000015 	stw	fp,0(sp)
   407ac:	d839883a 	mov	fp,sp
  // enable all switches to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(SWITCHES_BASE, SWITCHES_INTERRUPT_MASK);
   407b0:	00ffffd4 	movui	r3,65535
   407b4:	00800234 	movhi	r2,8
   407b8:	10843a04 	addi	r2,r2,4328
   407bc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   407c0:	0007883a 	mov	r3,zero
   407c4:	00800234 	movhi	r2,8
   407c8:	10843b04 	addi	r2,r2,4332
   407cc:	10c00035 	stwio	r3,0(r2)
}
   407d0:	0001883a 	nop
   407d4:	e037883a 	mov	sp,fp
   407d8:	df000017 	ldw	fp,0(sp)
   407dc:	dec00104 	addi	sp,sp,4
   407e0:	f800283a 	ret

000407e4 <buttonsEnableInterrupt>:

void buttonsEnableInterrupt(void) {
   407e4:	deffff04 	addi	sp,sp,-4
   407e8:	df000015 	stw	fp,0(sp)
   407ec:	d839883a 	mov	fp,sp
  // enable all buttons to fire interupts
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, BUTTONS_INTERRUPT_MASK);
   407f0:	00c000c4 	movi	r3,3
   407f4:	00800234 	movhi	r2,8
   407f8:	10841e04 	addi	r2,r2,4216
   407fc:	10c00035 	stwio	r3,0(r2)
  
  // reset the edge capture register
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40800:	0007883a 	mov	r3,zero
   40804:	00800234 	movhi	r2,8
   40808:	10841f04 	addi	r2,r2,4220
   4080c:	10c00035 	stwio	r3,0(r2)
}
   40810:	0001883a 	nop
   40814:	e037883a 	mov	sp,fp
   40818:	df000017 	ldw	fp,0(sp)
   4081c:	dec00104 	addi	sp,sp,4
   40820:	f800283a 	ret

00040824 <timerPWMRegisterISR>:


uint8_t timerPWMRegisterISR(void (*timerPWMISR)(void *isr_context)) {
   40824:	defffb04 	addi	sp,sp,-20
   40828:	dfc00415 	stw	ra,16(sp)
   4082c:	df000315 	stw	fp,12(sp)
   40830:	df000304 	addi	fp,sp,12
   40834:	e13fff15 	stw	r4,-4(fp)
  uint8_t isr_register_status;

  isr_register_status = alt_ic_isr_register(TIMER_PWM_IRQ_INTERRUPT_CONTROLLER_ID,
   40838:	d8000015 	stw	zero,0(sp)
   4083c:	000f883a 	mov	r7,zero
   40840:	e1bfff17 	ldw	r6,-4(fp)
   40844:	01400104 	movi	r5,4
   40848:	0009883a 	mov	r4,zero
   4084c:	0043a140 	call	43a14 <alt_ic_isr_register>
   40850:	e0bffe05 	stb	r2,-8(fp)
                                            TIMER_PWM_IRQ,
                                            timerPWMISR,
                                            NULL,
                                            0x0);
  return isr_register_status;
   40854:	e0bffe03 	ldbu	r2,-8(fp)
}
   40858:	e037883a 	mov	sp,fp
   4085c:	dfc00117 	ldw	ra,4(sp)
   40860:	df000017 	ldw	fp,0(sp)
   40864:	dec00204 	addi	sp,sp,8
   40868:	f800283a 	ret

0004086c <timerPWMEnableInterrupt>:

void timerPWMEnableInterrupt(int timeout) {
   4086c:	defffd04 	addi	sp,sp,-12
   40870:	df000215 	stw	fp,8(sp)
   40874:	df000204 	addi	fp,sp,8
   40878:	e13fff15 	stw	r4,-4(fp)
  // timeout is in miliseconds -> convert to seconds
  // set period based on input timeout variable; writing to the period 
  // registers stops the counter which automatically loads reigster value
  uint32_t period = (NIOS_CLOCK_FREQ/1000)*timeout;
   4087c:	e0ffff17 	ldw	r3,-4(fp)
   40880:	00b0d414 	movui	r2,50000
   40884:	1885383a 	mul	r2,r3,r2
   40888:	e0bffe15 	stw	r2,-8(fp)

  //write to high and low registers
  IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_PWM_BASE, period);
   4088c:	e0fffe17 	ldw	r3,-8(fp)
   40890:	00800234 	movhi	r2,8
   40894:	10840204 	addi	r2,r2,4104
   40898:	10c00035 	stwio	r3,0(r2)
  // shift by 16 to take into account high bits
  IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_PWM_BASE, (period >> AVALON_TIMER_PERIOD_WIDTH));
   4089c:	e0bffe17 	ldw	r2,-8(fp)
   408a0:	1004d43a 	srli	r2,r2,16
   408a4:	1007883a 	mov	r3,r2
   408a8:	00800234 	movhi	r2,8
   408ac:	10840304 	addi	r2,r2,4108
   408b0:	10c00035 	stwio	r3,0(r2)

  // start timer and enable interrupt
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 
   408b4:	00c00144 	movi	r3,5
   408b8:	00800234 	movhi	r2,8
   408bc:	10840104 	addi	r2,r2,4100
   408c0:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   408c4:	0001883a 	nop
   408c8:	e037883a 	mov	sp,fp
   408cc:	df000017 	ldw	fp,0(sp)
   408d0:	dec00104 	addi	sp,sp,4
   408d4:	f800283a 	ret

000408d8 <timerPWMDisableInterrupt>:

void timerPWMDisableInterrupt(void) {
   408d8:	deffff04 	addi	sp,sp,-4
   408dc:	df000015 	stw	fp,0(sp)
   408e0:	d839883a 	mov	fp,sp
  // set ITO to 0 (thus disabling interrupts)
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_PWM_BASE, 0);
   408e4:	0007883a 	mov	r3,zero
   408e8:	00800234 	movhi	r2,8
   408ec:	10840104 	addi	r2,r2,4100
   408f0:	10c00035 	stwio	r3,0(r2)
}
   408f4:	0001883a 	nop
   408f8:	e037883a 	mov	sp,fp
   408fc:	df000017 	ldw	fp,0(sp)
   40900:	dec00104 	addi	sp,sp,4
   40904:	f800283a 	ret

00040908 <alarmLEDoff>:
#include "led.h"

void alarmLEDoff(void) {
   40908:	deffff04 	addi	sp,sp,-4
   4090c:	df000015 	stw	fp,0(sp)
   40910:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_OFF);
   40914:	0007883a 	mov	r3,zero
   40918:	00800234 	movhi	r2,8
   4091c:	10842404 	addi	r2,r2,4240
   40920:	10c00035 	stwio	r3,0(r2)
}
   40924:	0001883a 	nop
   40928:	e037883a 	mov	sp,fp
   4092c:	df000017 	ldw	fp,0(sp)
   40930:	dec00104 	addi	sp,sp,4
   40934:	f800283a 	ret

00040938 <alarmLEDon>:

void alarmLEDon(void) {
   40938:	deffff04 	addi	sp,sp,-4
   4093c:	df000015 	stw	fp,0(sp)
   40940:	d839883a 	mov	fp,sp
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, LED_ON);
   40944:	00c00044 	movi	r3,1
   40948:	00800234 	movhi	r2,8
   4094c:	10842404 	addi	r2,r2,4240
   40950:	10c00035 	stwio	r3,0(r2)
}
   40954:	0001883a 	nop
   40958:	e037883a 	mov	sp,fp
   4095c:	df000017 	ldw	fp,0(sp)
   40960:	dec00104 	addi	sp,sp,4
   40964:	f800283a 	ret

00040968 <alarmLEDtoggle>:

void alarmLEDtoggle(void) {
   40968:	defffe04 	addi	sp,sp,-8
   4096c:	df000115 	stw	fp,4(sp)
   40970:	df000104 	addi	fp,sp,4
  volatile uint8_t led_state;
  led_state = IORD_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE);
   40974:	00800234 	movhi	r2,8
   40978:	10842404 	addi	r2,r2,4240
   4097c:	10800037 	ldwio	r2,0(r2)
   40980:	e0bfff05 	stb	r2,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(LED_ALARM_BASE, !led_state);
   40984:	e0bfff03 	ldbu	r2,-4(fp)
   40988:	10803fcc 	andi	r2,r2,255
   4098c:	1005003a 	cmpeq	r2,r2,zero
   40990:	10c03fcc 	andi	r3,r2,255
   40994:	00800234 	movhi	r2,8
   40998:	10842404 	addi	r2,r2,4240
   4099c:	10c00035 	stwio	r3,0(r2)
   409a0:	0001883a 	nop
   409a4:	e037883a 	mov	sp,fp
   409a8:	df000017 	ldw	fp,0(sp)
   409ac:	dec00104 	addi	sp,sp,4
   409b0:	f800283a 	ret

000409b4 <main>:
/* the mode struct is global so that the callback functions 
in main.c can access it and determine the appropiate courses
of action */
struct mode mode;

int main(void) {
   409b4:	defffe04 	addi	sp,sp,-8
   409b8:	dfc00115 	stw	ra,4(sp)
   409bc:	df000015 	stw	fp,0(sp)
   409c0:	d839883a 	mov	fp,sp

  // modde initialization: free running clock mode
  mode.invalid = FALSE;
   409c4:	d020f805 	stb	zero,-31776(gp)
  mode.display = DISP_CLOCK;
   409c8:	d020f845 	stb	zero,-31775(gp)
  mode.alarm = OFF;
   409cc:	d020f885 	stb	zero,-31774(gp)
  mode.config.on = FALSE;
   409d0:	d020f8c5 	stb	zero,-31773(gp)
  mode.config.hour = FALSE;
   409d4:	d020f905 	stb	zero,-31772(gp)
  mode.config.minute = FALSE;
   409d8:	d020f945 	stb	zero,-31771(gp)

  // module intialization
  alarmLEDoff();
   409dc:	00409080 	call	40908 <alarmLEDoff>
  resetClockTime();
   409e0:	00427c80 	call	427c8 <resetClockTime>
  resetAlarmTime();
   409e4:	0042d080 	call	42d08 <resetAlarmTime>
  resetDisplay();
   409e8:	00403e00 	call	403e0 <resetDisplay>

  // ISR registration
  if (timerSecondRegisterISR(&timerSecondISR) == ISR_REGISTRATION_SUCCESS) {
   409ec:	01000134 	movhi	r4,4
   409f0:	2102af04 	addi	r4,r4,2748
   409f4:	004069c0 	call	4069c <timerSecondRegisterISR>
   409f8:	10803fcc 	andi	r2,r2,255
   409fc:	1000051e 	bne	r2,zero,40a14 <main+0x60>
    printf("timerSecondISR successively registered!\n");
   40a00:	01000134 	movhi	r4,4
   40a04:	21138d04 	addi	r4,r4,20020
   40a08:	00433280 	call	43328 <puts>
    timerSecondEnableInterrupt();
   40a0c:	00406e40 	call	406e4 <timerSecondEnableInterrupt>
   40a10:	00000306 	br	40a20 <main+0x6c>
  }
  else {
   printf("ERROR: timerSecondISR unsuccessively registered!\n");
   40a14:	01000134 	movhi	r4,4
   40a18:	21139704 	addi	r4,r4,20060
   40a1c:	00433280 	call	43328 <puts>
  }

  if (switchesRegisterISR(&switchesISR) == ISR_REGISTRATION_SUCCESS) {
   40a20:	01000134 	movhi	r4,4
   40a24:	21033b04 	addi	r4,r4,3308
   40a28:	00407140 	call	40714 <switchesRegisterISR>
   40a2c:	10803fcc 	andi	r2,r2,255
   40a30:	1000051e 	bne	r2,zero,40a48 <main+0x94>
    printf("switchesISR successively registered!\n");
   40a34:	01000134 	movhi	r4,4
   40a38:	2113a404 	addi	r4,r4,20112
   40a3c:	00433280 	call	43328 <puts>
    switchesEnableInterrupt();
   40a40:	00407a40 	call	407a4 <switchesEnableInterrupt>
   40a44:	00000306 	br	40a54 <main+0xa0>
  }
  else {
   printf("ERROR: switchesISR unsuccessively registered!\n");
   40a48:	01000134 	movhi	r4,4
   40a4c:	2113ae04 	addi	r4,r4,20152
   40a50:	00433280 	call	43328 <puts>
  }

  if (buttonsRegisterISR(&buttonsISR) == ISR_REGISTRATION_SUCCESS) {
   40a54:	01000134 	movhi	r4,4
   40a58:	2103ec04 	addi	r4,r4,4016
   40a5c:	004075c0 	call	4075c <buttonsRegisterISR>
   40a60:	10803fcc 	andi	r2,r2,255
   40a64:	1000051e 	bne	r2,zero,40a7c <main+0xc8>
    printf("buttonsISR successively registered!\n");
   40a68:	01000134 	movhi	r4,4
   40a6c:	2113ba04 	addi	r4,r4,20200
   40a70:	00433280 	call	43328 <puts>
    buttonsEnableInterrupt();
   40a74:	00407e40 	call	407e4 <buttonsEnableInterrupt>
   40a78:	00000306 	br	40a88 <main+0xd4>
  }
  else {
   printf("ERROR: buttonsISR unsuccessively registered!\n");
   40a7c:	01000134 	movhi	r4,4
   40a80:	2113c304 	addi	r4,r4,20236
   40a84:	00433280 	call	43328 <puts>
  }

  if (timerPWMRegisterISR(&timerPWMISR) == ISR_REGISTRATION_SUCCESS) {
   40a88:	01000134 	movhi	r4,4
   40a8c:	21050004 	addi	r4,r4,5120
   40a90:	00408240 	call	40824 <timerPWMRegisterISR>
   40a94:	10803fcc 	andi	r2,r2,255
   40a98:	1000041e 	bne	r2,zero,40aac <main+0xf8>
    printf("timerPWMISR successively registered!\n");
   40a9c:	01000134 	movhi	r4,4
   40aa0:	2113cf04 	addi	r4,r4,20284
   40aa4:	00433280 	call	43328 <puts>
   40aa8:	00000306 	br	40ab8 <main+0x104>
  }
  else {
   printf("ERROR: timerPWMISR unsuccessively registered!\n");
   40aac:	01000134 	movhi	r4,4
   40ab0:	2113d904 	addi	r4,r4,20324
   40ab4:	00433280 	call	43328 <puts>
  }

  while(1) {}  
   40ab8:	003fff06 	br	40ab8 <__alt_data_end+0xfffd8ab8>

00040abc <timerSecondISR>:

// -------------- ISR callbacks -------------------

/* ISR: update the time of the clock and depending on whether or not the user
is in config mode, carry the time digits. */
void timerSecondISR(void* isr_context) {
   40abc:	defff804 	addi	sp,sp,-32
   40ac0:	dfc00715 	stw	ra,28(sp)
   40ac4:	df000615 	stw	fp,24(sp)
   40ac8:	df000604 	addi	fp,sp,24
   40acc:	e13fff15 	stw	r4,-4(fp)

  // clear timeout bit because the internal counter for the timer reached zero
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SECOND_BASE, 0);
   40ad0:	0007883a 	mov	r3,zero
   40ad4:	00800234 	movhi	r2,8
   40ad8:	10840804 	addi	r2,r2,4128
   40adc:	10c00035 	stwio	r3,0(r2)

  // temporary time struct for data transfer between modules and for printf debugging
  struct time clock;
 
  if (mode.display == DISP_CLOCK) {
   40ae0:	d0a0f843 	ldbu	r2,-31775(gp)
   40ae4:	10803fcc 	andi	r2,r2,255
   40ae8:	1000611e 	bne	r2,zero,40c70 <timerSecondISR+0x1b4>
    if (mode.config.on == TRUE) {
   40aec:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40af0:	10803fcc 	andi	r2,r2,255
   40af4:	10800058 	cmpnei	r2,r2,1
   40af8:	10000e1e 	bne	r2,zero,40b34 <timerSecondISR+0x78>

      // digits should not carry over while configuring the time
      clock = upClockSecond(CARRY_OFF);
   40afc:	0009883a 	mov	r4,zero
   40b00:	00428840 	call	42884 <upClockSecond>
   40b04:	e0bffa05 	stb	r2,-24(fp)
   40b08:	1006d23a 	srli	r3,r2,8
   40b0c:	1809883a 	mov	r4,r3
   40b10:	00ffffc4 	movi	r3,-1
   40b14:	20c6703a 	and	r3,r4,r3
   40b18:	e0fffa45 	stb	r3,-23(fp)
   40b1c:	1004d43a 	srli	r2,r2,16
   40b20:	1007883a 	mov	r3,r2
   40b24:	00bfffc4 	movi	r2,-1
   40b28:	1884703a 	and	r2,r3,r2
   40b2c:	e0bffa85 	stb	r2,-22(fp)
   40b30:	00004c06 	br	40c64 <timerSecondISR+0x1a8>

    }
    else if (mode.config.on == FALSE) {
   40b34:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40b38:	10803fcc 	andi	r2,r2,255
   40b3c:	1000461e 	bne	r2,zero,40c58 <timerSecondISR+0x19c>

      // since we're not in config mode, the time 
      // should normally count and carry.
      clock = upClockSecond(CARRY_ON);
   40b40:	01000044 	movi	r4,1
   40b44:	00428840 	call	42884 <upClockSecond>
   40b48:	e0bffa05 	stb	r2,-24(fp)
   40b4c:	1006d23a 	srli	r3,r2,8
   40b50:	1809883a 	mov	r4,r3
   40b54:	00ffffc4 	movi	r3,-1
   40b58:	20c6703a 	and	r3,r4,r3
   40b5c:	e0fffa45 	stb	r3,-23(fp)
   40b60:	1004d43a 	srli	r2,r2,16
   40b64:	1007883a 	mov	r3,r2
   40b68:	00bfffc4 	movi	r2,-1
   40b6c:	1884703a 	and	r2,r3,r2
   40b70:	e0bffa85 	stb	r2,-22(fp)

      // check the alarm
      if (mode.alarm == ON) {
   40b74:	d0a0f883 	ldbu	r2,-31774(gp)
   40b78:	10803fcc 	andi	r2,r2,255
   40b7c:	10800058 	cmpnei	r2,r2,1
   40b80:	1000381e 	bne	r2,zero,40c64 <timerSecondISR+0x1a8>

        struct time alarm;
        alarm = getAlarmTime();
   40b84:	0042d3c0 	call	42d3c <getAlarmTime>
   40b88:	e0bffac5 	stb	r2,-21(fp)
   40b8c:	1006d23a 	srli	r3,r2,8
   40b90:	1809883a 	mov	r4,r3
   40b94:	00ffffc4 	movi	r3,-1
   40b98:	20c6703a 	and	r3,r4,r3
   40b9c:	e0fffb05 	stb	r3,-20(fp)
   40ba0:	1004d43a 	srli	r2,r2,16
   40ba4:	1007883a 	mov	r3,r2
   40ba8:	00bfffc4 	movi	r2,-1
   40bac:	1884703a 	and	r2,r3,r2
   40bb0:	e0bffb45 	stb	r2,-19(fp)

        /* to avoid executing the following block of code everytime and to only call playSong() once, 
        we have to check whether or not the time is currently at XX:XX:00. 
        --> at 0 seconds, thats when the alarm will be activated */
        if ( (clock.second == 0) && (alarm.hour == clock.hour) && (alarm.minute == clock.minute) ) {
   40bb4:	e0bffa83 	ldbu	r2,-22(fp)
   40bb8:	10803fcc 	andi	r2,r2,255
   40bbc:	1000291e 	bne	r2,zero,40c64 <timerSecondISR+0x1a8>
   40bc0:	e0fffac3 	ldbu	r3,-21(fp)
   40bc4:	e0bffa03 	ldbu	r2,-24(fp)
   40bc8:	18c03fcc 	andi	r3,r3,255
   40bcc:	10803fcc 	andi	r2,r2,255
   40bd0:	1880241e 	bne	r3,r2,40c64 <timerSecondISR+0x1a8>
   40bd4:	e0fffb03 	ldbu	r3,-20(fp)
   40bd8:	e0bffa43 	ldbu	r2,-23(fp)
   40bdc:	18c03fcc 	andi	r3,r3,255
   40be0:	10803fcc 	andi	r2,r2,255
   40be4:	18801f1e 	bne	r3,r2,40c64 <timerSecondISR+0x1a8>

          // start the alarm!
          struct note_info note;
          note = playSong();
   40be8:	e0bffc04 	addi	r2,fp,-16
   40bec:	1009883a 	mov	r4,r2
   40bf0:	0041b180 	call	41b18 <playSong>

          printf("BEEP! BEEP! BEEP! Alarm has gone off...\n");
   40bf4:	01000134 	movhi	r4,4
   40bf8:	2113e504 	addi	r4,r4,20372
   40bfc:	00433280 	call	43328 <puts>
          printf("note.frequency == %d\n",note.frequency);
   40c00:	e0bffc17 	ldw	r2,-16(fp)
   40c04:	100b883a 	mov	r5,r2
   40c08:	01000134 	movhi	r4,4
   40c0c:	2113ef04 	addi	r4,r4,20412
   40c10:	004325c0 	call	4325c <printf>
          printf("note.duration == %d\n",note.duration);
   40c14:	e0bffd17 	ldw	r2,-12(fp)
   40c18:	100b883a 	mov	r5,r2
   40c1c:	01000134 	movhi	r4,4
   40c20:	2113f504 	addi	r4,r4,20436
   40c24:	004325c0 	call	4325c <printf>
          printf("note.endofsong == %d\n",note.endofsong);
   40c28:	e0bffe17 	ldw	r2,-8(fp)
   40c2c:	100b883a 	mov	r5,r2
   40c30:	01000134 	movhi	r4,4
   40c34:	2113fb04 	addi	r4,r4,20460
   40c38:	004325c0 	call	4325c <printf>

          writePWM(note.frequency);
   40c3c:	e0bffc17 	ldw	r2,-16(fp)
   40c40:	1009883a 	mov	r4,r2
   40c44:	00416480 	call	41648 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   40c48:	e0bffd17 	ldw	r2,-12(fp)
   40c4c:	1009883a 	mov	r4,r2
   40c50:	004086c0 	call	4086c <timerPWMEnableInterrupt>
   40c54:	00000306 	br	40c64 <timerSecondISR+0x1a8>
        }
      }

    }
    else {
      printf("ERROR: mode.config.on has an invalid value\n");
   40c58:	01000134 	movhi	r4,4
   40c5c:	21140104 	addi	r4,r4,20484
   40c60:	00433280 	call	43328 <puts>
    }

    // since we're currently in clock mode, 
    // we have to update the display after every second tick
    updateDisplay(clock);
   40c64:	e13ffa17 	ldw	r4,-24(fp)
   40c68:	00404600 	call	40460 <updateDisplay>
   40c6c:	00000d06 	br	40ca4 <timerSecondISR+0x1e8>

  }
  else {
    // since the current time is not being displayed, 
    // we don't update the display
    clock = upClockSecond(CARRY_ON);
   40c70:	01000044 	movi	r4,1
   40c74:	00428840 	call	42884 <upClockSecond>
   40c78:	e0bffa05 	stb	r2,-24(fp)
   40c7c:	1006d23a 	srli	r3,r2,8
   40c80:	1809883a 	mov	r4,r3
   40c84:	00ffffc4 	movi	r3,-1
   40c88:	20c6703a 	and	r3,r4,r3
   40c8c:	e0fffa45 	stb	r3,-23(fp)
   40c90:	1004d43a 	srli	r2,r2,16
   40c94:	1007883a 	mov	r3,r2
   40c98:	00bfffc4 	movi	r2,-1
   40c9c:	1884703a 	and	r2,r3,r2
   40ca0:	e0bffa85 	stb	r2,-22(fp)
  }

  printf("CLOCK TIME: %d:%d:%d\n",clock.hour,clock.minute,clock.second);
   40ca4:	e0bffa03 	ldbu	r2,-24(fp)
   40ca8:	10803fcc 	andi	r2,r2,255
   40cac:	e0fffa43 	ldbu	r3,-23(fp)
   40cb0:	18c03fcc 	andi	r3,r3,255
   40cb4:	e13ffa83 	ldbu	r4,-22(fp)
   40cb8:	21003fcc 	andi	r4,r4,255
   40cbc:	200f883a 	mov	r7,r4
   40cc0:	180d883a 	mov	r6,r3
   40cc4:	100b883a 	mov	r5,r2
   40cc8:	01000134 	movhi	r4,4
   40ccc:	21140c04 	addi	r4,r4,20528
   40cd0:	004325c0 	call	4325c <printf>

}
   40cd4:	0001883a 	nop
   40cd8:	e037883a 	mov	sp,fp
   40cdc:	dfc00117 	ldw	ra,4(sp)
   40ce0:	df000017 	ldw	fp,0(sp)
   40ce4:	dec00204 	addi	sp,sp,8
   40ce8:	f800283a 	ret

00040cec <switchesISR>:


/* ISR determines user requested mode
Once determined, the system will update the display to match what was requested, 
and perform other actions such as turn on/off the alarm (for example)*/
void switchesISR(void* isr_context) {
   40cec:	defff704 	addi	sp,sp,-36
   40cf0:	dfc00815 	stw	ra,32(sp)
   40cf4:	df000715 	stw	fp,28(sp)
   40cf8:	df000704 	addi	fp,sp,28
   40cfc:	e13fff15 	stw	r4,-4(fp)

  // reset edge capture register by writing to it 
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(SWITCHES_BASE, 0);
   40d00:	0007883a 	mov	r3,zero
   40d04:	00800234 	movhi	r2,8
   40d08:	10843b04 	addi	r2,r2,4332
   40d0c:	10c00035 	stwio	r3,0(r2)

  /* temporary mode struct for data transfer between modules and for testing
  the requested mode based on the switches state */
  struct mode mode_request;

  mode_request = determineMode();
   40d10:	004246c0 	call	4246c <determineMode>
   40d14:	1009883a 	mov	r4,r2
   40d18:	180b883a 	mov	r5,r3
   40d1c:	e13ff905 	stb	r4,-28(fp)
   40d20:	2004d23a 	srli	r2,r4,8
   40d24:	1007883a 	mov	r3,r2
   40d28:	00bfffc4 	movi	r2,-1
   40d2c:	1884703a 	and	r2,r3,r2
   40d30:	e0bff945 	stb	r2,-27(fp)
   40d34:	2004d43a 	srli	r2,r4,16
   40d38:	1007883a 	mov	r3,r2
   40d3c:	00bfffc4 	movi	r2,-1
   40d40:	1884703a 	and	r2,r3,r2
   40d44:	e0bff985 	stb	r2,-26(fp)
   40d48:	2004d63a 	srli	r2,r4,24
   40d4c:	e0bff9c5 	stb	r2,-25(fp)
   40d50:	e17ffa05 	stb	r5,-24(fp)
   40d54:	2804d23a 	srli	r2,r5,8
   40d58:	1007883a 	mov	r3,r2
   40d5c:	00bfffc4 	movi	r2,-1
   40d60:	1884703a 	and	r2,r3,r2
   40d64:	e0bffa45 	stb	r2,-23(fp)

  /* if an invalid mode is requested, nothing needs to change except for the mode struct.
  if a valid mode is requested, we have to determine what display to change to
  and/or if the alarm needs to be turned on/off */
  if (mode_request.invalid == FALSE) {
   40d68:	e0bff903 	ldbu	r2,-28(fp)
   40d6c:	10803fcc 	andi	r2,r2,255
   40d70:	10007a1e 	bne	r2,zero,40f5c <switchesISR+0x270>

    /* don't need to update the display if we're currently displaying the 
    the same mode that was requested */
    if (mode_request.display != mode.display) {
   40d74:	e0fff943 	ldbu	r3,-27(fp)
   40d78:	d0a0f843 	ldbu	r2,-31775(gp)
   40d7c:	18c03fcc 	andi	r3,r3,255
   40d80:	10803fcc 	andi	r2,r2,255
   40d84:	18806226 	beq	r3,r2,40f10 <switchesISR+0x224>
      *** although the struct's name is time, the information located 
      in this struct is not necessarily time data. This struct could contain
      volume or song information as well depending on the switch resolution. */
      struct time display;

      switch(mode_request.display) {
   40d88:	e0bff943 	ldbu	r2,-27(fp)
   40d8c:	10803fcc 	andi	r2,r2,255
   40d90:	10c00060 	cmpeqi	r3,r2,1
   40d94:	1800161e 	bne	r3,zero,40df0 <switchesISR+0x104>
   40d98:	10c00088 	cmpgei	r3,r2,2
   40d9c:	1800021e 	bne	r3,zero,40da8 <switchesISR+0xbc>
   40da0:	10000626 	beq	r2,zero,40dbc <switchesISR+0xd0>
   40da4:	00004806 	br	40ec8 <switchesISR+0x1dc>
   40da8:	10c000a0 	cmpeqi	r3,r2,2
   40dac:	18001d1e 	bne	r3,zero,40e24 <switchesISR+0x138>
   40db0:	108000e0 	cmpeqi	r2,r2,3
   40db4:	1000221e 	bne	r2,zero,40e40 <switchesISR+0x154>
   40db8:	00004306 	br	40ec8 <switchesISR+0x1dc>
        case DISP_CLOCK: 
          display = getClockTime();
   40dbc:	00428000 	call	42800 <getClockTime>
   40dc0:	e0bffa85 	stb	r2,-22(fp)
   40dc4:	1006d23a 	srli	r3,r2,8
   40dc8:	1809883a 	mov	r4,r3
   40dcc:	00ffffc4 	movi	r3,-1
   40dd0:	20c6703a 	and	r3,r4,r3
   40dd4:	e0fffac5 	stb	r3,-21(fp)
   40dd8:	1004d43a 	srli	r2,r2,16
   40ddc:	1007883a 	mov	r3,r2
   40de0:	00bfffc4 	movi	r2,-1
   40de4:	1884703a 	and	r2,r3,r2
   40de8:	e0bffb05 	stb	r2,-20(fp)
          break;
   40dec:	00003906 	br	40ed4 <switchesISR+0x1e8>

        case DISP_ALARM:
          display = getAlarmTime();
   40df0:	0042d3c0 	call	42d3c <getAlarmTime>
   40df4:	e0bffa85 	stb	r2,-22(fp)
   40df8:	1006d23a 	srli	r3,r2,8
   40dfc:	1809883a 	mov	r4,r3
   40e00:	00ffffc4 	movi	r3,-1
   40e04:	20c6703a 	and	r3,r4,r3
   40e08:	e0fffac5 	stb	r3,-21(fp)
   40e0c:	1004d43a 	srli	r2,r2,16
   40e10:	1007883a 	mov	r3,r2
   40e14:	00bfffc4 	movi	r2,-1
   40e18:	1884703a 	and	r2,r3,r2
   40e1c:	e0bffb05 	stb	r2,-20(fp)
          break;
   40e20:	00002c06 	br	40ed4 <switchesISR+0x1e8>

        case DISP_VOLUME:
          /* the current volume will be displayed on the "second" digits for the 7 seg display.
          For the moment this means that we're not going to check if the volume exceeds 99 */
          display.hour = DONT_DISPLAY;
   40e24:	00801904 	movi	r2,100
   40e28:	e0bffa85 	stb	r2,-22(fp)
          display.minute = DONT_DISPLAY;
   40e2c:	00801904 	movi	r2,100
   40e30:	e0bffac5 	stb	r2,-21(fp)
          display.second = getVolume();
   40e34:	00415680 	call	41568 <getVolume>
   40e38:	e0bffb05 	stb	r2,-20(fp)
          break;
   40e3c:	00002506 	br	40ed4 <switchesISR+0x1e8>

        case DISP_SONG:
          /* the current song will be displayed on the "second" digits for the 7 seg display.
          7 segment displays. For the moment this means that we're not going to check 
          if the song index exceeds 99  */
          display.hour = DONT_DISPLAY;
   40e40:	00801904 	movi	r2,100
   40e44:	e0bffa85 	stb	r2,-22(fp)
          display.minute = DONT_DISPLAY;
   40e48:	00801904 	movi	r2,100
   40e4c:	e0bffac5 	stb	r2,-21(fp)
          display.second = getSong();
   40e50:	00419f00 	call	419f0 <getSong>
   40e54:	e0bffb05 	stb	r2,-20(fp)

          struct note_info note;
          note = playSong();
   40e58:	e0bffc04 	addi	r2,fp,-16
   40e5c:	1009883a 	mov	r4,r2
   40e60:	0041b180 	call	41b18 <playSong>

          printf("switch to song display mode...\n");
   40e64:	01000134 	movhi	r4,4
   40e68:	21141204 	addi	r4,r4,20552
   40e6c:	00433280 	call	43328 <puts>
          printf("note.frequency == %d\n",note.frequency);
   40e70:	e0bffc17 	ldw	r2,-16(fp)
   40e74:	100b883a 	mov	r5,r2
   40e78:	01000134 	movhi	r4,4
   40e7c:	2113ef04 	addi	r4,r4,20412
   40e80:	004325c0 	call	4325c <printf>
          printf("note.duration == %d\n",note.duration);
   40e84:	e0bffd17 	ldw	r2,-12(fp)
   40e88:	100b883a 	mov	r5,r2
   40e8c:	01000134 	movhi	r4,4
   40e90:	2113f504 	addi	r4,r4,20436
   40e94:	004325c0 	call	4325c <printf>
          printf("note.endofsong == %d\n",note.endofsong);
   40e98:	e0bffe17 	ldw	r2,-8(fp)
   40e9c:	100b883a 	mov	r5,r2
   40ea0:	01000134 	movhi	r4,4
   40ea4:	2113fb04 	addi	r4,r4,20460
   40ea8:	004325c0 	call	4325c <printf>

          writePWM(note.frequency);
   40eac:	e0bffc17 	ldw	r2,-16(fp)
   40eb0:	1009883a 	mov	r4,r2
   40eb4:	00416480 	call	41648 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   40eb8:	e0bffd17 	ldw	r2,-12(fp)
   40ebc:	1009883a 	mov	r4,r2
   40ec0:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   40ec4:	00000306 	br	40ed4 <switchesISR+0x1e8>

        default:
          printf("ERORR: An invalid display mode is requested\n");
   40ec8:	01000134 	movhi	r4,4
   40ecc:	21141a04 	addi	r4,r4,20584
   40ed0:	00433280 	call	43328 <puts>
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   40ed4:	e0bffa8b 	ldhu	r2,-22(fp)
   40ed8:	e0fffb0b 	ldhu	r3,-20(fp)
   40edc:	18c03fcc 	andi	r3,r3,255
   40ee0:	1806943a 	slli	r3,r3,16
   40ee4:	1888b03a 	or	r4,r3,r2
   40ee8:	0007883a 	mov	r3,zero
   40eec:	00804034 	movhi	r2,256
   40ef0:	10bfffc4 	addi	r2,r2,-1
   40ef4:	2084703a 	and	r2,r4,r2
   40ef8:	18ffc02c 	andhi	r3,r3,65280
   40efc:	1884b03a 	or	r2,r3,r2
   40f00:	1007883a 	mov	r3,r2
   40f04:	1809883a 	mov	r4,r3
   40f08:	00404600 	call	40460 <updateDisplay>
   40f0c:	00000306 	br	40f1c <switchesISR+0x230>
    }

    // occurs when mode_request.display == mode.display
    else { 
      printf("The requested display mode is already active\n");
   40f10:	01000134 	movhi	r4,4
   40f14:	21142504 	addi	r4,r4,20628
   40f18:	00433280 	call	43328 <puts>
    }

    // update the alarm mode if necessary
    if (mode_request.alarm == OFF) {
   40f1c:	e0bff983 	ldbu	r2,-26(fp)
   40f20:	10803fcc 	andi	r2,r2,255
   40f24:	10000b1e 	bne	r2,zero,40f54 <switchesISR+0x268>
      alarmLEDoff();
   40f28:	00409080 	call	40908 <alarmLEDoff>
      /* only stop the song if we're not in the song selection display.
      otherwise, the song that is being sampled while on this display will suddenly
      stop playing. A song should only stop playing if an armed alarm went off,
      and then a user decides to turn off said alarm, OR if a user changes from
      the song display menu to any other menu */
      if (mode_request.display != DISP_SONG) {
   40f2c:	e0bff943 	ldbu	r2,-27(fp)
   40f30:	10803fcc 	andi	r2,r2,255
   40f34:	108000e0 	cmpeqi	r2,r2,3
   40f38:	10000b1e 	bne	r2,zero,40f68 <switchesISR+0x27c>
          printf("song stopped because alarm is off and system is not currently in song display mode!\n");
   40f3c:	01000134 	movhi	r4,4
   40f40:	21143104 	addi	r4,r4,20676
   40f44:	00433280 	call	43328 <puts>

        stopPWM();
   40f48:	00415fc0 	call	415fc <stopPWM>
        timerPWMDisableInterrupt();
   40f4c:	00408d80 	call	408d8 <timerPWMDisableInterrupt>
   40f50:	00000506 	br	40f68 <switchesISR+0x27c>
      }
    }

    // occurs when mode_request.alarm == ON
    else {
      alarmLEDon();
   40f54:	00409380 	call	40938 <alarmLEDon>
   40f58:	00000306 	br	40f68 <switchesISR+0x27c>
    }
  }

  // occurs when mode_request.invalid == TRUE
  else {
    printf("ERROR: An invalid mode was requested\n");
   40f5c:	01000134 	movhi	r4,4
   40f60:	21144604 	addi	r4,r4,20760
   40f64:	00433280 	call	43328 <puts>
  }

  // make sure to update the mode struct before leaving ISR
  mode = mode_request;
   40f68:	e0bff903 	ldbu	r2,-28(fp)
   40f6c:	d0a0f805 	stb	r2,-31776(gp)
   40f70:	e0bff943 	ldbu	r2,-27(fp)
   40f74:	d0a0f845 	stb	r2,-31775(gp)
   40f78:	e0bff983 	ldbu	r2,-26(fp)
   40f7c:	d0a0f885 	stb	r2,-31774(gp)
   40f80:	e0bff9c3 	ldbu	r2,-25(fp)
   40f84:	d0a0f8c5 	stb	r2,-31773(gp)
   40f88:	e0bffa03 	ldbu	r2,-24(fp)
   40f8c:	d0a0f905 	stb	r2,-31772(gp)
   40f90:	e0bffa43 	ldbu	r2,-23(fp)
   40f94:	d0a0f945 	stb	r2,-31771(gp)
  return;
   40f98:	0001883a 	nop
}
   40f9c:	e037883a 	mov	sp,fp
   40fa0:	dfc00117 	ldw	ra,4(sp)
   40fa4:	df000017 	ldw	fp,0(sp)
   40fa8:	dec00204 	addi	sp,sp,8
   40fac:	f800283a 	ret

00040fb0 <buttonsISR>:

/* ISR determines what sort of operation the user wants to perform for the
correctly active display mode (increase/decrease clock time, song select, etc.).
Once the requested operation is determined, the system will 
update the display to match what was requested */
void buttonsISR(void* isr_context) {
   40fb0:	defff904 	addi	sp,sp,-28
   40fb4:	dfc00615 	stw	ra,24(sp)
   40fb8:	df000515 	stw	fp,20(sp)
   40fbc:	df000504 	addi	fp,sp,20
   40fc0:	e13fff15 	stw	r4,-4(fp)

  /* if the user is not currently configuring something (time, alarm, etc), 
  then a button press won't do anything */
  if (mode.config.on == FALSE) {
   40fc4:	d0a0f8c3 	ldbu	r2,-31773(gp)
   40fc8:	10803fcc 	andi	r2,r2,255
   40fcc:	1000081e 	bne	r2,zero,40ff0 <buttonsISR+0x40>
    printf("ERROR: Not currently in config mode! Button press ignored\n");
   40fd0:	01000134 	movhi	r4,4
   40fd4:	21145004 	addi	r4,r4,20800
   40fd8:	00433280 	call	43328 <puts>

    /* don't forget to reset edge capture register by writing to it and before
    exiting ISR */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   40fdc:	0007883a 	mov	r3,zero
   40fe0:	00800234 	movhi	r2,8
   40fe4:	10841f04 	addi	r2,r2,4220
   40fe8:	10c00035 	stwio	r3,0(r2)

    return;
   40fec:	0000ff06 	br	413ec <buttonsISR+0x43c>
  }
  else {
    // determine the operation requested based on the button's state
    uint8_t buttons_state = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
   40ff0:	00800234 	movhi	r2,8
   40ff4:	10841f04 	addi	r2,r2,4220
   40ff8:	10800037 	ldwio	r2,0(r2)
   40ffc:	e0bffb05 	stb	r2,-20(fp)
      struct time display;

      /* what happens next is entirely dependant on what the current display mode is, whether or not 
      the button press was an UP or DOWN operation, and finally if the config was for the 
      minute or hour time units. This scary case statement figures it out */
      switch(mode.display) {
   41000:	d0a0f843 	ldbu	r2,-31775(gp)
   41004:	10803fcc 	andi	r2,r2,255
   41008:	10c00060 	cmpeqi	r3,r2,1
   4100c:	1800551e 	bne	r3,zero,41164 <buttonsISR+0x1b4>
   41010:	10c00088 	cmpgei	r3,r2,2
   41014:	1800021e 	bne	r3,zero,41020 <buttonsISR+0x70>
   41018:	10000626 	beq	r2,zero,41034 <buttonsISR+0x84>
   4101c:	0000d606 	br	41378 <buttonsISR+0x3c8>
   41020:	10c000a0 	cmpeqi	r3,r2,2
   41024:	1800991e 	bne	r3,zero,4128c <buttonsISR+0x2dc>
   41028:	108000e0 	cmpeqi	r2,r2,3
   4102c:	1000a71e 	bne	r2,zero,412cc <buttonsISR+0x31c>
   41030:	0000d106 	br	41378 <buttonsISR+0x3c8>

        case DISP_CLOCK: 

          if (buttons_state == UP) {
   41034:	e0bffb03 	ldbu	r2,-20(fp)
   41038:	10800098 	cmpnei	r2,r2,2
   4103c:	1000231e 	bne	r2,zero,410cc <buttonsISR+0x11c>
            if (mode.config.hour == TRUE) {
   41040:	d0a0f903 	ldbu	r2,-31772(gp)
   41044:	10803fcc 	andi	r2,r2,255
   41048:	10800058 	cmpnei	r2,r2,1
   4104c:	10000d1e 	bne	r2,zero,41084 <buttonsISR+0xd4>
              display = upClockHour();
   41050:	0042a180 	call	42a18 <upClockHour>
   41054:	e0bffb45 	stb	r2,-19(fp)
   41058:	1006d23a 	srli	r3,r2,8
   4105c:	1809883a 	mov	r4,r3
   41060:	00ffffc4 	movi	r3,-1
   41064:	20c6703a 	and	r3,r4,r3
   41068:	e0fffb85 	stb	r3,-18(fp)
   4106c:	1004d43a 	srli	r2,r2,16
   41070:	1007883a 	mov	r3,r2
   41074:	00bfffc4 	movi	r2,-1
   41078:	1884703a 	and	r2,r3,r2
   4107c:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41080:	0000c106 	br	41388 <buttonsISR+0x3d8>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upClockHour();
            }
            else if (mode.config.minute == TRUE) {
   41084:	d0a0f943 	ldbu	r2,-31771(gp)
   41088:	10803fcc 	andi	r2,r2,255
   4108c:	10800058 	cmpnei	r2,r2,1
   41090:	1000bd1e 	bne	r2,zero,41388 <buttonsISR+0x3d8>
              display = upClockMinute(CARRY_OFF);
   41094:	0009883a 	mov	r4,zero
   41098:	00429500 	call	42950 <upClockMinute>
   4109c:	e0bffb45 	stb	r2,-19(fp)
   410a0:	1006d23a 	srli	r3,r2,8
   410a4:	1809883a 	mov	r4,r3
   410a8:	00ffffc4 	movi	r3,-1
   410ac:	20c6703a 	and	r3,r4,r3
   410b0:	e0fffb85 	stb	r3,-18(fp)
   410b4:	1004d43a 	srli	r2,r2,16
   410b8:	1007883a 	mov	r3,r2
   410bc:	00bfffc4 	movi	r2,-1
   410c0:	1884703a 	and	r2,r3,r2
   410c4:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   410c8:	0000af06 	br	41388 <buttonsISR+0x3d8>
            }
            else if (mode.config.minute == TRUE) {
              display = upClockMinute(CARRY_OFF);
            }
          }
          else if (buttons_state == DOWN) {
   410cc:	e0bffb03 	ldbu	r2,-20(fp)
   410d0:	10800058 	cmpnei	r2,r2,1
   410d4:	1000ac1e 	bne	r2,zero,41388 <buttonsISR+0x3d8>
            if (mode.config.hour == TRUE) {
   410d8:	d0a0f903 	ldbu	r2,-31772(gp)
   410dc:	10803fcc 	andi	r2,r2,255
   410e0:	10800058 	cmpnei	r2,r2,1
   410e4:	10000d1e 	bne	r2,zero,4111c <buttonsISR+0x16c>
              display = downClockHour();
   410e8:	0042c5c0 	call	42c5c <downClockHour>
   410ec:	e0bffb45 	stb	r2,-19(fp)
   410f0:	1006d23a 	srli	r3,r2,8
   410f4:	1809883a 	mov	r4,r3
   410f8:	00ffffc4 	movi	r3,-1
   410fc:	20c6703a 	and	r3,r4,r3
   41100:	e0fffb85 	stb	r3,-18(fp)
   41104:	1004d43a 	srli	r2,r2,16
   41108:	1007883a 	mov	r3,r2
   4110c:	00bfffc4 	movi	r2,-1
   41110:	1884703a 	and	r2,r3,r2
   41114:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41118:	00009b06 	br	41388 <buttonsISR+0x3d8>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downClockHour();
            }
            else if (mode.config.minute == TRUE) {
   4111c:	d0a0f943 	ldbu	r2,-31771(gp)
   41120:	10803fcc 	andi	r2,r2,255
   41124:	10800058 	cmpnei	r2,r2,1
   41128:	1000971e 	bne	r2,zero,41388 <buttonsISR+0x3d8>
              display = downClockMinute(CARRY_OFF);
   4112c:	0009883a 	mov	r4,zero
   41130:	0042b940 	call	42b94 <downClockMinute>
   41134:	e0bffb45 	stb	r2,-19(fp)
   41138:	1006d23a 	srli	r3,r2,8
   4113c:	1809883a 	mov	r4,r3
   41140:	00ffffc4 	movi	r3,-1
   41144:	20c6703a 	and	r3,r4,r3
   41148:	e0fffb85 	stb	r3,-18(fp)
   4114c:	1004d43a 	srli	r2,r2,16
   41150:	1007883a 	mov	r3,r2
   41154:	00bfffc4 	movi	r2,-1
   41158:	1884703a 	and	r2,r3,r2
   4115c:	e0bffbc5 	stb	r2,-17(fp)
            }
          }
          break;
   41160:	00008906 	br	41388 <buttonsISR+0x3d8>

        case DISP_ALARM:

          if (buttons_state == UP) {
   41164:	e0bffb03 	ldbu	r2,-20(fp)
   41168:	10800098 	cmpnei	r2,r2,2
   4116c:	1000221e 	bne	r2,zero,411f8 <buttonsISR+0x248>
            if (mode.config.hour == TRUE) {
   41170:	d0a0f903 	ldbu	r2,-31772(gp)
   41174:	10803fcc 	andi	r2,r2,255
   41178:	10800058 	cmpnei	r2,r2,1
   4117c:	10000d1e 	bne	r2,zero,411b4 <buttonsISR+0x204>
              display = upAlarmHour();
   41180:	0042e680 	call	42e68 <upAlarmHour>
   41184:	e0bffb45 	stb	r2,-19(fp)
   41188:	1006d23a 	srli	r3,r2,8
   4118c:	1809883a 	mov	r4,r3
   41190:	00ffffc4 	movi	r3,-1
   41194:	20c6703a 	and	r3,r4,r3
   41198:	e0fffb85 	stb	r3,-18(fp)
   4119c:	1004d43a 	srli	r2,r2,16
   411a0:	1007883a 	mov	r3,r2
   411a4:	00bfffc4 	movi	r2,-1
   411a8:	1884703a 	and	r2,r3,r2
   411ac:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   411b0:	00007706 	br	41390 <buttonsISR+0x3e0>

          if (buttons_state == UP) {
            if (mode.config.hour == TRUE) {
              display = upAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   411b4:	d0a0f943 	ldbu	r2,-31771(gp)
   411b8:	10803fcc 	andi	r2,r2,255
   411bc:	10800058 	cmpnei	r2,r2,1
   411c0:	1000731e 	bne	r2,zero,41390 <buttonsISR+0x3e0>
              display = upAlarmMinute();
   411c4:	0042dc00 	call	42dc0 <upAlarmMinute>
   411c8:	e0bffb45 	stb	r2,-19(fp)
   411cc:	1006d23a 	srli	r3,r2,8
   411d0:	1809883a 	mov	r4,r3
   411d4:	00ffffc4 	movi	r3,-1
   411d8:	20c6703a 	and	r3,r4,r3
   411dc:	e0fffb85 	stb	r3,-18(fp)
   411e0:	1004d43a 	srli	r2,r2,16
   411e4:	1007883a 	mov	r3,r2
   411e8:	00bfffc4 	movi	r2,-1
   411ec:	1884703a 	and	r2,r3,r2
   411f0:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   411f4:	00006606 	br	41390 <buttonsISR+0x3e0>
            }
            else if (mode.config.minute == TRUE) {
              display = upAlarmMinute();
            }
          }
          else if (buttons_state == DOWN) {
   411f8:	e0bffb03 	ldbu	r2,-20(fp)
   411fc:	10800058 	cmpnei	r2,r2,1
   41200:	1000631e 	bne	r2,zero,41390 <buttonsISR+0x3e0>
            if (mode.config.hour == TRUE) {
   41204:	d0a0f903 	ldbu	r2,-31772(gp)
   41208:	10803fcc 	andi	r2,r2,255
   4120c:	10800058 	cmpnei	r2,r2,1
   41210:	10000d1e 	bne	r2,zero,41248 <buttonsISR+0x298>
              display = downAlarmHour();
   41214:	0042fc00 	call	42fc0 <downAlarmHour>
   41218:	e0bffb45 	stb	r2,-19(fp)
   4121c:	1006d23a 	srli	r3,r2,8
   41220:	1809883a 	mov	r4,r3
   41224:	00ffffc4 	movi	r3,-1
   41228:	20c6703a 	and	r3,r4,r3
   4122c:	e0fffb85 	stb	r3,-18(fp)
   41230:	1004d43a 	srli	r2,r2,16
   41234:	1007883a 	mov	r3,r2
   41238:	00bfffc4 	movi	r2,-1
   4123c:	1884703a 	and	r2,r3,r2
   41240:	e0bffbc5 	stb	r2,-17(fp)
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41244:	00005206 	br	41390 <buttonsISR+0x3e0>
          }
          else if (buttons_state == DOWN) {
            if (mode.config.hour == TRUE) {
              display = downAlarmHour();
            }
            else if (mode.config.minute == TRUE) {
   41248:	d0a0f943 	ldbu	r2,-31771(gp)
   4124c:	10803fcc 	andi	r2,r2,255
   41250:	10800058 	cmpnei	r2,r2,1
   41254:	10004e1e 	bne	r2,zero,41390 <buttonsISR+0x3e0>
              display = downAlarmMinute();
   41258:	0042f180 	call	42f18 <downAlarmMinute>
   4125c:	e0bffb45 	stb	r2,-19(fp)
   41260:	1006d23a 	srli	r3,r2,8
   41264:	1809883a 	mov	r4,r3
   41268:	00ffffc4 	movi	r3,-1
   4126c:	20c6703a 	and	r3,r4,r3
   41270:	e0fffb85 	stb	r3,-18(fp)
   41274:	1004d43a 	srli	r2,r2,16
   41278:	1007883a 	mov	r3,r2
   4127c:	00bfffc4 	movi	r2,-1
   41280:	1884703a 	and	r2,r3,r2
   41284:	e0bffbc5 	stb	r2,-17(fp)
            }
          }
          break;
   41288:	00004106 	br	41390 <buttonsISR+0x3e0>


        case DISP_VOLUME:

          display.hour = DONT_DISPLAY;
   4128c:	00801904 	movi	r2,100
   41290:	e0bffb45 	stb	r2,-19(fp)
          display.minute = DONT_DISPLAY;
   41294:	00801904 	movi	r2,100
   41298:	e0bffb85 	stb	r2,-18(fp)
          if (buttons_state == UP) {
   4129c:	e0bffb03 	ldbu	r2,-20(fp)
   412a0:	10800098 	cmpnei	r2,r2,2
   412a4:	1000031e 	bne	r2,zero,412b4 <buttonsISR+0x304>
            display.second = upVolume();
   412a8:	00415880 	call	41588 <upVolume>
   412ac:	e0bffbc5 	stb	r2,-17(fp)
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   412b0:	00003906 	br	41398 <buttonsISR+0x3e8>
          display.hour = DONT_DISPLAY;
          display.minute = DONT_DISPLAY;
          if (buttons_state == UP) {
            display.second = upVolume();
          }
          else if (buttons_state == DOWN) {
   412b4:	e0bffb03 	ldbu	r2,-20(fp)
   412b8:	10800058 	cmpnei	r2,r2,1
   412bc:	1000361e 	bne	r2,zero,41398 <buttonsISR+0x3e8>
            display.second = downVolume();
   412c0:	00415c40 	call	415c4 <downVolume>
   412c4:	e0bffbc5 	stb	r2,-17(fp)
          }
          
          break;
   412c8:	00003306 	br	41398 <buttonsISR+0x3e8>

        case DISP_SONG:

          display.hour = DONT_DISPLAY;
   412cc:	00801904 	movi	r2,100
   412d0:	e0bffb45 	stb	r2,-19(fp)
          display.minute = DONT_DISPLAY;
   412d4:	00801904 	movi	r2,100
   412d8:	e0bffb85 	stb	r2,-18(fp)
          if (buttons_state == UP) {
   412dc:	e0bffb03 	ldbu	r2,-20(fp)
   412e0:	10800098 	cmpnei	r2,r2,2
   412e4:	1000031e 	bne	r2,zero,412f4 <buttonsISR+0x344>
            display.second = upSong();
   412e8:	0041a100 	call	41a10 <upSong>
   412ec:	e0bffbc5 	stb	r2,-17(fp)
   412f0:	00000506 	br	41308 <buttonsISR+0x358>
          }
          else if (buttons_state == DOWN) {
   412f4:	e0bffb03 	ldbu	r2,-20(fp)
   412f8:	10800058 	cmpnei	r2,r2,1
   412fc:	1000021e 	bne	r2,zero,41308 <buttonsISR+0x358>
            display.second = downSong();
   41300:	0041a540 	call	41a54 <downSong>
   41304:	e0bffbc5 	stb	r2,-17(fp)
          }

          struct note_info note;
          note = playSong();
   41308:	e0bffc04 	addi	r2,fp,-16
   4130c:	1009883a 	mov	r4,r2
   41310:	0041b180 	call	41b18 <playSong>

          printf("button input while in display song mode...\n");
   41314:	01000134 	movhi	r4,4
   41318:	21145f04 	addi	r4,r4,20860
   4131c:	00433280 	call	43328 <puts>
          printf("note.frequency == %d\n",note.frequency);
   41320:	e0bffc17 	ldw	r2,-16(fp)
   41324:	100b883a 	mov	r5,r2
   41328:	01000134 	movhi	r4,4
   4132c:	2113ef04 	addi	r4,r4,20412
   41330:	004325c0 	call	4325c <printf>
          printf("note.duration == %d\n",note.duration);
   41334:	e0bffd17 	ldw	r2,-12(fp)
   41338:	100b883a 	mov	r5,r2
   4133c:	01000134 	movhi	r4,4
   41340:	2113f504 	addi	r4,r4,20436
   41344:	004325c0 	call	4325c <printf>
          printf("note.endofsong == %d\n",note.endofsong);
   41348:	e0bffe17 	ldw	r2,-8(fp)
   4134c:	100b883a 	mov	r5,r2
   41350:	01000134 	movhi	r4,4
   41354:	2113fb04 	addi	r4,r4,20460
   41358:	004325c0 	call	4325c <printf>
          writePWM(note.frequency);
   4135c:	e0bffc17 	ldw	r2,-16(fp)
   41360:	1009883a 	mov	r4,r2
   41364:	00416480 	call	41648 <writePWM>
          timerPWMEnableInterrupt(note.duration);
   41368:	e0bffd17 	ldw	r2,-12(fp)
   4136c:	1009883a 	mov	r4,r2
   41370:	004086c0 	call	4086c <timerPWMEnableInterrupt>

          break;
   41374:	00000906 	br	4139c <buttonsISR+0x3ec>

        default:
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
   41378:	01000134 	movhi	r4,4
   4137c:	21146a04 	addi	r4,r4,20904
   41380:	00433280 	call	43328 <puts>
   41384:	00000506 	br	4139c <buttonsISR+0x3ec>
            }
            else if (mode.config.minute == TRUE) {
              display = downClockMinute(CARRY_OFF);
            }
          }
          break;
   41388:	0001883a 	nop
   4138c:	00000306 	br	4139c <buttonsISR+0x3ec>
            }
            else if (mode.config.minute == TRUE) {
              display = downAlarmMinute();
            }
          }
          break;
   41390:	0001883a 	nop
   41394:	00000106 	br	4139c <buttonsISR+0x3ec>
          }
          else if (buttons_state == DOWN) {
            display.second = downVolume();
          }
          
          break;
   41398:	0001883a 	nop
          // if the switches.c module didn't mess up, this should never print!
          printf("ERORR: The system is currently in an invalid display mode!!\n");
      }

      // since the display mode was changed, we'll have to update the display
      updateDisplay(display);  
   4139c:	e0bffb43 	ldbu	r2,-19(fp)
   413a0:	e0fffb83 	ldbu	r3,-18(fp)
   413a4:	1806923a 	slli	r3,r3,8
   413a8:	1884b03a 	or	r2,r3,r2
   413ac:	e0fffbc3 	ldbu	r3,-17(fp)
   413b0:	1806943a 	slli	r3,r3,16
   413b4:	1888b03a 	or	r4,r3,r2
   413b8:	0007883a 	mov	r3,zero
   413bc:	00804034 	movhi	r2,256
   413c0:	10bfffc4 	addi	r2,r2,-1
   413c4:	2084703a 	and	r2,r4,r2
   413c8:	18ffc02c 	andhi	r3,r3,65280
   413cc:	1884b03a 	or	r2,r3,r2
   413d0:	1007883a 	mov	r3,r2
   413d4:	1809883a 	mov	r4,r3
   413d8:	00404600 	call	40460 <updateDisplay>
    }

  // we can't forget to reset edge capture register by writing to it!
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   413dc:	0007883a 	mov	r3,zero
   413e0:	00800234 	movhi	r2,8
   413e4:	10841f04 	addi	r2,r2,4220
   413e8:	10c00035 	stwio	r3,0(r2)

}
   413ec:	e037883a 	mov	sp,fp
   413f0:	dfc00117 	ldw	ra,4(sp)
   413f4:	df000017 	ldw	fp,0(sp)
   413f8:	dec00204 	addi	sp,sp,8
   413fc:	f800283a 	ret

00041400 <timerPWMISR>:


void timerPWMISR(void* isr_context) {
   41400:	defff704 	addi	sp,sp,-36
   41404:	dfc00815 	stw	ra,32(sp)
   41408:	df000715 	stw	fp,28(sp)
   4140c:	df000704 	addi	fp,sp,28
   41410:	e13ffc15 	stw	r4,-16(fp)

  printf("timerPWMISR has fired!\n");
   41414:	01000134 	movhi	r4,4
   41418:	21147904 	addi	r4,r4,20964
   4141c:	00433280 	call	43328 <puts>

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. 
  The TO bit is cleared by writing 0 to the status register. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_PWM_BASE, 0);
   41420:	0007883a 	mov	r3,zero
   41424:	00800234 	movhi	r2,8
   41428:	10840004 	addi	r2,r2,4096
   4142c:	10c00035 	stwio	r3,0(r2)

  struct note_info note;

  note = getNote();
   41430:	e13ff904 	addi	r4,fp,-28
   41434:	0041e040 	call	41e04 <getNote>
  printf("note.frequency == %d\n",note.frequency);
   41438:	e0bff917 	ldw	r2,-28(fp)
   4143c:	100b883a 	mov	r5,r2
   41440:	01000134 	movhi	r4,4
   41444:	2113ef04 	addi	r4,r4,20412
   41448:	004325c0 	call	4325c <printf>
  printf("note.duration == %d\n",note.duration);
   4144c:	e0bffa17 	ldw	r2,-24(fp)
   41450:	100b883a 	mov	r5,r2
   41454:	01000134 	movhi	r4,4
   41458:	2113f504 	addi	r4,r4,20436
   4145c:	004325c0 	call	4325c <printf>
  printf("note.endofsong == %d\n",note.endofsong);
   41460:	e0bffb17 	ldw	r2,-20(fp)
   41464:	100b883a 	mov	r5,r2
   41468:	01000134 	movhi	r4,4
   4146c:	2113fb04 	addi	r4,r4,20460
   41470:	004325c0 	call	4325c <printf>

  if (note.endofsong == FALSE) {
   41474:	e0bffb17 	ldw	r2,-20(fp)
   41478:	1000071e 	bne	r2,zero,41498 <timerPWMISR+0x98>
    writePWM(note.frequency);
   4147c:	e0bff917 	ldw	r2,-28(fp)
   41480:	1009883a 	mov	r4,r2
   41484:	00416480 	call	41648 <writePWM>
    timerPWMEnableInterrupt(note.duration);
   41488:	e0bffa17 	ldw	r2,-24(fp)
   4148c:	1009883a 	mov	r4,r2
   41490:	004086c0 	call	4086c <timerPWMEnableInterrupt>
      writePWM(note.frequency);
      timerPWMEnableInterrupt(note.duration);  
    }
  }

}
   41494:	00002e06 	br	41550 <timerPWMISR+0x150>

  if (note.endofsong == FALSE) {
    writePWM(note.frequency);
    timerPWMEnableInterrupt(note.duration);
  }
  else if (note.endofsong == TRUE) {
   41498:	e0bffb17 	ldw	r2,-20(fp)
   4149c:	10800058 	cmpnei	r2,r2,1
   414a0:	10002b1e 	bne	r2,zero,41550 <timerPWMISR+0x150>
    if (mode.display == DISP_SONG) {
   414a4:	d0a0f843 	ldbu	r2,-31775(gp)
   414a8:	10803fcc 	andi	r2,r2,255
   414ac:	108000d8 	cmpnei	r2,r2,3
   414b0:	1000061e 	bne	r2,zero,414cc <timerPWMISR+0xcc>
      printf("song played through once while in display song mode...\n");
   414b4:	01000134 	movhi	r4,4
   414b8:	21147f04 	addi	r4,r4,20988
   414bc:	00433280 	call	43328 <puts>
      stopPWM();
   414c0:	00415fc0 	call	415fc <stopPWM>
      timerPWMDisableInterrupt();
   414c4:	00408d80 	call	408d8 <timerPWMDisableInterrupt>
      writePWM(note.frequency);
      timerPWMEnableInterrupt(note.duration);  
    }
  }

}
   414c8:	00002106 	br	41550 <timerPWMISR+0x150>
      printf("song played through once while in display song mode...\n");
      stopPWM();
      timerPWMDisableInterrupt();
    }
    else {
      printf("Turn off alarm to stop the song!\n");
   414cc:	01000134 	movhi	r4,4
   414d0:	21148d04 	addi	r4,r4,21044
   414d4:	00433280 	call	43328 <puts>
      note = playSong();
   414d8:	e0bffd04 	addi	r2,fp,-12
   414dc:	1009883a 	mov	r4,r2
   414e0:	0041b180 	call	41b18 <playSong>
   414e4:	e0bffd17 	ldw	r2,-12(fp)
   414e8:	e0bff915 	stw	r2,-28(fp)
   414ec:	e0bffe17 	ldw	r2,-8(fp)
   414f0:	e0bffa15 	stw	r2,-24(fp)
   414f4:	e0bfff17 	ldw	r2,-4(fp)
   414f8:	e0bffb15 	stw	r2,-20(fp)
      printf("note.frequency == %d\n",note.frequency);
   414fc:	e0bff917 	ldw	r2,-28(fp)
   41500:	100b883a 	mov	r5,r2
   41504:	01000134 	movhi	r4,4
   41508:	2113ef04 	addi	r4,r4,20412
   4150c:	004325c0 	call	4325c <printf>
      printf("note.duration == %d\n",note.duration);
   41510:	e0bffa17 	ldw	r2,-24(fp)
   41514:	100b883a 	mov	r5,r2
   41518:	01000134 	movhi	r4,4
   4151c:	2113f504 	addi	r4,r4,20436
   41520:	004325c0 	call	4325c <printf>
      printf("note.endofsong == %d\n",note.endofsong);
   41524:	e0bffb17 	ldw	r2,-20(fp)
   41528:	100b883a 	mov	r5,r2
   4152c:	01000134 	movhi	r4,4
   41530:	2113fb04 	addi	r4,r4,20460
   41534:	004325c0 	call	4325c <printf>
      writePWM(note.frequency);
   41538:	e0bff917 	ldw	r2,-28(fp)
   4153c:	1009883a 	mov	r4,r2
   41540:	00416480 	call	41648 <writePWM>
      timerPWMEnableInterrupt(note.duration);  
   41544:	e0bffa17 	ldw	r2,-24(fp)
   41548:	1009883a 	mov	r4,r2
   4154c:	004086c0 	call	4086c <timerPWMEnableInterrupt>
    }
  }

}
   41550:	0001883a 	nop
   41554:	e037883a 	mov	sp,fp
   41558:	dfc00117 	ldw	ra,4(sp)
   4155c:	df000017 	ldw	fp,0(sp)
   41560:	dec00204 	addi	sp,sp,8
   41564:	f800283a 	ret

00041568 <getVolume>:
#include "pwm.h"

uint8_t volume = 1;

uint8_t getVolume(void) {
   41568:	deffff04 	addi	sp,sp,-4
   4156c:	df000015 	stw	fp,0(sp)
   41570:	d839883a 	mov	fp,sp
  return volume;
   41574:	d0a00003 	ldbu	r2,-32768(gp)
}
   41578:	e037883a 	mov	sp,fp
   4157c:	df000017 	ldw	fp,0(sp)
   41580:	dec00104 	addi	sp,sp,4
   41584:	f800283a 	ret

00041588 <upVolume>:

uint8_t upVolume(void) {
   41588:	deffff04 	addi	sp,sp,-4
   4158c:	df000015 	stw	fp,0(sp)
   41590:	d839883a 	mov	fp,sp
  if (volume != MAX_VOLUME) {
   41594:	d0a00003 	ldbu	r2,-32768(gp)
   41598:	10803fcc 	andi	r2,r2,255
   4159c:	10800320 	cmpeqi	r2,r2,12
   415a0:	1000031e 	bne	r2,zero,415b0 <upVolume+0x28>
    volume++;
   415a4:	d0a00003 	ldbu	r2,-32768(gp)
   415a8:	10800044 	addi	r2,r2,1
   415ac:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   415b0:	d0a00003 	ldbu	r2,-32768(gp)
}
   415b4:	e037883a 	mov	sp,fp
   415b8:	df000017 	ldw	fp,0(sp)
   415bc:	dec00104 	addi	sp,sp,4
   415c0:	f800283a 	ret

000415c4 <downVolume>:
uint8_t downVolume(void) {
   415c4:	deffff04 	addi	sp,sp,-4
   415c8:	df000015 	stw	fp,0(sp)
   415cc:	d839883a 	mov	fp,sp
  if (volume != 0) {
   415d0:	d0a00003 	ldbu	r2,-32768(gp)
   415d4:	10803fcc 	andi	r2,r2,255
   415d8:	10000326 	beq	r2,zero,415e8 <downVolume+0x24>
    volume--;
   415dc:	d0a00003 	ldbu	r2,-32768(gp)
   415e0:	10bfffc4 	addi	r2,r2,-1
   415e4:	d0a00005 	stb	r2,-32768(gp)
  }
  return volume;
   415e8:	d0a00003 	ldbu	r2,-32768(gp)
}
   415ec:	e037883a 	mov	sp,fp
   415f0:	df000017 	ldw	fp,0(sp)
   415f4:	dec00104 	addi	sp,sp,4
   415f8:	f800283a 	ret

000415fc <stopPWM>:

void stopPWM(void) {
   415fc:	defffd04 	addi	sp,sp,-12
   41600:	dfc00215 	stw	ra,8(sp)
   41604:	df000115 	stw	fp,4(sp)
   41608:	df000104 	addi	fp,sp,4
  int return_code = ALTERA_AVALON_PWM_OK;
   4160c:	e03fff15 	stw	zero,-4(fp)

  //Disable PWM and Check Return Code
  return_code = altera_avalon_pwm_disable(PWM_BASE); 
   41610:	01000234 	movhi	r4,8
   41614:	21043c04 	addi	r4,r4,4336
   41618:	00403380 	call	40338 <altera_avalon_pwm_disable>
   4161c:	e0bfff15 	stw	r2,-4(fp)
  check_return_code(PWM_BASE, return_code);
   41620:	e17fff17 	ldw	r5,-4(fp)
   41624:	01000234 	movhi	r4,8
   41628:	21043c04 	addi	r4,r4,4336
   4162c:	00418c00 	call	418c0 <check_return_code>
}
   41630:	0001883a 	nop
   41634:	e037883a 	mov	sp,fp
   41638:	dfc00117 	ldw	ra,4(sp)
   4163c:	df000017 	ldw	fp,0(sp)
   41640:	dec00204 	addi	sp,sp,8
   41644:	f800283a 	ret

00041648 <writePWM>:

void writePWM(int frequency) {
   41648:	defffa04 	addi	sp,sp,-24
   4164c:	dfc00515 	stw	ra,20(sp)
   41650:	df000415 	stw	fp,16(sp)
   41654:	df000404 	addi	fp,sp,16
   41658:	e13fff15 	stw	r4,-4(fp)

  if (frequency == 0) {
   4165c:	e0bfff17 	ldw	r2,-4(fp)
   41660:	1000021e 	bne	r2,zero,4166c <writePWM+0x24>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
   41664:	00415fc0 	call	415fc <stopPWM>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
    check_return_code(PWM_BASE, return_code);
  }
}
   41668:	00002206 	br	416f4 <writePWM+0xac>
    // this happens if the 'note' to play is a musical rest
    stopPWM();
  }
  else {
    // conversion of input frequency to PWM clock cycle divide value
    unsigned int clock_divide = NIOS_CLOCK_FREQ/frequency;
   4166c:	e17fff17 	ldw	r5,-4(fp)
   41670:	0100bef4 	movhi	r4,763
   41674:	213c2004 	addi	r4,r4,-3968
   41678:	004306c0 	call	4306c <__divsi3>
   4167c:	e0bffc15 	stw	r2,-16(fp)

    unsigned int duty_cycle = clock_divide*duty_cycle_lookup_table[volume];
   41680:	d0a00003 	ldbu	r2,-32768(gp)
   41684:	10c03fcc 	andi	r3,r2,255
   41688:	00800134 	movhi	r2,4
   4168c:	10949604 	addi	r2,r2,21080
   41690:	10c5883a 	add	r2,r2,r3
   41694:	10800003 	ldbu	r2,0(r2)
   41698:	10c03fcc 	andi	r3,r2,255
   4169c:	e0bffc17 	ldw	r2,-16(fp)
   416a0:	1885383a 	mul	r2,r3,r2
   416a4:	e0bffd15 	stw	r2,-12(fp)

    int return_code = ALTERA_AVALON_PWM_OK;
   416a8:	e03ffe15 	stw	zero,-8(fp)
    
    //Initialize PWM and Check Return Code
    return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   416ac:	e1bffd17 	ldw	r6,-12(fp)
   416b0:	e17ffc17 	ldw	r5,-16(fp)
   416b4:	01000234 	movhi	r4,8
   416b8:	21043c04 	addi	r4,r4,4336
   416bc:	00402800 	call	40280 <altera_avalon_pwm_init>
   416c0:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   416c4:	e17ffe17 	ldw	r5,-8(fp)
   416c8:	01000234 	movhi	r4,8
   416cc:	21043c04 	addi	r4,r4,4336
   416d0:	00418c00 	call	418c0 <check_return_code>
    
    //Enable PWM and Check Return Code
    return_code = altera_avalon_pwm_enable(PWM_BASE); 
   416d4:	01000234 	movhi	r4,8
   416d8:	21043c04 	addi	r4,r4,4336
   416dc:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   416e0:	e0bffe15 	stw	r2,-8(fp)
    check_return_code(PWM_BASE, return_code);
   416e4:	e17ffe17 	ldw	r5,-8(fp)
   416e8:	01000234 	movhi	r4,8
   416ec:	21043c04 	addi	r4,r4,4336
   416f0:	00418c00 	call	418c0 <check_return_code>
  }
}
   416f4:	0001883a 	nop
   416f8:	e037883a 	mov	sp,fp
   416fc:	dfc00117 	ldw	ra,4(sp)
   41700:	df000017 	ldw	fp,0(sp)
   41704:	dec00204 	addi	sp,sp,8
   41708:	f800283a 	ret

0004170c <default500HzSquareWave>:

void default500HzSquareWave(void) {
   4170c:	defffb04 	addi	sp,sp,-20
   41710:	dfc00415 	stw	ra,16(sp)
   41714:	df000315 	stw	fp,12(sp)
   41718:	df000304 	addi	fp,sp,12

 unsigned int clock_divide = 100000;
   4171c:	008000b4 	movhi	r2,2
   41720:	10a1a804 	addi	r2,r2,-31072
   41724:	e0bffd15 	stw	r2,-12(fp)
 unsigned int duty_cycle =    50000;
   41728:	00b0d414 	movui	r2,50000
   4172c:	e0bffe15 	stw	r2,-8(fp)
 int return_code = ALTERA_AVALON_PWM_OK;
   41730:	e03fff15 	stw	zero,-4(fp)
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, clock_divide, duty_cycle);  
   41734:	e1bffe17 	ldw	r6,-8(fp)
   41738:	e17ffd17 	ldw	r5,-12(fp)
   4173c:	01000234 	movhi	r4,8
   41740:	21043c04 	addi	r4,r4,4336
   41744:	00402800 	call	40280 <altera_avalon_pwm_init>
   41748:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4174c:	e17fff17 	ldw	r5,-4(fp)
   41750:	01000234 	movhi	r4,8
   41754:	21043c04 	addi	r4,r4,4336
   41758:	00418c00 	call	418c0 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   4175c:	01000234 	movhi	r4,8
   41760:	21043c04 	addi	r4,r4,4336
   41764:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41768:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4176c:	e17fff17 	ldw	r5,-4(fp)
   41770:	01000234 	movhi	r4,8
   41774:	21043c04 	addi	r4,r4,4336
   41778:	00418c00 	call	418c0 <check_return_code>
}
   4177c:	0001883a 	nop
   41780:	e037883a 	mov	sp,fp
   41784:	dfc00117 	ldw	ra,4(sp)
   41788:	df000017 	ldw	fp,0(sp)
   4178c:	dec00204 	addi	sp,sp,8
   41790:	f800283a 	ret

00041794 <testPWM>:



void testPWM(void) {
   41794:	defffc04 	addi	sp,sp,-16
   41798:	dfc00315 	stw	ra,12(sp)
   4179c:	df000215 	stw	fp,8(sp)
   417a0:	df000204 	addi	fp,sp,8
 
 unsigned int duty_cycle;
 int return_code = ALTERA_AVALON_PWM_OK;
   417a4:	e03fff15 	stw	zero,-4(fp)
 
 printf("Period = %u\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE) );
   417a8:	00800234 	movhi	r2,8
   417ac:	10843c04 	addi	r2,r2,4336
   417b0:	10800037 	ldwio	r2,0(r2)
   417b4:	100b883a 	mov	r5,r2
   417b8:	01000134 	movhi	r4,4
   417bc:	21149a04 	addi	r4,r4,21096
   417c0:	004325c0 	call	4325c <printf>
 printf("Duty cycle = %u\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE) );
   417c4:	00800234 	movhi	r2,8
   417c8:	10843d04 	addi	r2,r2,4340
   417cc:	10800037 	ldwio	r2,0(r2)
   417d0:	100b883a 	mov	r5,r2
   417d4:	01000134 	movhi	r4,4
   417d8:	21149e04 	addi	r4,r4,21112
   417dc:	004325c0 	call	4325c <printf>
 
 //Initialize PWM and Check Return Code
 return_code = altera_avalon_pwm_init(PWM_BASE, 500000, 1);  
   417e0:	01800044 	movi	r6,1
   417e4:	01400234 	movhi	r5,8
   417e8:	29684804 	addi	r5,r5,-24288
   417ec:	01000234 	movhi	r4,8
   417f0:	21043c04 	addi	r4,r4,4336
   417f4:	00402800 	call	40280 <altera_avalon_pwm_init>
   417f8:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   417fc:	e17fff17 	ldw	r5,-4(fp)
   41800:	01000234 	movhi	r4,8
   41804:	21043c04 	addi	r4,r4,4336
   41808:	00418c00 	call	418c0 <check_return_code>
 
 //Enable PWM and Check Return Code
 return_code = altera_avalon_pwm_enable(PWM_BASE); 
   4180c:	01000234 	movhi	r4,8
   41810:	21043c04 	addi	r4,r4,4336
   41814:	00402e40 	call	402e4 <altera_avalon_pwm_enable>
   41818:	e0bfff15 	stw	r2,-4(fp)
 check_return_code(PWM_BASE, return_code);
   4181c:	e17fff17 	ldw	r5,-4(fp)
   41820:	01000234 	movhi	r4,8
   41824:	21043c04 	addi	r4,r4,4336
   41828:	00418c00 	call	418c0 <check_return_code>

//init duty_cycle with the value written to duty_cycle register during initialization
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
   4182c:	00800234 	movhi	r2,8
   41830:	10843d04 	addi	r2,r2,4340
   41834:	10800037 	ldwio	r2,0(r2)
   41838:	e0bffe15 	stw	r2,-8(fp)
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   4183c:	00000906 	br	41864 <testPWM+0xd0>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   41840:	e17ffe17 	ldw	r5,-8(fp)
   41844:	01000234 	movhi	r4,8
   41848:	21043c04 	addi	r4,r4,4336
   4184c:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
   41850:	e0bfff15 	stw	r2,-4(fp)
      	check_return_code(PWM_BASE, return_code);
   41854:	e17fff17 	ldw	r5,-4(fp)
   41858:	01000234 	movhi	r4,8
   4185c:	21043c04 	addi	r4,r4,4336
   41860:	00418c00 	call	418c0 <check_return_code>
 duty_cycle = IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(PWM_BASE);
 
 
 while(1)
   {
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
   41864:	e0fffe17 	ldw	r3,-8(fp)
   41868:	18800044 	addi	r2,r3,1
   4186c:	e0bffe15 	stw	r2,-8(fp)
   41870:	00800234 	movhi	r2,8
   41874:	10843c04 	addi	r2,r2,4336
   41878:	10800037 	ldwio	r2,0(r2)
   4187c:	18bff036 	bltu	r3,r2,41840 <__alt_data_end+0xfffd9840>
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   41880:	00000406 	br	41894 <testPWM+0x100>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
   41884:	e17ffe17 	ldw	r5,-8(fp)
   41888:	01000234 	movhi	r4,8
   4188c:	21043c04 	addi	r4,r4,4336
   41890:	00403880 	call	40388 <altera_avalon_pwm_change_duty_cycle>
     while(duty_cycle++ < IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(PWM_BASE))
     {
      	return_code = altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
      	check_return_code(PWM_BASE, return_code);
     }          
     while(--duty_cycle > 1)
   41894:	e0bffe17 	ldw	r2,-8(fp)
   41898:	10bfffc4 	addi	r2,r2,-1
   4189c:	e0bffe15 	stw	r2,-8(fp)
   418a0:	e0bffe17 	ldw	r2,-8(fp)
   418a4:	108000a8 	cmpgeui	r2,r2,2
   418a8:	103ff61e 	bne	r2,zero,41884 <__alt_data_end+0xfffd9884>
      	altera_avalon_pwm_change_duty_cycle(PWM_BASE, duty_cycle);
        check_return_code(PWM_BASE, return_code);
   418ac:	e17fff17 	ldw	r5,-4(fp)
   418b0:	01000234 	movhi	r4,8
   418b4:	21043c04 	addi	r4,r4,4336
   418b8:	00418c00 	call	418c0 <check_return_code>
   }
   418bc:	003fdf06 	br	4183c <__alt_data_end+0xfffd983c>

000418c0 <check_return_code>:
}

void check_return_code(unsigned int address, int return_code)
{
   418c0:	defffc04 	addi	sp,sp,-16
   418c4:	dfc00315 	stw	ra,12(sp)
   418c8:	df000215 	stw	fp,8(sp)
   418cc:	df000204 	addi	fp,sp,8
   418d0:	e13ffe15 	stw	r4,-8(fp)
   418d4:	e17fff15 	stw	r5,-4(fp)
	if(return_code != ALTERA_AVALON_PWM_OK)
   418d8:	e0bfff17 	ldw	r2,-4(fp)
   418dc:	10000326 	beq	r2,zero,418ec <check_return_code+0x2c>
      		print_error(address, return_code);	
   418e0:	e17fff17 	ldw	r5,-4(fp)
   418e4:	e13ffe17 	ldw	r4,-8(fp)
   418e8:	00419040 	call	41904 <print_error>
}
   418ec:	0001883a 	nop
   418f0:	e037883a 	mov	sp,fp
   418f4:	dfc00117 	ldw	ra,4(sp)
   418f8:	df000017 	ldw	fp,0(sp)
   418fc:	dec00204 	addi	sp,sp,8
   41900:	f800283a 	ret

00041904 <print_error>:

void print_error(unsigned int address, int return_code)
{
   41904:	defffc04 	addi	sp,sp,-16
   41908:	dfc00315 	stw	ra,12(sp)
   4190c:	df000215 	stw	fp,8(sp)
   41910:	df000204 	addi	fp,sp,8
   41914:	e13ffe15 	stw	r4,-8(fp)
   41918:	e17fff15 	stw	r5,-4(fp)
	printf("Program Terminated Due to an error with Avalon PWM located at 0x%x:\n", address);
   4191c:	e17ffe17 	ldw	r5,-8(fp)
   41920:	01000134 	movhi	r4,4
   41924:	2114a304 	addi	r4,r4,21132
   41928:	004325c0 	call	4325c <printf>
	switch(return_code)
   4192c:	e0bfff17 	ldw	r2,-4(fp)
   41930:	10ffffa0 	cmpeqi	r3,r2,-2
   41934:	1800161e 	bne	r3,zero,41990 <print_error+0x8c>
   41938:	10ffffe0 	cmpeqi	r3,r2,-1
   4193c:	1800031e 	bne	r3,zero,4194c <print_error+0x48>
   41940:	10bfff60 	cmpeqi	r2,r2,-3
   41944:	10001d1e 	bne	r2,zero,419bc <print_error+0xb8>
   41948:	00002706 	br	419e8 <print_error+0xe4>
	{
	case ALTERA_AVALON_PWM_DUTY_CYCLE_GREATER_THAN_CLOCK_CYCLE_ERROR:
		printf("The value in the clock cycle register must be greater than the value in the duty cycle register\n");
   4194c:	01000134 	movhi	r4,4
   41950:	2114b504 	addi	r4,r4,21204
   41954:	00433280 	call	43328 <puts>
		printf("Value in the Clock Divide Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_CLOCK_DIVIDER(address)); 
   41958:	e0bffe17 	ldw	r2,-8(fp)
   4195c:	10800037 	ldwio	r2,0(r2)
   41960:	100b883a 	mov	r5,r2
   41964:	01000134 	movhi	r4,4
   41968:	2114cd04 	addi	r4,r4,21300
   4196c:	004325c0 	call	4325c <printf>
		printf("Value in the Duty Cycle Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_DUTY_CYCLE(address));
   41970:	e0bffe17 	ldw	r2,-8(fp)
   41974:	10800104 	addi	r2,r2,4
   41978:	10800037 	ldwio	r2,0(r2)
   4197c:	100b883a 	mov	r5,r2
   41980:	01000134 	movhi	r4,4
   41984:	2114d804 	addi	r4,r4,21344
   41988:	004325c0 	call	4325c <printf>
		break;
   4198c:	00001706 	br	419ec <print_error+0xe8>
  case ALTERA_AVALON_PWM_ENABLED_CONFIRMATION_ERROR:
    printf("Unable to confirm that the PWM is enabled\n");
   41990:	01000134 	movhi	r4,4
   41994:	2114e204 	addi	r4,r4,21384
   41998:	00433280 	call	43328 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   4199c:	e0bffe17 	ldw	r2,-8(fp)
   419a0:	10800204 	addi	r2,r2,8
   419a4:	10800037 	ldwio	r2,0(r2)
   419a8:	100b883a 	mov	r5,r2
   419ac:	01000134 	movhi	r4,4
   419b0:	2114ed04 	addi	r4,r4,21428
   419b4:	004325c0 	call	4325c <printf>
    break;
   419b8:	00000c06 	br	419ec <print_error+0xe8>
  case ALTERA_AVALON_PWM_DISABLED_CONFIRMATION_ERROR:
  	printf("Unable to confirm that the PWM is disabled\n");
   419bc:	01000134 	movhi	r4,4
   419c0:	2114f604 	addi	r4,r4,21464
   419c4:	00433280 	call	43328 <puts>
		printf("Value in the Enable Register: 0x%x\n", IORD_ALTERA_AVALON_PWM_ENABLE(address)); 
   419c8:	e0bffe17 	ldw	r2,-8(fp)
   419cc:	10800204 	addi	r2,r2,8
   419d0:	10800037 	ldwio	r2,0(r2)
   419d4:	100b883a 	mov	r5,r2
   419d8:	01000134 	movhi	r4,4
   419dc:	2114ed04 	addi	r4,r4,21428
   419e0:	004325c0 	call	4325c <printf>
  	break;
   419e4:	00000106 	br	419ec <print_error+0xe8>
  default:
  	break; 		     
   419e8:	0001883a 	nop
	}
while(1);
   419ec:	003fff06 	br	419ec <__alt_data_end+0xfffd99ec>

000419f0 <getSong>:
int defscale = 6;
int bpm = 63;
int silence = 0;
char *p;

uint8_t getSong(void) {
   419f0:	deffff04 	addi	sp,sp,-4
   419f4:	df000015 	stw	fp,0(sp)
   419f8:	d839883a 	mov	fp,sp
  return song_index;
   419fc:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   41a00:	e037883a 	mov	sp,fp
   41a04:	df000017 	ldw	fp,0(sp)
   41a08:	dec00104 	addi	sp,sp,4
   41a0c:	f800283a 	ret

00041a10 <upSong>:

uint8_t upSong(void) {
   41a10:	deffff04 	addi	sp,sp,-4
   41a14:	df000015 	stw	fp,0(sp)
   41a18:	d839883a 	mov	fp,sp
  // whoops! this isnt what i want -> i want to get the number of strings (number of songs)
  // implement: sizeof(names)/sizeof(names[0]) to get length array
  if (song_index == sizeof(song)) {
   41a1c:	d0a0fa03 	ldbu	r2,-31768(gp)
   41a20:	10803fcc 	andi	r2,r2,255
   41a24:	10801f18 	cmpnei	r2,r2,124
   41a28:	1000021e 	bne	r2,zero,41a34 <upSong+0x24>
    song_index = 0;
   41a2c:	d020fa05 	stb	zero,-31768(gp)
   41a30:	00000306 	br	41a40 <upSong+0x30>
  }
  else {
    song_index++;
   41a34:	d0a0fa03 	ldbu	r2,-31768(gp)
   41a38:	10800044 	addi	r2,r2,1
   41a3c:	d0a0fa05 	stb	r2,-31768(gp)
  }
  return song_index;
   41a40:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   41a44:	e037883a 	mov	sp,fp
   41a48:	df000017 	ldw	fp,0(sp)
   41a4c:	dec00104 	addi	sp,sp,4
   41a50:	f800283a 	ret

00041a54 <downSong>:

uint8_t downSong(void) {
   41a54:	deffff04 	addi	sp,sp,-4
   41a58:	df000015 	stw	fp,0(sp)
   41a5c:	d839883a 	mov	fp,sp
  if (song_index == 0) {
   41a60:	d0a0fa03 	ldbu	r2,-31768(gp)
   41a64:	10803fcc 	andi	r2,r2,255
   41a68:	10000326 	beq	r2,zero,41a78 <downSong+0x24>
    // implement: sizeof(names)/sizeof(names[0]) to get length of array
    //song_index = sizeof(song);
  }
  else {
    song_index--;
   41a6c:	d0a0fa03 	ldbu	r2,-31768(gp)
   41a70:	10bfffc4 	addi	r2,r2,-1
   41a74:	d0a0fa05 	stb	r2,-31768(gp)
  }
  return song_index;
   41a78:	d0a0fa03 	ldbu	r2,-31768(gp)
}
   41a7c:	e037883a 	mov	sp,fp
   41a80:	df000017 	ldw	fp,0(sp)
   41a84:	dec00104 	addi	sp,sp,4
   41a88:	f800283a 	ret

00041a8c <note2freq>:

int note2freq(int note) {
   41a8c:	defffc04 	addi	sp,sp,-16
   41a90:	dfc00315 	stw	ra,12(sp)
   41a94:	df000215 	stw	fp,8(sp)
   41a98:	dc000115 	stw	r16,4(sp)
   41a9c:	df000204 	addi	fp,sp,8
   41aa0:	e13ffe15 	stw	r4,-8(fp)
  return notefreq[note % 12] / (1 << (9 - (note / 12)));
   41aa4:	e0bffe17 	ldw	r2,-8(fp)
   41aa8:	01400304 	movi	r5,12
   41aac:	1009883a 	mov	r4,r2
   41ab0:	00430f00 	call	430f0 <__modsi3>
   41ab4:	1007883a 	mov	r3,r2
   41ab8:	00800134 	movhi	r2,4
   41abc:	109b4804 	addi	r2,r2,27936
   41ac0:	18c7883a 	add	r3,r3,r3
   41ac4:	18c7883a 	add	r3,r3,r3
   41ac8:	10c5883a 	add	r2,r2,r3
   41acc:	14000017 	ldw	r16,0(r2)
   41ad0:	e0bffe17 	ldw	r2,-8(fp)
   41ad4:	01400304 	movi	r5,12
   41ad8:	1009883a 	mov	r4,r2
   41adc:	004306c0 	call	4306c <__divsi3>
   41ae0:	1007883a 	mov	r3,r2
   41ae4:	00800244 	movi	r2,9
   41ae8:	10c5c83a 	sub	r2,r2,r3
   41aec:	00c00044 	movi	r3,1
   41af0:	1884983a 	sll	r2,r3,r2
   41af4:	100b883a 	mov	r5,r2
   41af8:	8009883a 	mov	r4,r16
   41afc:	004306c0 	call	4306c <__divsi3>
}
   41b00:	e6ffff04 	addi	sp,fp,-4
   41b04:	dfc00217 	ldw	ra,8(sp)
   41b08:	df000117 	ldw	fp,4(sp)
   41b0c:	dc000017 	ldw	r16,0(sp)
   41b10:	dec00304 	addi	sp,sp,12
   41b14:	f800283a 	ret

00041b18 <playSong>:

struct note_info playSong(void) {
   41b18:	defff804 	addi	sp,sp,-32
   41b1c:	dfc00715 	stw	ra,28(sp)
   41b20:	df000615 	stw	fp,24(sp)
   41b24:	df000604 	addi	fp,sp,24
   41b28:	e13fff15 	stw	r4,-4(fp)

  p = song[song_index];
   41b2c:	d0a0fa03 	ldbu	r2,-31768(gp)
   41b30:	10c03fcc 	andi	r3,r2,255
   41b34:	00800134 	movhi	r2,4
   41b38:	109b2904 	addi	r2,r2,27812
   41b3c:	18c7883a 	add	r3,r3,r3
   41b40:	18c7883a 	add	r3,r3,r3
   41b44:	10c5883a 	add	r2,r2,r3
   41b48:	10800017 	ldw	r2,0(r2)
   41b4c:	d0a0fc15 	stw	r2,-31760(gp)
  
  // Skip name
  while (*p && *p != ':') p++;
   41b50:	00000306 	br	41b60 <playSong+0x48>
   41b54:	d0a0fc17 	ldw	r2,-31760(gp)
   41b58:	10800044 	addi	r2,r2,1
   41b5c:	d0a0fc15 	stw	r2,-31760(gp)
   41b60:	d0a0fc17 	ldw	r2,-31760(gp)
   41b64:	10800003 	ldbu	r2,0(r2)
   41b68:	10803fcc 	andi	r2,r2,255
   41b6c:	1080201c 	xori	r2,r2,128
   41b70:	10bfe004 	addi	r2,r2,-128
   41b74:	10000726 	beq	r2,zero,41b94 <playSong+0x7c>
   41b78:	d0a0fc17 	ldw	r2,-31760(gp)
   41b7c:	10800003 	ldbu	r2,0(r2)
   41b80:	10803fcc 	andi	r2,r2,255
   41b84:	1080201c 	xori	r2,r2,128
   41b88:	10bfe004 	addi	r2,r2,-128
   41b8c:	10800e98 	cmpnei	r2,r2,58
   41b90:	103ff01e 	bne	r2,zero,41b54 <__alt_data_end+0xfffd9b54>
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
   41b94:	d0a0fc17 	ldw	r2,-31760(gp)
   41b98:	10800003 	ldbu	r2,0(r2)
   41b9c:	10803fcc 	andi	r2,r2,255
   41ba0:	1080201c 	xori	r2,r2,128
   41ba4:	10bfe004 	addi	r2,r2,-128
   41ba8:	1000041e 	bne	r2,zero,41bbc <playSong+0xa4>
   41bac:	01000134 	movhi	r4,4
   41bb0:	211ada04 	addi	r4,r4,27496
   41bb4:	00433280 	call	43328 <puts>
   41bb8:	00008c06 	br	41dec <playSong+0x2d4>
  p++;
   41bbc:	d0a0fc17 	ldw	r2,-31760(gp)
   41bc0:	10800044 	addi	r2,r2,1
   41bc4:	d0a0fc15 	stw	r2,-31760(gp)

  // Parse defaults
  while (*p) {
   41bc8:	00007206 	br	41d94 <playSong+0x27c>
    char param;
    int value;

    while (*p == ' ') p++;
   41bcc:	d0a0fc17 	ldw	r2,-31760(gp)
   41bd0:	10800044 	addi	r2,r2,1
   41bd4:	d0a0fc15 	stw	r2,-31760(gp)
   41bd8:	d0a0fc17 	ldw	r2,-31760(gp)
   41bdc:	10800003 	ldbu	r2,0(r2)
   41be0:	10803fcc 	andi	r2,r2,255
   41be4:	1080201c 	xori	r2,r2,128
   41be8:	10bfe004 	addi	r2,r2,-128
   41bec:	10800820 	cmpeqi	r2,r2,32
   41bf0:	103ff61e 	bne	r2,zero,41bcc <__alt_data_end+0xfffd9bcc>
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
   41bf4:	d0a0fc17 	ldw	r2,-31760(gp)
   41bf8:	10800003 	ldbu	r2,0(r2)
   41bfc:	10803fcc 	andi	r2,r2,255
   41c00:	1080201c 	xori	r2,r2,128
   41c04:	10bfe004 	addi	r2,r2,-128
   41c08:	1000041e 	bne	r2,zero,41c1c <playSong+0x104>
   41c0c:	01000134 	movhi	r4,4
   41c10:	211ae204 	addi	r4,r4,27528
   41c14:	00433280 	call	43328 <puts>
   41c18:	00007406 	br	41dec <playSong+0x2d4>
    if (*p == ':') break;
   41c1c:	d0a0fc17 	ldw	r2,-31760(gp)
   41c20:	10800003 	ldbu	r2,0(r2)
   41c24:	10803fcc 	andi	r2,r2,255
   41c28:	1080201c 	xori	r2,r2,128
   41c2c:	10bfe004 	addi	r2,r2,-128
   41c30:	10800e98 	cmpnei	r2,r2,58
   41c34:	10005e26 	beq	r2,zero,41db0 <playSong+0x298>

    param = *p++;
   41c38:	d0a0fc17 	ldw	r2,-31760(gp)
   41c3c:	10c00044 	addi	r3,r2,1
   41c40:	d0e0fc15 	stw	r3,-31760(gp)
   41c44:	10800003 	ldbu	r2,0(r2)
   41c48:	e0bffb05 	stb	r2,-20(fp)
    if (*p != '=') {printf("ERROR in rtttl.c: = never found\n"); return;}
   41c4c:	d0a0fc17 	ldw	r2,-31760(gp)
   41c50:	10800003 	ldbu	r2,0(r2)
   41c54:	10803fcc 	andi	r2,r2,255
   41c58:	1080201c 	xori	r2,r2,128
   41c5c:	10bfe004 	addi	r2,r2,-128
   41c60:	10800f60 	cmpeqi	r2,r2,61
   41c64:	1000041e 	bne	r2,zero,41c78 <playSong+0x160>
   41c68:	01000134 	movhi	r4,4
   41c6c:	211aec04 	addi	r4,r4,27568
   41c70:	00433280 	call	43328 <puts>
   41c74:	00005d06 	br	41dec <playSong+0x2d4>
    
    p++;
   41c78:	d0a0fc17 	ldw	r2,-31760(gp)
   41c7c:	10800044 	addi	r2,r2,1
   41c80:	d0a0fc15 	stw	r2,-31760(gp)
    value = 0;
   41c84:	e03ffa15 	stw	zero,-24(fp)
    while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41c88:	00000c06 	br	41cbc <playSong+0x1a4>
   41c8c:	e0bffa17 	ldw	r2,-24(fp)
   41c90:	10c002a4 	muli	r3,r2,10
   41c94:	d0a0fc17 	ldw	r2,-31760(gp)
   41c98:	11000044 	addi	r4,r2,1
   41c9c:	d120fc15 	stw	r4,-31760(gp)
   41ca0:	10800003 	ldbu	r2,0(r2)
   41ca4:	10803fcc 	andi	r2,r2,255
   41ca8:	1080201c 	xori	r2,r2,128
   41cac:	10bfe004 	addi	r2,r2,-128
   41cb0:	10bff404 	addi	r2,r2,-48
   41cb4:	1885883a 	add	r2,r3,r2
   41cb8:	e0bffa15 	stw	r2,-24(fp)
   41cbc:	d0a0fc17 	ldw	r2,-31760(gp)
   41cc0:	10800003 	ldbu	r2,0(r2)
   41cc4:	10803fcc 	andi	r2,r2,255
   41cc8:	1080201c 	xori	r2,r2,128
   41ccc:	10bfe004 	addi	r2,r2,-128
   41cd0:	10800c10 	cmplti	r2,r2,48
   41cd4:	1000071e 	bne	r2,zero,41cf4 <playSong+0x1dc>
   41cd8:	d0a0fc17 	ldw	r2,-31760(gp)
   41cdc:	10800003 	ldbu	r2,0(r2)
   41ce0:	10803fcc 	andi	r2,r2,255
   41ce4:	1080201c 	xori	r2,r2,128
   41ce8:	10bfe004 	addi	r2,r2,-128
   41cec:	10800e90 	cmplti	r2,r2,58
   41cf0:	103fe61e 	bne	r2,zero,41c8c <__alt_data_end+0xfffd9c8c>

    switch (param) {
   41cf4:	e0bffb07 	ldb	r2,-20(fp)
   41cf8:	10c01920 	cmpeqi	r3,r2,100
   41cfc:	1800051e 	bne	r3,zero,41d14 <playSong+0x1fc>
   41d00:	10c01be0 	cmpeqi	r3,r2,111
   41d04:	1800081e 	bne	r3,zero,41d28 <playSong+0x210>
   41d08:	108018a0 	cmpeqi	r2,r2,98
   41d0c:	1000091e 	bne	r2,zero,41d34 <playSong+0x21c>
   41d10:	00000b06 	br	41d40 <playSong+0x228>
      case 'd': defdur = 32 / value; break;
   41d14:	e17ffa17 	ldw	r5,-24(fp)
   41d18:	01000804 	movi	r4,32
   41d1c:	004306c0 	call	4306c <__divsi3>
   41d20:	d0a00115 	stw	r2,-32764(gp)
   41d24:	00000606 	br	41d40 <playSong+0x228>
      case 'o': defscale = value; break;
   41d28:	e0bffa17 	ldw	r2,-24(fp)
   41d2c:	d0a00215 	stw	r2,-32760(gp)
   41d30:	00000306 	br	41d40 <playSong+0x228>
      case 'b': bpm = value; break;
   41d34:	e0bffa17 	ldw	r2,-24(fp)
   41d38:	d0a00315 	stw	r2,-32756(gp)
   41d3c:	0001883a 	nop
    }

    while (*p == ' ') p++;
   41d40:	00000306 	br	41d50 <playSong+0x238>
   41d44:	d0a0fc17 	ldw	r2,-31760(gp)
   41d48:	10800044 	addi	r2,r2,1
   41d4c:	d0a0fc15 	stw	r2,-31760(gp)
   41d50:	d0a0fc17 	ldw	r2,-31760(gp)
   41d54:	10800003 	ldbu	r2,0(r2)
   41d58:	10803fcc 	andi	r2,r2,255
   41d5c:	1080201c 	xori	r2,r2,128
   41d60:	10bfe004 	addi	r2,r2,-128
   41d64:	10800820 	cmpeqi	r2,r2,32
   41d68:	103ff61e 	bne	r2,zero,41d44 <__alt_data_end+0xfffd9d44>
    if (*p == ',') p++;
   41d6c:	d0a0fc17 	ldw	r2,-31760(gp)
   41d70:	10800003 	ldbu	r2,0(r2)
   41d74:	10803fcc 	andi	r2,r2,255
   41d78:	1080201c 	xori	r2,r2,128
   41d7c:	10bfe004 	addi	r2,r2,-128
   41d80:	10800b18 	cmpnei	r2,r2,44
   41d84:	1000031e 	bne	r2,zero,41d94 <playSong+0x27c>
   41d88:	d0a0fc17 	ldw	r2,-31760(gp)
   41d8c:	10800044 	addi	r2,r2,1
   41d90:	d0a0fc15 	stw	r2,-31760(gp)
  while (*p && *p != ':') p++;
  if (!*p) {printf("ERROR in rtttl.c: 0 after name:\n"); return;}
  p++;

  // Parse defaults
  while (*p) {
   41d94:	d0a0fc17 	ldw	r2,-31760(gp)
   41d98:	10800003 	ldbu	r2,0(r2)
   41d9c:	10803fcc 	andi	r2,r2,255
   41da0:	1080201c 	xori	r2,r2,128
   41da4:	10bfe004 	addi	r2,r2,-128
   41da8:	103f8b1e 	bne	r2,zero,41bd8 <__alt_data_end+0xfffd9bd8>
   41dac:	00000106 	br	41db4 <playSong+0x29c>
    char param;
    int value;

    while (*p == ' ') p++;
    if (!*p) {printf("ERROR in rtttl.c: defaults: never found\n"); return;}
    if (*p == ':') break;
   41db0:	0001883a 	nop
    }

    while (*p == ' ') p++;
    if (*p == ',') p++;
  }
  p++;
   41db4:	d0a0fc17 	ldw	r2,-31760(gp)
   41db8:	10800044 	addi	r2,r2,1
   41dbc:	d0a0fc15 	stw	r2,-31760(gp)

  // get the first note of the song
  struct note_info payload;
  payload = getNote();
   41dc0:	e0bffc04 	addi	r2,fp,-16
   41dc4:	1009883a 	mov	r4,r2
   41dc8:	0041e040 	call	41e04 <getNote>
  return payload;
   41dcc:	e0bfff17 	ldw	r2,-4(fp)
   41dd0:	e0fffc17 	ldw	r3,-16(fp)
   41dd4:	10c00015 	stw	r3,0(r2)
   41dd8:	e0fffd17 	ldw	r3,-12(fp)
   41ddc:	10c00115 	stw	r3,4(r2)
   41de0:	e0fffe17 	ldw	r3,-8(fp)
   41de4:	10c00215 	stw	r3,8(r2)
   41de8:	00000006 	br	41dec <playSong+0x2d4>

}
   41dec:	e0bfff17 	ldw	r2,-4(fp)
   41df0:	e037883a 	mov	sp,fp
   41df4:	dfc00117 	ldw	ra,4(sp)
   41df8:	df000017 	ldw	fp,0(sp)
   41dfc:	dec00204 	addi	sp,sp,8
   41e00:	f800283a 	ret

00041e04 <getNote>:

// used to get the first note of the song and the subsequent ones
struct note_info getNote(void) {
   41e04:	defff404 	addi	sp,sp,-48
   41e08:	dfc00b15 	stw	ra,44(sp)
   41e0c:	df000a15 	stw	fp,40(sp)
   41e10:	df000a04 	addi	fp,sp,40
   41e14:	e13fff15 	stw	r4,-4(fp)

  int note = -1;
   41e18:	00bfffc4 	movi	r2,-1
   41e1c:	e0bff615 	stw	r2,-40(fp)
  int scale = defscale;
   41e20:	d0a00217 	ldw	r2,-32760(gp)
   41e24:	e0bff715 	stw	r2,-36(fp)
  int dur = defdur;
   41e28:	d0a00117 	ldw	r2,-32764(gp)
   41e2c:	e0bff815 	stw	r2,-32(fp)
  int ms;
  int freq;
  struct note_info payload;

  if (!*p) {printf("End of song!\n");payload.endofsong = TRUE; return payload;}
   41e30:	d0a0fc17 	ldw	r2,-31760(gp)
   41e34:	10800003 	ldbu	r2,0(r2)
   41e38:	10803fcc 	andi	r2,r2,255
   41e3c:	1080201c 	xori	r2,r2,128
   41e40:	10bfe004 	addi	r2,r2,-128
   41e44:	1000101e 	bne	r2,zero,41e88 <getNote+0x84>
   41e48:	01000134 	movhi	r4,4
   41e4c:	211af404 	addi	r4,r4,27600
   41e50:	00433280 	call	43328 <puts>
   41e54:	00800044 	movi	r2,1
   41e58:	e0bffe15 	stw	r2,-8(fp)
   41e5c:	e0bfff17 	ldw	r2,-4(fp)
   41e60:	e0fffc17 	ldw	r3,-16(fp)
   41e64:	10c00015 	stw	r3,0(r2)
   41e68:	e0fffd17 	ldw	r3,-12(fp)
   41e6c:	10c00115 	stw	r3,4(r2)
   41e70:	e0fffe17 	ldw	r3,-8(fp)
   41e74:	10c00215 	stw	r3,8(r2)
   41e78:	00017606 	br	42454 <getNote+0x650>

  else {


    // Skip whitespace
    while (*p == ' ') p++;
   41e7c:	d0a0fc17 	ldw	r2,-31760(gp)
   41e80:	10800044 	addi	r2,r2,1
   41e84:	d0a0fc15 	stw	r2,-31760(gp)
   41e88:	d0a0fc17 	ldw	r2,-31760(gp)
   41e8c:	10800003 	ldbu	r2,0(r2)
   41e90:	10803fcc 	andi	r2,r2,255
   41e94:	1080201c 	xori	r2,r2,128
   41e98:	10bfe004 	addi	r2,r2,-128
   41e9c:	10800820 	cmpeqi	r2,r2,32
   41ea0:	103ff61e 	bne	r2,zero,41e7c <__alt_data_end+0xfffd9e7c>
    if (!*p) {printf("ERROR in rtttl.c: 0 found during getNote\n"); return;}
   41ea4:	d0a0fc17 	ldw	r2,-31760(gp)
   41ea8:	10800003 	ldbu	r2,0(r2)
   41eac:	10803fcc 	andi	r2,r2,255
   41eb0:	1080201c 	xori	r2,r2,128
   41eb4:	10bfe004 	addi	r2,r2,-128
   41eb8:	1000041e 	bne	r2,zero,41ecc <getNote+0xc8>
   41ebc:	01000134 	movhi	r4,4
   41ec0:	211af804 	addi	r4,r4,27616
   41ec4:	00433280 	call	43328 <puts>
   41ec8:	00016206 	br	42454 <getNote+0x650>

    // Parse duration
    if (*p >= '0' && *p <= '9') {
   41ecc:	d0a0fc17 	ldw	r2,-31760(gp)
   41ed0:	10800003 	ldbu	r2,0(r2)
   41ed4:	10803fcc 	andi	r2,r2,255
   41ed8:	1080201c 	xori	r2,r2,128
   41edc:	10bfe004 	addi	r2,r2,-128
   41ee0:	10800c10 	cmplti	r2,r2,48
   41ee4:	1000271e 	bne	r2,zero,41f84 <getNote+0x180>
   41ee8:	d0a0fc17 	ldw	r2,-31760(gp)
   41eec:	10800003 	ldbu	r2,0(r2)
   41ef0:	10803fcc 	andi	r2,r2,255
   41ef4:	1080201c 	xori	r2,r2,128
   41ef8:	10bfe004 	addi	r2,r2,-128
   41efc:	10800e88 	cmpgei	r2,r2,58
   41f00:	1000201e 	bne	r2,zero,41f84 <getNote+0x180>
      int value = 0;
   41f04:	e03ffa15 	stw	zero,-24(fp)
      while (*p >= '0' && *p <= '9') value = value * 10 + (*p++ - '0');
   41f08:	00000c06 	br	41f3c <getNote+0x138>
   41f0c:	e0bffa17 	ldw	r2,-24(fp)
   41f10:	10c002a4 	muli	r3,r2,10
   41f14:	d0a0fc17 	ldw	r2,-31760(gp)
   41f18:	11000044 	addi	r4,r2,1
   41f1c:	d120fc15 	stw	r4,-31760(gp)
   41f20:	10800003 	ldbu	r2,0(r2)
   41f24:	10803fcc 	andi	r2,r2,255
   41f28:	1080201c 	xori	r2,r2,128
   41f2c:	10bfe004 	addi	r2,r2,-128
   41f30:	10bff404 	addi	r2,r2,-48
   41f34:	1885883a 	add	r2,r3,r2
   41f38:	e0bffa15 	stw	r2,-24(fp)
   41f3c:	d0a0fc17 	ldw	r2,-31760(gp)
   41f40:	10800003 	ldbu	r2,0(r2)
   41f44:	10803fcc 	andi	r2,r2,255
   41f48:	1080201c 	xori	r2,r2,128
   41f4c:	10bfe004 	addi	r2,r2,-128
   41f50:	10800c10 	cmplti	r2,r2,48
   41f54:	1000071e 	bne	r2,zero,41f74 <getNote+0x170>
   41f58:	d0a0fc17 	ldw	r2,-31760(gp)
   41f5c:	10800003 	ldbu	r2,0(r2)
   41f60:	10803fcc 	andi	r2,r2,255
   41f64:	1080201c 	xori	r2,r2,128
   41f68:	10bfe004 	addi	r2,r2,-128
   41f6c:	10800e90 	cmplti	r2,r2,58
   41f70:	103fe61e 	bne	r2,zero,41f0c <__alt_data_end+0xfffd9f0c>

      dur = 32 / value;
   41f74:	e17ffa17 	ldw	r5,-24(fp)
   41f78:	01000804 	movi	r4,32
   41f7c:	004306c0 	call	4306c <__divsi3>
   41f80:	e0bff815 	stw	r2,-32(fp)
    }

    // Parse note
    switch (*p) {
   41f84:	d0a0fc17 	ldw	r2,-31760(gp)
   41f88:	10800003 	ldbu	r2,0(r2)
   41f8c:	10803fcc 	andi	r2,r2,255
   41f90:	1080201c 	xori	r2,r2,128
   41f94:	10bfe004 	addi	r2,r2,-128
   41f98:	10c01c68 	cmpgeui	r3,r2,113
   41f9c:	18009e1e 	bne	r3,zero,42218 <getNote+0x414>
   41fa0:	100690ba 	slli	r3,r2,2
   41fa4:	00800134 	movhi	r2,4
   41fa8:	1087ee04 	addi	r2,r2,8120
   41fac:	1885883a 	add	r2,r3,r2
   41fb0:	10800017 	ldw	r2,0(r2)
   41fb4:	1000683a 	jmp	r2
   41fb8:	0004217c 	xorhi	zero,zero,4229
   41fbc:	00042218 	cmpnei	zero,zero,4232
   41fc0:	00042218 	cmpnei	zero,zero,4232
   41fc4:	00042218 	cmpnei	zero,zero,4232
   41fc8:	00042218 	cmpnei	zero,zero,4232
   41fcc:	00042218 	cmpnei	zero,zero,4232
   41fd0:	00042218 	cmpnei	zero,zero,4232
   41fd4:	00042218 	cmpnei	zero,zero,4232
   41fd8:	00042218 	cmpnei	zero,zero,4232
   41fdc:	00042218 	cmpnei	zero,zero,4232
   41fe0:	00042218 	cmpnei	zero,zero,4232
   41fe4:	00042218 	cmpnei	zero,zero,4232
   41fe8:	00042218 	cmpnei	zero,zero,4232
   41fec:	00042218 	cmpnei	zero,zero,4232
   41ff0:	00042218 	cmpnei	zero,zero,4232
   41ff4:	00042218 	cmpnei	zero,zero,4232
   41ff8:	00042218 	cmpnei	zero,zero,4232
   41ffc:	00042218 	cmpnei	zero,zero,4232
   42000:	00042218 	cmpnei	zero,zero,4232
   42004:	00042218 	cmpnei	zero,zero,4232
   42008:	00042218 	cmpnei	zero,zero,4232
   4200c:	00042218 	cmpnei	zero,zero,4232
   42010:	00042218 	cmpnei	zero,zero,4232
   42014:	00042218 	cmpnei	zero,zero,4232
   42018:	00042218 	cmpnei	zero,zero,4232
   4201c:	00042218 	cmpnei	zero,zero,4232
   42020:	00042218 	cmpnei	zero,zero,4232
   42024:	00042218 	cmpnei	zero,zero,4232
   42028:	00042218 	cmpnei	zero,zero,4232
   4202c:	00042218 	cmpnei	zero,zero,4232
   42030:	00042218 	cmpnei	zero,zero,4232
   42034:	00042218 	cmpnei	zero,zero,4232
   42038:	00042218 	cmpnei	zero,zero,4232
   4203c:	00042218 	cmpnei	zero,zero,4232
   42040:	00042218 	cmpnei	zero,zero,4232
   42044:	00042218 	cmpnei	zero,zero,4232
   42048:	00042218 	cmpnei	zero,zero,4232
   4204c:	00042218 	cmpnei	zero,zero,4232
   42050:	00042218 	cmpnei	zero,zero,4232
   42054:	00042218 	cmpnei	zero,zero,4232
   42058:	00042218 	cmpnei	zero,zero,4232
   4205c:	00042218 	cmpnei	zero,zero,4232
   42060:	00042218 	cmpnei	zero,zero,4232
   42064:	00042218 	cmpnei	zero,zero,4232
   42068:	00042218 	cmpnei	zero,zero,4232
   4206c:	00042218 	cmpnei	zero,zero,4232
   42070:	00042218 	cmpnei	zero,zero,4232
   42074:	00042218 	cmpnei	zero,zero,4232
   42078:	00042218 	cmpnei	zero,zero,4232
   4207c:	00042218 	cmpnei	zero,zero,4232
   42080:	00042218 	cmpnei	zero,zero,4232
   42084:	00042218 	cmpnei	zero,zero,4232
   42088:	00042218 	cmpnei	zero,zero,4232
   4208c:	00042218 	cmpnei	zero,zero,4232
   42090:	00042218 	cmpnei	zero,zero,4232
   42094:	00042218 	cmpnei	zero,zero,4232
   42098:	00042218 	cmpnei	zero,zero,4232
   4209c:	00042218 	cmpnei	zero,zero,4232
   420a0:	00042218 	cmpnei	zero,zero,4232
   420a4:	00042218 	cmpnei	zero,zero,4232
   420a8:	00042218 	cmpnei	zero,zero,4232
   420ac:	00042218 	cmpnei	zero,zero,4232
   420b0:	00042218 	cmpnei	zero,zero,4232
   420b4:	00042218 	cmpnei	zero,zero,4232
   420b8:	00042218 	cmpnei	zero,zero,4232
   420bc:	000421e8 	cmpgeui	zero,zero,4231
   420c0:	00042200 	call	4220 <__alt_mem_onchip_memory-0x3bde0>
   420c4:	000421b0 	cmpltui	zero,zero,4230
   420c8:	000421b8 	rdprs	zero,zero,4230
   420cc:	000421c4 	movi	zero,4231
   420d0:	000421d0 	cmplti	zero,zero,4231
   420d4:	000421dc 	xori	zero,zero,4231
   420d8:	000421f4 	movhi	zero,4231
   420dc:	00042218 	cmpnei	zero,zero,4232
   420e0:	00042218 	cmpnei	zero,zero,4232
   420e4:	00042218 	cmpnei	zero,zero,4232
   420e8:	00042218 	cmpnei	zero,zero,4232
   420ec:	00042218 	cmpnei	zero,zero,4232
   420f0:	00042218 	cmpnei	zero,zero,4232
   420f4:	00042218 	cmpnei	zero,zero,4232
   420f8:	0004220c 	andi	zero,zero,4232
   420fc:	00042218 	cmpnei	zero,zero,4232
   42100:	00042218 	cmpnei	zero,zero,4232
   42104:	00042218 	cmpnei	zero,zero,4232
   42108:	00042218 	cmpnei	zero,zero,4232
   4210c:	00042218 	cmpnei	zero,zero,4232
   42110:	00042218 	cmpnei	zero,zero,4232
   42114:	00042218 	cmpnei	zero,zero,4232
   42118:	00042218 	cmpnei	zero,zero,4232
   4211c:	00042218 	cmpnei	zero,zero,4232
   42120:	00042218 	cmpnei	zero,zero,4232
   42124:	00042218 	cmpnei	zero,zero,4232
   42128:	00042218 	cmpnei	zero,zero,4232
   4212c:	00042218 	cmpnei	zero,zero,4232
   42130:	00042218 	cmpnei	zero,zero,4232
   42134:	00042218 	cmpnei	zero,zero,4232
   42138:	00042218 	cmpnei	zero,zero,4232
   4213c:	000421e8 	cmpgeui	zero,zero,4231
   42140:	00042200 	call	4220 <__alt_mem_onchip_memory-0x3bde0>
   42144:	000421b0 	cmpltui	zero,zero,4230
   42148:	000421b8 	rdprs	zero,zero,4230
   4214c:	000421c4 	movi	zero,4231
   42150:	000421d0 	cmplti	zero,zero,4231
   42154:	000421dc 	xori	zero,zero,4231
   42158:	000421f4 	movhi	zero,4231
   4215c:	00042218 	cmpnei	zero,zero,4232
   42160:	00042218 	cmpnei	zero,zero,4232
   42164:	00042218 	cmpnei	zero,zero,4232
   42168:	00042218 	cmpnei	zero,zero,4232
   4216c:	00042218 	cmpnei	zero,zero,4232
   42170:	00042218 	cmpnei	zero,zero,4232
   42174:	00042218 	cmpnei	zero,zero,4232
   42178:	0004220c 	andi	zero,zero,4232
      case 0: printf("End of song!\n"); payload.endofsong = TRUE; return payload; // i *think* means the null-terminated character is reached
   4217c:	01000134 	movhi	r4,4
   42180:	211af404 	addi	r4,r4,27600
   42184:	00433280 	call	43328 <puts>
   42188:	00800044 	movi	r2,1
   4218c:	e0bffe15 	stw	r2,-8(fp)
   42190:	e0bfff17 	ldw	r2,-4(fp)
   42194:	e0fffc17 	ldw	r3,-16(fp)
   42198:	10c00015 	stw	r3,0(r2)
   4219c:	e0fffd17 	ldw	r3,-12(fp)
   421a0:	10c00115 	stw	r3,4(r2)
   421a4:	e0fffe17 	ldw	r3,-8(fp)
   421a8:	10c00215 	stw	r3,8(r2)
   421ac:	0000a906 	br	42454 <getNote+0x650>
      case 'C': case 'c': note = 0; break;
   421b0:	e03ff615 	stw	zero,-40(fp)
   421b4:	00001806 	br	42218 <getNote+0x414>
      case 'D': case 'd': note = 2; break;
   421b8:	00800084 	movi	r2,2
   421bc:	e0bff615 	stw	r2,-40(fp)
   421c0:	00001506 	br	42218 <getNote+0x414>
      case 'E': case 'e': note = 4; break;
   421c4:	00800104 	movi	r2,4
   421c8:	e0bff615 	stw	r2,-40(fp)
   421cc:	00001206 	br	42218 <getNote+0x414>
      case 'F': case 'f': note = 5; break;
   421d0:	00800144 	movi	r2,5
   421d4:	e0bff615 	stw	r2,-40(fp)
   421d8:	00000f06 	br	42218 <getNote+0x414>
      case 'G': case 'g': note = 7; break;
   421dc:	008001c4 	movi	r2,7
   421e0:	e0bff615 	stw	r2,-40(fp)
   421e4:	00000c06 	br	42218 <getNote+0x414>
      case 'A': case 'a': note = 9; break;
   421e8:	00800244 	movi	r2,9
   421ec:	e0bff615 	stw	r2,-40(fp)
   421f0:	00000906 	br	42218 <getNote+0x414>
      case 'H': case 'h': note = 11; break;
   421f4:	008002c4 	movi	r2,11
   421f8:	e0bff615 	stw	r2,-40(fp)
   421fc:	00000606 	br	42218 <getNote+0x414>
      case 'B': case 'b': note = 11; break;
   42200:	008002c4 	movi	r2,11
   42204:	e0bff615 	stw	r2,-40(fp)
   42208:	00000306 	br	42218 <getNote+0x414>
      case 'P': case 'p': note = -1; break;
   4220c:	00bfffc4 	movi	r2,-1
   42210:	e0bff615 	stw	r2,-40(fp)
   42214:	0001883a 	nop
    }
    p++;
   42218:	d0a0fc17 	ldw	r2,-31760(gp)
   4221c:	10800044 	addi	r2,r2,1
   42220:	d0a0fc15 	stw	r2,-31760(gp)
    if (*p == '#') {
   42224:	d0a0fc17 	ldw	r2,-31760(gp)
   42228:	10800003 	ldbu	r2,0(r2)
   4222c:	10803fcc 	andi	r2,r2,255
   42230:	1080201c 	xori	r2,r2,128
   42234:	10bfe004 	addi	r2,r2,-128
   42238:	108008d8 	cmpnei	r2,r2,35
   4223c:	1000061e 	bne	r2,zero,42258 <getNote+0x454>
      note++;
   42240:	e0bff617 	ldw	r2,-40(fp)
   42244:	10800044 	addi	r2,r2,1
   42248:	e0bff615 	stw	r2,-40(fp)
      p++;
   4224c:	d0a0fc17 	ldw	r2,-31760(gp)
   42250:	10800044 	addi	r2,r2,1
   42254:	d0a0fc15 	stw	r2,-31760(gp)
    }
    if (*p == 'b') {
   42258:	d0a0fc17 	ldw	r2,-31760(gp)
   4225c:	10800003 	ldbu	r2,0(r2)
   42260:	10803fcc 	andi	r2,r2,255
   42264:	1080201c 	xori	r2,r2,128
   42268:	10bfe004 	addi	r2,r2,-128
   4226c:	10801898 	cmpnei	r2,r2,98
   42270:	1000061e 	bne	r2,zero,4228c <getNote+0x488>
      note--;
   42274:	e0bff617 	ldw	r2,-40(fp)
   42278:	10bfffc4 	addi	r2,r2,-1
   4227c:	e0bff615 	stw	r2,-40(fp)
      p++;
   42280:	d0a0fc17 	ldw	r2,-31760(gp)
   42284:	10800044 	addi	r2,r2,1
   42288:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Parse special duration
    if (*p == '.') {
   4228c:	d0a0fc17 	ldw	r2,-31760(gp)
   42290:	10800003 	ldbu	r2,0(r2)
   42294:	10803fcc 	andi	r2,r2,255
   42298:	1080201c 	xori	r2,r2,128
   4229c:	10bfe004 	addi	r2,r2,-128
   422a0:	10800b98 	cmpnei	r2,r2,46
   422a4:	10000b1e 	bne	r2,zero,422d4 <getNote+0x4d0>
      dur += dur / 2;
   422a8:	e0bff817 	ldw	r2,-32(fp)
   422ac:	1006d7fa 	srli	r3,r2,31
   422b0:	1885883a 	add	r2,r3,r2
   422b4:	1005d07a 	srai	r2,r2,1
   422b8:	1007883a 	mov	r3,r2
   422bc:	e0bff817 	ldw	r2,-32(fp)
   422c0:	10c5883a 	add	r2,r2,r3
   422c4:	e0bff815 	stw	r2,-32(fp)
      p++;
   422c8:	d0a0fc17 	ldw	r2,-31760(gp)
   422cc:	10800044 	addi	r2,r2,1
   422d0:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Parse scale
    if (*p >= '0' && *p <= '9') scale = (*p++ - '0');
   422d4:	d0a0fc17 	ldw	r2,-31760(gp)
   422d8:	10800003 	ldbu	r2,0(r2)
   422dc:	10803fcc 	andi	r2,r2,255
   422e0:	1080201c 	xori	r2,r2,128
   422e4:	10bfe004 	addi	r2,r2,-128
   422e8:	10800c10 	cmplti	r2,r2,48
   422ec:	1000101e 	bne	r2,zero,42330 <getNote+0x52c>
   422f0:	d0a0fc17 	ldw	r2,-31760(gp)
   422f4:	10800003 	ldbu	r2,0(r2)
   422f8:	10803fcc 	andi	r2,r2,255
   422fc:	1080201c 	xori	r2,r2,128
   42300:	10bfe004 	addi	r2,r2,-128
   42304:	10800e88 	cmpgei	r2,r2,58
   42308:	1000091e 	bne	r2,zero,42330 <getNote+0x52c>
   4230c:	d0a0fc17 	ldw	r2,-31760(gp)
   42310:	10c00044 	addi	r3,r2,1
   42314:	d0e0fc15 	stw	r3,-31760(gp)
   42318:	10800003 	ldbu	r2,0(r2)
   4231c:	10803fcc 	andi	r2,r2,255
   42320:	1080201c 	xori	r2,r2,128
   42324:	10bfe004 	addi	r2,r2,-128
   42328:	10bff404 	addi	r2,r2,-48
   4232c:	e0bff715 	stw	r2,-36(fp)

    // Parse special duration (again...)
    if (*p == '.') {
   42330:	d0a0fc17 	ldw	r2,-31760(gp)
   42334:	10800003 	ldbu	r2,0(r2)
   42338:	10803fcc 	andi	r2,r2,255
   4233c:	1080201c 	xori	r2,r2,128
   42340:	10bfe004 	addi	r2,r2,-128
   42344:	10800b98 	cmpnei	r2,r2,46
   42348:	10000f1e 	bne	r2,zero,42388 <getNote+0x584>
      dur += dur / 2;
   4234c:	e0bff817 	ldw	r2,-32(fp)
   42350:	1006d7fa 	srli	r3,r2,31
   42354:	1885883a 	add	r2,r3,r2
   42358:	1005d07a 	srai	r2,r2,1
   4235c:	1007883a 	mov	r3,r2
   42360:	e0bff817 	ldw	r2,-32(fp)
   42364:	10c5883a 	add	r2,r2,r3
   42368:	e0bff815 	stw	r2,-32(fp)
      p++;
   4236c:	d0a0fc17 	ldw	r2,-31760(gp)
   42370:	10800044 	addi	r2,r2,1
   42374:	d0a0fc15 	stw	r2,-31760(gp)
    }

    // Skip delimiter
    while (*p == ' ') p++;
   42378:	00000306 	br	42388 <getNote+0x584>
   4237c:	d0a0fc17 	ldw	r2,-31760(gp)
   42380:	10800044 	addi	r2,r2,1
   42384:	d0a0fc15 	stw	r2,-31760(gp)
   42388:	d0a0fc17 	ldw	r2,-31760(gp)
   4238c:	10800003 	ldbu	r2,0(r2)
   42390:	10803fcc 	andi	r2,r2,255
   42394:	1080201c 	xori	r2,r2,128
   42398:	10bfe004 	addi	r2,r2,-128
   4239c:	10800820 	cmpeqi	r2,r2,32
   423a0:	103ff61e 	bne	r2,zero,4237c <__alt_data_end+0xfffda37c>
    if (*p == ',') p++;
   423a4:	d0a0fc17 	ldw	r2,-31760(gp)
   423a8:	10800003 	ldbu	r2,0(r2)
   423ac:	10803fcc 	andi	r2,r2,255
   423b0:	1080201c 	xori	r2,r2,128
   423b4:	10bfe004 	addi	r2,r2,-128
   423b8:	10800b18 	cmpnei	r2,r2,44
   423bc:	1000031e 	bne	r2,zero,423cc <getNote+0x5c8>
   423c0:	d0a0fc17 	ldw	r2,-31760(gp)
   423c4:	10800044 	addi	r2,r2,1
   423c8:	d0a0fc15 	stw	r2,-31760(gp)

    // Play note
    ms = dur * 60000 / (bpm * 8);
   423cc:	e0fff817 	ldw	r3,-32(fp)
   423d0:	00ba9814 	movui	r2,60000
   423d4:	1887383a 	mul	r3,r3,r2
   423d8:	d0a00317 	ldw	r2,-32756(gp)
   423dc:	100490fa 	slli	r2,r2,3
   423e0:	100b883a 	mov	r5,r2
   423e4:	1809883a 	mov	r4,r3
   423e8:	004306c0 	call	4306c <__divsi3>
   423ec:	e0bffb15 	stw	r2,-20(fp)
    if (note == -1) {
   423f0:	e0bff617 	ldw	r2,-40(fp)
   423f4:	10bfffd8 	cmpnei	r2,r2,-1
   423f8:	1000021e 	bne	r2,zero,42404 <getNote+0x600>
      freq = 0;
   423fc:	e03ff915 	stw	zero,-28(fp)
   42400:	00000806 	br	42424 <getNote+0x620>
    } else {
      freq = note2freq((scale + 1) * 12 + note);
   42404:	e0bff717 	ldw	r2,-36(fp)
   42408:	10800044 	addi	r2,r2,1
   4240c:	10c00324 	muli	r3,r2,12
   42410:	e0bff617 	ldw	r2,-40(fp)
   42414:	1885883a 	add	r2,r3,r2
   42418:	1009883a 	mov	r4,r2
   4241c:	0041a8c0 	call	41a8c <note2freq>
   42420:	e0bff915 	stw	r2,-28(fp)
    }


    payload.frequency = freq;
   42424:	e0bff917 	ldw	r2,-28(fp)
   42428:	e0bffc15 	stw	r2,-16(fp)
    payload.duration = ms;
   4242c:	e0bffb17 	ldw	r2,-20(fp)
   42430:	e0bffd15 	stw	r2,-12(fp)
    payload.endofsong = FALSE;
   42434:	e03ffe15 	stw	zero,-8(fp)
    
    return payload;   
   42438:	e0bfff17 	ldw	r2,-4(fp)
   4243c:	e0fffc17 	ldw	r3,-16(fp)
   42440:	10c00015 	stw	r3,0(r2)
   42444:	e0fffd17 	ldw	r3,-12(fp)
   42448:	10c00115 	stw	r3,4(r2)
   4244c:	e0fffe17 	ldw	r3,-8(fp)
   42450:	10c00215 	stw	r3,8(r2)
    
  }
   42454:	e0bfff17 	ldw	r2,-4(fp)
   42458:	e037883a 	mov	sp,fp
   4245c:	dfc00117 	ldw	ra,4(sp)
   42460:	df000017 	ldw	fp,0(sp)
   42464:	dec00204 	addi	sp,sp,8
   42468:	f800283a 	ret

0004246c <determineMode>:
#include "switches.h" 

struct mode determineMode(void) {
   4246c:	defff904 	addi	sp,sp,-28
   42470:	dfc00615 	stw	ra,24(sp)
   42474:	df000515 	stw	fp,20(sp)
   42478:	dc400415 	stw	r17,16(sp)
   4247c:	dc000315 	stw	r16,12(sp)
   42480:	df000504 	addi	fp,sp,20
  ISR, the current mode is known allowing us to determine if an 
  invalid mode was requested */
  static struct mode mode;

  // this variable lets us test whether or not an invalid mode was requested
  volatile uint16_t switches_state_request = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   42484:	00800234 	movhi	r2,8
   42488:	10843804 	addi	r2,r2,4320
   4248c:	10800037 	ldwio	r2,0(r2)
   42490:	e0bffd0d 	sth	r2,-12(fp)

  // check if the request is invalid
  if (checkInvalidMode(switches_state_request) == INVALID) {
   42494:	e0bffd0b 	ldhu	r2,-12(fp)
   42498:	10bfffcc 	andi	r2,r2,65535
   4249c:	1009883a 	mov	r4,r2
   424a0:	00426e80 	call	426e8 <checkInvalidMode>
   424a4:	10803fcc 	andi	r2,r2,255
   424a8:	10800058 	cmpnei	r2,r2,1
   424ac:	10000f1e 	bne	r2,zero,424ec <determineMode+0x80>
    mode.invalid = TRUE;
   424b0:	00800044 	movi	r2,1
   424b4:	d0a0fd05 	stb	r2,-31756(gp)
    return mode;
   424b8:	d0a0fd03 	ldbu	r2,-31756(gp)
   424bc:	e0bffb45 	stb	r2,-19(fp)
   424c0:	d0a0fd43 	ldbu	r2,-31755(gp)
   424c4:	e0bffb85 	stb	r2,-18(fp)
   424c8:	d0a0fd83 	ldbu	r2,-31754(gp)
   424cc:	e0bffbc5 	stb	r2,-17(fp)
   424d0:	d0a0fdc3 	ldbu	r2,-31753(gp)
   424d4:	e0bffc05 	stb	r2,-16(fp)
   424d8:	d0a0fe03 	ldbu	r2,-31752(gp)
   424dc:	e0bffc45 	stb	r2,-15(fp)
   424e0:	d0a0fe43 	ldbu	r2,-31751(gp)
   424e4:	e0bffc85 	stb	r2,-14(fp)
   424e8:	00004906 	br	42610 <determineMode+0x1a4>
  }

  else {
    // now that we know the mode request is valid, let's determine what it is
    mode.invalid = FALSE;
   424ec:	d020fd05 	stb	zero,-31756(gp)

    uint8_t i = 0;
   424f0:	e03ffb05 	stb	zero,-20(fp)

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   424f4:	00000606 	br	42510 <determineMode+0xa4>
      i++;
   424f8:	e0bffb03 	ldbu	r2,-20(fp)
   424fc:	10800044 	addi	r2,r2,1
   42500:	e0bffb05 	stb	r2,-20(fp)
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
   42504:	e0bffb03 	ldbu	r2,-20(fp)
   42508:	10800218 	cmpnei	r2,r2,8
   4250c:	10000b26 	beq	r2,zero,4253c <determineMode+0xd0>
    mode.invalid = FALSE;

    uint8_t i = 0;

    // check for the valid mode request in lookup table
    while (switches_state_request != mode_lookup_table[i][0]) {
   42510:	e0fffb03 	ldbu	r3,-20(fp)
   42514:	00800134 	movhi	r2,4
   42518:	109b0284 	addi	r2,r2,27658
   4251c:	18c00324 	muli	r3,r3,12
   42520:	10c5883a 	add	r2,r2,r3
   42524:	10c0000b 	ldhu	r3,0(r2)
   42528:	e0bffd0b 	ldhu	r2,-12(fp)
   4252c:	18ffffcc 	andi	r3,r3,65535
   42530:	10bfffcc 	andi	r2,r2,65535
   42534:	18bff01e 	bne	r3,r2,424f8 <__alt_data_end+0xfffda4f8>
   42538:	00000106 	br	42540 <determineMode+0xd4>
      i++;
      // catch error in case the bounds of the lookup table are exceeded
      if (i == NUM_VALID_MODES) {
        break;
   4253c:	0001883a 	nop
    }

    // once the valid mode request is find, the while loop ends and we have found
    // the correct mode; its location is determined by the index i
    // at this point, we can update the members of the mode struct
    mode.display = mode_lookup_table[i][1];
   42540:	e0fffb03 	ldbu	r3,-20(fp)
   42544:	00800134 	movhi	r2,4
   42548:	109b0284 	addi	r2,r2,27658
   4254c:	18c00324 	muli	r3,r3,12
   42550:	10c5883a 	add	r2,r2,r3
   42554:	10800084 	addi	r2,r2,2
   42558:	1080000b 	ldhu	r2,0(r2)
   4255c:	d0a0fd45 	stb	r2,-31755(gp)
    mode.config.on = mode_lookup_table[i][2];
   42560:	e0fffb03 	ldbu	r3,-20(fp)
   42564:	00800134 	movhi	r2,4
   42568:	109b0284 	addi	r2,r2,27658
   4256c:	18c00324 	muli	r3,r3,12
   42570:	10c5883a 	add	r2,r2,r3
   42574:	10800104 	addi	r2,r2,4
   42578:	1080000b 	ldhu	r2,0(r2)
   4257c:	d0a0fdc5 	stb	r2,-31753(gp)
    mode.config.hour = mode_lookup_table[i][3];
   42580:	e0fffb03 	ldbu	r3,-20(fp)
   42584:	00800134 	movhi	r2,4
   42588:	109b0284 	addi	r2,r2,27658
   4258c:	18c00324 	muli	r3,r3,12
   42590:	10c5883a 	add	r2,r2,r3
   42594:	10800184 	addi	r2,r2,6
   42598:	1080000b 	ldhu	r2,0(r2)
   4259c:	d0a0fe05 	stb	r2,-31752(gp)
    mode.config.minute = mode_lookup_table[i][4];
   425a0:	e0fffb03 	ldbu	r3,-20(fp)
   425a4:	00800134 	movhi	r2,4
   425a8:	109b0284 	addi	r2,r2,27658
   425ac:	18c00324 	muli	r3,r3,12
   425b0:	10c5883a 	add	r2,r2,r3
   425b4:	10800204 	addi	r2,r2,8
   425b8:	1080000b 	ldhu	r2,0(r2)
   425bc:	d0a0fe45 	stb	r2,-31751(gp)
    mode.alarm = mode_lookup_table[i][5];
   425c0:	e0fffb03 	ldbu	r3,-20(fp)
   425c4:	00800134 	movhi	r2,4
   425c8:	109b0284 	addi	r2,r2,27658
   425cc:	18c00324 	muli	r3,r3,12
   425d0:	10c5883a 	add	r2,r2,r3
   425d4:	10800284 	addi	r2,r2,10
   425d8:	1080000b 	ldhu	r2,0(r2)
   425dc:	d0a0fd85 	stb	r2,-31754(gp)

    return mode;
   425e0:	d0a0fd03 	ldbu	r2,-31756(gp)
   425e4:	e0bffb45 	stb	r2,-19(fp)
   425e8:	d0a0fd43 	ldbu	r2,-31755(gp)
   425ec:	e0bffb85 	stb	r2,-18(fp)
   425f0:	d0a0fd83 	ldbu	r2,-31754(gp)
   425f4:	e0bffbc5 	stb	r2,-17(fp)
   425f8:	d0a0fdc3 	ldbu	r2,-31753(gp)
   425fc:	e0bffc05 	stb	r2,-16(fp)
   42600:	d0a0fe03 	ldbu	r2,-31752(gp)
   42604:	e0bffc45 	stb	r2,-15(fp)
   42608:	d0a0fe43 	ldbu	r2,-31751(gp)
   4260c:	e0bffc85 	stb	r2,-14(fp)
   42610:	0005883a 	mov	r2,zero
   42614:	e0fffb43 	ldbu	r3,-19(fp)
   42618:	18c03fcc 	andi	r3,r3,255
   4261c:	013fc004 	movi	r4,-256
   42620:	1104703a 	and	r2,r2,r4
   42624:	10c4b03a 	or	r2,r2,r3
   42628:	e0fffb83 	ldbu	r3,-18(fp)
   4262c:	18c03fcc 	andi	r3,r3,255
   42630:	1808923a 	slli	r4,r3,8
   42634:	00fffff4 	movhi	r3,65535
   42638:	18c03fc4 	addi	r3,r3,255
   4263c:	10c4703a 	and	r2,r2,r3
   42640:	1104b03a 	or	r2,r2,r4
   42644:	e0fffbc3 	ldbu	r3,-17(fp)
   42648:	18c03fcc 	andi	r3,r3,255
   4264c:	1808943a 	slli	r4,r3,16
   42650:	00ffc074 	movhi	r3,65281
   42654:	18ffffc4 	addi	r3,r3,-1
   42658:	10c4703a 	and	r2,r2,r3
   4265c:	1104b03a 	or	r2,r2,r4
   42660:	e0fffc03 	ldbu	r3,-16(fp)
   42664:	1808963a 	slli	r4,r3,24
   42668:	00c04034 	movhi	r3,256
   4266c:	18ffffc4 	addi	r3,r3,-1
   42670:	10c4703a 	and	r2,r2,r3
   42674:	1104b03a 	or	r2,r2,r4
   42678:	0009883a 	mov	r4,zero
   4267c:	e0fffc43 	ldbu	r3,-15(fp)
   42680:	18c03fcc 	andi	r3,r3,255
   42684:	017fc004 	movi	r5,-256
   42688:	2148703a 	and	r4,r4,r5
   4268c:	20c6b03a 	or	r3,r4,r3
   42690:	1809883a 	mov	r4,r3
   42694:	e0fffc83 	ldbu	r3,-14(fp)
   42698:	18c03fcc 	andi	r3,r3,255
   4269c:	180a923a 	slli	r5,r3,8
   426a0:	00fffff4 	movhi	r3,65535
   426a4:	18c03fc4 	addi	r3,r3,255
   426a8:	20c6703a 	and	r3,r4,r3
   426ac:	1946b03a 	or	r3,r3,r5
   426b0:	1809883a 	mov	r4,r3
   426b4:	1021883a 	mov	r16,r2
   426b8:	2023883a 	mov	r17,r4
   426bc:	8007883a 	mov	r3,r16
   426c0:	8809883a 	mov	r4,r17
  }

}
   426c4:	1805883a 	mov	r2,r3
   426c8:	2007883a 	mov	r3,r4
   426cc:	e6fffe04 	addi	sp,fp,-8
   426d0:	dfc00317 	ldw	ra,12(sp)
   426d4:	df000217 	ldw	fp,8(sp)
   426d8:	dc400117 	ldw	r17,4(sp)
   426dc:	dc000017 	ldw	r16,0(sp)
   426e0:	dec00404 	addi	sp,sp,16
   426e4:	f800283a 	ret

000426e8 <checkInvalidMode>:

uint8_t checkInvalidMode(uint16_t switches_state_request) {
   426e8:	defffc04 	addi	sp,sp,-16
   426ec:	dfc00315 	stw	ra,12(sp)
   426f0:	df000215 	stw	fp,8(sp)
   426f4:	df000204 	addi	fp,sp,8
   426f8:	2005883a 	mov	r2,r4
   426fc:	e0bfff0d 	sth	r2,-4(fp)
  // check if an unused switch was turned on
  uint8_t i = 0;
   42700:	e03ffe05 	stb	zero,-8(fp)

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
   42704:	e0bffe03 	ldbu	r2,-8(fp)
   42708:	108000d8 	cmpnei	r2,r2,3
   4270c:	10000e26 	beq	r2,zero,42748 <checkInvalidMode+0x60>
      break;
    }
    // if an unused switch was activated, exit function and indicate that
    // an invalid mode was selected
    else if (switches_state_request == unused_switches[i]) {
   42710:	e0bffe03 	ldbu	r2,-8(fp)
   42714:	1087883a 	add	r3,r2,r2
   42718:	d0a00404 	addi	r2,gp,-32752
   4271c:	1885883a 	add	r2,r3,r2
   42720:	1080000b 	ldhu	r2,0(r2)
   42724:	10ffffcc 	andi	r3,r2,65535
   42728:	e0bfff0b 	ldhu	r2,-4(fp)
   4272c:	1880021e 	bne	r3,r2,42738 <checkInvalidMode+0x50>
      return INVALID;
   42730:	00800044 	movi	r2,1
   42734:	00000e06 	br	42770 <checkInvalidMode+0x88>
    }

    // increment index of unused_switches array
    i++;
   42738:	e0bffe03 	ldbu	r2,-8(fp)
   4273c:	10800044 	addi	r2,r2,1
   42740:	e0bffe05 	stb	r2,-8(fp)

  } while(1);
   42744:	003fef06 	br	42704 <__alt_data_end+0xfffda704>

  do {
    // if the entire array of unused_switches was searched but an
    // unused switch was not activated, then exit while loop
    if (i == NUM_UNUSED_SWITCHES) {
      break;
   42748:	0001883a 	nop

  } while(1);

  // now that we know an unused switch is not activated, we need to verify that 
  // the used switches are in a valid configuration
  if ( isPowerOfTwoOrZero(switches_state_request) == TRUE ) {
   4274c:	e0bfff0b 	ldhu	r2,-4(fp)
   42750:	1009883a 	mov	r4,r2
   42754:	00427840 	call	42784 <isPowerOfTwoOrZero>
   42758:	10803fcc 	andi	r2,r2,255
   4275c:	10800058 	cmpnei	r2,r2,1
   42760:	1000021e 	bne	r2,zero,4276c <checkInvalidMode+0x84>
    return VALID;
   42764:	0005883a 	mov	r2,zero
   42768:	00000106 	br	42770 <checkInvalidMode+0x88>
  }

  else {
    return INVALID;
   4276c:	00800044 	movi	r2,1
  }
}
   42770:	e037883a 	mov	sp,fp
   42774:	dfc00117 	ldw	ra,4(sp)
   42778:	df000017 	ldw	fp,0(sp)
   4277c:	dec00204 	addi	sp,sp,8
   42780:	f800283a 	ret

00042784 <isPowerOfTwoOrZero>:
6 & 5  != 0 -> invalid!
7 & 6  != 0 -> invalid!
---------------------------------------------
*/ 

uint8_t isPowerOfTwoOrZero(uint16_t value) {
   42784:	defffe04 	addi	sp,sp,-8
   42788:	df000115 	stw	fp,4(sp)
   4278c:	df000104 	addi	fp,sp,4
   42790:	2005883a 	mov	r2,r4
   42794:	e0bfff0d 	sth	r2,-4(fp)
  if ((value & (value-1)) == 0) {
   42798:	e0ffff0b 	ldhu	r3,-4(fp)
   4279c:	e0bfff0b 	ldhu	r2,-4(fp)
   427a0:	10bfffc4 	addi	r2,r2,-1
   427a4:	1884703a 	and	r2,r3,r2
   427a8:	1000021e 	bne	r2,zero,427b4 <isPowerOfTwoOrZero+0x30>
    return TRUE;
   427ac:	00800044 	movi	r2,1
   427b0:	00000106 	br	427b8 <isPowerOfTwoOrZero+0x34>
  }
  else {
    return FALSE;
   427b4:	0005883a 	mov	r2,zero
  }
   427b8:	e037883a 	mov	sp,fp
   427bc:	df000017 	ldw	fp,0(sp)
   427c0:	dec00104 	addi	sp,sp,4
   427c4:	f800283a 	ret

000427c8 <resetClockTime>:


/* ------------------------ CLOCK functions ---------------------- */

// initialize clock time to default time (see display.h)
void resetClockTime(void) {
   427c8:	deffff04 	addi	sp,sp,-4
   427cc:	df000015 	stw	fp,0(sp)
   427d0:	d839883a 	mov	fp,sp
  clock.hour = reset_clock_value[0];
   427d4:	008002c4 	movi	r2,11
   427d8:	d0a0ff45 	stb	r2,-31747(gp)
  clock.minute = reset_clock_value[1];
   427dc:	00800ec4 	movi	r2,59
   427e0:	d0a0ff85 	stb	r2,-31746(gp)
  clock.second = reset_clock_value[2];
   427e4:	0005883a 	mov	r2,zero
   427e8:	d0a0ffc5 	stb	r2,-31745(gp)
}
   427ec:	0001883a 	nop
   427f0:	e037883a 	mov	sp,fp
   427f4:	df000017 	ldw	fp,0(sp)
   427f8:	dec00104 	addi	sp,sp,4
   427fc:	f800283a 	ret

00042800 <getClockTime>:

struct time getClockTime(void) {
   42800:	defffe04 	addi	sp,sp,-8
   42804:	df000115 	stw	fp,4(sp)
   42808:	df000104 	addi	fp,sp,4
  return clock;
   4280c:	d0a0ff43 	ldbu	r2,-31747(gp)
   42810:	e0bfff05 	stb	r2,-4(fp)
   42814:	d0a0ff83 	ldbu	r2,-31746(gp)
   42818:	e0bfff45 	stb	r2,-3(fp)
   4281c:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42820:	e0bfff85 	stb	r2,-2(fp)
   42824:	0005883a 	mov	r2,zero
   42828:	e0ffff03 	ldbu	r3,-4(fp)
   4282c:	18c03fcc 	andi	r3,r3,255
   42830:	013fc004 	movi	r4,-256
   42834:	1104703a 	and	r2,r2,r4
   42838:	10c4b03a 	or	r2,r2,r3
   4283c:	e0ffff43 	ldbu	r3,-3(fp)
   42840:	18c03fcc 	andi	r3,r3,255
   42844:	1808923a 	slli	r4,r3,8
   42848:	00fffff4 	movhi	r3,65535
   4284c:	18c03fc4 	addi	r3,r3,255
   42850:	10c4703a 	and	r2,r2,r3
   42854:	1104b03a 	or	r2,r2,r4
   42858:	e0ffff83 	ldbu	r3,-2(fp)
   4285c:	18c03fcc 	andi	r3,r3,255
   42860:	1808943a 	slli	r4,r3,16
   42864:	00ffc074 	movhi	r3,65281
   42868:	18ffffc4 	addi	r3,r3,-1
   4286c:	10c4703a 	and	r2,r2,r3
   42870:	1104b03a 	or	r2,r2,r4
}
   42874:	e037883a 	mov	sp,fp
   42878:	df000017 	ldw	fp,0(sp)
   4287c:	dec00104 	addi	sp,sp,4
   42880:	f800283a 	ret

00042884 <upClockSecond>:

/*--------- up operations -------*/

// SECONDS
struct time upClockSecond(uint8_t carry_setting) {
   42884:	defffc04 	addi	sp,sp,-16
   42888:	dfc00315 	stw	ra,12(sp)
   4288c:	df000215 	stw	fp,8(sp)
   42890:	df000204 	addi	fp,sp,8
   42894:	2005883a 	mov	r2,r4
   42898:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == (ONE_MINUTE-1)) {
   4289c:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428a0:	10803fcc 	andi	r2,r2,255
   428a4:	10800ed8 	cmpnei	r2,r2,59
   428a8:	1000071e 	bne	r2,zero,428c8 <upClockSecond+0x44>
    clock.second = 0;
   428ac:	d020ffc5 	stb	zero,-31745(gp)
    
    if (carry_setting == CARRY_ON) {
   428b0:	e0bfff03 	ldbu	r2,-4(fp)
   428b4:	10800058 	cmpnei	r2,r2,1
   428b8:	1000061e 	bne	r2,zero,428d4 <upClockSecond+0x50>
      upClockMinute(CARRY_ON);
   428bc:	01000044 	movi	r4,1
   428c0:	00429500 	call	42950 <upClockMinute>
   428c4:	00000306 	br	428d4 <upClockSecond+0x50>
    }
  }
  else {
    clock.second++;
   428c8:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428cc:	10800044 	addi	r2,r2,1
   428d0:	d0a0ffc5 	stb	r2,-31745(gp)
  }
  return clock;
   428d4:	d0a0ff43 	ldbu	r2,-31747(gp)
   428d8:	e0bffe05 	stb	r2,-8(fp)
   428dc:	d0a0ff83 	ldbu	r2,-31746(gp)
   428e0:	e0bffe45 	stb	r2,-7(fp)
   428e4:	d0a0ffc3 	ldbu	r2,-31745(gp)
   428e8:	e0bffe85 	stb	r2,-6(fp)
   428ec:	0005883a 	mov	r2,zero
   428f0:	e0fffe03 	ldbu	r3,-8(fp)
   428f4:	18c03fcc 	andi	r3,r3,255
   428f8:	013fc004 	movi	r4,-256
   428fc:	1104703a 	and	r2,r2,r4
   42900:	10c4b03a 	or	r2,r2,r3
   42904:	e0fffe43 	ldbu	r3,-7(fp)
   42908:	18c03fcc 	andi	r3,r3,255
   4290c:	1808923a 	slli	r4,r3,8
   42910:	00fffff4 	movhi	r3,65535
   42914:	18c03fc4 	addi	r3,r3,255
   42918:	10c4703a 	and	r2,r2,r3
   4291c:	1104b03a 	or	r2,r2,r4
   42920:	e0fffe83 	ldbu	r3,-6(fp)
   42924:	18c03fcc 	andi	r3,r3,255
   42928:	1808943a 	slli	r4,r3,16
   4292c:	00ffc074 	movhi	r3,65281
   42930:	18ffffc4 	addi	r3,r3,-1
   42934:	10c4703a 	and	r2,r2,r3
   42938:	1104b03a 	or	r2,r2,r4
}
   4293c:	e037883a 	mov	sp,fp
   42940:	dfc00117 	ldw	ra,4(sp)
   42944:	df000017 	ldw	fp,0(sp)
   42948:	dec00204 	addi	sp,sp,8
   4294c:	f800283a 	ret

00042950 <upClockMinute>:

// MINUTES
struct time upClockMinute(uint8_t carry_setting) {
   42950:	defffc04 	addi	sp,sp,-16
   42954:	dfc00315 	stw	ra,12(sp)
   42958:	df000215 	stw	fp,8(sp)
   4295c:	df000204 	addi	fp,sp,8
   42960:	2005883a 	mov	r2,r4
   42964:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == (ONE_HOUR-1)) {
   42968:	d0a0ff83 	ldbu	r2,-31746(gp)
   4296c:	10803fcc 	andi	r2,r2,255
   42970:	10800ed8 	cmpnei	r2,r2,59
   42974:	1000061e 	bne	r2,zero,42990 <upClockMinute+0x40>
    clock.minute = 0;
   42978:	d020ff85 	stb	zero,-31746(gp)
    
    if (carry_setting == CARRY_ON) {
   4297c:	e0bfff03 	ldbu	r2,-4(fp)
   42980:	10800058 	cmpnei	r2,r2,1
   42984:	1000051e 	bne	r2,zero,4299c <upClockMinute+0x4c>
      upClockHour();
   42988:	0042a180 	call	42a18 <upClockHour>
   4298c:	00000306 	br	4299c <upClockMinute+0x4c>
    }
  }
  else {
    clock.minute++;
   42990:	d0a0ff83 	ldbu	r2,-31746(gp)
   42994:	10800044 	addi	r2,r2,1
   42998:	d0a0ff85 	stb	r2,-31746(gp)
  }
  return clock;
   4299c:	d0a0ff43 	ldbu	r2,-31747(gp)
   429a0:	e0bffe05 	stb	r2,-8(fp)
   429a4:	d0a0ff83 	ldbu	r2,-31746(gp)
   429a8:	e0bffe45 	stb	r2,-7(fp)
   429ac:	d0a0ffc3 	ldbu	r2,-31745(gp)
   429b0:	e0bffe85 	stb	r2,-6(fp)
   429b4:	0005883a 	mov	r2,zero
   429b8:	e0fffe03 	ldbu	r3,-8(fp)
   429bc:	18c03fcc 	andi	r3,r3,255
   429c0:	013fc004 	movi	r4,-256
   429c4:	1104703a 	and	r2,r2,r4
   429c8:	10c4b03a 	or	r2,r2,r3
   429cc:	e0fffe43 	ldbu	r3,-7(fp)
   429d0:	18c03fcc 	andi	r3,r3,255
   429d4:	1808923a 	slli	r4,r3,8
   429d8:	00fffff4 	movhi	r3,65535
   429dc:	18c03fc4 	addi	r3,r3,255
   429e0:	10c4703a 	and	r2,r2,r3
   429e4:	1104b03a 	or	r2,r2,r4
   429e8:	e0fffe83 	ldbu	r3,-6(fp)
   429ec:	18c03fcc 	andi	r3,r3,255
   429f0:	1808943a 	slli	r4,r3,16
   429f4:	00ffc074 	movhi	r3,65281
   429f8:	18ffffc4 	addi	r3,r3,-1
   429fc:	10c4703a 	and	r2,r2,r3
   42a00:	1104b03a 	or	r2,r2,r4
}
   42a04:	e037883a 	mov	sp,fp
   42a08:	dfc00117 	ldw	ra,4(sp)
   42a0c:	df000017 	ldw	fp,0(sp)
   42a10:	dec00204 	addi	sp,sp,8
   42a14:	f800283a 	ret

00042a18 <upClockHour>:

// HOURS
struct time upClockHour(void) {
   42a18:	defffe04 	addi	sp,sp,-8
   42a1c:	df000115 	stw	fp,4(sp)
   42a20:	df000104 	addi	fp,sp,4
  if (clock.hour == (time_format-1)) {
   42a24:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a28:	10c03fcc 	andi	r3,r2,255
   42a2c:	d0a00643 	ldbu	r2,-32743(gp)
   42a30:	10803fcc 	andi	r2,r2,255
   42a34:	10bfffc4 	addi	r2,r2,-1
   42a38:	1880021e 	bne	r3,r2,42a44 <upClockHour+0x2c>
    clock.hour = 0;
   42a3c:	d020ff45 	stb	zero,-31747(gp)
   42a40:	00000306 	br	42a50 <upClockHour+0x38>
  }
  else {
    clock.hour++;
   42a44:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a48:	10800044 	addi	r2,r2,1
   42a4c:	d0a0ff45 	stb	r2,-31747(gp)
  }
  return clock;
   42a50:	d0a0ff43 	ldbu	r2,-31747(gp)
   42a54:	e0bfff05 	stb	r2,-4(fp)
   42a58:	d0a0ff83 	ldbu	r2,-31746(gp)
   42a5c:	e0bfff45 	stb	r2,-3(fp)
   42a60:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42a64:	e0bfff85 	stb	r2,-2(fp)
   42a68:	0005883a 	mov	r2,zero
   42a6c:	e0ffff03 	ldbu	r3,-4(fp)
   42a70:	18c03fcc 	andi	r3,r3,255
   42a74:	013fc004 	movi	r4,-256
   42a78:	1104703a 	and	r2,r2,r4
   42a7c:	10c4b03a 	or	r2,r2,r3
   42a80:	e0ffff43 	ldbu	r3,-3(fp)
   42a84:	18c03fcc 	andi	r3,r3,255
   42a88:	1808923a 	slli	r4,r3,8
   42a8c:	00fffff4 	movhi	r3,65535
   42a90:	18c03fc4 	addi	r3,r3,255
   42a94:	10c4703a 	and	r2,r2,r3
   42a98:	1104b03a 	or	r2,r2,r4
   42a9c:	e0ffff83 	ldbu	r3,-2(fp)
   42aa0:	18c03fcc 	andi	r3,r3,255
   42aa4:	1808943a 	slli	r4,r3,16
   42aa8:	00ffc074 	movhi	r3,65281
   42aac:	18ffffc4 	addi	r3,r3,-1
   42ab0:	10c4703a 	and	r2,r2,r3
   42ab4:	1104b03a 	or	r2,r2,r4
}
   42ab8:	e037883a 	mov	sp,fp
   42abc:	df000017 	ldw	fp,0(sp)
   42ac0:	dec00104 	addi	sp,sp,4
   42ac4:	f800283a 	ret

00042ac8 <downClockSecond>:

/*--------- down operations -------*/

// SECONDS
struct time downClockSecond(uint8_t carry_setting) {
   42ac8:	defffc04 	addi	sp,sp,-16
   42acc:	dfc00315 	stw	ra,12(sp)
   42ad0:	df000215 	stw	fp,8(sp)
   42ad4:	df000204 	addi	fp,sp,8
   42ad8:	2005883a 	mov	r2,r4
   42adc:	e0bfff05 	stb	r2,-4(fp)
  if (clock.second == 0) {
   42ae0:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42ae4:	10803fcc 	andi	r2,r2,255
   42ae8:	1000081e 	bne	r2,zero,42b0c <downClockSecond+0x44>
    clock.second = (ONE_MINUTE-1);
   42aec:	00800ec4 	movi	r2,59
   42af0:	d0a0ffc5 	stb	r2,-31745(gp)
    
    if (carry_setting == CARRY_ON) {
   42af4:	e0bfff03 	ldbu	r2,-4(fp)
   42af8:	10800058 	cmpnei	r2,r2,1
   42afc:	1000061e 	bne	r2,zero,42b18 <downClockSecond+0x50>
      downClockMinute(CARRY_ON);
   42b00:	01000044 	movi	r4,1
   42b04:	0042b940 	call	42b94 <downClockMinute>
   42b08:	00000306 	br	42b18 <downClockSecond+0x50>
    }
  }
  else {
    clock.second--;
   42b0c:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42b10:	10bfffc4 	addi	r2,r2,-1
   42b14:	d0a0ffc5 	stb	r2,-31745(gp)
  }
  return clock;
   42b18:	d0a0ff43 	ldbu	r2,-31747(gp)
   42b1c:	e0bffe05 	stb	r2,-8(fp)
   42b20:	d0a0ff83 	ldbu	r2,-31746(gp)
   42b24:	e0bffe45 	stb	r2,-7(fp)
   42b28:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42b2c:	e0bffe85 	stb	r2,-6(fp)
   42b30:	0005883a 	mov	r2,zero
   42b34:	e0fffe03 	ldbu	r3,-8(fp)
   42b38:	18c03fcc 	andi	r3,r3,255
   42b3c:	013fc004 	movi	r4,-256
   42b40:	1104703a 	and	r2,r2,r4
   42b44:	10c4b03a 	or	r2,r2,r3
   42b48:	e0fffe43 	ldbu	r3,-7(fp)
   42b4c:	18c03fcc 	andi	r3,r3,255
   42b50:	1808923a 	slli	r4,r3,8
   42b54:	00fffff4 	movhi	r3,65535
   42b58:	18c03fc4 	addi	r3,r3,255
   42b5c:	10c4703a 	and	r2,r2,r3
   42b60:	1104b03a 	or	r2,r2,r4
   42b64:	e0fffe83 	ldbu	r3,-6(fp)
   42b68:	18c03fcc 	andi	r3,r3,255
   42b6c:	1808943a 	slli	r4,r3,16
   42b70:	00ffc074 	movhi	r3,65281
   42b74:	18ffffc4 	addi	r3,r3,-1
   42b78:	10c4703a 	and	r2,r2,r3
   42b7c:	1104b03a 	or	r2,r2,r4
}
   42b80:	e037883a 	mov	sp,fp
   42b84:	dfc00117 	ldw	ra,4(sp)
   42b88:	df000017 	ldw	fp,0(sp)
   42b8c:	dec00204 	addi	sp,sp,8
   42b90:	f800283a 	ret

00042b94 <downClockMinute>:

// MINUTES
struct time downClockMinute(uint8_t carry_setting) {
   42b94:	defffc04 	addi	sp,sp,-16
   42b98:	dfc00315 	stw	ra,12(sp)
   42b9c:	df000215 	stw	fp,8(sp)
   42ba0:	df000204 	addi	fp,sp,8
   42ba4:	2005883a 	mov	r2,r4
   42ba8:	e0bfff05 	stb	r2,-4(fp)
  if (clock.minute == 0) {
   42bac:	d0a0ff83 	ldbu	r2,-31746(gp)
   42bb0:	10803fcc 	andi	r2,r2,255
   42bb4:	1000071e 	bne	r2,zero,42bd4 <downClockMinute+0x40>
    clock.minute = (ONE_HOUR-1);
   42bb8:	00800ec4 	movi	r2,59
   42bbc:	d0a0ff85 	stb	r2,-31746(gp)
    
    if (carry_setting == CARRY_ON) {
   42bc0:	e0bfff03 	ldbu	r2,-4(fp)
   42bc4:	10800058 	cmpnei	r2,r2,1
   42bc8:	1000051e 	bne	r2,zero,42be0 <downClockMinute+0x4c>
      downClockHour();
   42bcc:	0042c5c0 	call	42c5c <downClockHour>
   42bd0:	00000306 	br	42be0 <downClockMinute+0x4c>
    }
  }
  else {
    clock.minute--;
   42bd4:	d0a0ff83 	ldbu	r2,-31746(gp)
   42bd8:	10bfffc4 	addi	r2,r2,-1
   42bdc:	d0a0ff85 	stb	r2,-31746(gp)
  }
  return clock;
   42be0:	d0a0ff43 	ldbu	r2,-31747(gp)
   42be4:	e0bffe05 	stb	r2,-8(fp)
   42be8:	d0a0ff83 	ldbu	r2,-31746(gp)
   42bec:	e0bffe45 	stb	r2,-7(fp)
   42bf0:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42bf4:	e0bffe85 	stb	r2,-6(fp)
   42bf8:	0005883a 	mov	r2,zero
   42bfc:	e0fffe03 	ldbu	r3,-8(fp)
   42c00:	18c03fcc 	andi	r3,r3,255
   42c04:	013fc004 	movi	r4,-256
   42c08:	1104703a 	and	r2,r2,r4
   42c0c:	10c4b03a 	or	r2,r2,r3
   42c10:	e0fffe43 	ldbu	r3,-7(fp)
   42c14:	18c03fcc 	andi	r3,r3,255
   42c18:	1808923a 	slli	r4,r3,8
   42c1c:	00fffff4 	movhi	r3,65535
   42c20:	18c03fc4 	addi	r3,r3,255
   42c24:	10c4703a 	and	r2,r2,r3
   42c28:	1104b03a 	or	r2,r2,r4
   42c2c:	e0fffe83 	ldbu	r3,-6(fp)
   42c30:	18c03fcc 	andi	r3,r3,255
   42c34:	1808943a 	slli	r4,r3,16
   42c38:	00ffc074 	movhi	r3,65281
   42c3c:	18ffffc4 	addi	r3,r3,-1
   42c40:	10c4703a 	and	r2,r2,r3
   42c44:	1104b03a 	or	r2,r2,r4
}
   42c48:	e037883a 	mov	sp,fp
   42c4c:	dfc00117 	ldw	ra,4(sp)
   42c50:	df000017 	ldw	fp,0(sp)
   42c54:	dec00204 	addi	sp,sp,8
   42c58:	f800283a 	ret

00042c5c <downClockHour>:

// HOURS
struct time downClockHour(void) {
   42c5c:	defffe04 	addi	sp,sp,-8
   42c60:	df000115 	stw	fp,4(sp)
   42c64:	df000104 	addi	fp,sp,4
  if (clock.hour == 0) {
   42c68:	d0a0ff43 	ldbu	r2,-31747(gp)
   42c6c:	10803fcc 	andi	r2,r2,255
   42c70:	1000041e 	bne	r2,zero,42c84 <downClockHour+0x28>
    clock.hour = (time_format-1);
   42c74:	d0a00643 	ldbu	r2,-32743(gp)
   42c78:	10bfffc4 	addi	r2,r2,-1
   42c7c:	d0a0ff45 	stb	r2,-31747(gp)
   42c80:	00000306 	br	42c90 <downClockHour+0x34>
  }
  else {
    clock.hour--;
   42c84:	d0a0ff43 	ldbu	r2,-31747(gp)
   42c88:	10bfffc4 	addi	r2,r2,-1
   42c8c:	d0a0ff45 	stb	r2,-31747(gp)
  }
  return clock;
   42c90:	d0a0ff43 	ldbu	r2,-31747(gp)
   42c94:	e0bfff05 	stb	r2,-4(fp)
   42c98:	d0a0ff83 	ldbu	r2,-31746(gp)
   42c9c:	e0bfff45 	stb	r2,-3(fp)
   42ca0:	d0a0ffc3 	ldbu	r2,-31745(gp)
   42ca4:	e0bfff85 	stb	r2,-2(fp)
   42ca8:	0005883a 	mov	r2,zero
   42cac:	e0ffff03 	ldbu	r3,-4(fp)
   42cb0:	18c03fcc 	andi	r3,r3,255
   42cb4:	013fc004 	movi	r4,-256
   42cb8:	1104703a 	and	r2,r2,r4
   42cbc:	10c4b03a 	or	r2,r2,r3
   42cc0:	e0ffff43 	ldbu	r3,-3(fp)
   42cc4:	18c03fcc 	andi	r3,r3,255
   42cc8:	1808923a 	slli	r4,r3,8
   42ccc:	00fffff4 	movhi	r3,65535
   42cd0:	18c03fc4 	addi	r3,r3,255
   42cd4:	10c4703a 	and	r2,r2,r3
   42cd8:	1104b03a 	or	r2,r2,r4
   42cdc:	e0ffff83 	ldbu	r3,-2(fp)
   42ce0:	18c03fcc 	andi	r3,r3,255
   42ce4:	1808943a 	slli	r4,r3,16
   42ce8:	00ffc074 	movhi	r3,65281
   42cec:	18ffffc4 	addi	r3,r3,-1
   42cf0:	10c4703a 	and	r2,r2,r3
   42cf4:	1104b03a 	or	r2,r2,r4
}
   42cf8:	e037883a 	mov	sp,fp
   42cfc:	df000017 	ldw	fp,0(sp)
   42d00:	dec00104 	addi	sp,sp,4
   42d04:	f800283a 	ret

00042d08 <resetAlarmTime>:


/* ------------------------ ALARM functions ---------------------- */

// initialize alarm time to 00:00 (seconds are turned off)
void resetAlarmTime(void) {
   42d08:	deffff04 	addi	sp,sp,-4
   42d0c:	df000015 	stw	fp,0(sp)
   42d10:	d839883a 	mov	fp,sp
  // necessary to cast to a time struct, otherwise the 
  // value assignment won't work
  alarm =  (struct time){0};
   42d14:	d020fe85 	stb	zero,-31750(gp)
   42d18:	d020fec5 	stb	zero,-31749(gp)
   42d1c:	d020ff05 	stb	zero,-31748(gp)

  // we explicitly request that the seconds are not displayed
  alarm.second = DONT_DISPLAY;
   42d20:	00801904 	movi	r2,100
   42d24:	d0a0ff05 	stb	r2,-31748(gp)
}
   42d28:	0001883a 	nop
   42d2c:	e037883a 	mov	sp,fp
   42d30:	df000017 	ldw	fp,0(sp)
   42d34:	dec00104 	addi	sp,sp,4
   42d38:	f800283a 	ret

00042d3c <getAlarmTime>:

struct time getAlarmTime(void) {
   42d3c:	defffe04 	addi	sp,sp,-8
   42d40:	df000115 	stw	fp,4(sp)
   42d44:	df000104 	addi	fp,sp,4
  return alarm;
   42d48:	d0a0fe83 	ldbu	r2,-31750(gp)
   42d4c:	e0bfff05 	stb	r2,-4(fp)
   42d50:	d0a0fec3 	ldbu	r2,-31749(gp)
   42d54:	e0bfff45 	stb	r2,-3(fp)
   42d58:	d0a0ff03 	ldbu	r2,-31748(gp)
   42d5c:	e0bfff85 	stb	r2,-2(fp)
   42d60:	0005883a 	mov	r2,zero
   42d64:	e0ffff03 	ldbu	r3,-4(fp)
   42d68:	18c03fcc 	andi	r3,r3,255
   42d6c:	013fc004 	movi	r4,-256
   42d70:	1104703a 	and	r2,r2,r4
   42d74:	10c4b03a 	or	r2,r2,r3
   42d78:	e0ffff43 	ldbu	r3,-3(fp)
   42d7c:	18c03fcc 	andi	r3,r3,255
   42d80:	1808923a 	slli	r4,r3,8
   42d84:	00fffff4 	movhi	r3,65535
   42d88:	18c03fc4 	addi	r3,r3,255
   42d8c:	10c4703a 	and	r2,r2,r3
   42d90:	1104b03a 	or	r2,r2,r4
   42d94:	e0ffff83 	ldbu	r3,-2(fp)
   42d98:	18c03fcc 	andi	r3,r3,255
   42d9c:	1808943a 	slli	r4,r3,16
   42da0:	00ffc074 	movhi	r3,65281
   42da4:	18ffffc4 	addi	r3,r3,-1
   42da8:	10c4703a 	and	r2,r2,r3
   42dac:	1104b03a 	or	r2,r2,r4
}
   42db0:	e037883a 	mov	sp,fp
   42db4:	df000017 	ldw	fp,0(sp)
   42db8:	dec00104 	addi	sp,sp,4
   42dbc:	f800283a 	ret

00042dc0 <upAlarmMinute>:

/*--------- up operations -------*/

// MINUTES
struct time upAlarmMinute(void) {
   42dc0:	defffe04 	addi	sp,sp,-8
   42dc4:	df000115 	stw	fp,4(sp)
   42dc8:	df000104 	addi	fp,sp,4
  if (alarm.minute == (ONE_HOUR-1)) {
   42dcc:	d0a0fec3 	ldbu	r2,-31749(gp)
   42dd0:	10803fcc 	andi	r2,r2,255
   42dd4:	10800ed8 	cmpnei	r2,r2,59
   42dd8:	1000021e 	bne	r2,zero,42de4 <upAlarmMinute+0x24>
    alarm.minute = 0;
   42ddc:	d020fec5 	stb	zero,-31749(gp)
   42de0:	00000306 	br	42df0 <upAlarmMinute+0x30>
  }
  else {
    alarm.minute++;
   42de4:	d0a0fec3 	ldbu	r2,-31749(gp)
   42de8:	10800044 	addi	r2,r2,1
   42dec:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return alarm;
   42df0:	d0a0fe83 	ldbu	r2,-31750(gp)
   42df4:	e0bfff05 	stb	r2,-4(fp)
   42df8:	d0a0fec3 	ldbu	r2,-31749(gp)
   42dfc:	e0bfff45 	stb	r2,-3(fp)
   42e00:	d0a0ff03 	ldbu	r2,-31748(gp)
   42e04:	e0bfff85 	stb	r2,-2(fp)
   42e08:	0005883a 	mov	r2,zero
   42e0c:	e0ffff03 	ldbu	r3,-4(fp)
   42e10:	18c03fcc 	andi	r3,r3,255
   42e14:	013fc004 	movi	r4,-256
   42e18:	1104703a 	and	r2,r2,r4
   42e1c:	10c4b03a 	or	r2,r2,r3
   42e20:	e0ffff43 	ldbu	r3,-3(fp)
   42e24:	18c03fcc 	andi	r3,r3,255
   42e28:	1808923a 	slli	r4,r3,8
   42e2c:	00fffff4 	movhi	r3,65535
   42e30:	18c03fc4 	addi	r3,r3,255
   42e34:	10c4703a 	and	r2,r2,r3
   42e38:	1104b03a 	or	r2,r2,r4
   42e3c:	e0ffff83 	ldbu	r3,-2(fp)
   42e40:	18c03fcc 	andi	r3,r3,255
   42e44:	1808943a 	slli	r4,r3,16
   42e48:	00ffc074 	movhi	r3,65281
   42e4c:	18ffffc4 	addi	r3,r3,-1
   42e50:	10c4703a 	and	r2,r2,r3
   42e54:	1104b03a 	or	r2,r2,r4
}
   42e58:	e037883a 	mov	sp,fp
   42e5c:	df000017 	ldw	fp,0(sp)
   42e60:	dec00104 	addi	sp,sp,4
   42e64:	f800283a 	ret

00042e68 <upAlarmHour>:

// HOURS
struct time upAlarmHour(void) {
   42e68:	defffe04 	addi	sp,sp,-8
   42e6c:	df000115 	stw	fp,4(sp)
   42e70:	df000104 	addi	fp,sp,4
  if (alarm.hour == (time_format-1)) {
   42e74:	d0a0fe83 	ldbu	r2,-31750(gp)
   42e78:	10c03fcc 	andi	r3,r2,255
   42e7c:	d0a00643 	ldbu	r2,-32743(gp)
   42e80:	10803fcc 	andi	r2,r2,255
   42e84:	10bfffc4 	addi	r2,r2,-1
   42e88:	1880021e 	bne	r3,r2,42e94 <upAlarmHour+0x2c>
    alarm.hour = 0;
   42e8c:	d020fe85 	stb	zero,-31750(gp)
   42e90:	00000306 	br	42ea0 <upAlarmHour+0x38>
  }
  else {
    alarm.hour++;
   42e94:	d0a0fe83 	ldbu	r2,-31750(gp)
   42e98:	10800044 	addi	r2,r2,1
   42e9c:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return alarm;
   42ea0:	d0a0fe83 	ldbu	r2,-31750(gp)
   42ea4:	e0bfff05 	stb	r2,-4(fp)
   42ea8:	d0a0fec3 	ldbu	r2,-31749(gp)
   42eac:	e0bfff45 	stb	r2,-3(fp)
   42eb0:	d0a0ff03 	ldbu	r2,-31748(gp)
   42eb4:	e0bfff85 	stb	r2,-2(fp)
   42eb8:	0005883a 	mov	r2,zero
   42ebc:	e0ffff03 	ldbu	r3,-4(fp)
   42ec0:	18c03fcc 	andi	r3,r3,255
   42ec4:	013fc004 	movi	r4,-256
   42ec8:	1104703a 	and	r2,r2,r4
   42ecc:	10c4b03a 	or	r2,r2,r3
   42ed0:	e0ffff43 	ldbu	r3,-3(fp)
   42ed4:	18c03fcc 	andi	r3,r3,255
   42ed8:	1808923a 	slli	r4,r3,8
   42edc:	00fffff4 	movhi	r3,65535
   42ee0:	18c03fc4 	addi	r3,r3,255
   42ee4:	10c4703a 	and	r2,r2,r3
   42ee8:	1104b03a 	or	r2,r2,r4
   42eec:	e0ffff83 	ldbu	r3,-2(fp)
   42ef0:	18c03fcc 	andi	r3,r3,255
   42ef4:	1808943a 	slli	r4,r3,16
   42ef8:	00ffc074 	movhi	r3,65281
   42efc:	18ffffc4 	addi	r3,r3,-1
   42f00:	10c4703a 	and	r2,r2,r3
   42f04:	1104b03a 	or	r2,r2,r4
}
   42f08:	e037883a 	mov	sp,fp
   42f0c:	df000017 	ldw	fp,0(sp)
   42f10:	dec00104 	addi	sp,sp,4
   42f14:	f800283a 	ret

00042f18 <downAlarmMinute>:

/*--------- down operations -------*/

// MINUTES
struct time downAlarmMinute(void) {
   42f18:	defffe04 	addi	sp,sp,-8
   42f1c:	df000115 	stw	fp,4(sp)
   42f20:	df000104 	addi	fp,sp,4
  if (alarm.minute == 0) {
   42f24:	d0a0fec3 	ldbu	r2,-31749(gp)
   42f28:	10803fcc 	andi	r2,r2,255
   42f2c:	1000031e 	bne	r2,zero,42f3c <downAlarmMinute+0x24>
    alarm.minute = (ONE_HOUR-1);
   42f30:	00800ec4 	movi	r2,59
   42f34:	d0a0fec5 	stb	r2,-31749(gp)
   42f38:	00000306 	br	42f48 <downAlarmMinute+0x30>
  }
  else {
    alarm.minute--;
   42f3c:	d0a0fec3 	ldbu	r2,-31749(gp)
   42f40:	10bfffc4 	addi	r2,r2,-1
   42f44:	d0a0fec5 	stb	r2,-31749(gp)
  }
  return alarm;
   42f48:	d0a0fe83 	ldbu	r2,-31750(gp)
   42f4c:	e0bfff05 	stb	r2,-4(fp)
   42f50:	d0a0fec3 	ldbu	r2,-31749(gp)
   42f54:	e0bfff45 	stb	r2,-3(fp)
   42f58:	d0a0ff03 	ldbu	r2,-31748(gp)
   42f5c:	e0bfff85 	stb	r2,-2(fp)
   42f60:	0005883a 	mov	r2,zero
   42f64:	e0ffff03 	ldbu	r3,-4(fp)
   42f68:	18c03fcc 	andi	r3,r3,255
   42f6c:	013fc004 	movi	r4,-256
   42f70:	1104703a 	and	r2,r2,r4
   42f74:	10c4b03a 	or	r2,r2,r3
   42f78:	e0ffff43 	ldbu	r3,-3(fp)
   42f7c:	18c03fcc 	andi	r3,r3,255
   42f80:	1808923a 	slli	r4,r3,8
   42f84:	00fffff4 	movhi	r3,65535
   42f88:	18c03fc4 	addi	r3,r3,255
   42f8c:	10c4703a 	and	r2,r2,r3
   42f90:	1104b03a 	or	r2,r2,r4
   42f94:	e0ffff83 	ldbu	r3,-2(fp)
   42f98:	18c03fcc 	andi	r3,r3,255
   42f9c:	1808943a 	slli	r4,r3,16
   42fa0:	00ffc074 	movhi	r3,65281
   42fa4:	18ffffc4 	addi	r3,r3,-1
   42fa8:	10c4703a 	and	r2,r2,r3
   42fac:	1104b03a 	or	r2,r2,r4
}
   42fb0:	e037883a 	mov	sp,fp
   42fb4:	df000017 	ldw	fp,0(sp)
   42fb8:	dec00104 	addi	sp,sp,4
   42fbc:	f800283a 	ret

00042fc0 <downAlarmHour>:

// HOURS
struct time downAlarmHour(void) {
   42fc0:	defffe04 	addi	sp,sp,-8
   42fc4:	df000115 	stw	fp,4(sp)
   42fc8:	df000104 	addi	fp,sp,4
  if (alarm.hour == 0) {
   42fcc:	d0a0fe83 	ldbu	r2,-31750(gp)
   42fd0:	10803fcc 	andi	r2,r2,255
   42fd4:	1000041e 	bne	r2,zero,42fe8 <downAlarmHour+0x28>
    alarm.hour = (time_format-1);
   42fd8:	d0a00643 	ldbu	r2,-32743(gp)
   42fdc:	10bfffc4 	addi	r2,r2,-1
   42fe0:	d0a0fe85 	stb	r2,-31750(gp)
   42fe4:	00000306 	br	42ff4 <downAlarmHour+0x34>
  }
  else {
    alarm.hour--;
   42fe8:	d0a0fe83 	ldbu	r2,-31750(gp)
   42fec:	10bfffc4 	addi	r2,r2,-1
   42ff0:	d0a0fe85 	stb	r2,-31750(gp)
  }
  return alarm;
   42ff4:	d0a0fe83 	ldbu	r2,-31750(gp)
   42ff8:	e0bfff05 	stb	r2,-4(fp)
   42ffc:	d0a0fec3 	ldbu	r2,-31749(gp)
   43000:	e0bfff45 	stb	r2,-3(fp)
   43004:	d0a0ff03 	ldbu	r2,-31748(gp)
   43008:	e0bfff85 	stb	r2,-2(fp)
   4300c:	0005883a 	mov	r2,zero
   43010:	e0ffff03 	ldbu	r3,-4(fp)
   43014:	18c03fcc 	andi	r3,r3,255
   43018:	013fc004 	movi	r4,-256
   4301c:	1104703a 	and	r2,r2,r4
   43020:	10c4b03a 	or	r2,r2,r3
   43024:	e0ffff43 	ldbu	r3,-3(fp)
   43028:	18c03fcc 	andi	r3,r3,255
   4302c:	1808923a 	slli	r4,r3,8
   43030:	00fffff4 	movhi	r3,65535
   43034:	18c03fc4 	addi	r3,r3,255
   43038:	10c4703a 	and	r2,r2,r3
   4303c:	1104b03a 	or	r2,r2,r4
   43040:	e0ffff83 	ldbu	r3,-2(fp)
   43044:	18c03fcc 	andi	r3,r3,255
   43048:	1808943a 	slli	r4,r3,16
   4304c:	00ffc074 	movhi	r3,65281
   43050:	18ffffc4 	addi	r3,r3,-1
   43054:	10c4703a 	and	r2,r2,r3
   43058:	1104b03a 	or	r2,r2,r4
}
   4305c:	e037883a 	mov	sp,fp
   43060:	df000017 	ldw	fp,0(sp)
   43064:	dec00104 	addi	sp,sp,4
   43068:	f800283a 	ret

0004306c <__divsi3>:
   4306c:	20001b16 	blt	r4,zero,430dc <__divsi3+0x70>
   43070:	000f883a 	mov	r7,zero
   43074:	28001616 	blt	r5,zero,430d0 <__divsi3+0x64>
   43078:	200d883a 	mov	r6,r4
   4307c:	29001a2e 	bgeu	r5,r4,430e8 <__divsi3+0x7c>
   43080:	00800804 	movi	r2,32
   43084:	00c00044 	movi	r3,1
   43088:	00000106 	br	43090 <__divsi3+0x24>
   4308c:	10000d26 	beq	r2,zero,430c4 <__divsi3+0x58>
   43090:	294b883a 	add	r5,r5,r5
   43094:	10bfffc4 	addi	r2,r2,-1
   43098:	18c7883a 	add	r3,r3,r3
   4309c:	293ffb36 	bltu	r5,r4,4308c <__alt_data_end+0xfffdb08c>
   430a0:	0005883a 	mov	r2,zero
   430a4:	18000726 	beq	r3,zero,430c4 <__divsi3+0x58>
   430a8:	0005883a 	mov	r2,zero
   430ac:	31400236 	bltu	r6,r5,430b8 <__divsi3+0x4c>
   430b0:	314dc83a 	sub	r6,r6,r5
   430b4:	10c4b03a 	or	r2,r2,r3
   430b8:	1806d07a 	srli	r3,r3,1
   430bc:	280ad07a 	srli	r5,r5,1
   430c0:	183ffa1e 	bne	r3,zero,430ac <__alt_data_end+0xfffdb0ac>
   430c4:	38000126 	beq	r7,zero,430cc <__divsi3+0x60>
   430c8:	0085c83a 	sub	r2,zero,r2
   430cc:	f800283a 	ret
   430d0:	014bc83a 	sub	r5,zero,r5
   430d4:	39c0005c 	xori	r7,r7,1
   430d8:	003fe706 	br	43078 <__alt_data_end+0xfffdb078>
   430dc:	0109c83a 	sub	r4,zero,r4
   430e0:	01c00044 	movi	r7,1
   430e4:	003fe306 	br	43074 <__alt_data_end+0xfffdb074>
   430e8:	00c00044 	movi	r3,1
   430ec:	003fee06 	br	430a8 <__alt_data_end+0xfffdb0a8>

000430f0 <__modsi3>:
   430f0:	20001716 	blt	r4,zero,43150 <__modsi3+0x60>
   430f4:	000f883a 	mov	r7,zero
   430f8:	2005883a 	mov	r2,r4
   430fc:	28001216 	blt	r5,zero,43148 <__modsi3+0x58>
   43100:	2900162e 	bgeu	r5,r4,4315c <__modsi3+0x6c>
   43104:	01800804 	movi	r6,32
   43108:	00c00044 	movi	r3,1
   4310c:	00000106 	br	43114 <__modsi3+0x24>
   43110:	30000a26 	beq	r6,zero,4313c <__modsi3+0x4c>
   43114:	294b883a 	add	r5,r5,r5
   43118:	31bfffc4 	addi	r6,r6,-1
   4311c:	18c7883a 	add	r3,r3,r3
   43120:	293ffb36 	bltu	r5,r4,43110 <__alt_data_end+0xfffdb110>
   43124:	18000526 	beq	r3,zero,4313c <__modsi3+0x4c>
   43128:	1806d07a 	srli	r3,r3,1
   4312c:	11400136 	bltu	r2,r5,43134 <__modsi3+0x44>
   43130:	1145c83a 	sub	r2,r2,r5
   43134:	280ad07a 	srli	r5,r5,1
   43138:	183ffb1e 	bne	r3,zero,43128 <__alt_data_end+0xfffdb128>
   4313c:	38000126 	beq	r7,zero,43144 <__modsi3+0x54>
   43140:	0085c83a 	sub	r2,zero,r2
   43144:	f800283a 	ret
   43148:	014bc83a 	sub	r5,zero,r5
   4314c:	003fec06 	br	43100 <__alt_data_end+0xfffdb100>
   43150:	0109c83a 	sub	r4,zero,r4
   43154:	01c00044 	movi	r7,1
   43158:	003fe706 	br	430f8 <__alt_data_end+0xfffdb0f8>
   4315c:	00c00044 	movi	r3,1
   43160:	003ff106 	br	43128 <__alt_data_end+0xfffdb128>

00043164 <__udivsi3>:
   43164:	200d883a 	mov	r6,r4
   43168:	2900152e 	bgeu	r5,r4,431c0 <__udivsi3+0x5c>
   4316c:	28001416 	blt	r5,zero,431c0 <__udivsi3+0x5c>
   43170:	00800804 	movi	r2,32
   43174:	00c00044 	movi	r3,1
   43178:	00000206 	br	43184 <__udivsi3+0x20>
   4317c:	10000e26 	beq	r2,zero,431b8 <__udivsi3+0x54>
   43180:	28000516 	blt	r5,zero,43198 <__udivsi3+0x34>
   43184:	294b883a 	add	r5,r5,r5
   43188:	10bfffc4 	addi	r2,r2,-1
   4318c:	18c7883a 	add	r3,r3,r3
   43190:	293ffa36 	bltu	r5,r4,4317c <__alt_data_end+0xfffdb17c>
   43194:	18000826 	beq	r3,zero,431b8 <__udivsi3+0x54>
   43198:	0005883a 	mov	r2,zero
   4319c:	31400236 	bltu	r6,r5,431a8 <__udivsi3+0x44>
   431a0:	314dc83a 	sub	r6,r6,r5
   431a4:	10c4b03a 	or	r2,r2,r3
   431a8:	1806d07a 	srli	r3,r3,1
   431ac:	280ad07a 	srli	r5,r5,1
   431b0:	183ffa1e 	bne	r3,zero,4319c <__alt_data_end+0xfffdb19c>
   431b4:	f800283a 	ret
   431b8:	0005883a 	mov	r2,zero
   431bc:	f800283a 	ret
   431c0:	00c00044 	movi	r3,1
   431c4:	003ff406 	br	43198 <__alt_data_end+0xfffdb198>

000431c8 <__umodsi3>:
   431c8:	2005883a 	mov	r2,r4
   431cc:	2900122e 	bgeu	r5,r4,43218 <__umodsi3+0x50>
   431d0:	28001116 	blt	r5,zero,43218 <__umodsi3+0x50>
   431d4:	01800804 	movi	r6,32
   431d8:	00c00044 	movi	r3,1
   431dc:	00000206 	br	431e8 <__umodsi3+0x20>
   431e0:	30000c26 	beq	r6,zero,43214 <__umodsi3+0x4c>
   431e4:	28000516 	blt	r5,zero,431fc <__umodsi3+0x34>
   431e8:	294b883a 	add	r5,r5,r5
   431ec:	31bfffc4 	addi	r6,r6,-1
   431f0:	18c7883a 	add	r3,r3,r3
   431f4:	293ffa36 	bltu	r5,r4,431e0 <__alt_data_end+0xfffdb1e0>
   431f8:	18000626 	beq	r3,zero,43214 <__umodsi3+0x4c>
   431fc:	1806d07a 	srli	r3,r3,1
   43200:	11400136 	bltu	r2,r5,43208 <__umodsi3+0x40>
   43204:	1145c83a 	sub	r2,r2,r5
   43208:	280ad07a 	srli	r5,r5,1
   4320c:	183ffb1e 	bne	r3,zero,431fc <__alt_data_end+0xfffdb1fc>
   43210:	f800283a 	ret
   43214:	f800283a 	ret
   43218:	00c00044 	movi	r3,1
   4321c:	003ff706 	br	431fc <__alt_data_end+0xfffdb1fc>

00043220 <_printf_r>:
   43220:	defffd04 	addi	sp,sp,-12
   43224:	dfc00015 	stw	ra,0(sp)
   43228:	d9800115 	stw	r6,4(sp)
   4322c:	d9c00215 	stw	r7,8(sp)
   43230:	20c00217 	ldw	r3,8(r4)
   43234:	01800134 	movhi	r6,4
   43238:	318e4104 	addi	r6,r6,14596
   4323c:	19800115 	stw	r6,4(r3)
   43240:	280d883a 	mov	r6,r5
   43244:	21400217 	ldw	r5,8(r4)
   43248:	d9c00104 	addi	r7,sp,4
   4324c:	00433c40 	call	433c4 <___vfprintf_internal_r>
   43250:	dfc00017 	ldw	ra,0(sp)
   43254:	dec00304 	addi	sp,sp,12
   43258:	f800283a 	ret

0004325c <printf>:
   4325c:	defffc04 	addi	sp,sp,-16
   43260:	dfc00015 	stw	ra,0(sp)
   43264:	d9400115 	stw	r5,4(sp)
   43268:	d9800215 	stw	r6,8(sp)
   4326c:	d9c00315 	stw	r7,12(sp)
   43270:	00800134 	movhi	r2,4
   43274:	109c0904 	addi	r2,r2,28708
   43278:	10800017 	ldw	r2,0(r2)
   4327c:	01400134 	movhi	r5,4
   43280:	294e4104 	addi	r5,r5,14596
   43284:	10c00217 	ldw	r3,8(r2)
   43288:	d9800104 	addi	r6,sp,4
   4328c:	19400115 	stw	r5,4(r3)
   43290:	200b883a 	mov	r5,r4
   43294:	11000217 	ldw	r4,8(r2)
   43298:	00438e80 	call	438e8 <__vfprintf_internal>
   4329c:	dfc00017 	ldw	ra,0(sp)
   432a0:	dec00404 	addi	sp,sp,16
   432a4:	f800283a 	ret

000432a8 <_puts_r>:
   432a8:	defffd04 	addi	sp,sp,-12
   432ac:	dc000015 	stw	r16,0(sp)
   432b0:	2021883a 	mov	r16,r4
   432b4:	2809883a 	mov	r4,r5
   432b8:	dfc00215 	stw	ra,8(sp)
   432bc:	dc400115 	stw	r17,4(sp)
   432c0:	2823883a 	mov	r17,r5
   432c4:	004333c0 	call	4333c <strlen>
   432c8:	81400217 	ldw	r5,8(r16)
   432cc:	01000134 	movhi	r4,4
   432d0:	210e4104 	addi	r4,r4,14596
   432d4:	29000115 	stw	r4,4(r5)
   432d8:	100f883a 	mov	r7,r2
   432dc:	880d883a 	mov	r6,r17
   432e0:	8009883a 	mov	r4,r16
   432e4:	00439040 	call	43904 <__sfvwrite_small_dev>
   432e8:	00ffffc4 	movi	r3,-1
   432ec:	10c00926 	beq	r2,r3,43314 <_puts_r+0x6c>
   432f0:	81400217 	ldw	r5,8(r16)
   432f4:	01800134 	movhi	r6,4
   432f8:	01c00044 	movi	r7,1
   432fc:	28800117 	ldw	r2,4(r5)
   43300:	319b1b04 	addi	r6,r6,27756
   43304:	8009883a 	mov	r4,r16
   43308:	103ee83a 	callr	r2
   4330c:	10bfffe0 	cmpeqi	r2,r2,-1
   43310:	0085c83a 	sub	r2,zero,r2
   43314:	dfc00217 	ldw	ra,8(sp)
   43318:	dc400117 	ldw	r17,4(sp)
   4331c:	dc000017 	ldw	r16,0(sp)
   43320:	dec00304 	addi	sp,sp,12
   43324:	f800283a 	ret

00043328 <puts>:
   43328:	00800134 	movhi	r2,4
   4332c:	109c0904 	addi	r2,r2,28708
   43330:	200b883a 	mov	r5,r4
   43334:	11000017 	ldw	r4,0(r2)
   43338:	00432a81 	jmpi	432a8 <_puts_r>

0004333c <strlen>:
   4333c:	2005883a 	mov	r2,r4
   43340:	10c00007 	ldb	r3,0(r2)
   43344:	18000226 	beq	r3,zero,43350 <strlen+0x14>
   43348:	10800044 	addi	r2,r2,1
   4334c:	003ffc06 	br	43340 <__alt_data_end+0xfffdb340>
   43350:	1105c83a 	sub	r2,r2,r4
   43354:	f800283a 	ret

00043358 <print_repeat>:
   43358:	defffb04 	addi	sp,sp,-20
   4335c:	dc800315 	stw	r18,12(sp)
   43360:	dc400215 	stw	r17,8(sp)
   43364:	dc000115 	stw	r16,4(sp)
   43368:	dfc00415 	stw	ra,16(sp)
   4336c:	2025883a 	mov	r18,r4
   43370:	2823883a 	mov	r17,r5
   43374:	d9800005 	stb	r6,0(sp)
   43378:	3821883a 	mov	r16,r7
   4337c:	04000a0e 	bge	zero,r16,433a8 <print_repeat+0x50>
   43380:	88800117 	ldw	r2,4(r17)
   43384:	01c00044 	movi	r7,1
   43388:	d80d883a 	mov	r6,sp
   4338c:	880b883a 	mov	r5,r17
   43390:	9009883a 	mov	r4,r18
   43394:	103ee83a 	callr	r2
   43398:	843fffc4 	addi	r16,r16,-1
   4339c:	103ff726 	beq	r2,zero,4337c <__alt_data_end+0xfffdb37c>
   433a0:	00bfffc4 	movi	r2,-1
   433a4:	00000106 	br	433ac <print_repeat+0x54>
   433a8:	0005883a 	mov	r2,zero
   433ac:	dfc00417 	ldw	ra,16(sp)
   433b0:	dc800317 	ldw	r18,12(sp)
   433b4:	dc400217 	ldw	r17,8(sp)
   433b8:	dc000117 	ldw	r16,4(sp)
   433bc:	dec00504 	addi	sp,sp,20
   433c0:	f800283a 	ret

000433c4 <___vfprintf_internal_r>:
   433c4:	deffe504 	addi	sp,sp,-108
   433c8:	d8c00804 	addi	r3,sp,32
   433cc:	df001915 	stw	fp,100(sp)
   433d0:	ddc01815 	stw	r23,96(sp)
   433d4:	dd801715 	stw	r22,92(sp)
   433d8:	dd401615 	stw	r21,88(sp)
   433dc:	dd001515 	stw	r20,84(sp)
   433e0:	dcc01415 	stw	r19,80(sp)
   433e4:	dc801315 	stw	r18,76(sp)
   433e8:	dc401215 	stw	r17,72(sp)
   433ec:	dc001115 	stw	r16,68(sp)
   433f0:	dfc01a15 	stw	ra,104(sp)
   433f4:	2027883a 	mov	r19,r4
   433f8:	2839883a 	mov	fp,r5
   433fc:	382d883a 	mov	r22,r7
   43400:	d9800f15 	stw	r6,60(sp)
   43404:	0021883a 	mov	r16,zero
   43408:	d8000e15 	stw	zero,56(sp)
   4340c:	002f883a 	mov	r23,zero
   43410:	002b883a 	mov	r21,zero
   43414:	0025883a 	mov	r18,zero
   43418:	0023883a 	mov	r17,zero
   4341c:	d8000c15 	stw	zero,48(sp)
   43420:	d8000b15 	stw	zero,44(sp)
   43424:	0029883a 	mov	r20,zero
   43428:	d8c00915 	stw	r3,36(sp)
   4342c:	d8c00f17 	ldw	r3,60(sp)
   43430:	19000003 	ldbu	r4,0(r3)
   43434:	20803fcc 	andi	r2,r4,255
   43438:	1080201c 	xori	r2,r2,128
   4343c:	10bfe004 	addi	r2,r2,-128
   43440:	10011c26 	beq	r2,zero,438b4 <___vfprintf_internal_r+0x4f0>
   43444:	00c00044 	movi	r3,1
   43448:	a0c01426 	beq	r20,r3,4349c <___vfprintf_internal_r+0xd8>
   4344c:	1d000216 	blt	r3,r20,43458 <___vfprintf_internal_r+0x94>
   43450:	a0000626 	beq	r20,zero,4346c <___vfprintf_internal_r+0xa8>
   43454:	00011306 	br	438a4 <___vfprintf_internal_r+0x4e0>
   43458:	01400084 	movi	r5,2
   4345c:	a1401d26 	beq	r20,r5,434d4 <___vfprintf_internal_r+0x110>
   43460:	014000c4 	movi	r5,3
   43464:	a1402926 	beq	r20,r5,4350c <___vfprintf_internal_r+0x148>
   43468:	00010e06 	br	438a4 <___vfprintf_internal_r+0x4e0>
   4346c:	01400944 	movi	r5,37
   43470:	1140fb26 	beq	r2,r5,43860 <___vfprintf_internal_r+0x49c>
   43474:	e0800117 	ldw	r2,4(fp)
   43478:	d9000005 	stb	r4,0(sp)
   4347c:	01c00044 	movi	r7,1
   43480:	d80d883a 	mov	r6,sp
   43484:	e00b883a 	mov	r5,fp
   43488:	9809883a 	mov	r4,r19
   4348c:	103ee83a 	callr	r2
   43490:	1000d61e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   43494:	84000044 	addi	r16,r16,1
   43498:	00010206 	br	438a4 <___vfprintf_internal_r+0x4e0>
   4349c:	01400c04 	movi	r5,48
   434a0:	1140f826 	beq	r2,r5,43884 <___vfprintf_internal_r+0x4c0>
   434a4:	01400944 	movi	r5,37
   434a8:	11400a1e 	bne	r2,r5,434d4 <___vfprintf_internal_r+0x110>
   434ac:	d8800005 	stb	r2,0(sp)
   434b0:	e0800117 	ldw	r2,4(fp)
   434b4:	a00f883a 	mov	r7,r20
   434b8:	d80d883a 	mov	r6,sp
   434bc:	e00b883a 	mov	r5,fp
   434c0:	9809883a 	mov	r4,r19
   434c4:	103ee83a 	callr	r2
   434c8:	1000c81e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   434cc:	84000044 	addi	r16,r16,1
   434d0:	0000f306 	br	438a0 <___vfprintf_internal_r+0x4dc>
   434d4:	217ff404 	addi	r5,r4,-48
   434d8:	29403fcc 	andi	r5,r5,255
   434dc:	00c00244 	movi	r3,9
   434e0:	19400736 	bltu	r3,r5,43500 <___vfprintf_internal_r+0x13c>
   434e4:	00bfffc4 	movi	r2,-1
   434e8:	88800226 	beq	r17,r2,434f4 <___vfprintf_internal_r+0x130>
   434ec:	8c4002a4 	muli	r17,r17,10
   434f0:	00000106 	br	434f8 <___vfprintf_internal_r+0x134>
   434f4:	0023883a 	mov	r17,zero
   434f8:	2c63883a 	add	r17,r5,r17
   434fc:	0000e206 	br	43888 <___vfprintf_internal_r+0x4c4>
   43500:	01400b84 	movi	r5,46
   43504:	1140e426 	beq	r2,r5,43898 <___vfprintf_internal_r+0x4d4>
   43508:	05000084 	movi	r20,2
   4350c:	213ff404 	addi	r4,r4,-48
   43510:	21003fcc 	andi	r4,r4,255
   43514:	00c00244 	movi	r3,9
   43518:	19000736 	bltu	r3,r4,43538 <___vfprintf_internal_r+0x174>
   4351c:	00bfffc4 	movi	r2,-1
   43520:	90800226 	beq	r18,r2,4352c <___vfprintf_internal_r+0x168>
   43524:	948002a4 	muli	r18,r18,10
   43528:	00000106 	br	43530 <___vfprintf_internal_r+0x16c>
   4352c:	0025883a 	mov	r18,zero
   43530:	24a5883a 	add	r18,r4,r18
   43534:	0000db06 	br	438a4 <___vfprintf_internal_r+0x4e0>
   43538:	00c01b04 	movi	r3,108
   4353c:	10c0d426 	beq	r2,r3,43890 <___vfprintf_internal_r+0x4cc>
   43540:	013fffc4 	movi	r4,-1
   43544:	91000226 	beq	r18,r4,43550 <___vfprintf_internal_r+0x18c>
   43548:	d8000b15 	stw	zero,44(sp)
   4354c:	00000106 	br	43554 <___vfprintf_internal_r+0x190>
   43550:	04800044 	movi	r18,1
   43554:	01001a44 	movi	r4,105
   43558:	11001626 	beq	r2,r4,435b4 <___vfprintf_internal_r+0x1f0>
   4355c:	20800916 	blt	r4,r2,43584 <___vfprintf_internal_r+0x1c0>
   43560:	010018c4 	movi	r4,99
   43564:	11008a26 	beq	r2,r4,43790 <___vfprintf_internal_r+0x3cc>
   43568:	01001904 	movi	r4,100
   4356c:	11001126 	beq	r2,r4,435b4 <___vfprintf_internal_r+0x1f0>
   43570:	01001604 	movi	r4,88
   43574:	1100ca1e 	bne	r2,r4,438a0 <___vfprintf_internal_r+0x4dc>
   43578:	00c00044 	movi	r3,1
   4357c:	d8c00e15 	stw	r3,56(sp)
   43580:	00001406 	br	435d4 <___vfprintf_internal_r+0x210>
   43584:	01001cc4 	movi	r4,115
   43588:	11009a26 	beq	r2,r4,437f4 <___vfprintf_internal_r+0x430>
   4358c:	20800416 	blt	r4,r2,435a0 <___vfprintf_internal_r+0x1dc>
   43590:	01001bc4 	movi	r4,111
   43594:	1100c21e 	bne	r2,r4,438a0 <___vfprintf_internal_r+0x4dc>
   43598:	05400204 	movi	r21,8
   4359c:	00000e06 	br	435d8 <___vfprintf_internal_r+0x214>
   435a0:	01001d44 	movi	r4,117
   435a4:	11000c26 	beq	r2,r4,435d8 <___vfprintf_internal_r+0x214>
   435a8:	01001e04 	movi	r4,120
   435ac:	11000926 	beq	r2,r4,435d4 <___vfprintf_internal_r+0x210>
   435b0:	0000bb06 	br	438a0 <___vfprintf_internal_r+0x4dc>
   435b4:	b5000104 	addi	r20,r22,4
   435b8:	b8000726 	beq	r23,zero,435d8 <___vfprintf_internal_r+0x214>
   435bc:	dd000d15 	stw	r20,52(sp)
   435c0:	b5800017 	ldw	r22,0(r22)
   435c4:	b000080e 	bge	r22,zero,435e8 <___vfprintf_internal_r+0x224>
   435c8:	05adc83a 	sub	r22,zero,r22
   435cc:	02800044 	movi	r10,1
   435d0:	00000606 	br	435ec <___vfprintf_internal_r+0x228>
   435d4:	05400404 	movi	r21,16
   435d8:	b0c00104 	addi	r3,r22,4
   435dc:	d8c00d15 	stw	r3,52(sp)
   435e0:	b5800017 	ldw	r22,0(r22)
   435e4:	002f883a 	mov	r23,zero
   435e8:	0015883a 	mov	r10,zero
   435ec:	d829883a 	mov	r20,sp
   435f0:	b0001426 	beq	r22,zero,43644 <___vfprintf_internal_r+0x280>
   435f4:	b009883a 	mov	r4,r22
   435f8:	a80b883a 	mov	r5,r21
   435fc:	da801015 	stw	r10,64(sp)
   43600:	00431640 	call	43164 <__udivsi3>
   43604:	1549383a 	mul	r4,r2,r21
   43608:	00c00244 	movi	r3,9
   4360c:	da801017 	ldw	r10,64(sp)
   43610:	b12dc83a 	sub	r22,r22,r4
   43614:	1d800216 	blt	r3,r22,43620 <___vfprintf_internal_r+0x25c>
   43618:	b5800c04 	addi	r22,r22,48
   4361c:	00000506 	br	43634 <___vfprintf_internal_r+0x270>
   43620:	d8c00e17 	ldw	r3,56(sp)
   43624:	18000226 	beq	r3,zero,43630 <___vfprintf_internal_r+0x26c>
   43628:	b5800dc4 	addi	r22,r22,55
   4362c:	00000106 	br	43634 <___vfprintf_internal_r+0x270>
   43630:	b58015c4 	addi	r22,r22,87
   43634:	a5800005 	stb	r22,0(r20)
   43638:	a5000044 	addi	r20,r20,1
   4363c:	102d883a 	mov	r22,r2
   43640:	003feb06 	br	435f0 <__alt_data_end+0xfffdb5f0>
   43644:	a6c7c83a 	sub	r3,r20,sp
   43648:	d8c00a15 	stw	r3,40(sp)
   4364c:	90c5c83a 	sub	r2,r18,r3
   43650:	00800a0e 	bge	zero,r2,4367c <___vfprintf_internal_r+0x2b8>
   43654:	a085883a 	add	r2,r20,r2
   43658:	01400c04 	movi	r5,48
   4365c:	d8c00917 	ldw	r3,36(sp)
   43660:	a009883a 	mov	r4,r20
   43664:	a0c0032e 	bgeu	r20,r3,43674 <___vfprintf_internal_r+0x2b0>
   43668:	a5000044 	addi	r20,r20,1
   4366c:	21400005 	stb	r5,0(r4)
   43670:	a0bffa1e 	bne	r20,r2,4365c <__alt_data_end+0xfffdb65c>
   43674:	a6c7c83a 	sub	r3,r20,sp
   43678:	d8c00a15 	stw	r3,40(sp)
   4367c:	d8c00a17 	ldw	r3,40(sp)
   43680:	50d3883a 	add	r9,r10,r3
   43684:	d8c00b17 	ldw	r3,44(sp)
   43688:	8a6dc83a 	sub	r22,r17,r9
   4368c:	18001726 	beq	r3,zero,436ec <___vfprintf_internal_r+0x328>
   43690:	50000a26 	beq	r10,zero,436bc <___vfprintf_internal_r+0x2f8>
   43694:	00800b44 	movi	r2,45
   43698:	d8800805 	stb	r2,32(sp)
   4369c:	e0800117 	ldw	r2,4(fp)
   436a0:	01c00044 	movi	r7,1
   436a4:	d9800804 	addi	r6,sp,32
   436a8:	e00b883a 	mov	r5,fp
   436ac:	9809883a 	mov	r4,r19
   436b0:	103ee83a 	callr	r2
   436b4:	10004d1e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   436b8:	84000044 	addi	r16,r16,1
   436bc:	0580070e 	bge	zero,r22,436dc <___vfprintf_internal_r+0x318>
   436c0:	b00f883a 	mov	r7,r22
   436c4:	01800c04 	movi	r6,48
   436c8:	e00b883a 	mov	r5,fp
   436cc:	9809883a 	mov	r4,r19
   436d0:	00433580 	call	43358 <print_repeat>
   436d4:	1000451e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   436d8:	85a1883a 	add	r16,r16,r22
   436dc:	d8c00a17 	ldw	r3,40(sp)
   436e0:	a013883a 	mov	r9,r20
   436e4:	1d2dc83a 	sub	r22,r3,r20
   436e8:	00002206 	br	43774 <___vfprintf_internal_r+0x3b0>
   436ec:	0580090e 	bge	zero,r22,43714 <___vfprintf_internal_r+0x350>
   436f0:	b00f883a 	mov	r7,r22
   436f4:	01800804 	movi	r6,32
   436f8:	e00b883a 	mov	r5,fp
   436fc:	9809883a 	mov	r4,r19
   43700:	da801015 	stw	r10,64(sp)
   43704:	00433580 	call	43358 <print_repeat>
   43708:	da801017 	ldw	r10,64(sp)
   4370c:	1000371e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   43710:	85a1883a 	add	r16,r16,r22
   43714:	503ff126 	beq	r10,zero,436dc <__alt_data_end+0xfffdb6dc>
   43718:	00800b44 	movi	r2,45
   4371c:	d8800805 	stb	r2,32(sp)
   43720:	e0800117 	ldw	r2,4(fp)
   43724:	01c00044 	movi	r7,1
   43728:	d9800804 	addi	r6,sp,32
   4372c:	e00b883a 	mov	r5,fp
   43730:	9809883a 	mov	r4,r19
   43734:	103ee83a 	callr	r2
   43738:	10002c1e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   4373c:	84000044 	addi	r16,r16,1
   43740:	003fe606 	br	436dc <__alt_data_end+0xfffdb6dc>
   43744:	4a7fffc4 	addi	r9,r9,-1
   43748:	48800003 	ldbu	r2,0(r9)
   4374c:	01c00044 	movi	r7,1
   43750:	d9800804 	addi	r6,sp,32
   43754:	d8800805 	stb	r2,32(sp)
   43758:	e0800117 	ldw	r2,4(fp)
   4375c:	e00b883a 	mov	r5,fp
   43760:	da401015 	stw	r9,64(sp)
   43764:	9809883a 	mov	r4,r19
   43768:	103ee83a 	callr	r2
   4376c:	da401017 	ldw	r9,64(sp)
   43770:	10001e1e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   43774:	8245c83a 	sub	r2,r16,r9
   43778:	4d89883a 	add	r4,r9,r22
   4377c:	a085883a 	add	r2,r20,r2
   43780:	013ff016 	blt	zero,r4,43744 <__alt_data_end+0xfffdb744>
   43784:	1021883a 	mov	r16,r2
   43788:	dd800d17 	ldw	r22,52(sp)
   4378c:	00004406 	br	438a0 <___vfprintf_internal_r+0x4dc>
   43790:	00800044 	movi	r2,1
   43794:	1440080e 	bge	r2,r17,437b8 <___vfprintf_internal_r+0x3f4>
   43798:	8d3fffc4 	addi	r20,r17,-1
   4379c:	a00f883a 	mov	r7,r20
   437a0:	01800804 	movi	r6,32
   437a4:	e00b883a 	mov	r5,fp
   437a8:	9809883a 	mov	r4,r19
   437ac:	00433580 	call	43358 <print_repeat>
   437b0:	10000e1e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   437b4:	8521883a 	add	r16,r16,r20
   437b8:	b0800017 	ldw	r2,0(r22)
   437bc:	01c00044 	movi	r7,1
   437c0:	d80d883a 	mov	r6,sp
   437c4:	d8800005 	stb	r2,0(sp)
   437c8:	e0800117 	ldw	r2,4(fp)
   437cc:	e00b883a 	mov	r5,fp
   437d0:	9809883a 	mov	r4,r19
   437d4:	b5000104 	addi	r20,r22,4
   437d8:	103ee83a 	callr	r2
   437dc:	1000031e 	bne	r2,zero,437ec <___vfprintf_internal_r+0x428>
   437e0:	84000044 	addi	r16,r16,1
   437e4:	a02d883a 	mov	r22,r20
   437e8:	00002d06 	br	438a0 <___vfprintf_internal_r+0x4dc>
   437ec:	00bfffc4 	movi	r2,-1
   437f0:	00003106 	br	438b8 <___vfprintf_internal_r+0x4f4>
   437f4:	b5000017 	ldw	r20,0(r22)
   437f8:	b0c00104 	addi	r3,r22,4
   437fc:	d8c00a15 	stw	r3,40(sp)
   43800:	a009883a 	mov	r4,r20
   43804:	004333c0 	call	4333c <strlen>
   43808:	8893c83a 	sub	r9,r17,r2
   4380c:	102d883a 	mov	r22,r2
   43810:	0240090e 	bge	zero,r9,43838 <___vfprintf_internal_r+0x474>
   43814:	480f883a 	mov	r7,r9
   43818:	01800804 	movi	r6,32
   4381c:	e00b883a 	mov	r5,fp
   43820:	9809883a 	mov	r4,r19
   43824:	da401015 	stw	r9,64(sp)
   43828:	00433580 	call	43358 <print_repeat>
   4382c:	da401017 	ldw	r9,64(sp)
   43830:	103fee1e 	bne	r2,zero,437ec <__alt_data_end+0xfffdb7ec>
   43834:	8261883a 	add	r16,r16,r9
   43838:	e0800117 	ldw	r2,4(fp)
   4383c:	b00f883a 	mov	r7,r22
   43840:	a00d883a 	mov	r6,r20
   43844:	e00b883a 	mov	r5,fp
   43848:	9809883a 	mov	r4,r19
   4384c:	103ee83a 	callr	r2
   43850:	103fe61e 	bne	r2,zero,437ec <__alt_data_end+0xfffdb7ec>
   43854:	85a1883a 	add	r16,r16,r22
   43858:	dd800a17 	ldw	r22,40(sp)
   4385c:	00001006 	br	438a0 <___vfprintf_internal_r+0x4dc>
   43860:	05c00044 	movi	r23,1
   43864:	04bfffc4 	movi	r18,-1
   43868:	d8000e15 	stw	zero,56(sp)
   4386c:	05400284 	movi	r21,10
   43870:	9023883a 	mov	r17,r18
   43874:	d8000c15 	stw	zero,48(sp)
   43878:	d8000b15 	stw	zero,44(sp)
   4387c:	b829883a 	mov	r20,r23
   43880:	00000806 	br	438a4 <___vfprintf_internal_r+0x4e0>
   43884:	dd000b15 	stw	r20,44(sp)
   43888:	05000084 	movi	r20,2
   4388c:	00000506 	br	438a4 <___vfprintf_internal_r+0x4e0>
   43890:	00c00044 	movi	r3,1
   43894:	d8c00c15 	stw	r3,48(sp)
   43898:	050000c4 	movi	r20,3
   4389c:	00000106 	br	438a4 <___vfprintf_internal_r+0x4e0>
   438a0:	0029883a 	mov	r20,zero
   438a4:	d8c00f17 	ldw	r3,60(sp)
   438a8:	18c00044 	addi	r3,r3,1
   438ac:	d8c00f15 	stw	r3,60(sp)
   438b0:	003ede06 	br	4342c <__alt_data_end+0xfffdb42c>
   438b4:	8005883a 	mov	r2,r16
   438b8:	dfc01a17 	ldw	ra,104(sp)
   438bc:	df001917 	ldw	fp,100(sp)
   438c0:	ddc01817 	ldw	r23,96(sp)
   438c4:	dd801717 	ldw	r22,92(sp)
   438c8:	dd401617 	ldw	r21,88(sp)
   438cc:	dd001517 	ldw	r20,84(sp)
   438d0:	dcc01417 	ldw	r19,80(sp)
   438d4:	dc801317 	ldw	r18,76(sp)
   438d8:	dc401217 	ldw	r17,72(sp)
   438dc:	dc001117 	ldw	r16,68(sp)
   438e0:	dec01b04 	addi	sp,sp,108
   438e4:	f800283a 	ret

000438e8 <__vfprintf_internal>:
   438e8:	00800134 	movhi	r2,4
   438ec:	109c0904 	addi	r2,r2,28708
   438f0:	300f883a 	mov	r7,r6
   438f4:	280d883a 	mov	r6,r5
   438f8:	200b883a 	mov	r5,r4
   438fc:	11000017 	ldw	r4,0(r2)
   43900:	00433c41 	jmpi	433c4 <___vfprintf_internal_r>

00043904 <__sfvwrite_small_dev>:
   43904:	2880000b 	ldhu	r2,0(r5)
   43908:	1080020c 	andi	r2,r2,8
   4390c:	10002126 	beq	r2,zero,43994 <__sfvwrite_small_dev+0x90>
   43910:	2880008f 	ldh	r2,2(r5)
   43914:	defffa04 	addi	sp,sp,-24
   43918:	dc000015 	stw	r16,0(sp)
   4391c:	dfc00515 	stw	ra,20(sp)
   43920:	dd000415 	stw	r20,16(sp)
   43924:	dcc00315 	stw	r19,12(sp)
   43928:	dc800215 	stw	r18,8(sp)
   4392c:	dc400115 	stw	r17,4(sp)
   43930:	2821883a 	mov	r16,r5
   43934:	10001216 	blt	r2,zero,43980 <__sfvwrite_small_dev+0x7c>
   43938:	2027883a 	mov	r19,r4
   4393c:	3025883a 	mov	r18,r6
   43940:	3823883a 	mov	r17,r7
   43944:	05010004 	movi	r20,1024
   43948:	04400b0e 	bge	zero,r17,43978 <__sfvwrite_small_dev+0x74>
   4394c:	880f883a 	mov	r7,r17
   43950:	a440010e 	bge	r20,r17,43958 <__sfvwrite_small_dev+0x54>
   43954:	01c10004 	movi	r7,1024
   43958:	8140008f 	ldh	r5,2(r16)
   4395c:	900d883a 	mov	r6,r18
   43960:	9809883a 	mov	r4,r19
   43964:	00439bc0 	call	439bc <_write_r>
   43968:	0080050e 	bge	zero,r2,43980 <__sfvwrite_small_dev+0x7c>
   4396c:	88a3c83a 	sub	r17,r17,r2
   43970:	90a5883a 	add	r18,r18,r2
   43974:	003ff406 	br	43948 <__alt_data_end+0xfffdb948>
   43978:	0005883a 	mov	r2,zero
   4397c:	00000706 	br	4399c <__sfvwrite_small_dev+0x98>
   43980:	8080000b 	ldhu	r2,0(r16)
   43984:	10801014 	ori	r2,r2,64
   43988:	8080000d 	sth	r2,0(r16)
   4398c:	00bfffc4 	movi	r2,-1
   43990:	00000206 	br	4399c <__sfvwrite_small_dev+0x98>
   43994:	00bfffc4 	movi	r2,-1
   43998:	f800283a 	ret
   4399c:	dfc00517 	ldw	ra,20(sp)
   439a0:	dd000417 	ldw	r20,16(sp)
   439a4:	dcc00317 	ldw	r19,12(sp)
   439a8:	dc800217 	ldw	r18,8(sp)
   439ac:	dc400117 	ldw	r17,4(sp)
   439b0:	dc000017 	ldw	r16,0(sp)
   439b4:	dec00604 	addi	sp,sp,24
   439b8:	f800283a 	ret

000439bc <_write_r>:
   439bc:	defffd04 	addi	sp,sp,-12
   439c0:	dc000015 	stw	r16,0(sp)
   439c4:	04000134 	movhi	r16,4
   439c8:	dc400115 	stw	r17,4(sp)
   439cc:	841d0104 	addi	r16,r16,29700
   439d0:	2023883a 	mov	r17,r4
   439d4:	2809883a 	mov	r4,r5
   439d8:	300b883a 	mov	r5,r6
   439dc:	380d883a 	mov	r6,r7
   439e0:	dfc00215 	stw	ra,8(sp)
   439e4:	80000015 	stw	zero,0(r16)
   439e8:	0043e480 	call	43e48 <write>
   439ec:	00ffffc4 	movi	r3,-1
   439f0:	10c0031e 	bne	r2,r3,43a00 <_write_r+0x44>
   439f4:	80c00017 	ldw	r3,0(r16)
   439f8:	18000126 	beq	r3,zero,43a00 <_write_r+0x44>
   439fc:	88c00015 	stw	r3,0(r17)
   43a00:	dfc00217 	ldw	ra,8(sp)
   43a04:	dc400117 	ldw	r17,4(sp)
   43a08:	dc000017 	ldw	r16,0(sp)
   43a0c:	dec00304 	addi	sp,sp,12
   43a10:	f800283a 	ret

00043a14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   43a14:	defff904 	addi	sp,sp,-28
   43a18:	dfc00615 	stw	ra,24(sp)
   43a1c:	df000515 	stw	fp,20(sp)
   43a20:	df000504 	addi	fp,sp,20
   43a24:	e13ffc15 	stw	r4,-16(fp)
   43a28:	e17ffd15 	stw	r5,-12(fp)
   43a2c:	e1bffe15 	stw	r6,-8(fp)
   43a30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   43a34:	e0800217 	ldw	r2,8(fp)
   43a38:	d8800015 	stw	r2,0(sp)
   43a3c:	e1ffff17 	ldw	r7,-4(fp)
   43a40:	e1bffe17 	ldw	r6,-8(fp)
   43a44:	e17ffd17 	ldw	r5,-12(fp)
   43a48:	e13ffc17 	ldw	r4,-16(fp)
   43a4c:	0043bc40 	call	43bc4 <alt_iic_isr_register>
}  
   43a50:	e037883a 	mov	sp,fp
   43a54:	dfc00117 	ldw	ra,4(sp)
   43a58:	df000017 	ldw	fp,0(sp)
   43a5c:	dec00204 	addi	sp,sp,8
   43a60:	f800283a 	ret

00043a64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   43a64:	defff904 	addi	sp,sp,-28
   43a68:	df000615 	stw	fp,24(sp)
   43a6c:	df000604 	addi	fp,sp,24
   43a70:	e13ffe15 	stw	r4,-8(fp)
   43a74:	e17fff15 	stw	r5,-4(fp)
   43a78:	e0bfff17 	ldw	r2,-4(fp)
   43a7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43a80:	0005303a 	rdctl	r2,status
   43a84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43a88:	e0fffb17 	ldw	r3,-20(fp)
   43a8c:	00bfff84 	movi	r2,-2
   43a90:	1884703a 	and	r2,r3,r2
   43a94:	1001703a 	wrctl	status,r2
  
  return context;
   43a98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   43a9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   43aa0:	00c00044 	movi	r3,1
   43aa4:	e0bffa17 	ldw	r2,-24(fp)
   43aa8:	1884983a 	sll	r2,r3,r2
   43aac:	1007883a 	mov	r3,r2
   43ab0:	d0a10117 	ldw	r2,-31740(gp)
   43ab4:	1884b03a 	or	r2,r3,r2
   43ab8:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   43abc:	d0a10117 	ldw	r2,-31740(gp)
   43ac0:	100170fa 	wrctl	ienable,r2
   43ac4:	e0bffc17 	ldw	r2,-16(fp)
   43ac8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43acc:	e0bffd17 	ldw	r2,-12(fp)
   43ad0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   43ad4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   43ad8:	0001883a 	nop
}
   43adc:	e037883a 	mov	sp,fp
   43ae0:	df000017 	ldw	fp,0(sp)
   43ae4:	dec00104 	addi	sp,sp,4
   43ae8:	f800283a 	ret

00043aec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   43aec:	defff904 	addi	sp,sp,-28
   43af0:	df000615 	stw	fp,24(sp)
   43af4:	df000604 	addi	fp,sp,24
   43af8:	e13ffe15 	stw	r4,-8(fp)
   43afc:	e17fff15 	stw	r5,-4(fp)
   43b00:	e0bfff17 	ldw	r2,-4(fp)
   43b04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43b08:	0005303a 	rdctl	r2,status
   43b0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43b10:	e0fffb17 	ldw	r3,-20(fp)
   43b14:	00bfff84 	movi	r2,-2
   43b18:	1884703a 	and	r2,r3,r2
   43b1c:	1001703a 	wrctl	status,r2
  
  return context;
   43b20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   43b24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   43b28:	00c00044 	movi	r3,1
   43b2c:	e0bffa17 	ldw	r2,-24(fp)
   43b30:	1884983a 	sll	r2,r3,r2
   43b34:	0084303a 	nor	r2,zero,r2
   43b38:	1007883a 	mov	r3,r2
   43b3c:	d0a10117 	ldw	r2,-31740(gp)
   43b40:	1884703a 	and	r2,r3,r2
   43b44:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   43b48:	d0a10117 	ldw	r2,-31740(gp)
   43b4c:	100170fa 	wrctl	ienable,r2
   43b50:	e0bffc17 	ldw	r2,-16(fp)
   43b54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43b58:	e0bffd17 	ldw	r2,-12(fp)
   43b5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   43b60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   43b64:	0001883a 	nop
}
   43b68:	e037883a 	mov	sp,fp
   43b6c:	df000017 	ldw	fp,0(sp)
   43b70:	dec00104 	addi	sp,sp,4
   43b74:	f800283a 	ret

00043b78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   43b78:	defffc04 	addi	sp,sp,-16
   43b7c:	df000315 	stw	fp,12(sp)
   43b80:	df000304 	addi	fp,sp,12
   43b84:	e13ffe15 	stw	r4,-8(fp)
   43b88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   43b8c:	000530fa 	rdctl	r2,ienable
   43b90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   43b94:	00c00044 	movi	r3,1
   43b98:	e0bfff17 	ldw	r2,-4(fp)
   43b9c:	1884983a 	sll	r2,r3,r2
   43ba0:	1007883a 	mov	r3,r2
   43ba4:	e0bffd17 	ldw	r2,-12(fp)
   43ba8:	1884703a 	and	r2,r3,r2
   43bac:	1004c03a 	cmpne	r2,r2,zero
   43bb0:	10803fcc 	andi	r2,r2,255
}
   43bb4:	e037883a 	mov	sp,fp
   43bb8:	df000017 	ldw	fp,0(sp)
   43bbc:	dec00104 	addi	sp,sp,4
   43bc0:	f800283a 	ret

00043bc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   43bc4:	defff504 	addi	sp,sp,-44
   43bc8:	dfc00a15 	stw	ra,40(sp)
   43bcc:	df000915 	stw	fp,36(sp)
   43bd0:	df000904 	addi	fp,sp,36
   43bd4:	e13ffc15 	stw	r4,-16(fp)
   43bd8:	e17ffd15 	stw	r5,-12(fp)
   43bdc:	e1bffe15 	stw	r6,-8(fp)
   43be0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   43be4:	00bffa84 	movi	r2,-22
   43be8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   43bec:	e0bffd17 	ldw	r2,-12(fp)
   43bf0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   43bf4:	e0bff817 	ldw	r2,-32(fp)
   43bf8:	10800808 	cmpgei	r2,r2,32
   43bfc:	1000271e 	bne	r2,zero,43c9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   43c00:	0005303a 	rdctl	r2,status
   43c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   43c08:	e0fffb17 	ldw	r3,-20(fp)
   43c0c:	00bfff84 	movi	r2,-2
   43c10:	1884703a 	and	r2,r3,r2
   43c14:	1001703a 	wrctl	status,r2
  
  return context;
   43c18:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   43c1c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   43c20:	00800134 	movhi	r2,4
   43c24:	109d0704 	addi	r2,r2,29724
   43c28:	e0fff817 	ldw	r3,-32(fp)
   43c2c:	180690fa 	slli	r3,r3,3
   43c30:	10c5883a 	add	r2,r2,r3
   43c34:	e0fffe17 	ldw	r3,-8(fp)
   43c38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   43c3c:	00800134 	movhi	r2,4
   43c40:	109d0704 	addi	r2,r2,29724
   43c44:	e0fff817 	ldw	r3,-32(fp)
   43c48:	180690fa 	slli	r3,r3,3
   43c4c:	10c5883a 	add	r2,r2,r3
   43c50:	10800104 	addi	r2,r2,4
   43c54:	e0ffff17 	ldw	r3,-4(fp)
   43c58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   43c5c:	e0bffe17 	ldw	r2,-8(fp)
   43c60:	10000526 	beq	r2,zero,43c78 <alt_iic_isr_register+0xb4>
   43c64:	e0bff817 	ldw	r2,-32(fp)
   43c68:	100b883a 	mov	r5,r2
   43c6c:	e13ffc17 	ldw	r4,-16(fp)
   43c70:	0043a640 	call	43a64 <alt_ic_irq_enable>
   43c74:	00000406 	br	43c88 <alt_iic_isr_register+0xc4>
   43c78:	e0bff817 	ldw	r2,-32(fp)
   43c7c:	100b883a 	mov	r5,r2
   43c80:	e13ffc17 	ldw	r4,-16(fp)
   43c84:	0043aec0 	call	43aec <alt_ic_irq_disable>
   43c88:	e0bff715 	stw	r2,-36(fp)
   43c8c:	e0bffa17 	ldw	r2,-24(fp)
   43c90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43c94:	e0bff917 	ldw	r2,-28(fp)
   43c98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   43c9c:	e0bff717 	ldw	r2,-36(fp)
}
   43ca0:	e037883a 	mov	sp,fp
   43ca4:	dfc00117 	ldw	ra,4(sp)
   43ca8:	df000017 	ldw	fp,0(sp)
   43cac:	dec00204 	addi	sp,sp,8
   43cb0:	f800283a 	ret

00043cb4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   43cb4:	defffc04 	addi	sp,sp,-16
   43cb8:	df000315 	stw	fp,12(sp)
   43cbc:	df000304 	addi	fp,sp,12
   43cc0:	e13ffd15 	stw	r4,-12(fp)
   43cc4:	e17ffe15 	stw	r5,-8(fp)
   43cc8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   43ccc:	e0fffe17 	ldw	r3,-8(fp)
   43cd0:	e0bffd17 	ldw	r2,-12(fp)
   43cd4:	18800c26 	beq	r3,r2,43d08 <alt_load_section+0x54>
  {
    while( to != end )
   43cd8:	00000806 	br	43cfc <alt_load_section+0x48>
    {
      *to++ = *from++;
   43cdc:	e0bffe17 	ldw	r2,-8(fp)
   43ce0:	10c00104 	addi	r3,r2,4
   43ce4:	e0fffe15 	stw	r3,-8(fp)
   43ce8:	e0fffd17 	ldw	r3,-12(fp)
   43cec:	19000104 	addi	r4,r3,4
   43cf0:	e13ffd15 	stw	r4,-12(fp)
   43cf4:	18c00017 	ldw	r3,0(r3)
   43cf8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   43cfc:	e0fffe17 	ldw	r3,-8(fp)
   43d00:	e0bfff17 	ldw	r2,-4(fp)
   43d04:	18bff51e 	bne	r3,r2,43cdc <__alt_data_end+0xfffdbcdc>
    {
      *to++ = *from++;
    }
  }
}
   43d08:	0001883a 	nop
   43d0c:	e037883a 	mov	sp,fp
   43d10:	df000017 	ldw	fp,0(sp)
   43d14:	dec00104 	addi	sp,sp,4
   43d18:	f800283a 	ret

00043d1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   43d1c:	defffe04 	addi	sp,sp,-8
   43d20:	dfc00115 	stw	ra,4(sp)
   43d24:	df000015 	stw	fp,0(sp)
   43d28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   43d2c:	01800134 	movhi	r6,4
   43d30:	319c1104 	addi	r6,r6,28740
   43d34:	01400134 	movhi	r5,4
   43d38:	295b2904 	addi	r5,r5,27812
   43d3c:	01000134 	movhi	r4,4
   43d40:	211c1104 	addi	r4,r4,28740
   43d44:	0043cb40 	call	43cb4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   43d48:	01800134 	movhi	r6,4
   43d4c:	31809104 	addi	r6,r6,580
   43d50:	01400134 	movhi	r5,4
   43d54:	29400804 	addi	r5,r5,32
   43d58:	01000134 	movhi	r4,4
   43d5c:	21000804 	addi	r4,r4,32
   43d60:	0043cb40 	call	43cb4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   43d64:	01800134 	movhi	r6,4
   43d68:	319b2904 	addi	r6,r6,27812
   43d6c:	01400134 	movhi	r5,4
   43d70:	29538a04 	addi	r5,r5,20008
   43d74:	01000134 	movhi	r4,4
   43d78:	21138a04 	addi	r4,r4,20008
   43d7c:	0043cb40 	call	43cb4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   43d80:	00443300 	call	44330 <alt_dcache_flush_all>
  alt_icache_flush_all();
   43d84:	004445c0 	call	4445c <alt_icache_flush_all>
}
   43d88:	0001883a 	nop
   43d8c:	e037883a 	mov	sp,fp
   43d90:	dfc00117 	ldw	ra,4(sp)
   43d94:	df000017 	ldw	fp,0(sp)
   43d98:	dec00204 	addi	sp,sp,8
   43d9c:	f800283a 	ret

00043da0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43da0:	defffd04 	addi	sp,sp,-12
   43da4:	dfc00215 	stw	ra,8(sp)
   43da8:	df000115 	stw	fp,4(sp)
   43dac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43db0:	0009883a 	mov	r4,zero
   43db4:	0043f740 	call	43f74 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43db8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   43dbc:	0043fac0 	call	43fac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43dc0:	01800134 	movhi	r6,4
   43dc4:	319b1c04 	addi	r6,r6,27760
   43dc8:	01400134 	movhi	r5,4
   43dcc:	295b1c04 	addi	r5,r5,27760
   43dd0:	01000134 	movhi	r4,4
   43dd4:	211b1c04 	addi	r4,r4,27760
   43dd8:	00445f00 	call	445f0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   43ddc:	d0a10217 	ldw	r2,-31736(gp)
   43de0:	d0e10317 	ldw	r3,-31732(gp)
   43de4:	d1210417 	ldw	r4,-31728(gp)
   43de8:	200d883a 	mov	r6,r4
   43dec:	180b883a 	mov	r5,r3
   43df0:	1009883a 	mov	r4,r2
   43df4:	00409b40 	call	409b4 <main>
   43df8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   43dfc:	01000044 	movi	r4,1
   43e00:	00442600 	call	44260 <close>
  exit (result);
   43e04:	e13fff17 	ldw	r4,-4(fp)
   43e08:	0044c140 	call	44c14 <exit>

00043e0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43e0c:	defffe04 	addi	sp,sp,-8
   43e10:	dfc00115 	stw	ra,4(sp)
   43e14:	df000015 	stw	fp,0(sp)
   43e18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43e1c:	d0a00f17 	ldw	r2,-32708(gp)
   43e20:	10000326 	beq	r2,zero,43e30 <alt_get_errno+0x24>
   43e24:	d0a00f17 	ldw	r2,-32708(gp)
   43e28:	103ee83a 	callr	r2
   43e2c:	00000106 	br	43e34 <alt_get_errno+0x28>
   43e30:	d0a10004 	addi	r2,gp,-31744
}
   43e34:	e037883a 	mov	sp,fp
   43e38:	dfc00117 	ldw	ra,4(sp)
   43e3c:	df000017 	ldw	fp,0(sp)
   43e40:	dec00204 	addi	sp,sp,8
   43e44:	f800283a 	ret

00043e48 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   43e48:	defff904 	addi	sp,sp,-28
   43e4c:	dfc00615 	stw	ra,24(sp)
   43e50:	df000515 	stw	fp,20(sp)
   43e54:	df000504 	addi	fp,sp,20
   43e58:	e13ffd15 	stw	r4,-12(fp)
   43e5c:	e17ffe15 	stw	r5,-8(fp)
   43e60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43e64:	e0bffd17 	ldw	r2,-12(fp)
   43e68:	10000616 	blt	r2,zero,43e84 <write+0x3c>
   43e6c:	e0bffd17 	ldw	r2,-12(fp)
   43e70:	10c00324 	muli	r3,r2,12
   43e74:	00800134 	movhi	r2,4
   43e78:	109ba104 	addi	r2,r2,28292
   43e7c:	1885883a 	add	r2,r3,r2
   43e80:	00000106 	br	43e88 <write+0x40>
   43e84:	0005883a 	mov	r2,zero
   43e88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43e8c:	e0bffb17 	ldw	r2,-20(fp)
   43e90:	10002126 	beq	r2,zero,43f18 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43e94:	e0bffb17 	ldw	r2,-20(fp)
   43e98:	10800217 	ldw	r2,8(r2)
   43e9c:	108000cc 	andi	r2,r2,3
   43ea0:	10001826 	beq	r2,zero,43f04 <write+0xbc>
   43ea4:	e0bffb17 	ldw	r2,-20(fp)
   43ea8:	10800017 	ldw	r2,0(r2)
   43eac:	10800617 	ldw	r2,24(r2)
   43eb0:	10001426 	beq	r2,zero,43f04 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43eb4:	e0bffb17 	ldw	r2,-20(fp)
   43eb8:	10800017 	ldw	r2,0(r2)
   43ebc:	10800617 	ldw	r2,24(r2)
   43ec0:	e0ffff17 	ldw	r3,-4(fp)
   43ec4:	180d883a 	mov	r6,r3
   43ec8:	e17ffe17 	ldw	r5,-8(fp)
   43ecc:	e13ffb17 	ldw	r4,-20(fp)
   43ed0:	103ee83a 	callr	r2
   43ed4:	e0bffc15 	stw	r2,-16(fp)
   43ed8:	e0bffc17 	ldw	r2,-16(fp)
   43edc:	1000070e 	bge	r2,zero,43efc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43ee0:	0043e0c0 	call	43e0c <alt_get_errno>
   43ee4:	1007883a 	mov	r3,r2
   43ee8:	e0bffc17 	ldw	r2,-16(fp)
   43eec:	0085c83a 	sub	r2,zero,r2
   43ef0:	18800015 	stw	r2,0(r3)
        return -1;
   43ef4:	00bfffc4 	movi	r2,-1
   43ef8:	00000c06 	br	43f2c <write+0xe4>
      }
      return rval;
   43efc:	e0bffc17 	ldw	r2,-16(fp)
   43f00:	00000a06 	br	43f2c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   43f04:	0043e0c0 	call	43e0c <alt_get_errno>
   43f08:	1007883a 	mov	r3,r2
   43f0c:	00800344 	movi	r2,13
   43f10:	18800015 	stw	r2,0(r3)
   43f14:	00000406 	br	43f28 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   43f18:	0043e0c0 	call	43e0c <alt_get_errno>
   43f1c:	1007883a 	mov	r3,r2
   43f20:	00801444 	movi	r2,81
   43f24:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43f28:	00bfffc4 	movi	r2,-1
}
   43f2c:	e037883a 	mov	sp,fp
   43f30:	dfc00117 	ldw	ra,4(sp)
   43f34:	df000017 	ldw	fp,0(sp)
   43f38:	dec00204 	addi	sp,sp,8
   43f3c:	f800283a 	ret

00043f40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   43f40:	defffd04 	addi	sp,sp,-12
   43f44:	dfc00215 	stw	ra,8(sp)
   43f48:	df000115 	stw	fp,4(sp)
   43f4c:	df000104 	addi	fp,sp,4
   43f50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   43f54:	d1600c04 	addi	r5,gp,-32720
   43f58:	e13fff17 	ldw	r4,-4(fp)
   43f5c:	00443b80 	call	443b8 <alt_dev_llist_insert>
}
   43f60:	e037883a 	mov	sp,fp
   43f64:	dfc00117 	ldw	ra,4(sp)
   43f68:	df000017 	ldw	fp,0(sp)
   43f6c:	dec00204 	addi	sp,sp,8
   43f70:	f800283a 	ret

00043f74 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43f74:	defffd04 	addi	sp,sp,-12
   43f78:	dfc00215 	stw	ra,8(sp)
   43f7c:	df000115 	stw	fp,4(sp)
   43f80:	df000104 	addi	fp,sp,4
   43f84:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   43f88:	00449240 	call	44924 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43f8c:	00800044 	movi	r2,1
   43f90:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43f94:	0001883a 	nop
   43f98:	e037883a 	mov	sp,fp
   43f9c:	dfc00117 	ldw	ra,4(sp)
   43fa0:	df000017 	ldw	fp,0(sp)
   43fa4:	dec00204 	addi	sp,sp,8
   43fa8:	f800283a 	ret

00043fac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43fac:	defffe04 	addi	sp,sp,-8
   43fb0:	dfc00115 	stw	ra,4(sp)
   43fb4:	df000015 	stw	fp,0(sp)
   43fb8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_PWM, timer_pwm);
    ALTERA_AVALON_TIMER_INIT ( TIMER_SECOND, timer_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43fbc:	01000134 	movhi	r4,4
   43fc0:	211b8c04 	addi	r4,r4,28208
   43fc4:	0043f400 	call	43f40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   43fc8:	0001883a 	nop
}
   43fcc:	0001883a 	nop
   43fd0:	e037883a 	mov	sp,fp
   43fd4:	dfc00117 	ldw	ra,4(sp)
   43fd8:	df000017 	ldw	fp,0(sp)
   43fdc:	dec00204 	addi	sp,sp,8
   43fe0:	f800283a 	ret

00043fe4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43fe4:	defffa04 	addi	sp,sp,-24
   43fe8:	dfc00515 	stw	ra,20(sp)
   43fec:	df000415 	stw	fp,16(sp)
   43ff0:	df000404 	addi	fp,sp,16
   43ff4:	e13ffd15 	stw	r4,-12(fp)
   43ff8:	e17ffe15 	stw	r5,-8(fp)
   43ffc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44000:	e0bffd17 	ldw	r2,-12(fp)
   44004:	10800017 	ldw	r2,0(r2)
   44008:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4400c:	e0bffc17 	ldw	r2,-16(fp)
   44010:	10c00a04 	addi	r3,r2,40
   44014:	e0bffd17 	ldw	r2,-12(fp)
   44018:	10800217 	ldw	r2,8(r2)
   4401c:	100f883a 	mov	r7,r2
   44020:	e1bfff17 	ldw	r6,-4(fp)
   44024:	e17ffe17 	ldw	r5,-8(fp)
   44028:	1809883a 	mov	r4,r3
   4402c:	00440a40 	call	440a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   44030:	e037883a 	mov	sp,fp
   44034:	dfc00117 	ldw	ra,4(sp)
   44038:	df000017 	ldw	fp,0(sp)
   4403c:	dec00204 	addi	sp,sp,8
   44040:	f800283a 	ret

00044044 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   44044:	defffa04 	addi	sp,sp,-24
   44048:	dfc00515 	stw	ra,20(sp)
   4404c:	df000415 	stw	fp,16(sp)
   44050:	df000404 	addi	fp,sp,16
   44054:	e13ffd15 	stw	r4,-12(fp)
   44058:	e17ffe15 	stw	r5,-8(fp)
   4405c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   44060:	e0bffd17 	ldw	r2,-12(fp)
   44064:	10800017 	ldw	r2,0(r2)
   44068:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4406c:	e0bffc17 	ldw	r2,-16(fp)
   44070:	10c00a04 	addi	r3,r2,40
   44074:	e0bffd17 	ldw	r2,-12(fp)
   44078:	10800217 	ldw	r2,8(r2)
   4407c:	100f883a 	mov	r7,r2
   44080:	e1bfff17 	ldw	r6,-4(fp)
   44084:	e17ffe17 	ldw	r5,-8(fp)
   44088:	1809883a 	mov	r4,r3
   4408c:	00441900 	call	44190 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   44090:	e037883a 	mov	sp,fp
   44094:	dfc00117 	ldw	ra,4(sp)
   44098:	df000017 	ldw	fp,0(sp)
   4409c:	dec00204 	addi	sp,sp,8
   440a0:	f800283a 	ret

000440a4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   440a4:	defff704 	addi	sp,sp,-36
   440a8:	df000815 	stw	fp,32(sp)
   440ac:	df000804 	addi	fp,sp,32
   440b0:	e13ffc15 	stw	r4,-16(fp)
   440b4:	e17ffd15 	stw	r5,-12(fp)
   440b8:	e1bffe15 	stw	r6,-8(fp)
   440bc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   440c0:	e0bffc17 	ldw	r2,-16(fp)
   440c4:	10800017 	ldw	r2,0(r2)
   440c8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   440cc:	e0bffd17 	ldw	r2,-12(fp)
   440d0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   440d4:	e0bffe17 	ldw	r2,-8(fp)
   440d8:	e0fffd17 	ldw	r3,-12(fp)
   440dc:	1885883a 	add	r2,r3,r2
   440e0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   440e4:	00001206 	br	44130 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   440e8:	e0bff917 	ldw	r2,-28(fp)
   440ec:	10800037 	ldwio	r2,0(r2)
   440f0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   440f4:	e0bffb17 	ldw	r2,-20(fp)
   440f8:	10a0000c 	andi	r2,r2,32768
   440fc:	10000626 	beq	r2,zero,44118 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   44100:	e0bff817 	ldw	r2,-32(fp)
   44104:	10c00044 	addi	r3,r2,1
   44108:	e0fff815 	stw	r3,-32(fp)
   4410c:	e0fffb17 	ldw	r3,-20(fp)
   44110:	10c00005 	stb	r3,0(r2)
   44114:	00000606 	br	44130 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   44118:	e0fff817 	ldw	r3,-32(fp)
   4411c:	e0bffd17 	ldw	r2,-12(fp)
   44120:	1880071e 	bne	r3,r2,44140 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   44124:	e0bfff17 	ldw	r2,-4(fp)
   44128:	1090000c 	andi	r2,r2,16384
   4412c:	1000061e 	bne	r2,zero,44148 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   44130:	e0fff817 	ldw	r3,-32(fp)
   44134:	e0bffa17 	ldw	r2,-24(fp)
   44138:	18bfeb36 	bltu	r3,r2,440e8 <__alt_data_end+0xfffdc0e8>
   4413c:	00000306 	br	4414c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   44140:	0001883a 	nop
   44144:	00000106 	br	4414c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   44148:	0001883a 	nop
    
  }

  if (ptr != buffer)
   4414c:	e0fff817 	ldw	r3,-32(fp)
   44150:	e0bffd17 	ldw	r2,-12(fp)
   44154:	18800426 	beq	r3,r2,44168 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   44158:	e0fff817 	ldw	r3,-32(fp)
   4415c:	e0bffd17 	ldw	r2,-12(fp)
   44160:	1885c83a 	sub	r2,r3,r2
   44164:	00000606 	br	44180 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   44168:	e0bfff17 	ldw	r2,-4(fp)
   4416c:	1090000c 	andi	r2,r2,16384
   44170:	10000226 	beq	r2,zero,4417c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   44174:	00bffd44 	movi	r2,-11
   44178:	00000106 	br	44180 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   4417c:	00bffec4 	movi	r2,-5
}
   44180:	e037883a 	mov	sp,fp
   44184:	df000017 	ldw	fp,0(sp)
   44188:	dec00104 	addi	sp,sp,4
   4418c:	f800283a 	ret

00044190 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   44190:	defff904 	addi	sp,sp,-28
   44194:	df000615 	stw	fp,24(sp)
   44198:	df000604 	addi	fp,sp,24
   4419c:	e13ffc15 	stw	r4,-16(fp)
   441a0:	e17ffd15 	stw	r5,-12(fp)
   441a4:	e1bffe15 	stw	r6,-8(fp)
   441a8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   441ac:	e0bffc17 	ldw	r2,-16(fp)
   441b0:	10800017 	ldw	r2,0(r2)
   441b4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   441b8:	e0bffe17 	ldw	r2,-8(fp)
   441bc:	e0fffd17 	ldw	r3,-12(fp)
   441c0:	1885883a 	add	r2,r3,r2
   441c4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   441c8:	00000e06 	br	44204 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   441cc:	e0bffa17 	ldw	r2,-24(fp)
   441d0:	10800104 	addi	r2,r2,4
   441d4:	10800037 	ldwio	r2,0(r2)
   441d8:	10bfffec 	andhi	r2,r2,65535
   441dc:	10000926 	beq	r2,zero,44204 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   441e0:	e0fffa17 	ldw	r3,-24(fp)
   441e4:	e0bffd17 	ldw	r2,-12(fp)
   441e8:	11000044 	addi	r4,r2,1
   441ec:	e13ffd15 	stw	r4,-12(fp)
   441f0:	10800003 	ldbu	r2,0(r2)
   441f4:	10803fcc 	andi	r2,r2,255
   441f8:	1080201c 	xori	r2,r2,128
   441fc:	10bfe004 	addi	r2,r2,-128
   44200:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   44204:	e0fffd17 	ldw	r3,-12(fp)
   44208:	e0bffb17 	ldw	r2,-20(fp)
   4420c:	18bfef36 	bltu	r3,r2,441cc <__alt_data_end+0xfffdc1cc>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   44210:	e0bffe17 	ldw	r2,-8(fp)
}
   44214:	e037883a 	mov	sp,fp
   44218:	df000017 	ldw	fp,0(sp)
   4421c:	dec00104 	addi	sp,sp,4
   44220:	f800283a 	ret

00044224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44224:	defffe04 	addi	sp,sp,-8
   44228:	dfc00115 	stw	ra,4(sp)
   4422c:	df000015 	stw	fp,0(sp)
   44230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44234:	d0a00f17 	ldw	r2,-32708(gp)
   44238:	10000326 	beq	r2,zero,44248 <alt_get_errno+0x24>
   4423c:	d0a00f17 	ldw	r2,-32708(gp)
   44240:	103ee83a 	callr	r2
   44244:	00000106 	br	4424c <alt_get_errno+0x28>
   44248:	d0a10004 	addi	r2,gp,-31744
}
   4424c:	e037883a 	mov	sp,fp
   44250:	dfc00117 	ldw	ra,4(sp)
   44254:	df000017 	ldw	fp,0(sp)
   44258:	dec00204 	addi	sp,sp,8
   4425c:	f800283a 	ret

00044260 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   44260:	defffb04 	addi	sp,sp,-20
   44264:	dfc00415 	stw	ra,16(sp)
   44268:	df000315 	stw	fp,12(sp)
   4426c:	df000304 	addi	fp,sp,12
   44270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   44274:	e0bfff17 	ldw	r2,-4(fp)
   44278:	10000616 	blt	r2,zero,44294 <close+0x34>
   4427c:	e0bfff17 	ldw	r2,-4(fp)
   44280:	10c00324 	muli	r3,r2,12
   44284:	00800134 	movhi	r2,4
   44288:	109ba104 	addi	r2,r2,28292
   4428c:	1885883a 	add	r2,r3,r2
   44290:	00000106 	br	44298 <close+0x38>
   44294:	0005883a 	mov	r2,zero
   44298:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4429c:	e0bffd17 	ldw	r2,-12(fp)
   442a0:	10001926 	beq	r2,zero,44308 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   442a4:	e0bffd17 	ldw	r2,-12(fp)
   442a8:	10800017 	ldw	r2,0(r2)
   442ac:	10800417 	ldw	r2,16(r2)
   442b0:	10000626 	beq	r2,zero,442cc <close+0x6c>
   442b4:	e0bffd17 	ldw	r2,-12(fp)
   442b8:	10800017 	ldw	r2,0(r2)
   442bc:	10800417 	ldw	r2,16(r2)
   442c0:	e13ffd17 	ldw	r4,-12(fp)
   442c4:	103ee83a 	callr	r2
   442c8:	00000106 	br	442d0 <close+0x70>
   442cc:	0005883a 	mov	r2,zero
   442d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   442d4:	e13fff17 	ldw	r4,-4(fp)
   442d8:	00448c00 	call	448c0 <alt_release_fd>
    if (rval < 0)
   442dc:	e0bffe17 	ldw	r2,-8(fp)
   442e0:	1000070e 	bge	r2,zero,44300 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   442e4:	00442240 	call	44224 <alt_get_errno>
   442e8:	1007883a 	mov	r3,r2
   442ec:	e0bffe17 	ldw	r2,-8(fp)
   442f0:	0085c83a 	sub	r2,zero,r2
   442f4:	18800015 	stw	r2,0(r3)
      return -1;
   442f8:	00bfffc4 	movi	r2,-1
   442fc:	00000706 	br	4431c <close+0xbc>
    }
    return 0;
   44300:	0005883a 	mov	r2,zero
   44304:	00000506 	br	4431c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   44308:	00442240 	call	44224 <alt_get_errno>
   4430c:	1007883a 	mov	r3,r2
   44310:	00801444 	movi	r2,81
   44314:	18800015 	stw	r2,0(r3)
    return -1;
   44318:	00bfffc4 	movi	r2,-1
  }
}
   4431c:	e037883a 	mov	sp,fp
   44320:	dfc00117 	ldw	ra,4(sp)
   44324:	df000017 	ldw	fp,0(sp)
   44328:	dec00204 	addi	sp,sp,8
   4432c:	f800283a 	ret

00044330 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   44330:	deffff04 	addi	sp,sp,-4
   44334:	df000015 	stw	fp,0(sp)
   44338:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4433c:	0001883a 	nop
   44340:	e037883a 	mov	sp,fp
   44344:	df000017 	ldw	fp,0(sp)
   44348:	dec00104 	addi	sp,sp,4
   4434c:	f800283a 	ret

00044350 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   44350:	defffc04 	addi	sp,sp,-16
   44354:	df000315 	stw	fp,12(sp)
   44358:	df000304 	addi	fp,sp,12
   4435c:	e13ffd15 	stw	r4,-12(fp)
   44360:	e17ffe15 	stw	r5,-8(fp)
   44364:	e1bfff15 	stw	r6,-4(fp)
  return len;
   44368:	e0bfff17 	ldw	r2,-4(fp)
}
   4436c:	e037883a 	mov	sp,fp
   44370:	df000017 	ldw	fp,0(sp)
   44374:	dec00104 	addi	sp,sp,4
   44378:	f800283a 	ret

0004437c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4437c:	defffe04 	addi	sp,sp,-8
   44380:	dfc00115 	stw	ra,4(sp)
   44384:	df000015 	stw	fp,0(sp)
   44388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4438c:	d0a00f17 	ldw	r2,-32708(gp)
   44390:	10000326 	beq	r2,zero,443a0 <alt_get_errno+0x24>
   44394:	d0a00f17 	ldw	r2,-32708(gp)
   44398:	103ee83a 	callr	r2
   4439c:	00000106 	br	443a4 <alt_get_errno+0x28>
   443a0:	d0a10004 	addi	r2,gp,-31744
}
   443a4:	e037883a 	mov	sp,fp
   443a8:	dfc00117 	ldw	ra,4(sp)
   443ac:	df000017 	ldw	fp,0(sp)
   443b0:	dec00204 	addi	sp,sp,8
   443b4:	f800283a 	ret

000443b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   443b8:	defffa04 	addi	sp,sp,-24
   443bc:	dfc00515 	stw	ra,20(sp)
   443c0:	df000415 	stw	fp,16(sp)
   443c4:	df000404 	addi	fp,sp,16
   443c8:	e13ffe15 	stw	r4,-8(fp)
   443cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   443d0:	e0bffe17 	ldw	r2,-8(fp)
   443d4:	10000326 	beq	r2,zero,443e4 <alt_dev_llist_insert+0x2c>
   443d8:	e0bffe17 	ldw	r2,-8(fp)
   443dc:	10800217 	ldw	r2,8(r2)
   443e0:	1000061e 	bne	r2,zero,443fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   443e4:	004437c0 	call	4437c <alt_get_errno>
   443e8:	1007883a 	mov	r3,r2
   443ec:	00800584 	movi	r2,22
   443f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   443f4:	00bffa84 	movi	r2,-22
   443f8:	00001306 	br	44448 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   443fc:	e0bffe17 	ldw	r2,-8(fp)
   44400:	e0ffff17 	ldw	r3,-4(fp)
   44404:	e0fffc15 	stw	r3,-16(fp)
   44408:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4440c:	e0bffd17 	ldw	r2,-12(fp)
   44410:	e0fffc17 	ldw	r3,-16(fp)
   44414:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   44418:	e0bffc17 	ldw	r2,-16(fp)
   4441c:	10c00017 	ldw	r3,0(r2)
   44420:	e0bffd17 	ldw	r2,-12(fp)
   44424:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   44428:	e0bffc17 	ldw	r2,-16(fp)
   4442c:	10800017 	ldw	r2,0(r2)
   44430:	e0fffd17 	ldw	r3,-12(fp)
   44434:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   44438:	e0bffc17 	ldw	r2,-16(fp)
   4443c:	e0fffd17 	ldw	r3,-12(fp)
   44440:	10c00015 	stw	r3,0(r2)

  return 0;  
   44444:	0005883a 	mov	r2,zero
}
   44448:	e037883a 	mov	sp,fp
   4444c:	dfc00117 	ldw	ra,4(sp)
   44450:	df000017 	ldw	fp,0(sp)
   44454:	dec00204 	addi	sp,sp,8
   44458:	f800283a 	ret

0004445c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4445c:	defffe04 	addi	sp,sp,-8
   44460:	dfc00115 	stw	ra,4(sp)
   44464:	df000015 	stw	fp,0(sp)
   44468:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4446c:	01420004 	movi	r5,2048
   44470:	0009883a 	mov	r4,zero
   44474:	0044b840 	call	44b84 <alt_icache_flush>
#endif
}
   44478:	0001883a 	nop
   4447c:	e037883a 	mov	sp,fp
   44480:	dfc00117 	ldw	ra,4(sp)
   44484:	df000017 	ldw	fp,0(sp)
   44488:	dec00204 	addi	sp,sp,8
   4448c:	f800283a 	ret

00044490 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   44490:	defffe04 	addi	sp,sp,-8
   44494:	df000115 	stw	fp,4(sp)
   44498:	df000104 	addi	fp,sp,4
   4449c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   444a0:	e0bfff17 	ldw	r2,-4(fp)
   444a4:	10bffe84 	addi	r2,r2,-6
   444a8:	10c00428 	cmpgeui	r3,r2,16
   444ac:	18001a1e 	bne	r3,zero,44518 <alt_exception_cause_generated_bad_addr+0x88>
   444b0:	100690ba 	slli	r3,r2,2
   444b4:	00800134 	movhi	r2,4
   444b8:	10913204 	addi	r2,r2,17608
   444bc:	1885883a 	add	r2,r3,r2
   444c0:	10800017 	ldw	r2,0(r2)
   444c4:	1000683a 	jmp	r2
   444c8:	00044508 	cmpgei	zero,zero,4372
   444cc:	00044508 	cmpgei	zero,zero,4372
   444d0:	00044518 	cmpnei	zero,zero,4372
   444d4:	00044518 	cmpnei	zero,zero,4372
   444d8:	00044518 	cmpnei	zero,zero,4372
   444dc:	00044508 	cmpgei	zero,zero,4372
   444e0:	00044510 	cmplti	zero,zero,4372
   444e4:	00044518 	cmpnei	zero,zero,4372
   444e8:	00044508 	cmpgei	zero,zero,4372
   444ec:	00044508 	cmpgei	zero,zero,4372
   444f0:	00044518 	cmpnei	zero,zero,4372
   444f4:	00044508 	cmpgei	zero,zero,4372
   444f8:	00044510 	cmplti	zero,zero,4372
   444fc:	00044518 	cmpnei	zero,zero,4372
   44500:	00044518 	cmpnei	zero,zero,4372
   44504:	00044508 	cmpgei	zero,zero,4372
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   44508:	00800044 	movi	r2,1
   4450c:	00000306 	br	4451c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   44510:	0005883a 	mov	r2,zero
   44514:	00000106 	br	4451c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   44518:	0005883a 	mov	r2,zero
  }
}
   4451c:	e037883a 	mov	sp,fp
   44520:	df000017 	ldw	fp,0(sp)
   44524:	dec00104 	addi	sp,sp,4
   44528:	f800283a 	ret

0004452c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4452c:	defff904 	addi	sp,sp,-28
   44530:	dfc00615 	stw	ra,24(sp)
   44534:	df000515 	stw	fp,20(sp)
   44538:	df000504 	addi	fp,sp,20
   4453c:	e13ffc15 	stw	r4,-16(fp)
   44540:	e17ffd15 	stw	r5,-12(fp)
   44544:	e1bffe15 	stw	r6,-8(fp)
   44548:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4454c:	e1bfff17 	ldw	r6,-4(fp)
   44550:	e17ffe17 	ldw	r5,-8(fp)
   44554:	e13ffd17 	ldw	r4,-12(fp)
   44558:	004476c0 	call	4476c <open>
   4455c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   44560:	e0bffb17 	ldw	r2,-20(fp)
   44564:	10001c16 	blt	r2,zero,445d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   44568:	00800134 	movhi	r2,4
   4456c:	109ba104 	addi	r2,r2,28292
   44570:	e0fffb17 	ldw	r3,-20(fp)
   44574:	18c00324 	muli	r3,r3,12
   44578:	10c5883a 	add	r2,r2,r3
   4457c:	10c00017 	ldw	r3,0(r2)
   44580:	e0bffc17 	ldw	r2,-16(fp)
   44584:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   44588:	00800134 	movhi	r2,4
   4458c:	109ba104 	addi	r2,r2,28292
   44590:	e0fffb17 	ldw	r3,-20(fp)
   44594:	18c00324 	muli	r3,r3,12
   44598:	10c5883a 	add	r2,r2,r3
   4459c:	10800104 	addi	r2,r2,4
   445a0:	10c00017 	ldw	r3,0(r2)
   445a4:	e0bffc17 	ldw	r2,-16(fp)
   445a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   445ac:	00800134 	movhi	r2,4
   445b0:	109ba104 	addi	r2,r2,28292
   445b4:	e0fffb17 	ldw	r3,-20(fp)
   445b8:	18c00324 	muli	r3,r3,12
   445bc:	10c5883a 	add	r2,r2,r3
   445c0:	10800204 	addi	r2,r2,8
   445c4:	10c00017 	ldw	r3,0(r2)
   445c8:	e0bffc17 	ldw	r2,-16(fp)
   445cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   445d0:	e13ffb17 	ldw	r4,-20(fp)
   445d4:	00448c00 	call	448c0 <alt_release_fd>
  }
} 
   445d8:	0001883a 	nop
   445dc:	e037883a 	mov	sp,fp
   445e0:	dfc00117 	ldw	ra,4(sp)
   445e4:	df000017 	ldw	fp,0(sp)
   445e8:	dec00204 	addi	sp,sp,8
   445ec:	f800283a 	ret

000445f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   445f0:	defffb04 	addi	sp,sp,-20
   445f4:	dfc00415 	stw	ra,16(sp)
   445f8:	df000315 	stw	fp,12(sp)
   445fc:	df000304 	addi	fp,sp,12
   44600:	e13ffd15 	stw	r4,-12(fp)
   44604:	e17ffe15 	stw	r5,-8(fp)
   44608:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4460c:	01c07fc4 	movi	r7,511
   44610:	01800044 	movi	r6,1
   44614:	e17ffd17 	ldw	r5,-12(fp)
   44618:	01000134 	movhi	r4,4
   4461c:	211ba404 	addi	r4,r4,28304
   44620:	004452c0 	call	4452c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44624:	01c07fc4 	movi	r7,511
   44628:	000d883a 	mov	r6,zero
   4462c:	e17ffe17 	ldw	r5,-8(fp)
   44630:	01000134 	movhi	r4,4
   44634:	211ba104 	addi	r4,r4,28292
   44638:	004452c0 	call	4452c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4463c:	01c07fc4 	movi	r7,511
   44640:	01800044 	movi	r6,1
   44644:	e17fff17 	ldw	r5,-4(fp)
   44648:	01000134 	movhi	r4,4
   4464c:	211ba704 	addi	r4,r4,28316
   44650:	004452c0 	call	4452c <alt_open_fd>
}  
   44654:	0001883a 	nop
   44658:	e037883a 	mov	sp,fp
   4465c:	dfc00117 	ldw	ra,4(sp)
   44660:	df000017 	ldw	fp,0(sp)
   44664:	dec00204 	addi	sp,sp,8
   44668:	f800283a 	ret

0004466c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4466c:	defffe04 	addi	sp,sp,-8
   44670:	dfc00115 	stw	ra,4(sp)
   44674:	df000015 	stw	fp,0(sp)
   44678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4467c:	d0a00f17 	ldw	r2,-32708(gp)
   44680:	10000326 	beq	r2,zero,44690 <alt_get_errno+0x24>
   44684:	d0a00f17 	ldw	r2,-32708(gp)
   44688:	103ee83a 	callr	r2
   4468c:	00000106 	br	44694 <alt_get_errno+0x28>
   44690:	d0a10004 	addi	r2,gp,-31744
}
   44694:	e037883a 	mov	sp,fp
   44698:	dfc00117 	ldw	ra,4(sp)
   4469c:	df000017 	ldw	fp,0(sp)
   446a0:	dec00204 	addi	sp,sp,8
   446a4:	f800283a 	ret

000446a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   446a8:	defffd04 	addi	sp,sp,-12
   446ac:	df000215 	stw	fp,8(sp)
   446b0:	df000204 	addi	fp,sp,8
   446b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   446b8:	e0bfff17 	ldw	r2,-4(fp)
   446bc:	10800217 	ldw	r2,8(r2)
   446c0:	10d00034 	orhi	r3,r2,16384
   446c4:	e0bfff17 	ldw	r2,-4(fp)
   446c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   446cc:	e03ffe15 	stw	zero,-8(fp)
   446d0:	00001d06 	br	44748 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   446d4:	00800134 	movhi	r2,4
   446d8:	109ba104 	addi	r2,r2,28292
   446dc:	e0fffe17 	ldw	r3,-8(fp)
   446e0:	18c00324 	muli	r3,r3,12
   446e4:	10c5883a 	add	r2,r2,r3
   446e8:	10c00017 	ldw	r3,0(r2)
   446ec:	e0bfff17 	ldw	r2,-4(fp)
   446f0:	10800017 	ldw	r2,0(r2)
   446f4:	1880111e 	bne	r3,r2,4473c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   446f8:	00800134 	movhi	r2,4
   446fc:	109ba104 	addi	r2,r2,28292
   44700:	e0fffe17 	ldw	r3,-8(fp)
   44704:	18c00324 	muli	r3,r3,12
   44708:	10c5883a 	add	r2,r2,r3
   4470c:	10800204 	addi	r2,r2,8
   44710:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44714:	1000090e 	bge	r2,zero,4473c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44718:	e0bffe17 	ldw	r2,-8(fp)
   4471c:	10c00324 	muli	r3,r2,12
   44720:	00800134 	movhi	r2,4
   44724:	109ba104 	addi	r2,r2,28292
   44728:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4472c:	e0bfff17 	ldw	r2,-4(fp)
   44730:	18800226 	beq	r3,r2,4473c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44734:	00bffcc4 	movi	r2,-13
   44738:	00000806 	br	4475c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4473c:	e0bffe17 	ldw	r2,-8(fp)
   44740:	10800044 	addi	r2,r2,1
   44744:	e0bffe15 	stw	r2,-8(fp)
   44748:	d0a00e17 	ldw	r2,-32712(gp)
   4474c:	1007883a 	mov	r3,r2
   44750:	e0bffe17 	ldw	r2,-8(fp)
   44754:	18bfdf2e 	bgeu	r3,r2,446d4 <__alt_data_end+0xfffdc6d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44758:	0005883a 	mov	r2,zero
}
   4475c:	e037883a 	mov	sp,fp
   44760:	df000017 	ldw	fp,0(sp)
   44764:	dec00104 	addi	sp,sp,4
   44768:	f800283a 	ret

0004476c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4476c:	defff604 	addi	sp,sp,-40
   44770:	dfc00915 	stw	ra,36(sp)
   44774:	df000815 	stw	fp,32(sp)
   44778:	df000804 	addi	fp,sp,32
   4477c:	e13ffd15 	stw	r4,-12(fp)
   44780:	e17ffe15 	stw	r5,-8(fp)
   44784:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44788:	00bfffc4 	movi	r2,-1
   4478c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   44790:	00bffb44 	movi	r2,-19
   44794:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   44798:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4479c:	d1600c04 	addi	r5,gp,-32720
   447a0:	e13ffd17 	ldw	r4,-12(fp)
   447a4:	00449480 	call	44948 <alt_find_dev>
   447a8:	e0bff815 	stw	r2,-32(fp)
   447ac:	e0bff817 	ldw	r2,-32(fp)
   447b0:	1000051e 	bne	r2,zero,447c8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   447b4:	e13ffd17 	ldw	r4,-12(fp)
   447b8:	00449d80 	call	449d8 <alt_find_file>
   447bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   447c0:	00800044 	movi	r2,1
   447c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   447c8:	e0bff817 	ldw	r2,-32(fp)
   447cc:	10002926 	beq	r2,zero,44874 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   447d0:	e13ff817 	ldw	r4,-32(fp)
   447d4:	0044ae00 	call	44ae0 <alt_get_fd>
   447d8:	e0bff915 	stw	r2,-28(fp)
   447dc:	e0bff917 	ldw	r2,-28(fp)
   447e0:	1000030e 	bge	r2,zero,447f0 <open+0x84>
    {
      status = index;
   447e4:	e0bff917 	ldw	r2,-28(fp)
   447e8:	e0bffa15 	stw	r2,-24(fp)
   447ec:	00002306 	br	4487c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   447f0:	e0bff917 	ldw	r2,-28(fp)
   447f4:	10c00324 	muli	r3,r2,12
   447f8:	00800134 	movhi	r2,4
   447fc:	109ba104 	addi	r2,r2,28292
   44800:	1885883a 	add	r2,r3,r2
   44804:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44808:	e0fffe17 	ldw	r3,-8(fp)
   4480c:	00900034 	movhi	r2,16384
   44810:	10bfffc4 	addi	r2,r2,-1
   44814:	1886703a 	and	r3,r3,r2
   44818:	e0bffc17 	ldw	r2,-16(fp)
   4481c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   44820:	e0bffb17 	ldw	r2,-20(fp)
   44824:	1000051e 	bne	r2,zero,4483c <open+0xd0>
   44828:	e13ffc17 	ldw	r4,-16(fp)
   4482c:	00446a80 	call	446a8 <alt_file_locked>
   44830:	e0bffa15 	stw	r2,-24(fp)
   44834:	e0bffa17 	ldw	r2,-24(fp)
   44838:	10001016 	blt	r2,zero,4487c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4483c:	e0bff817 	ldw	r2,-32(fp)
   44840:	10800317 	ldw	r2,12(r2)
   44844:	10000826 	beq	r2,zero,44868 <open+0xfc>
   44848:	e0bff817 	ldw	r2,-32(fp)
   4484c:	10800317 	ldw	r2,12(r2)
   44850:	e1ffff17 	ldw	r7,-4(fp)
   44854:	e1bffe17 	ldw	r6,-8(fp)
   44858:	e17ffd17 	ldw	r5,-12(fp)
   4485c:	e13ffc17 	ldw	r4,-16(fp)
   44860:	103ee83a 	callr	r2
   44864:	00000106 	br	4486c <open+0x100>
   44868:	0005883a 	mov	r2,zero
   4486c:	e0bffa15 	stw	r2,-24(fp)
   44870:	00000206 	br	4487c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44874:	00bffb44 	movi	r2,-19
   44878:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4487c:	e0bffa17 	ldw	r2,-24(fp)
   44880:	1000090e 	bge	r2,zero,448a8 <open+0x13c>
  {
    alt_release_fd (index);  
   44884:	e13ff917 	ldw	r4,-28(fp)
   44888:	00448c00 	call	448c0 <alt_release_fd>
    ALT_ERRNO = -status;
   4488c:	004466c0 	call	4466c <alt_get_errno>
   44890:	1007883a 	mov	r3,r2
   44894:	e0bffa17 	ldw	r2,-24(fp)
   44898:	0085c83a 	sub	r2,zero,r2
   4489c:	18800015 	stw	r2,0(r3)
    return -1;
   448a0:	00bfffc4 	movi	r2,-1
   448a4:	00000106 	br	448ac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   448a8:	e0bff917 	ldw	r2,-28(fp)
}
   448ac:	e037883a 	mov	sp,fp
   448b0:	dfc00117 	ldw	ra,4(sp)
   448b4:	df000017 	ldw	fp,0(sp)
   448b8:	dec00204 	addi	sp,sp,8
   448bc:	f800283a 	ret

000448c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   448c0:	defffe04 	addi	sp,sp,-8
   448c4:	df000115 	stw	fp,4(sp)
   448c8:	df000104 	addi	fp,sp,4
   448cc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   448d0:	e0bfff17 	ldw	r2,-4(fp)
   448d4:	108000d0 	cmplti	r2,r2,3
   448d8:	10000d1e 	bne	r2,zero,44910 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   448dc:	00800134 	movhi	r2,4
   448e0:	109ba104 	addi	r2,r2,28292
   448e4:	e0ffff17 	ldw	r3,-4(fp)
   448e8:	18c00324 	muli	r3,r3,12
   448ec:	10c5883a 	add	r2,r2,r3
   448f0:	10800204 	addi	r2,r2,8
   448f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   448f8:	00800134 	movhi	r2,4
   448fc:	109ba104 	addi	r2,r2,28292
   44900:	e0ffff17 	ldw	r3,-4(fp)
   44904:	18c00324 	muli	r3,r3,12
   44908:	10c5883a 	add	r2,r2,r3
   4490c:	10000015 	stw	zero,0(r2)
  }
}
   44910:	0001883a 	nop
   44914:	e037883a 	mov	sp,fp
   44918:	df000017 	ldw	fp,0(sp)
   4491c:	dec00104 	addi	sp,sp,4
   44920:	f800283a 	ret

00044924 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   44924:	deffff04 	addi	sp,sp,-4
   44928:	df000015 	stw	fp,0(sp)
   4492c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   44930:	000170fa 	wrctl	ienable,zero
}
   44934:	0001883a 	nop
   44938:	e037883a 	mov	sp,fp
   4493c:	df000017 	ldw	fp,0(sp)
   44940:	dec00104 	addi	sp,sp,4
   44944:	f800283a 	ret

00044948 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   44948:	defffa04 	addi	sp,sp,-24
   4494c:	dfc00515 	stw	ra,20(sp)
   44950:	df000415 	stw	fp,16(sp)
   44954:	df000404 	addi	fp,sp,16
   44958:	e13ffe15 	stw	r4,-8(fp)
   4495c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44960:	e0bfff17 	ldw	r2,-4(fp)
   44964:	10800017 	ldw	r2,0(r2)
   44968:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4496c:	e13ffe17 	ldw	r4,-8(fp)
   44970:	004333c0 	call	4333c <strlen>
   44974:	10800044 	addi	r2,r2,1
   44978:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4497c:	00000d06 	br	449b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44980:	e0bffc17 	ldw	r2,-16(fp)
   44984:	10800217 	ldw	r2,8(r2)
   44988:	e0fffd17 	ldw	r3,-12(fp)
   4498c:	180d883a 	mov	r6,r3
   44990:	e17ffe17 	ldw	r5,-8(fp)
   44994:	1009883a 	mov	r4,r2
   44998:	0044c340 	call	44c34 <memcmp>
   4499c:	1000021e 	bne	r2,zero,449a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   449a0:	e0bffc17 	ldw	r2,-16(fp)
   449a4:	00000706 	br	449c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   449a8:	e0bffc17 	ldw	r2,-16(fp)
   449ac:	10800017 	ldw	r2,0(r2)
   449b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   449b4:	e0fffc17 	ldw	r3,-16(fp)
   449b8:	e0bfff17 	ldw	r2,-4(fp)
   449bc:	18bff01e 	bne	r3,r2,44980 <__alt_data_end+0xfffdc980>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   449c0:	0005883a 	mov	r2,zero
}
   449c4:	e037883a 	mov	sp,fp
   449c8:	dfc00117 	ldw	ra,4(sp)
   449cc:	df000017 	ldw	fp,0(sp)
   449d0:	dec00204 	addi	sp,sp,8
   449d4:	f800283a 	ret

000449d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   449d8:	defffb04 	addi	sp,sp,-20
   449dc:	dfc00415 	stw	ra,16(sp)
   449e0:	df000315 	stw	fp,12(sp)
   449e4:	df000304 	addi	fp,sp,12
   449e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   449ec:	d0a00a17 	ldw	r2,-32728(gp)
   449f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   449f4:	00003106 	br	44abc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   449f8:	e0bffd17 	ldw	r2,-12(fp)
   449fc:	10800217 	ldw	r2,8(r2)
   44a00:	1009883a 	mov	r4,r2
   44a04:	004333c0 	call	4333c <strlen>
   44a08:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   44a0c:	e0bffd17 	ldw	r2,-12(fp)
   44a10:	10c00217 	ldw	r3,8(r2)
   44a14:	e0bffe17 	ldw	r2,-8(fp)
   44a18:	10bfffc4 	addi	r2,r2,-1
   44a1c:	1885883a 	add	r2,r3,r2
   44a20:	10800003 	ldbu	r2,0(r2)
   44a24:	10803fcc 	andi	r2,r2,255
   44a28:	1080201c 	xori	r2,r2,128
   44a2c:	10bfe004 	addi	r2,r2,-128
   44a30:	10800bd8 	cmpnei	r2,r2,47
   44a34:	1000031e 	bne	r2,zero,44a44 <alt_find_file+0x6c>
    {
      len -= 1;
   44a38:	e0bffe17 	ldw	r2,-8(fp)
   44a3c:	10bfffc4 	addi	r2,r2,-1
   44a40:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44a44:	e0bffe17 	ldw	r2,-8(fp)
   44a48:	e0ffff17 	ldw	r3,-4(fp)
   44a4c:	1885883a 	add	r2,r3,r2
   44a50:	10800003 	ldbu	r2,0(r2)
   44a54:	10803fcc 	andi	r2,r2,255
   44a58:	1080201c 	xori	r2,r2,128
   44a5c:	10bfe004 	addi	r2,r2,-128
   44a60:	10800be0 	cmpeqi	r2,r2,47
   44a64:	1000081e 	bne	r2,zero,44a88 <alt_find_file+0xb0>
   44a68:	e0bffe17 	ldw	r2,-8(fp)
   44a6c:	e0ffff17 	ldw	r3,-4(fp)
   44a70:	1885883a 	add	r2,r3,r2
   44a74:	10800003 	ldbu	r2,0(r2)
   44a78:	10803fcc 	andi	r2,r2,255
   44a7c:	1080201c 	xori	r2,r2,128
   44a80:	10bfe004 	addi	r2,r2,-128
   44a84:	10000a1e 	bne	r2,zero,44ab0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   44a88:	e0bffd17 	ldw	r2,-12(fp)
   44a8c:	10800217 	ldw	r2,8(r2)
   44a90:	e0fffe17 	ldw	r3,-8(fp)
   44a94:	180d883a 	mov	r6,r3
   44a98:	e17fff17 	ldw	r5,-4(fp)
   44a9c:	1009883a 	mov	r4,r2
   44aa0:	0044c340 	call	44c34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   44aa4:	1000021e 	bne	r2,zero,44ab0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   44aa8:	e0bffd17 	ldw	r2,-12(fp)
   44aac:	00000706 	br	44acc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   44ab0:	e0bffd17 	ldw	r2,-12(fp)
   44ab4:	10800017 	ldw	r2,0(r2)
   44ab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44abc:	e0fffd17 	ldw	r3,-12(fp)
   44ac0:	d0a00a04 	addi	r2,gp,-32728
   44ac4:	18bfcc1e 	bne	r3,r2,449f8 <__alt_data_end+0xfffdc9f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   44ac8:	0005883a 	mov	r2,zero
}
   44acc:	e037883a 	mov	sp,fp
   44ad0:	dfc00117 	ldw	ra,4(sp)
   44ad4:	df000017 	ldw	fp,0(sp)
   44ad8:	dec00204 	addi	sp,sp,8
   44adc:	f800283a 	ret

00044ae0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   44ae0:	defffc04 	addi	sp,sp,-16
   44ae4:	df000315 	stw	fp,12(sp)
   44ae8:	df000304 	addi	fp,sp,12
   44aec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   44af0:	00bffa04 	movi	r2,-24
   44af4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44af8:	e03ffd15 	stw	zero,-12(fp)
   44afc:	00001906 	br	44b64 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   44b00:	00800134 	movhi	r2,4
   44b04:	109ba104 	addi	r2,r2,28292
   44b08:	e0fffd17 	ldw	r3,-12(fp)
   44b0c:	18c00324 	muli	r3,r3,12
   44b10:	10c5883a 	add	r2,r2,r3
   44b14:	10800017 	ldw	r2,0(r2)
   44b18:	10000f1e 	bne	r2,zero,44b58 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   44b1c:	00800134 	movhi	r2,4
   44b20:	109ba104 	addi	r2,r2,28292
   44b24:	e0fffd17 	ldw	r3,-12(fp)
   44b28:	18c00324 	muli	r3,r3,12
   44b2c:	10c5883a 	add	r2,r2,r3
   44b30:	e0ffff17 	ldw	r3,-4(fp)
   44b34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   44b38:	d0e00e17 	ldw	r3,-32712(gp)
   44b3c:	e0bffd17 	ldw	r2,-12(fp)
   44b40:	1880020e 	bge	r3,r2,44b4c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   44b44:	e0bffd17 	ldw	r2,-12(fp)
   44b48:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
   44b4c:	e0bffd17 	ldw	r2,-12(fp)
   44b50:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   44b54:	00000606 	br	44b70 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44b58:	e0bffd17 	ldw	r2,-12(fp)
   44b5c:	10800044 	addi	r2,r2,1
   44b60:	e0bffd15 	stw	r2,-12(fp)
   44b64:	e0bffd17 	ldw	r2,-12(fp)
   44b68:	10800810 	cmplti	r2,r2,32
   44b6c:	103fe41e 	bne	r2,zero,44b00 <__alt_data_end+0xfffdcb00>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   44b70:	e0bffe17 	ldw	r2,-8(fp)
}
   44b74:	e037883a 	mov	sp,fp
   44b78:	df000017 	ldw	fp,0(sp)
   44b7c:	dec00104 	addi	sp,sp,4
   44b80:	f800283a 	ret

00044b84 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   44b84:	defffb04 	addi	sp,sp,-20
   44b88:	df000415 	stw	fp,16(sp)
   44b8c:	df000404 	addi	fp,sp,16
   44b90:	e13ffe15 	stw	r4,-8(fp)
   44b94:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   44b98:	e0bfff17 	ldw	r2,-4(fp)
   44b9c:	10820070 	cmpltui	r2,r2,2049
   44ba0:	1000021e 	bne	r2,zero,44bac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   44ba4:	00820004 	movi	r2,2048
   44ba8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   44bac:	e0fffe17 	ldw	r3,-8(fp)
   44bb0:	e0bfff17 	ldw	r2,-4(fp)
   44bb4:	1885883a 	add	r2,r3,r2
   44bb8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44bbc:	e0bffe17 	ldw	r2,-8(fp)
   44bc0:	e0bffc15 	stw	r2,-16(fp)
   44bc4:	00000506 	br	44bdc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   44bc8:	e0bffc17 	ldw	r2,-16(fp)
   44bcc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44bd0:	e0bffc17 	ldw	r2,-16(fp)
   44bd4:	10800804 	addi	r2,r2,32
   44bd8:	e0bffc15 	stw	r2,-16(fp)
   44bdc:	e0fffc17 	ldw	r3,-16(fp)
   44be0:	e0bffd17 	ldw	r2,-12(fp)
   44be4:	18bff836 	bltu	r3,r2,44bc8 <__alt_data_end+0xfffdcbc8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   44be8:	e0bffe17 	ldw	r2,-8(fp)
   44bec:	108007cc 	andi	r2,r2,31
   44bf0:	10000226 	beq	r2,zero,44bfc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   44bf4:	e0bffc17 	ldw	r2,-16(fp)
   44bf8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   44bfc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   44c00:	0001883a 	nop
   44c04:	e037883a 	mov	sp,fp
   44c08:	df000017 	ldw	fp,0(sp)
   44c0c:	dec00104 	addi	sp,sp,4
   44c10:	f800283a 	ret

00044c14 <exit>:
   44c14:	defffe04 	addi	sp,sp,-8
   44c18:	000b883a 	mov	r5,zero
   44c1c:	dc000015 	stw	r16,0(sp)
   44c20:	dfc00115 	stw	ra,4(sp)
   44c24:	2021883a 	mov	r16,r4
   44c28:	0044c640 	call	44c64 <__call_exitprocs>
   44c2c:	8009883a 	mov	r4,r16
   44c30:	0044df40 	call	44df4 <_exit>

00044c34 <memcmp>:
   44c34:	218d883a 	add	r6,r4,r6
   44c38:	21800826 	beq	r4,r6,44c5c <memcmp+0x28>
   44c3c:	20800003 	ldbu	r2,0(r4)
   44c40:	28c00003 	ldbu	r3,0(r5)
   44c44:	10c00226 	beq	r2,r3,44c50 <memcmp+0x1c>
   44c48:	10c5c83a 	sub	r2,r2,r3
   44c4c:	f800283a 	ret
   44c50:	21000044 	addi	r4,r4,1
   44c54:	29400044 	addi	r5,r5,1
   44c58:	003ff706 	br	44c38 <__alt_data_end+0xfffdcc38>
   44c5c:	0005883a 	mov	r2,zero
   44c60:	f800283a 	ret

00044c64 <__call_exitprocs>:
   44c64:	defff504 	addi	sp,sp,-44
   44c68:	dd000515 	stw	r20,20(sp)
   44c6c:	05000134 	movhi	r20,4
   44c70:	dc800315 	stw	r18,12(sp)
   44c74:	dfc00a15 	stw	ra,40(sp)
   44c78:	df000915 	stw	fp,36(sp)
   44c7c:	ddc00815 	stw	r23,32(sp)
   44c80:	dd800715 	stw	r22,28(sp)
   44c84:	dd400615 	stw	r21,24(sp)
   44c88:	dcc00415 	stw	r19,16(sp)
   44c8c:	dc400215 	stw	r17,8(sp)
   44c90:	dc000115 	stw	r16,4(sp)
   44c94:	d9000015 	stw	r4,0(sp)
   44c98:	2825883a 	mov	r18,r5
   44c9c:	a51c0804 	addi	r20,r20,28704
   44ca0:	a4400017 	ldw	r17,0(r20)
   44ca4:	8cc00c17 	ldw	r19,48(r17)
   44ca8:	8c400c04 	addi	r17,r17,48
   44cac:	98004526 	beq	r19,zero,44dc4 <__call_exitprocs+0x160>
   44cb0:	9c000117 	ldw	r16,4(r19)
   44cb4:	00900034 	movhi	r2,16384
   44cb8:	10bfffc4 	addi	r2,r2,-1
   44cbc:	9d402217 	ldw	r21,136(r19)
   44cc0:	85bfffc4 	addi	r22,r16,-1
   44cc4:	80a1883a 	add	r16,r16,r2
   44cc8:	8421883a 	add	r16,r16,r16
   44ccc:	8421883a 	add	r16,r16,r16
   44cd0:	ac2f883a 	add	r23,r21,r16
   44cd4:	84000204 	addi	r16,r16,8
   44cd8:	9c21883a 	add	r16,r19,r16
   44cdc:	b0002716 	blt	r22,zero,44d7c <__call_exitprocs+0x118>
   44ce0:	90000726 	beq	r18,zero,44d00 <__call_exitprocs+0x9c>
   44ce4:	a800041e 	bne	r21,zero,44cf8 <__call_exitprocs+0x94>
   44ce8:	b5bfffc4 	addi	r22,r22,-1
   44cec:	bdffff04 	addi	r23,r23,-4
   44cf0:	843fff04 	addi	r16,r16,-4
   44cf4:	003ff906 	br	44cdc <__alt_data_end+0xfffdccdc>
   44cf8:	b9002017 	ldw	r4,128(r23)
   44cfc:	913ffa1e 	bne	r18,r4,44ce8 <__alt_data_end+0xfffdcce8>
   44d00:	99000117 	ldw	r4,4(r19)
   44d04:	82000017 	ldw	r8,0(r16)
   44d08:	213fffc4 	addi	r4,r4,-1
   44d0c:	b100021e 	bne	r22,r4,44d18 <__call_exitprocs+0xb4>
   44d10:	9d800115 	stw	r22,4(r19)
   44d14:	00000106 	br	44d1c <__call_exitprocs+0xb8>
   44d18:	80000015 	stw	zero,0(r16)
   44d1c:	403ff226 	beq	r8,zero,44ce8 <__alt_data_end+0xfffdcce8>
   44d20:	9f000117 	ldw	fp,4(r19)
   44d24:	a8000526 	beq	r21,zero,44d3c <__call_exitprocs+0xd8>
   44d28:	00800044 	movi	r2,1
   44d2c:	1592983a 	sll	r9,r2,r22
   44d30:	a9404017 	ldw	r5,256(r21)
   44d34:	494a703a 	and	r5,r9,r5
   44d38:	2800021e 	bne	r5,zero,44d44 <__call_exitprocs+0xe0>
   44d3c:	403ee83a 	callr	r8
   44d40:	00000906 	br	44d68 <__call_exitprocs+0x104>
   44d44:	a9004117 	ldw	r4,260(r21)
   44d48:	4908703a 	and	r4,r9,r4
   44d4c:	2000041e 	bne	r4,zero,44d60 <__call_exitprocs+0xfc>
   44d50:	b9400017 	ldw	r5,0(r23)
   44d54:	d9000017 	ldw	r4,0(sp)
   44d58:	403ee83a 	callr	r8
   44d5c:	00000206 	br	44d68 <__call_exitprocs+0x104>
   44d60:	b9000017 	ldw	r4,0(r23)
   44d64:	403ee83a 	callr	r8
   44d68:	99000117 	ldw	r4,4(r19)
   44d6c:	e13fcc1e 	bne	fp,r4,44ca0 <__alt_data_end+0xfffdcca0>
   44d70:	89000017 	ldw	r4,0(r17)
   44d74:	993fdc26 	beq	r19,r4,44ce8 <__alt_data_end+0xfffdcce8>
   44d78:	003fc906 	br	44ca0 <__alt_data_end+0xfffdcca0>
   44d7c:	00800034 	movhi	r2,0
   44d80:	10800004 	addi	r2,r2,0
   44d84:	10000f26 	beq	r2,zero,44dc4 <__call_exitprocs+0x160>
   44d88:	99400117 	ldw	r5,4(r19)
   44d8c:	99000017 	ldw	r4,0(r19)
   44d90:	2800091e 	bne	r5,zero,44db8 <__call_exitprocs+0x154>
   44d94:	20000826 	beq	r4,zero,44db8 <__call_exitprocs+0x154>
   44d98:	89000015 	stw	r4,0(r17)
   44d9c:	a8000226 	beq	r21,zero,44da8 <__call_exitprocs+0x144>
   44da0:	a809883a 	mov	r4,r21
   44da4:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   44da8:	9809883a 	mov	r4,r19
   44dac:	00000000 	call	0 <__alt_mem_onchip_memory-0x40000>
   44db0:	8cc00017 	ldw	r19,0(r17)
   44db4:	003fbd06 	br	44cac <__alt_data_end+0xfffdccac>
   44db8:	9823883a 	mov	r17,r19
   44dbc:	2027883a 	mov	r19,r4
   44dc0:	003fba06 	br	44cac <__alt_data_end+0xfffdccac>
   44dc4:	dfc00a17 	ldw	ra,40(sp)
   44dc8:	df000917 	ldw	fp,36(sp)
   44dcc:	ddc00817 	ldw	r23,32(sp)
   44dd0:	dd800717 	ldw	r22,28(sp)
   44dd4:	dd400617 	ldw	r21,24(sp)
   44dd8:	dd000517 	ldw	r20,20(sp)
   44ddc:	dcc00417 	ldw	r19,16(sp)
   44de0:	dc800317 	ldw	r18,12(sp)
   44de4:	dc400217 	ldw	r17,8(sp)
   44de8:	dc000117 	ldw	r16,4(sp)
   44dec:	dec00b04 	addi	sp,sp,44
   44df0:	f800283a 	ret

00044df4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   44df4:	defffd04 	addi	sp,sp,-12
   44df8:	df000215 	stw	fp,8(sp)
   44dfc:	df000204 	addi	fp,sp,8
   44e00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   44e04:	0001883a 	nop
   44e08:	e0bfff17 	ldw	r2,-4(fp)
   44e0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   44e10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   44e14:	10000226 	beq	r2,zero,44e20 <_exit+0x2c>
    ALT_SIM_FAIL();
   44e18:	002af070 	cmpltui	zero,zero,43969
   44e1c:	00000106 	br	44e24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   44e20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   44e24:	003fff06 	br	44e24 <__alt_data_end+0xfffdce24>
