
alarm_clock_jukebox.elf:     file format elf32-littlenios2
alarm_clock_jukebox.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010244

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005dfc memsz 0x00005dfc flags r-x
    LOAD off    0x00006e1c vaddr 0x00015e1c paddr 0x000178bc align 2**12
         filesz 0x00001aa0 memsz 0x00001aa0 flags rw-
    LOAD off    0x0000935c vaddr 0x0001935c paddr 0x0001935c align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005b50  00010244  00010244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000088  00015d94  00015d94  00006d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa0  00015e1c  000178bc  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  0001935c  0001935c  0000935c  2**2
                  ALLOC, SMALL_DATA
  6 .MEMOIRE_ONCHIP 00000000  000194c8  000194c8  000088bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000088bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  000088e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000169a5  00000000  00000000  00009370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000625a  00000000  00000000  0001fd15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a97  00000000  00000000  00025f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000017f4  00000000  00000000  0002ca08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002943  00000000  00000000  0002e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  00030b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0003558c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000384a2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000384a5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000384af  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000384b1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000384b5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000384b9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000384bd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000384c8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000384d3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000384de  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000061  00000000  00000000  000384e9  2**0
                  CONTENTS, READONLY
 29 .jdi          0000599a  00000000  00000000  0003854a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00079ce4  00000000  00000000  0003dee4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010244 l    d  .text	00000000 .text
00015d94 l    d  .rodata	00000000 .rodata
00015e1c l    d  .rwdata	00000000 .rwdata
0001935c l    d  .bss	00000000 .bss
000194c8 l    d  .MEMOIRE_ONCHIP	00000000 .MEMOIRE_ONCHIP
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_jukebox_bsp//obj/HAL/src/crt0.o
0001027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 button.c
00000000 l    df *ABS*	00000000 display.c
00000000 l    df *ABS*	00000000 interrupts.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010b64 l     F .text	00000008 __fp_unlock
00010b78 l     F .text	0000019c __sinit.part.1
00010d14 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015e4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0001360c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00013718 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00013ad0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013bb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013c9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00013e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000178b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000140bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000141f0 l     F .text	00000034 alt_dev_reg
00016820 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000144e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000146f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00014d28 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014f68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000151d8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00015318 l     F .text	0000003c alt_get_errno
00015354 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001937c g     O .bss	00000004 alt_instruction_exception_handler
000135b8 g     F .text	00000054 _isatty_r
00013dac g     F .text	0000007c alt_main
000109f8 g     F .text	000000c0 _puts_r
000193c8 g     O .bss	00000100 alt_irq
000132e0 g     F .text	00000060 _lseek_r
000178bc g       *ABS*	00000000 __flash_rwdata_start
000194c8 g       *ABS*	00000000 __alt_heap_start
00012894 g     F .text	0000005c __sseek
00010eb4 g     F .text	00000010 __sinit
00010d1c g     F .text	00000068 __sfmoreglue
00013e4c g     F .text	00000024 __malloc_unlock
00011f80 g     F .text	0000015c memmove
00010e9c g     F .text	00000018 _cleanup
00010550 g     F .text	0000002c enableTimerInterrupt
00015710 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
0001355c g     F .text	0000005c _fstat_r
00019368 g     O .bss	00000004 errno
00012810 g     F .text	00000008 __seofread
00019374 g     O .bss	00000004 alt_argv
0001f880 g       *ABS*	00000000 _gp
00017880 g     O .rwdata	00000004 time_format
000166a0 g     O .rwdata	00000180 alt_fd_list
000193b0 g     O .bss	0000000c current_time
00015734 g     F .text	00000090 alt_find_dev
00011e38 g     F .text	00000148 memcpy
0001043c g     F .text	00000044 updateMinutesTime
00010b6c g     F .text	0000000c _cleanup_r
0001529c g     F .text	0000007c alt_io_redirect
00015d94 g       *ABS*	00000000 __DTOR_END__
00010ab8 g     F .text	00000014 puts
0001513c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000193bc g     O .bss	0000000c alarm_time
000148e8 g     F .text	0000021c altera_avalon_jtag_uart_read
0001093c g     F .text	00000064 .hidden __udivsi3
00013b0c g     F .text	000000a4 isatty
000106a0 g     F .text	0000006c incrementAlarmMinute
00015970 g     F .text	00000090 alt_icache_flush
00019364 g     O .bss	00000004 __malloc_top_pad
00010508 g     F .text	00000048 registerTimerInterrupt
0001070c g     F .text	00000060 incrementTimeHour
00010f04 g     F .text	000004bc __sfvwrite_r
00012768 g     F .text	00000054 _sbrk_r
000134fc g     F .text	00000060 _read_r
000178a4 g     O .rwdata	00000004 alt_max_fd
00012b00 g     F .text	000000f0 _fclose_r
00012e7c g     F .text	00000030 fflush
00019360 g     O .bss	00000004 __malloc_max_sbrked_mem
00013cd8 g     F .text	000000d4 lseek
00017884 g     O .rwdata	00000004 _global_impure_ptr
00012204 g     F .text	00000564 _realloc_r
000194c8 g       *ABS*	00000000 __bss_end
000139e0 g     F .text	000000f0 alt_iic_isr_register
00015608 g     F .text	00000108 alt_tick
00010ed4 g     F .text	00000018 __fp_lock_all
00013994 g     F .text	0000004c alt_ic_irq_enabled
0001556c g     F .text	0000009c alt_alarm_stop
0001936c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00016678 g     O .rwdata	00000028 alt_dev_null
00014f48 g     F .text	00000020 alt_dcache_flush_all
000178bc g       *ABS*	00000000 __ram_rwdata_end
0001789c g     O .rwdata	00000008 alt_dev_list
000105fc g     F .text	00000044 initializeAlarm
000140f8 g     F .text	000000f8 write
00015e1c g       *ABS*	00000000 __ram_rodata_end
00013780 g     F .text	000000b0 fstat
000103f8 g     F .text	00000044 updateHourTime
00015e1c g     O .rwdata	00000030 COM_ANODE_SEG_TABLE
000109a0 g     F .text	00000058 .hidden __umodsi3
000194c8 g       *ABS*	00000000 end
00014424 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00015d94 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00014da0 g     F .text	0000007c alt_avalon_timer_sc_init
00014b04 g     F .text	00000224 altera_avalon_jtag_uart_write
00010ec4 g     F .text	00000004 __sfp_lock_acquire
00011d54 g     F .text	000000e4 memchr
00012fd0 g     F .text	00000310 _free_r
00015be0 g     F .text	00000180 __call_exitprocs
0001788c g     O .rwdata	00000004 __malloc_sbrk_base
00010244 g     F .text	0000003c _start
00019380 g     O .bss	00000004 _alt_tick_rate
00019384 g     O .bss	00000004 _alt_nticks
00013eac g     F .text	000000fc read
0001425c g     F .text	00000064 alt_sys_init
00015ac8 g     F .text	00000118 __register_exitproc
00014790 g     F .text	00000068 altera_avalon_jtag_uart_close
00015e1c g       *ABS*	00000000 __ram_rwdata_start
00015d94 g       *ABS*	00000000 __ram_rodata_start
00019388 g     O .bss	00000028 __malloc_current_mallinfo
000142c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000158cc g     F .text	000000a4 alt_get_fd
00012aac g     F .text	00000054 _close_r
00015a4c g     F .text	0000007c memcmp
00014380 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000194c8 g       *ABS*	00000000 __alt_stack_base
000143d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012958 g     F .text	00000154 __swsetup_r
00010d84 g     F .text	00000118 __sfp
00016270 g     O .rwdata	00000408 __malloc_av_
00010ed0 g     F .text	00000004 __sinit_lock_release
000127bc g     F .text	00000054 __sread
000157c4 g     F .text	00000108 alt_find_file
00014fa4 g     F .text	000000a4 alt_dev_llist_insert
00013e28 g     F .text	00000024 __malloc_lock
0001400c g     F .text	000000b0 sbrk
00012e20 g     F .text	0000005c _fflush_r
00010320 g     F .text	000000d8 convertBCDToLED
0001935c g       *ABS*	00000000 __bss_start
000120dc g     F .text	00000128 memset
0001057c g     F .text	0000003c main
00019378 g     O .bss	00000004 alt_envp
0001935c g     O .bss	00000004 __malloc_max_total_mem
00014320 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000128f0 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00012bf0 g     F .text	00000014 fclose
00011548 g     F .text	0000080c _malloc_r
000178a8 g     O .rwdata	00000004 alt_errno
000113c0 g     F .text	000000c4 _fwalk
00010844 g     F .text	00000084 .hidden __divsi3
00012eac g     F .text	00000124 _malloc_trim_r
00015d94 g       *ABS*	00000000 __CTOR_END__
00015d94 g       *ABS*	00000000 __flash_rodata_start
00015d94 g       *ABS*	00000000 __DTOR_LIST__
00014224 g     F .text	00000038 alt_irq_init
00013fa8 g     F .text	00000064 alt_release_fd
00015a00 g     F .text	00000014 atexit
000128f8 g     F .text	00000060 _write_r
00010000 g       *ABS*	00000000 __alt_mem_MEMOIRE_ONCHIP
000104c4 g     F .text	00000044 update_second_isr
00017888 g     O .rwdata	00000004 _impure_ptr
00019370 g     O .bss	00000004 alt_argc
00012c04 g     F .text	0000021c __sflush_r
000150a8 g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
00010eec g     F .text	00000018 __fp_unlock_all
00017894 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001076c g     F .text	0000006c incrementTimeMinute
00013830 g     F .text	00000050 alt_ic_isr_register
000178bc g       *ABS*	00000000 _edata
000194c8 g       *ABS*	00000000 _end
00010244 g       *ABS*	00000000 __ram_exceptions_end
000147f8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00010480 g     F .text	00000044 updateSecondsTime
00013908 g     F .text	0000008c alt_ic_irq_disable
00012818 g     F .text	0000007c __swrite
00017890 g     O .rwdata	00000004 __malloc_trim_threshold
00015a14 g     F .text	00000038 exit
00010280 g     F .text	000000a0 convert3DigitDecimalToLED
00011484 g     F .text	000000c4 _fwalk_reent
000108c8 g     F .text	00000074 .hidden __modsi3
000105b8 g     F .text	00000044 initializeTime
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010ec8 g     F .text	00000004 __sfp_lock_release
000107d8 g     F .text	0000006c incrementTimeSecond
00015d60 g     F .text	00000034 _exit
00014e1c g     F .text	0000012c alt_alarm_start
00013340 g     F .text	000001bc __smakebuf_r
00010acc g     F .text	00000098 strlen
00015418 g     F .text	00000154 open
00010640 g     F .text	00000060 incrementAlarmHour
00015108 g     F .text	00000034 alt_icache_flush_all
000178ac g     O .rwdata	00000004 alt_priority_mask
00013880 g     F .text	00000088 alt_ic_irq_enable
000178b4 g     O .rwdata	00000008 alt_alarm_list
00015048 g     F .text	00000060 _do_ctors
00013648 g     F .text	000000d0 close
00013c18 g     F .text	00000084 alt_load
00010ecc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <_gp+0xffff0784>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08409114 	ori	at,at,580
    jmp r1
   10018:	0800683a 	jmp	at
   1001c:	00000000 	call	0 <__reset-0x10000>

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	10a4f204 	addi	r2,r2,-27704
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	10a4f204 	addi	r2,r2,-27704
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <_gp+0xffff08ac>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <_gp+0xffff08a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   101e4:	000531fa 	rdctl	r2,exception
   101e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   101ec:	e0bffd17 	ldw	r2,-12(fp)
   101f0:	10801f0c 	andi	r2,r2,124
   101f4:	1004d0ba 	srli	r2,r2,2
   101f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   101fc:	0005333a 	rdctl	r2,badaddr
   10200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   10204:	d0a6bf17 	ldw	r2,-25860(gp)
   10208:	10000726 	beq	r2,zero,10228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   1020c:	d0a6bf17 	ldw	r2,-25860(gp)
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	e1bffe17 	ldw	r6,-8(fp)
   10218:	e17fff17 	ldw	r5,-4(fp)
   1021c:	1809883a 	mov	r4,r3
   10220:	103ee83a 	callr	r2
   10224:	00000206 	br	10230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1022c:	0005883a 	mov	r2,zero
}
   10230:	e037883a 	mov	sp,fp
   10234:	dfc00117 	ldw	ra,4(sp)
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00204 	addi	sp,sp,8
   10240:	f800283a 	ret

Disassembly of section .text:

00010244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10244:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1024c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10250:	d6be2014 	ori	gp,gp,63616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10258:	10a4d714 	ori	r2,r2,37724

    movhi r3, %hi(__bss_end)
   1025c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10260:	18e53214 	ori	r3,r3,38088

    beq r2, r3, 1f
   10264:	10c00326 	beq	r2,r3,10274 <_start+0x30>

0:
    stw zero, (r2)
   10268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10270:	10fffd36 	bltu	r2,r3,10268 <_gp+0xffff09e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10274:	0013c180 	call	13c18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10278:	0013dac0 	call	13dac <alt_main>

0001027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1027c:	003fff06 	br	1027c <_gp+0xffff09fc>

00010280 <convert3DigitDecimalToLED>:
bcd[2] = 512/100 = 5
bcd[1] = (512-5*100)/10 = 12/10 = 1
bcd[0] = (512 - (5*100 + 1*10))/1 = 2
*/

int convert3DigitDecimalToLED(int decimal) {
   10280:	defff904 	addi	sp,sp,-28
   10284:	dfc00615 	stw	ra,24(sp)
   10288:	df000515 	stw	fp,20(sp)
   1028c:	df000504 	addi	fp,sp,20
   10290:	e13fff15 	stw	r4,-4(fp)
  int bcd[3] = {0x0,0x0,0x0};
   10294:	e03ffc15 	stw	zero,-16(fp)
   10298:	e03ffd15 	stw	zero,-12(fp)
   1029c:	e03ffe15 	stw	zero,-8(fp)
  int ledseg_buffer = 0;
   102a0:	e03ffb15 	stw	zero,-20(fp)
  
  // first convert the decimal to BCD
  bcd[2] = decimal/100;
   102a4:	e0bfff17 	ldw	r2,-4(fp)
   102a8:	01401904 	movi	r5,100
   102ac:	1009883a 	mov	r4,r2
   102b0:	00108440 	call	10844 <__divsi3>
   102b4:	e0bffe15 	stw	r2,-8(fp)
  bcd[1] = (decimal - bcd[2]*100)/10;
   102b8:	e0bffe17 	ldw	r2,-8(fp)
   102bc:	10ffe724 	muli	r3,r2,-100
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	01400284 	movi	r5,10
   102cc:	1009883a 	mov	r4,r2
   102d0:	00108440 	call	10844 <__divsi3>
   102d4:	e0bffd15 	stw	r2,-12(fp)
  bcd[0] = decimal - (bcd[2]*100 + bcd[1]*10);
   102d8:	e0bffe17 	ldw	r2,-8(fp)
   102dc:	10c01924 	muli	r3,r2,100
   102e0:	e0bffd17 	ldw	r2,-12(fp)
   102e4:	108002a4 	muli	r2,r2,10
   102e8:	1885883a 	add	r2,r3,r2
   102ec:	e0ffff17 	ldw	r3,-4(fp)
   102f0:	1885c83a 	sub	r2,r3,r2
   102f4:	e0bffc15 	stw	r2,-16(fp)

  // then convert BCD to LED segment data buffer
  // by passing in pointer to bcd array
  ledseg_buffer = convertBCDToLED(bcd);
   102f8:	e0bffc04 	addi	r2,fp,-16
   102fc:	1009883a 	mov	r4,r2
   10300:	00103200 	call	10320 <convertBCDToLED>
   10304:	e0bffb15 	stw	r2,-20(fp)

  return ledseg_buffer;
   10308:	e0bffb17 	ldw	r2,-20(fp)
}
   1030c:	e037883a 	mov	sp,fp
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	df000017 	ldw	fp,0(sp)
   10318:	dec00204 	addi	sp,sp,8
   1031c:	f800283a 	ret

00010320 <convertBCDToLED>:

int convertBCDToLED(int *bcd) {
   10320:	defff904 	addi	sp,sp,-28
   10324:	df000615 	stw	fp,24(sp)
   10328:	df000604 	addi	fp,sp,24
   1032c:	e13fff15 	stw	r4,-4(fp)

  int i;
  int ledseg[3] = {0x0,0x0,0x0};
   10330:	e03ffc15 	stw	zero,-16(fp)
   10334:	e03ffd15 	stw	zero,-12(fp)
   10338:	e03ffe15 	stw	zero,-8(fp)
  int ledseg_buffer = 0x0;
   1033c:	e03ffb15 	stw	zero,-20(fp)

  // shift by 8 bits each time through loop to target each digit
  // of the 7 seg display
  for (i=0; i < 3; i++) {
   10340:	e03ffa15 	stw	zero,-24(fp)
   10344:	00002406 	br	103d8 <convertBCDToLED+0xb8>
    // bcd[i] corresponds to a position of the SEG_TABLE and this position
    // is the associated BCD value
    ledseg[i] = COM_ANODE_SEG_TABLE[(bcd[i])];
   10348:	e0bffa17 	ldw	r2,-24(fp)
   1034c:	1085883a 	add	r2,r2,r2
   10350:	1085883a 	add	r2,r2,r2
   10354:	1007883a 	mov	r3,r2
   10358:	e0bfff17 	ldw	r2,-4(fp)
   1035c:	10c5883a 	add	r2,r2,r3
   10360:	10c00017 	ldw	r3,0(r2)
   10364:	00800074 	movhi	r2,1
   10368:	10978704 	addi	r2,r2,24092
   1036c:	18c7883a 	add	r3,r3,r3
   10370:	18c7883a 	add	r3,r3,r3
   10374:	10c5883a 	add	r2,r2,r3
   10378:	10c00017 	ldw	r3,0(r2)
   1037c:	e0bffa17 	ldw	r2,-24(fp)
   10380:	1085883a 	add	r2,r2,r2
   10384:	1085883a 	add	r2,r2,r2
   10388:	e13ffa04 	addi	r4,fp,-24
   1038c:	2085883a 	add	r2,r4,r2
   10390:	10800204 	addi	r2,r2,8
   10394:	10c00015 	stw	r3,0(r2)
    ledseg_buffer |= (ledseg[i] << 8*i);
   10398:	e0bffa17 	ldw	r2,-24(fp)
   1039c:	1085883a 	add	r2,r2,r2
   103a0:	1085883a 	add	r2,r2,r2
   103a4:	e0fffa04 	addi	r3,fp,-24
   103a8:	1885883a 	add	r2,r3,r2
   103ac:	10800204 	addi	r2,r2,8
   103b0:	10c00017 	ldw	r3,0(r2)
   103b4:	e0bffa17 	ldw	r2,-24(fp)
   103b8:	100490fa 	slli	r2,r2,3
   103bc:	1884983a 	sll	r2,r3,r2
   103c0:	e0fffb17 	ldw	r3,-20(fp)
   103c4:	1884b03a 	or	r2,r3,r2
   103c8:	e0bffb15 	stw	r2,-20(fp)
  int ledseg[3] = {0x0,0x0,0x0};
  int ledseg_buffer = 0x0;

  // shift by 8 bits each time through loop to target each digit
  // of the 7 seg display
  for (i=0; i < 3; i++) {
   103cc:	e0bffa17 	ldw	r2,-24(fp)
   103d0:	10800044 	addi	r2,r2,1
   103d4:	e0bffa15 	stw	r2,-24(fp)
   103d8:	e0bffa17 	ldw	r2,-24(fp)
   103dc:	108000d0 	cmplti	r2,r2,3
   103e0:	103fd91e 	bne	r2,zero,10348 <_gp+0xffff0ac8>
    // bcd[i] corresponds to a position of the SEG_TABLE and this position
    // is the associated BCD value
    ledseg[i] = COM_ANODE_SEG_TABLE[(bcd[i])];
    ledseg_buffer |= (ledseg[i] << 8*i);
  }
  return ledseg_buffer;
   103e4:	e0bffb17 	ldw	r2,-20(fp)
}
   103e8:	e037883a 	mov	sp,fp
   103ec:	df000017 	ldw	fp,0(sp)
   103f0:	dec00104 	addi	sp,sp,4
   103f4:	f800283a 	ret

000103f8 <updateHourTime>:

void updateHourTime(int hour) {
   103f8:	defffe04 	addi	sp,sp,-8
   103fc:	df000115 	stw	fp,4(sp)
   10400:	df000104 	addi	fp,sp,4
   10404:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR1_BASE, hour);
   10408:	008000b4 	movhi	r2,2
   1040c:	10841c04 	addi	r2,r2,4208
   10410:	e0ffff17 	ldw	r3,-4(fp)
   10414:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(HOUR0_BASE, hour);
   10418:	008000b4 	movhi	r2,2
   1041c:	10842004 	addi	r2,r2,4224
   10420:	e0ffff17 	ldw	r3,-4(fp)
   10424:	10c00035 	stwio	r3,0(r2)
}
   10428:	0001883a 	nop
   1042c:	e037883a 	mov	sp,fp
   10430:	df000017 	ldw	fp,0(sp)
   10434:	dec00104 	addi	sp,sp,4
   10438:	f800283a 	ret

0001043c <updateMinutesTime>:

void updateMinutesTime(int minute) {
   1043c:	defffe04 	addi	sp,sp,-8
   10440:	df000115 	stw	fp,4(sp)
   10444:	df000104 	addi	fp,sp,4
   10448:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN1_BASE, minute);
   1044c:	008000b4 	movhi	r2,2
   10450:	10841404 	addi	r2,r2,4176
   10454:	e0ffff17 	ldw	r3,-4(fp)
   10458:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(MIN0_BASE, minute);
   1045c:	008000b4 	movhi	r2,2
   10460:	10841804 	addi	r2,r2,4192
   10464:	e0ffff17 	ldw	r3,-4(fp)
   10468:	10c00035 	stwio	r3,0(r2)
}
   1046c:	0001883a 	nop
   10470:	e037883a 	mov	sp,fp
   10474:	df000017 	ldw	fp,0(sp)
   10478:	dec00104 	addi	sp,sp,4
   1047c:	f800283a 	ret

00010480 <updateSecondsTime>:

void updateSecondsTime(int second) {
   10480:	defffe04 	addi	sp,sp,-8
   10484:	df000115 	stw	fp,4(sp)
   10488:	df000104 	addi	fp,sp,4
   1048c:	e13fff15 	stw	r4,-4(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC1_BASE, second);
   10490:	008000b4 	movhi	r2,2
   10494:	10840c04 	addi	r2,r2,4144
   10498:	e0ffff17 	ldw	r3,-4(fp)
   1049c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_PIO_DATA(SEC0_BASE, second);
   104a0:	008000b4 	movhi	r2,2
   104a4:	10841004 	addi	r2,r2,4160
   104a8:	e0ffff17 	ldw	r3,-4(fp)
   104ac:	10c00035 	stwio	r3,0(r2)
   104b0:	0001883a 	nop
   104b4:	e037883a 	mov	sp,fp
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00104 	addi	sp,sp,4
   104c0:	f800283a 	ret

000104c4 <update_second_isr>:
#include "main.h"
#include "interrupts.h"

void update_second_isr(void* isr_context) {
   104c4:	defffd04 	addi	sp,sp,-12
   104c8:	dfc00215 	stw	ra,8(sp)
   104cc:	df000115 	stw	fp,4(sp)
   104d0:	df000104 	addi	fp,sp,4
   104d4:	e13fff15 	stw	r4,-4(fp)
  printf("INTERRUPT FIRED!\n");
   104d8:	01000074 	movhi	r4,1
   104dc:	21176504 	addi	r4,r4,23956
   104e0:	0010ab80 	call	10ab8 <puts>

  /* The TO (timeout) bit is set to 1 when the internal counter reaches zero. Once set by a
  timeout event, the TO bit stays set until explicitly cleared by a master peripheral. Write zero
  to the status register to clear the TO bit. */
  IOWR_ALTERA_AVALON_TIMER_STATUS(UPDATE_SECOND_BASE, 0);
   104e4:	0007883a 	mov	r3,zero
   104e8:	0005883a 	mov	r2,zero
   104ec:	10c00035 	stwio	r3,0(r2)
}
   104f0:	0001883a 	nop
   104f4:	e037883a 	mov	sp,fp
   104f8:	dfc00117 	ldw	ra,4(sp)
   104fc:	df000017 	ldw	fp,0(sp)
   10500:	dec00204 	addi	sp,sp,8
   10504:	f800283a 	ret

00010508 <registerTimerInterrupt>:


int registerTimerInterrupt(void) {
   10508:	defffc04 	addi	sp,sp,-16
   1050c:	dfc00315 	stw	ra,12(sp)
   10510:	df000215 	stw	fp,8(sp)
   10514:	df000204 	addi	fp,sp,8
  int isr_register_status;

  isr_register_status = alt_ic_isr_register(UPDATE_SECOND_IRQ_INTERRUPT_CONTROLLER_ID,
   10518:	d8000015 	stw	zero,0(sp)
   1051c:	000f883a 	mov	r7,zero
   10520:	01800074 	movhi	r6,1
   10524:	31813104 	addi	r6,r6,1220
   10528:	01400084 	movi	r5,2
   1052c:	0009883a 	mov	r4,zero
   10530:	00138300 	call	13830 <alt_ic_isr_register>
   10534:	e0bfff15 	stw	r2,-4(fp)
                                            UPDATE_SECOND_IRQ,
                                            update_second_isr,
                                            NULL,
                                            0x0);
  return isr_register_status;
   10538:	e0bfff17 	ldw	r2,-4(fp)
}
   1053c:	e037883a 	mov	sp,fp
   10540:	dfc00117 	ldw	ra,4(sp)
   10544:	df000017 	ldw	fp,0(sp)
   10548:	dec00204 	addi	sp,sp,8
   1054c:	f800283a 	ret

00010550 <enableTimerInterrupt>:

void enableTimerInterrupt(void) {
   10550:	deffff04 	addi	sp,sp,-4
   10554:	df000015 	stw	fp,0(sp)
   10558:	d839883a 	mov	fp,sp

 IOWR_ALTERA_AVALON_TIMER_CONTROL(UPDATE_SECOND_BASE,
   1055c:	00c001c4 	movi	r3,7
   10560:	00800104 	movi	r2,4
   10564:	10c00035 	stwio	r3,0(r2)
                 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  
               | ALTERA_AVALON_TIMER_CONTROL_START_MSK
               | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   10568:	0001883a 	nop
   1056c:	e037883a 	mov	sp,fp
   10570:	df000017 	ldw	fp,0(sp)
   10574:	dec00104 	addi	sp,sp,4
   10578:	f800283a 	ret

0001057c <main>:
#include "main.h"
#include "interrupts.h"

int main(void) {
   1057c:	defffe04 	addi	sp,sp,-8
   10580:	dfc00115 	stw	ra,4(sp)
   10584:	df000015 	stw	fp,0(sp)
   10588:	d839883a 	mov	fp,sp


  if (registerTimerInterrupt() == ISR_REGISTER_SUCCESS) {
   1058c:	00105080 	call	10508 <registerTimerInterrupt>
   10590:	1000051e 	bne	r2,zero,105a8 <main+0x2c>
    printf("ISR registered!\n");
   10594:	01000074 	movhi	r4,1
   10598:	21176a04 	addi	r4,r4,23976
   1059c:	0010ab80 	call	10ab8 <puts>

    // enable the appropiate update_second peripheral
    enableTimerInterrupt();
   105a0:	00105500 	call	10550 <enableTimerInterrupt>
   105a4:	00000306 	br	105b4 <main+0x38>
  }
  else {
    printf("ERROR: ISR unsuccessfully registered!\n");
   105a8:	01000074 	movhi	r4,1
   105ac:	21176e04 	addi	r4,r4,23992
   105b0:	0010ab80 	call	10ab8 <puts>
  }


  while(1) {
  }  
   105b4:	003fff06 	br	105b4 <_gp+0xffff0d34>

000105b8 <initializeTime>:

// 24 hour or 12 hour format (24 by default)
int time_format = 24;

// initialize time to 00:00:00
void initializeTime(void) {
   105b8:	deffff04 	addi	sp,sp,-4
   105bc:	df000015 	stw	fp,0(sp)
   105c0:	d839883a 	mov	fp,sp

  // method #2
  // memset(&m, 0, sizeof(myStruct));

  // method #3
  current_time.hour = 0x0;
   105c4:	008000b4 	movhi	r2,2
   105c8:	10a4ec04 	addi	r2,r2,-27728
   105cc:	10000015 	stw	zero,0(r2)
  current_time.minute = 0x0;
   105d0:	008000b4 	movhi	r2,2
   105d4:	10a4ec04 	addi	r2,r2,-27728
   105d8:	10000115 	stw	zero,4(r2)
  current_time.second = 0x0;
   105dc:	008000b4 	movhi	r2,2
   105e0:	10a4ec04 	addi	r2,r2,-27728
   105e4:	10000215 	stw	zero,8(r2)
}
   105e8:	0001883a 	nop
   105ec:	e037883a 	mov	sp,fp
   105f0:	df000017 	ldw	fp,0(sp)
   105f4:	dec00104 	addi	sp,sp,4
   105f8:	f800283a 	ret

000105fc <initializeAlarm>:

// initialize alarm_time to 00:00:00
void initializeAlarm(void) {
   105fc:	deffff04 	addi	sp,sp,-4
   10600:	df000015 	stw	fp,0(sp)
   10604:	d839883a 	mov	fp,sp
  alarm_time.hour = 0x0;
   10608:	008000b4 	movhi	r2,2
   1060c:	10a4ef04 	addi	r2,r2,-27716
   10610:	10000015 	stw	zero,0(r2)
  alarm_time.minute = 0x0;
   10614:	008000b4 	movhi	r2,2
   10618:	10a4ef04 	addi	r2,r2,-27716
   1061c:	10000115 	stw	zero,4(r2)
  alarm_time.second = 0x0;
   10620:	008000b4 	movhi	r2,2
   10624:	10a4ef04 	addi	r2,r2,-27716
   10628:	10000215 	stw	zero,8(r2)
}
   1062c:	0001883a 	nop
   10630:	e037883a 	mov	sp,fp
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00104 	addi	sp,sp,4
   1063c:	f800283a 	ret

00010640 <incrementAlarmHour>:

void incrementAlarmHour(void) {
   10640:	deffff04 	addi	sp,sp,-4
   10644:	df000015 	stw	fp,0(sp)
   10648:	d839883a 	mov	fp,sp
  // case where time is at 12:XX:XX or 24:XX:XX
  if(alarm_time.hour == time_format) {
   1064c:	008000b4 	movhi	r2,2
   10650:	10a4ef04 	addi	r2,r2,-27716
   10654:	10c00017 	ldw	r3,0(r2)
   10658:	d0a00017 	ldw	r2,-32768(gp)
   1065c:	1880041e 	bne	r3,r2,10670 <incrementAlarmHour+0x30>
    // wrap to 00:XX:XX
    alarm_time.hour = 0;
   10660:	008000b4 	movhi	r2,2
   10664:	10a4ef04 	addi	r2,r2,-27716
   10668:	10000015 	stw	zero,0(r2)
  }
  else {
    alarm_time.hour++;
  }
}
   1066c:	00000706 	br	1068c <incrementAlarmHour+0x4c>
  if(alarm_time.hour == time_format) {
    // wrap to 00:XX:XX
    alarm_time.hour = 0;
  }
  else {
    alarm_time.hour++;
   10670:	008000b4 	movhi	r2,2
   10674:	10a4ef04 	addi	r2,r2,-27716
   10678:	10800017 	ldw	r2,0(r2)
   1067c:	10c00044 	addi	r3,r2,1
   10680:	008000b4 	movhi	r2,2
   10684:	10a4ef04 	addi	r2,r2,-27716
   10688:	10c00015 	stw	r3,0(r2)
  }
}
   1068c:	0001883a 	nop
   10690:	e037883a 	mov	sp,fp
   10694:	df000017 	ldw	fp,0(sp)
   10698:	dec00104 	addi	sp,sp,4
   1069c:	f800283a 	ret

000106a0 <incrementAlarmMinute>:

void incrementAlarmMinute(void) {
   106a0:	defffe04 	addi	sp,sp,-8
   106a4:	dfc00115 	stw	ra,4(sp)
   106a8:	df000015 	stw	fp,0(sp)
   106ac:	d839883a 	mov	fp,sp
  // case where time is at XX:60:XX
  if(alarm_time.minute == ONE_HOUR) {
   106b0:	008000b4 	movhi	r2,2
   106b4:	10a4ef04 	addi	r2,r2,-27716
   106b8:	10800117 	ldw	r2,4(r2)
   106bc:	10800f18 	cmpnei	r2,r2,60
   106c0:	1000051e 	bne	r2,zero,106d8 <incrementAlarmMinute+0x38>
    incrementAlarmHour();
   106c4:	00106400 	call	10640 <incrementAlarmHour>
    alarm_time.minute = 0;
   106c8:	008000b4 	movhi	r2,2
   106cc:	10a4ef04 	addi	r2,r2,-27716
   106d0:	10000115 	stw	zero,4(r2)
  }
  else {
    alarm_time.minute++;
  }
}
   106d4:	00000706 	br	106f4 <incrementAlarmMinute+0x54>
  if(alarm_time.minute == ONE_HOUR) {
    incrementAlarmHour();
    alarm_time.minute = 0;
  }
  else {
    alarm_time.minute++;
   106d8:	008000b4 	movhi	r2,2
   106dc:	10a4ef04 	addi	r2,r2,-27716
   106e0:	10800117 	ldw	r2,4(r2)
   106e4:	10c00044 	addi	r3,r2,1
   106e8:	008000b4 	movhi	r2,2
   106ec:	10a4ef04 	addi	r2,r2,-27716
   106f0:	10c00115 	stw	r3,4(r2)
  }
}
   106f4:	0001883a 	nop
   106f8:	e037883a 	mov	sp,fp
   106fc:	dfc00117 	ldw	ra,4(sp)
   10700:	df000017 	ldw	fp,0(sp)
   10704:	dec00204 	addi	sp,sp,8
   10708:	f800283a 	ret

0001070c <incrementTimeHour>:

void incrementTimeHour(void) {
   1070c:	deffff04 	addi	sp,sp,-4
   10710:	df000015 	stw	fp,0(sp)
   10714:	d839883a 	mov	fp,sp
  // case where time is at 12:XX:XX or 24:XX:XX
  if(current_time.hour == time_format) {
   10718:	008000b4 	movhi	r2,2
   1071c:	10a4ec04 	addi	r2,r2,-27728
   10720:	10c00017 	ldw	r3,0(r2)
   10724:	d0a00017 	ldw	r2,-32768(gp)
   10728:	1880041e 	bne	r3,r2,1073c <incrementTimeHour+0x30>
    // wrap to 00:XX:XX
    current_time.hour = 0;
   1072c:	008000b4 	movhi	r2,2
   10730:	10a4ec04 	addi	r2,r2,-27728
   10734:	10000015 	stw	zero,0(r2)
  }
  else {
    current_time.hour++;
  }
}
   10738:	00000706 	br	10758 <incrementTimeHour+0x4c>
  if(current_time.hour == time_format) {
    // wrap to 00:XX:XX
    current_time.hour = 0;
  }
  else {
    current_time.hour++;
   1073c:	008000b4 	movhi	r2,2
   10740:	10a4ec04 	addi	r2,r2,-27728
   10744:	10800017 	ldw	r2,0(r2)
   10748:	10c00044 	addi	r3,r2,1
   1074c:	008000b4 	movhi	r2,2
   10750:	10a4ec04 	addi	r2,r2,-27728
   10754:	10c00015 	stw	r3,0(r2)
  }
}
   10758:	0001883a 	nop
   1075c:	e037883a 	mov	sp,fp
   10760:	df000017 	ldw	fp,0(sp)
   10764:	dec00104 	addi	sp,sp,4
   10768:	f800283a 	ret

0001076c <incrementTimeMinute>:

void incrementTimeMinute(void) {
   1076c:	defffe04 	addi	sp,sp,-8
   10770:	dfc00115 	stw	ra,4(sp)
   10774:	df000015 	stw	fp,0(sp)
   10778:	d839883a 	mov	fp,sp
  // case where time is at XX:60:XX
  if(current_time.minute == ONE_HOUR) {
   1077c:	008000b4 	movhi	r2,2
   10780:	10a4ec04 	addi	r2,r2,-27728
   10784:	10800117 	ldw	r2,4(r2)
   10788:	10800f18 	cmpnei	r2,r2,60
   1078c:	1000051e 	bne	r2,zero,107a4 <incrementTimeMinute+0x38>
    incrementTimeHour();
   10790:	001070c0 	call	1070c <incrementTimeHour>
    current_time.minute = 0;
   10794:	008000b4 	movhi	r2,2
   10798:	10a4ec04 	addi	r2,r2,-27728
   1079c:	10000115 	stw	zero,4(r2)
  }
  else {
    current_time.minute++;
  }
}
   107a0:	00000706 	br	107c0 <incrementTimeMinute+0x54>
  if(current_time.minute == ONE_HOUR) {
    incrementTimeHour();
    current_time.minute = 0;
  }
  else {
    current_time.minute++;
   107a4:	008000b4 	movhi	r2,2
   107a8:	10a4ec04 	addi	r2,r2,-27728
   107ac:	10800117 	ldw	r2,4(r2)
   107b0:	10c00044 	addi	r3,r2,1
   107b4:	008000b4 	movhi	r2,2
   107b8:	10a4ec04 	addi	r2,r2,-27728
   107bc:	10c00115 	stw	r3,4(r2)
  }
}
   107c0:	0001883a 	nop
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <incrementTimeSecond>:

void incrementTimeSecond(void) {
   107d8:	defffe04 	addi	sp,sp,-8
   107dc:	dfc00115 	stw	ra,4(sp)
   107e0:	df000015 	stw	fp,0(sp)
   107e4:	d839883a 	mov	fp,sp
  // case where time is at XX:XX:60
  if(current_time.second == ONE_MINUTE) {
   107e8:	008000b4 	movhi	r2,2
   107ec:	10a4ec04 	addi	r2,r2,-27728
   107f0:	10800217 	ldw	r2,8(r2)
   107f4:	10800f18 	cmpnei	r2,r2,60
   107f8:	1000051e 	bne	r2,zero,10810 <incrementTimeSecond+0x38>
    incrementTimeMinute();
   107fc:	001076c0 	call	1076c <incrementTimeMinute>
    current_time.second = 0;
   10800:	008000b4 	movhi	r2,2
   10804:	10a4ec04 	addi	r2,r2,-27728
   10808:	10000215 	stw	zero,8(r2)
  }
  else {
    current_time.second++;
  }
}
   1080c:	00000706 	br	1082c <incrementTimeSecond+0x54>
  if(current_time.second == ONE_MINUTE) {
    incrementTimeMinute();
    current_time.second = 0;
  }
  else {
    current_time.second++;
   10810:	008000b4 	movhi	r2,2
   10814:	10a4ec04 	addi	r2,r2,-27728
   10818:	10800217 	ldw	r2,8(r2)
   1081c:	10c00044 	addi	r3,r2,1
   10820:	008000b4 	movhi	r2,2
   10824:	10a4ec04 	addi	r2,r2,-27728
   10828:	10c00215 	stw	r3,8(r2)
  }
}
   1082c:	0001883a 	nop
   10830:	e037883a 	mov	sp,fp
   10834:	dfc00117 	ldw	ra,4(sp)
   10838:	df000017 	ldw	fp,0(sp)
   1083c:	dec00204 	addi	sp,sp,8
   10840:	f800283a 	ret

00010844 <__divsi3>:
   10844:	20001b16 	blt	r4,zero,108b4 <__divsi3+0x70>
   10848:	000f883a 	mov	r7,zero
   1084c:	28001616 	blt	r5,zero,108a8 <__divsi3+0x64>
   10850:	200d883a 	mov	r6,r4
   10854:	29001a2e 	bgeu	r5,r4,108c0 <__divsi3+0x7c>
   10858:	00800804 	movi	r2,32
   1085c:	00c00044 	movi	r3,1
   10860:	00000106 	br	10868 <__divsi3+0x24>
   10864:	10000d26 	beq	r2,zero,1089c <__divsi3+0x58>
   10868:	294b883a 	add	r5,r5,r5
   1086c:	10bfffc4 	addi	r2,r2,-1
   10870:	18c7883a 	add	r3,r3,r3
   10874:	293ffb36 	bltu	r5,r4,10864 <_gp+0xffff0fe4>
   10878:	0005883a 	mov	r2,zero
   1087c:	18000726 	beq	r3,zero,1089c <__divsi3+0x58>
   10880:	0005883a 	mov	r2,zero
   10884:	31400236 	bltu	r6,r5,10890 <__divsi3+0x4c>
   10888:	314dc83a 	sub	r6,r6,r5
   1088c:	10c4b03a 	or	r2,r2,r3
   10890:	1806d07a 	srli	r3,r3,1
   10894:	280ad07a 	srli	r5,r5,1
   10898:	183ffa1e 	bne	r3,zero,10884 <_gp+0xffff1004>
   1089c:	38000126 	beq	r7,zero,108a4 <__divsi3+0x60>
   108a0:	0085c83a 	sub	r2,zero,r2
   108a4:	f800283a 	ret
   108a8:	014bc83a 	sub	r5,zero,r5
   108ac:	39c0005c 	xori	r7,r7,1
   108b0:	003fe706 	br	10850 <_gp+0xffff0fd0>
   108b4:	0109c83a 	sub	r4,zero,r4
   108b8:	01c00044 	movi	r7,1
   108bc:	003fe306 	br	1084c <_gp+0xffff0fcc>
   108c0:	00c00044 	movi	r3,1
   108c4:	003fee06 	br	10880 <_gp+0xffff1000>

000108c8 <__modsi3>:
   108c8:	20001716 	blt	r4,zero,10928 <__modsi3+0x60>
   108cc:	000f883a 	mov	r7,zero
   108d0:	2005883a 	mov	r2,r4
   108d4:	28001216 	blt	r5,zero,10920 <__modsi3+0x58>
   108d8:	2900162e 	bgeu	r5,r4,10934 <__modsi3+0x6c>
   108dc:	01800804 	movi	r6,32
   108e0:	00c00044 	movi	r3,1
   108e4:	00000106 	br	108ec <__modsi3+0x24>
   108e8:	30000a26 	beq	r6,zero,10914 <__modsi3+0x4c>
   108ec:	294b883a 	add	r5,r5,r5
   108f0:	31bfffc4 	addi	r6,r6,-1
   108f4:	18c7883a 	add	r3,r3,r3
   108f8:	293ffb36 	bltu	r5,r4,108e8 <_gp+0xffff1068>
   108fc:	18000526 	beq	r3,zero,10914 <__modsi3+0x4c>
   10900:	1806d07a 	srli	r3,r3,1
   10904:	11400136 	bltu	r2,r5,1090c <__modsi3+0x44>
   10908:	1145c83a 	sub	r2,r2,r5
   1090c:	280ad07a 	srli	r5,r5,1
   10910:	183ffb1e 	bne	r3,zero,10900 <_gp+0xffff1080>
   10914:	38000126 	beq	r7,zero,1091c <__modsi3+0x54>
   10918:	0085c83a 	sub	r2,zero,r2
   1091c:	f800283a 	ret
   10920:	014bc83a 	sub	r5,zero,r5
   10924:	003fec06 	br	108d8 <_gp+0xffff1058>
   10928:	0109c83a 	sub	r4,zero,r4
   1092c:	01c00044 	movi	r7,1
   10930:	003fe706 	br	108d0 <_gp+0xffff1050>
   10934:	00c00044 	movi	r3,1
   10938:	003ff106 	br	10900 <_gp+0xffff1080>

0001093c <__udivsi3>:
   1093c:	200d883a 	mov	r6,r4
   10940:	2900152e 	bgeu	r5,r4,10998 <__udivsi3+0x5c>
   10944:	28001416 	blt	r5,zero,10998 <__udivsi3+0x5c>
   10948:	00800804 	movi	r2,32
   1094c:	00c00044 	movi	r3,1
   10950:	00000206 	br	1095c <__udivsi3+0x20>
   10954:	10000e26 	beq	r2,zero,10990 <__udivsi3+0x54>
   10958:	28000516 	blt	r5,zero,10970 <__udivsi3+0x34>
   1095c:	294b883a 	add	r5,r5,r5
   10960:	10bfffc4 	addi	r2,r2,-1
   10964:	18c7883a 	add	r3,r3,r3
   10968:	293ffa36 	bltu	r5,r4,10954 <_gp+0xffff10d4>
   1096c:	18000826 	beq	r3,zero,10990 <__udivsi3+0x54>
   10970:	0005883a 	mov	r2,zero
   10974:	31400236 	bltu	r6,r5,10980 <__udivsi3+0x44>
   10978:	314dc83a 	sub	r6,r6,r5
   1097c:	10c4b03a 	or	r2,r2,r3
   10980:	1806d07a 	srli	r3,r3,1
   10984:	280ad07a 	srli	r5,r5,1
   10988:	183ffa1e 	bne	r3,zero,10974 <_gp+0xffff10f4>
   1098c:	f800283a 	ret
   10990:	0005883a 	mov	r2,zero
   10994:	f800283a 	ret
   10998:	00c00044 	movi	r3,1
   1099c:	003ff406 	br	10970 <_gp+0xffff10f0>

000109a0 <__umodsi3>:
   109a0:	2005883a 	mov	r2,r4
   109a4:	2900122e 	bgeu	r5,r4,109f0 <__umodsi3+0x50>
   109a8:	28001116 	blt	r5,zero,109f0 <__umodsi3+0x50>
   109ac:	01800804 	movi	r6,32
   109b0:	00c00044 	movi	r3,1
   109b4:	00000206 	br	109c0 <__umodsi3+0x20>
   109b8:	30000c26 	beq	r6,zero,109ec <__umodsi3+0x4c>
   109bc:	28000516 	blt	r5,zero,109d4 <__umodsi3+0x34>
   109c0:	294b883a 	add	r5,r5,r5
   109c4:	31bfffc4 	addi	r6,r6,-1
   109c8:	18c7883a 	add	r3,r3,r3
   109cc:	293ffa36 	bltu	r5,r4,109b8 <_gp+0xffff1138>
   109d0:	18000626 	beq	r3,zero,109ec <__umodsi3+0x4c>
   109d4:	1806d07a 	srli	r3,r3,1
   109d8:	11400136 	bltu	r2,r5,109e0 <__umodsi3+0x40>
   109dc:	1145c83a 	sub	r2,r2,r5
   109e0:	280ad07a 	srli	r5,r5,1
   109e4:	183ffb1e 	bne	r3,zero,109d4 <_gp+0xffff1154>
   109e8:	f800283a 	ret
   109ec:	f800283a 	ret
   109f0:	00c00044 	movi	r3,1
   109f4:	003ff706 	br	109d4 <_gp+0xffff1154>

000109f8 <_puts_r>:
   109f8:	defff604 	addi	sp,sp,-40
   109fc:	dc000715 	stw	r16,28(sp)
   10a00:	2021883a 	mov	r16,r4
   10a04:	2809883a 	mov	r4,r5
   10a08:	dc400815 	stw	r17,32(sp)
   10a0c:	dfc00915 	stw	ra,36(sp)
   10a10:	2823883a 	mov	r17,r5
   10a14:	0010acc0 	call	10acc <strlen>
   10a18:	10c00044 	addi	r3,r2,1
   10a1c:	d8800115 	stw	r2,4(sp)
   10a20:	00800074 	movhi	r2,1
   10a24:	10977804 	addi	r2,r2,24032
   10a28:	d8800215 	stw	r2,8(sp)
   10a2c:	00800044 	movi	r2,1
   10a30:	d8800315 	stw	r2,12(sp)
   10a34:	00800084 	movi	r2,2
   10a38:	dc400015 	stw	r17,0(sp)
   10a3c:	d8c00615 	stw	r3,24(sp)
   10a40:	dec00415 	stw	sp,16(sp)
   10a44:	d8800515 	stw	r2,20(sp)
   10a48:	80000226 	beq	r16,zero,10a54 <_puts_r+0x5c>
   10a4c:	80800e17 	ldw	r2,56(r16)
   10a50:	10001426 	beq	r2,zero,10aa4 <_puts_r+0xac>
   10a54:	81400217 	ldw	r5,8(r16)
   10a58:	2880030b 	ldhu	r2,12(r5)
   10a5c:	10c8000c 	andi	r3,r2,8192
   10a60:	1800061e 	bne	r3,zero,10a7c <_puts_r+0x84>
   10a64:	29001917 	ldw	r4,100(r5)
   10a68:	00f7ffc4 	movi	r3,-8193
   10a6c:	10880014 	ori	r2,r2,8192
   10a70:	20c6703a 	and	r3,r4,r3
   10a74:	2880030d 	sth	r2,12(r5)
   10a78:	28c01915 	stw	r3,100(r5)
   10a7c:	d9800404 	addi	r6,sp,16
   10a80:	8009883a 	mov	r4,r16
   10a84:	0010f040 	call	10f04 <__sfvwrite_r>
   10a88:	1000091e 	bne	r2,zero,10ab0 <_puts_r+0xb8>
   10a8c:	00800284 	movi	r2,10
   10a90:	dfc00917 	ldw	ra,36(sp)
   10a94:	dc400817 	ldw	r17,32(sp)
   10a98:	dc000717 	ldw	r16,28(sp)
   10a9c:	dec00a04 	addi	sp,sp,40
   10aa0:	f800283a 	ret
   10aa4:	8009883a 	mov	r4,r16
   10aa8:	0010eb40 	call	10eb4 <__sinit>
   10aac:	003fe906 	br	10a54 <_gp+0xffff11d4>
   10ab0:	00bfffc4 	movi	r2,-1
   10ab4:	003ff606 	br	10a90 <_gp+0xffff1210>

00010ab8 <puts>:
   10ab8:	00800074 	movhi	r2,1
   10abc:	109e2204 	addi	r2,r2,30856
   10ac0:	200b883a 	mov	r5,r4
   10ac4:	11000017 	ldw	r4,0(r2)
   10ac8:	00109f81 	jmpi	109f8 <_puts_r>

00010acc <strlen>:
   10acc:	208000cc 	andi	r2,r4,3
   10ad0:	10002026 	beq	r2,zero,10b54 <strlen+0x88>
   10ad4:	20800007 	ldb	r2,0(r4)
   10ad8:	10002026 	beq	r2,zero,10b5c <strlen+0x90>
   10adc:	2005883a 	mov	r2,r4
   10ae0:	00000206 	br	10aec <strlen+0x20>
   10ae4:	10c00007 	ldb	r3,0(r2)
   10ae8:	18001826 	beq	r3,zero,10b4c <strlen+0x80>
   10aec:	10800044 	addi	r2,r2,1
   10af0:	10c000cc 	andi	r3,r2,3
   10af4:	183ffb1e 	bne	r3,zero,10ae4 <_gp+0xffff1264>
   10af8:	10c00017 	ldw	r3,0(r2)
   10afc:	01ffbff4 	movhi	r7,65279
   10b00:	39ffbfc4 	addi	r7,r7,-257
   10b04:	00ca303a 	nor	r5,zero,r3
   10b08:	01a02074 	movhi	r6,32897
   10b0c:	19c7883a 	add	r3,r3,r7
   10b10:	31a02004 	addi	r6,r6,-32640
   10b14:	1946703a 	and	r3,r3,r5
   10b18:	1986703a 	and	r3,r3,r6
   10b1c:	1800091e 	bne	r3,zero,10b44 <strlen+0x78>
   10b20:	10800104 	addi	r2,r2,4
   10b24:	10c00017 	ldw	r3,0(r2)
   10b28:	19cb883a 	add	r5,r3,r7
   10b2c:	00c6303a 	nor	r3,zero,r3
   10b30:	28c6703a 	and	r3,r5,r3
   10b34:	1986703a 	and	r3,r3,r6
   10b38:	183ff926 	beq	r3,zero,10b20 <_gp+0xffff12a0>
   10b3c:	00000106 	br	10b44 <strlen+0x78>
   10b40:	10800044 	addi	r2,r2,1
   10b44:	10c00007 	ldb	r3,0(r2)
   10b48:	183ffd1e 	bne	r3,zero,10b40 <_gp+0xffff12c0>
   10b4c:	1105c83a 	sub	r2,r2,r4
   10b50:	f800283a 	ret
   10b54:	2005883a 	mov	r2,r4
   10b58:	003fe706 	br	10af8 <_gp+0xffff1278>
   10b5c:	0005883a 	mov	r2,zero
   10b60:	f800283a 	ret

00010b64 <__fp_unlock>:
   10b64:	0005883a 	mov	r2,zero
   10b68:	f800283a 	ret

00010b6c <_cleanup_r>:
   10b6c:	01400074 	movhi	r5,1
   10b70:	294ac004 	addi	r5,r5,11008
   10b74:	00114841 	jmpi	11484 <_fwalk_reent>

00010b78 <__sinit.part.1>:
   10b78:	defff704 	addi	sp,sp,-36
   10b7c:	00c00074 	movhi	r3,1
   10b80:	dfc00815 	stw	ra,32(sp)
   10b84:	ddc00715 	stw	r23,28(sp)
   10b88:	dd800615 	stw	r22,24(sp)
   10b8c:	dd400515 	stw	r21,20(sp)
   10b90:	dd000415 	stw	r20,16(sp)
   10b94:	dcc00315 	stw	r19,12(sp)
   10b98:	dc800215 	stw	r18,8(sp)
   10b9c:	dc400115 	stw	r17,4(sp)
   10ba0:	dc000015 	stw	r16,0(sp)
   10ba4:	18c2db04 	addi	r3,r3,2924
   10ba8:	24000117 	ldw	r16,4(r4)
   10bac:	20c00f15 	stw	r3,60(r4)
   10bb0:	2080bb04 	addi	r2,r4,748
   10bb4:	00c000c4 	movi	r3,3
   10bb8:	20c0b915 	stw	r3,740(r4)
   10bbc:	2080ba15 	stw	r2,744(r4)
   10bc0:	2000b815 	stw	zero,736(r4)
   10bc4:	05c00204 	movi	r23,8
   10bc8:	00800104 	movi	r2,4
   10bcc:	2025883a 	mov	r18,r4
   10bd0:	b80d883a 	mov	r6,r23
   10bd4:	81001704 	addi	r4,r16,92
   10bd8:	000b883a 	mov	r5,zero
   10bdc:	80000015 	stw	zero,0(r16)
   10be0:	80000115 	stw	zero,4(r16)
   10be4:	80000215 	stw	zero,8(r16)
   10be8:	8080030d 	sth	r2,12(r16)
   10bec:	80001915 	stw	zero,100(r16)
   10bf0:	8000038d 	sth	zero,14(r16)
   10bf4:	80000415 	stw	zero,16(r16)
   10bf8:	80000515 	stw	zero,20(r16)
   10bfc:	80000615 	stw	zero,24(r16)
   10c00:	00120dc0 	call	120dc <memset>
   10c04:	05800074 	movhi	r22,1
   10c08:	94400217 	ldw	r17,8(r18)
   10c0c:	05400074 	movhi	r21,1
   10c10:	05000074 	movhi	r20,1
   10c14:	04c00074 	movhi	r19,1
   10c18:	b589ef04 	addi	r22,r22,10172
   10c1c:	ad4a0604 	addi	r21,r21,10264
   10c20:	a50a2504 	addi	r20,r20,10388
   10c24:	9cca3c04 	addi	r19,r19,10480
   10c28:	85800815 	stw	r22,32(r16)
   10c2c:	85400915 	stw	r21,36(r16)
   10c30:	85000a15 	stw	r20,40(r16)
   10c34:	84c00b15 	stw	r19,44(r16)
   10c38:	84000715 	stw	r16,28(r16)
   10c3c:	00800284 	movi	r2,10
   10c40:	8880030d 	sth	r2,12(r17)
   10c44:	00800044 	movi	r2,1
   10c48:	b80d883a 	mov	r6,r23
   10c4c:	89001704 	addi	r4,r17,92
   10c50:	000b883a 	mov	r5,zero
   10c54:	88000015 	stw	zero,0(r17)
   10c58:	88000115 	stw	zero,4(r17)
   10c5c:	88000215 	stw	zero,8(r17)
   10c60:	88001915 	stw	zero,100(r17)
   10c64:	8880038d 	sth	r2,14(r17)
   10c68:	88000415 	stw	zero,16(r17)
   10c6c:	88000515 	stw	zero,20(r17)
   10c70:	88000615 	stw	zero,24(r17)
   10c74:	00120dc0 	call	120dc <memset>
   10c78:	94000317 	ldw	r16,12(r18)
   10c7c:	00800484 	movi	r2,18
   10c80:	8c400715 	stw	r17,28(r17)
   10c84:	8d800815 	stw	r22,32(r17)
   10c88:	8d400915 	stw	r21,36(r17)
   10c8c:	8d000a15 	stw	r20,40(r17)
   10c90:	8cc00b15 	stw	r19,44(r17)
   10c94:	8080030d 	sth	r2,12(r16)
   10c98:	00800084 	movi	r2,2
   10c9c:	80000015 	stw	zero,0(r16)
   10ca0:	80000115 	stw	zero,4(r16)
   10ca4:	80000215 	stw	zero,8(r16)
   10ca8:	80001915 	stw	zero,100(r16)
   10cac:	8080038d 	sth	r2,14(r16)
   10cb0:	80000415 	stw	zero,16(r16)
   10cb4:	80000515 	stw	zero,20(r16)
   10cb8:	80000615 	stw	zero,24(r16)
   10cbc:	b80d883a 	mov	r6,r23
   10cc0:	000b883a 	mov	r5,zero
   10cc4:	81001704 	addi	r4,r16,92
   10cc8:	00120dc0 	call	120dc <memset>
   10ccc:	00800044 	movi	r2,1
   10cd0:	84000715 	stw	r16,28(r16)
   10cd4:	85800815 	stw	r22,32(r16)
   10cd8:	85400915 	stw	r21,36(r16)
   10cdc:	85000a15 	stw	r20,40(r16)
   10ce0:	84c00b15 	stw	r19,44(r16)
   10ce4:	90800e15 	stw	r2,56(r18)
   10ce8:	dfc00817 	ldw	ra,32(sp)
   10cec:	ddc00717 	ldw	r23,28(sp)
   10cf0:	dd800617 	ldw	r22,24(sp)
   10cf4:	dd400517 	ldw	r21,20(sp)
   10cf8:	dd000417 	ldw	r20,16(sp)
   10cfc:	dcc00317 	ldw	r19,12(sp)
   10d00:	dc800217 	ldw	r18,8(sp)
   10d04:	dc400117 	ldw	r17,4(sp)
   10d08:	dc000017 	ldw	r16,0(sp)
   10d0c:	dec00904 	addi	sp,sp,36
   10d10:	f800283a 	ret

00010d14 <__fp_lock>:
   10d14:	0005883a 	mov	r2,zero
   10d18:	f800283a 	ret

00010d1c <__sfmoreglue>:
   10d1c:	defffc04 	addi	sp,sp,-16
   10d20:	dc400115 	stw	r17,4(sp)
   10d24:	2c7fffc4 	addi	r17,r5,-1
   10d28:	8c401a24 	muli	r17,r17,104
   10d2c:	dc800215 	stw	r18,8(sp)
   10d30:	2825883a 	mov	r18,r5
   10d34:	89401d04 	addi	r5,r17,116
   10d38:	dc000015 	stw	r16,0(sp)
   10d3c:	dfc00315 	stw	ra,12(sp)
   10d40:	00115480 	call	11548 <_malloc_r>
   10d44:	1021883a 	mov	r16,r2
   10d48:	10000726 	beq	r2,zero,10d68 <__sfmoreglue+0x4c>
   10d4c:	11000304 	addi	r4,r2,12
   10d50:	10000015 	stw	zero,0(r2)
   10d54:	14800115 	stw	r18,4(r2)
   10d58:	11000215 	stw	r4,8(r2)
   10d5c:	89801a04 	addi	r6,r17,104
   10d60:	000b883a 	mov	r5,zero
   10d64:	00120dc0 	call	120dc <memset>
   10d68:	8005883a 	mov	r2,r16
   10d6c:	dfc00317 	ldw	ra,12(sp)
   10d70:	dc800217 	ldw	r18,8(sp)
   10d74:	dc400117 	ldw	r17,4(sp)
   10d78:	dc000017 	ldw	r16,0(sp)
   10d7c:	dec00404 	addi	sp,sp,16
   10d80:	f800283a 	ret

00010d84 <__sfp>:
   10d84:	defffb04 	addi	sp,sp,-20
   10d88:	dc000015 	stw	r16,0(sp)
   10d8c:	04000074 	movhi	r16,1
   10d90:	841e2104 	addi	r16,r16,30852
   10d94:	dcc00315 	stw	r19,12(sp)
   10d98:	2027883a 	mov	r19,r4
   10d9c:	81000017 	ldw	r4,0(r16)
   10da0:	dfc00415 	stw	ra,16(sp)
   10da4:	dc800215 	stw	r18,8(sp)
   10da8:	20800e17 	ldw	r2,56(r4)
   10dac:	dc400115 	stw	r17,4(sp)
   10db0:	1000021e 	bne	r2,zero,10dbc <__sfp+0x38>
   10db4:	0010b780 	call	10b78 <__sinit.part.1>
   10db8:	81000017 	ldw	r4,0(r16)
   10dbc:	2480b804 	addi	r18,r4,736
   10dc0:	047fffc4 	movi	r17,-1
   10dc4:	91000117 	ldw	r4,4(r18)
   10dc8:	94000217 	ldw	r16,8(r18)
   10dcc:	213fffc4 	addi	r4,r4,-1
   10dd0:	20000a16 	blt	r4,zero,10dfc <__sfp+0x78>
   10dd4:	8080030f 	ldh	r2,12(r16)
   10dd8:	10000c26 	beq	r2,zero,10e0c <__sfp+0x88>
   10ddc:	80c01d04 	addi	r3,r16,116
   10de0:	00000206 	br	10dec <__sfp+0x68>
   10de4:	18bfe60f 	ldh	r2,-104(r3)
   10de8:	10000826 	beq	r2,zero,10e0c <__sfp+0x88>
   10dec:	213fffc4 	addi	r4,r4,-1
   10df0:	1c3ffd04 	addi	r16,r3,-12
   10df4:	18c01a04 	addi	r3,r3,104
   10df8:	247ffa1e 	bne	r4,r17,10de4 <_gp+0xffff1564>
   10dfc:	90800017 	ldw	r2,0(r18)
   10e00:	10001d26 	beq	r2,zero,10e78 <__sfp+0xf4>
   10e04:	1025883a 	mov	r18,r2
   10e08:	003fee06 	br	10dc4 <_gp+0xffff1544>
   10e0c:	00bfffc4 	movi	r2,-1
   10e10:	8080038d 	sth	r2,14(r16)
   10e14:	00800044 	movi	r2,1
   10e18:	8080030d 	sth	r2,12(r16)
   10e1c:	80001915 	stw	zero,100(r16)
   10e20:	80000015 	stw	zero,0(r16)
   10e24:	80000215 	stw	zero,8(r16)
   10e28:	80000115 	stw	zero,4(r16)
   10e2c:	80000415 	stw	zero,16(r16)
   10e30:	80000515 	stw	zero,20(r16)
   10e34:	80000615 	stw	zero,24(r16)
   10e38:	01800204 	movi	r6,8
   10e3c:	000b883a 	mov	r5,zero
   10e40:	81001704 	addi	r4,r16,92
   10e44:	00120dc0 	call	120dc <memset>
   10e48:	8005883a 	mov	r2,r16
   10e4c:	80000c15 	stw	zero,48(r16)
   10e50:	80000d15 	stw	zero,52(r16)
   10e54:	80001115 	stw	zero,68(r16)
   10e58:	80001215 	stw	zero,72(r16)
   10e5c:	dfc00417 	ldw	ra,16(sp)
   10e60:	dcc00317 	ldw	r19,12(sp)
   10e64:	dc800217 	ldw	r18,8(sp)
   10e68:	dc400117 	ldw	r17,4(sp)
   10e6c:	dc000017 	ldw	r16,0(sp)
   10e70:	dec00504 	addi	sp,sp,20
   10e74:	f800283a 	ret
   10e78:	01400104 	movi	r5,4
   10e7c:	9809883a 	mov	r4,r19
   10e80:	0010d1c0 	call	10d1c <__sfmoreglue>
   10e84:	90800015 	stw	r2,0(r18)
   10e88:	103fde1e 	bne	r2,zero,10e04 <_gp+0xffff1584>
   10e8c:	00800304 	movi	r2,12
   10e90:	98800015 	stw	r2,0(r19)
   10e94:	0005883a 	mov	r2,zero
   10e98:	003ff006 	br	10e5c <_gp+0xffff15dc>

00010e9c <_cleanup>:
   10e9c:	00800074 	movhi	r2,1
   10ea0:	109e2104 	addi	r2,r2,30852
   10ea4:	11000017 	ldw	r4,0(r2)
   10ea8:	01400074 	movhi	r5,1
   10eac:	294ac004 	addi	r5,r5,11008
   10eb0:	00114841 	jmpi	11484 <_fwalk_reent>

00010eb4 <__sinit>:
   10eb4:	20800e17 	ldw	r2,56(r4)
   10eb8:	10000126 	beq	r2,zero,10ec0 <__sinit+0xc>
   10ebc:	f800283a 	ret
   10ec0:	0010b781 	jmpi	10b78 <__sinit.part.1>

00010ec4 <__sfp_lock_acquire>:
   10ec4:	f800283a 	ret

00010ec8 <__sfp_lock_release>:
   10ec8:	f800283a 	ret

00010ecc <__sinit_lock_acquire>:
   10ecc:	f800283a 	ret

00010ed0 <__sinit_lock_release>:
   10ed0:	f800283a 	ret

00010ed4 <__fp_lock_all>:
   10ed4:	00800074 	movhi	r2,1
   10ed8:	109e2204 	addi	r2,r2,30856
   10edc:	11000017 	ldw	r4,0(r2)
   10ee0:	01400074 	movhi	r5,1
   10ee4:	29434504 	addi	r5,r5,3348
   10ee8:	00113c01 	jmpi	113c0 <_fwalk>

00010eec <__fp_unlock_all>:
   10eec:	00800074 	movhi	r2,1
   10ef0:	109e2204 	addi	r2,r2,30856
   10ef4:	11000017 	ldw	r4,0(r2)
   10ef8:	01400074 	movhi	r5,1
   10efc:	2942d904 	addi	r5,r5,2916
   10f00:	00113c01 	jmpi	113c0 <_fwalk>

00010f04 <__sfvwrite_r>:
   10f04:	30800217 	ldw	r2,8(r6)
   10f08:	10006726 	beq	r2,zero,110a8 <__sfvwrite_r+0x1a4>
   10f0c:	28c0030b 	ldhu	r3,12(r5)
   10f10:	defff404 	addi	sp,sp,-48
   10f14:	dd400715 	stw	r21,28(sp)
   10f18:	dd000615 	stw	r20,24(sp)
   10f1c:	dc000215 	stw	r16,8(sp)
   10f20:	dfc00b15 	stw	ra,44(sp)
   10f24:	df000a15 	stw	fp,40(sp)
   10f28:	ddc00915 	stw	r23,36(sp)
   10f2c:	dd800815 	stw	r22,32(sp)
   10f30:	dcc00515 	stw	r19,20(sp)
   10f34:	dc800415 	stw	r18,16(sp)
   10f38:	dc400315 	stw	r17,12(sp)
   10f3c:	1880020c 	andi	r2,r3,8
   10f40:	2821883a 	mov	r16,r5
   10f44:	202b883a 	mov	r21,r4
   10f48:	3029883a 	mov	r20,r6
   10f4c:	10002726 	beq	r2,zero,10fec <__sfvwrite_r+0xe8>
   10f50:	28800417 	ldw	r2,16(r5)
   10f54:	10002526 	beq	r2,zero,10fec <__sfvwrite_r+0xe8>
   10f58:	1880008c 	andi	r2,r3,2
   10f5c:	a4400017 	ldw	r17,0(r20)
   10f60:	10002a26 	beq	r2,zero,1100c <__sfvwrite_r+0x108>
   10f64:	05a00034 	movhi	r22,32768
   10f68:	0027883a 	mov	r19,zero
   10f6c:	0025883a 	mov	r18,zero
   10f70:	b5bf0004 	addi	r22,r22,-1024
   10f74:	980d883a 	mov	r6,r19
   10f78:	a809883a 	mov	r4,r21
   10f7c:	90004626 	beq	r18,zero,11098 <__sfvwrite_r+0x194>
   10f80:	900f883a 	mov	r7,r18
   10f84:	b480022e 	bgeu	r22,r18,10f90 <__sfvwrite_r+0x8c>
   10f88:	01e00034 	movhi	r7,32768
   10f8c:	39ff0004 	addi	r7,r7,-1024
   10f90:	80800917 	ldw	r2,36(r16)
   10f94:	81400717 	ldw	r5,28(r16)
   10f98:	103ee83a 	callr	r2
   10f9c:	0080570e 	bge	zero,r2,110fc <__sfvwrite_r+0x1f8>
   10fa0:	a0c00217 	ldw	r3,8(r20)
   10fa4:	98a7883a 	add	r19,r19,r2
   10fa8:	90a5c83a 	sub	r18,r18,r2
   10fac:	1885c83a 	sub	r2,r3,r2
   10fb0:	a0800215 	stw	r2,8(r20)
   10fb4:	103fef1e 	bne	r2,zero,10f74 <_gp+0xffff16f4>
   10fb8:	0005883a 	mov	r2,zero
   10fbc:	dfc00b17 	ldw	ra,44(sp)
   10fc0:	df000a17 	ldw	fp,40(sp)
   10fc4:	ddc00917 	ldw	r23,36(sp)
   10fc8:	dd800817 	ldw	r22,32(sp)
   10fcc:	dd400717 	ldw	r21,28(sp)
   10fd0:	dd000617 	ldw	r20,24(sp)
   10fd4:	dcc00517 	ldw	r19,20(sp)
   10fd8:	dc800417 	ldw	r18,16(sp)
   10fdc:	dc400317 	ldw	r17,12(sp)
   10fe0:	dc000217 	ldw	r16,8(sp)
   10fe4:	dec00c04 	addi	sp,sp,48
   10fe8:	f800283a 	ret
   10fec:	800b883a 	mov	r5,r16
   10ff0:	a809883a 	mov	r4,r21
   10ff4:	00129580 	call	12958 <__swsetup_r>
   10ff8:	1000eb1e 	bne	r2,zero,113a8 <__sfvwrite_r+0x4a4>
   10ffc:	80c0030b 	ldhu	r3,12(r16)
   11000:	a4400017 	ldw	r17,0(r20)
   11004:	1880008c 	andi	r2,r3,2
   11008:	103fd61e 	bne	r2,zero,10f64 <_gp+0xffff16e4>
   1100c:	1880004c 	andi	r2,r3,1
   11010:	10003f1e 	bne	r2,zero,11110 <__sfvwrite_r+0x20c>
   11014:	0039883a 	mov	fp,zero
   11018:	0025883a 	mov	r18,zero
   1101c:	90001a26 	beq	r18,zero,11088 <__sfvwrite_r+0x184>
   11020:	1880800c 	andi	r2,r3,512
   11024:	84c00217 	ldw	r19,8(r16)
   11028:	10002126 	beq	r2,zero,110b0 <__sfvwrite_r+0x1ac>
   1102c:	982f883a 	mov	r23,r19
   11030:	94c09336 	bltu	r18,r19,11280 <__sfvwrite_r+0x37c>
   11034:	1881200c 	andi	r2,r3,1152
   11038:	10009e1e 	bne	r2,zero,112b4 <__sfvwrite_r+0x3b0>
   1103c:	81000017 	ldw	r4,0(r16)
   11040:	b80d883a 	mov	r6,r23
   11044:	e00b883a 	mov	r5,fp
   11048:	0011f800 	call	11f80 <memmove>
   1104c:	80c00217 	ldw	r3,8(r16)
   11050:	81000017 	ldw	r4,0(r16)
   11054:	9005883a 	mov	r2,r18
   11058:	1ce7c83a 	sub	r19,r3,r19
   1105c:	25cf883a 	add	r7,r4,r23
   11060:	84c00215 	stw	r19,8(r16)
   11064:	81c00015 	stw	r7,0(r16)
   11068:	a0c00217 	ldw	r3,8(r20)
   1106c:	e0b9883a 	add	fp,fp,r2
   11070:	90a5c83a 	sub	r18,r18,r2
   11074:	18a7c83a 	sub	r19,r3,r2
   11078:	a4c00215 	stw	r19,8(r20)
   1107c:	983fce26 	beq	r19,zero,10fb8 <_gp+0xffff1738>
   11080:	80c0030b 	ldhu	r3,12(r16)
   11084:	903fe61e 	bne	r18,zero,11020 <_gp+0xffff17a0>
   11088:	8f000017 	ldw	fp,0(r17)
   1108c:	8c800117 	ldw	r18,4(r17)
   11090:	8c400204 	addi	r17,r17,8
   11094:	003fe106 	br	1101c <_gp+0xffff179c>
   11098:	8cc00017 	ldw	r19,0(r17)
   1109c:	8c800117 	ldw	r18,4(r17)
   110a0:	8c400204 	addi	r17,r17,8
   110a4:	003fb306 	br	10f74 <_gp+0xffff16f4>
   110a8:	0005883a 	mov	r2,zero
   110ac:	f800283a 	ret
   110b0:	81000017 	ldw	r4,0(r16)
   110b4:	80800417 	ldw	r2,16(r16)
   110b8:	11005736 	bltu	r2,r4,11218 <__sfvwrite_r+0x314>
   110bc:	85c00517 	ldw	r23,20(r16)
   110c0:	95c05536 	bltu	r18,r23,11218 <__sfvwrite_r+0x314>
   110c4:	00a00034 	movhi	r2,32768
   110c8:	10bfffc4 	addi	r2,r2,-1
   110cc:	9009883a 	mov	r4,r18
   110d0:	1480012e 	bgeu	r2,r18,110d8 <__sfvwrite_r+0x1d4>
   110d4:	1009883a 	mov	r4,r2
   110d8:	b80b883a 	mov	r5,r23
   110dc:	00108440 	call	10844 <__divsi3>
   110e0:	15cf383a 	mul	r7,r2,r23
   110e4:	81400717 	ldw	r5,28(r16)
   110e8:	80800917 	ldw	r2,36(r16)
   110ec:	e00d883a 	mov	r6,fp
   110f0:	a809883a 	mov	r4,r21
   110f4:	103ee83a 	callr	r2
   110f8:	00bfdb16 	blt	zero,r2,11068 <_gp+0xffff17e8>
   110fc:	8080030b 	ldhu	r2,12(r16)
   11100:	10801014 	ori	r2,r2,64
   11104:	8080030d 	sth	r2,12(r16)
   11108:	00bfffc4 	movi	r2,-1
   1110c:	003fab06 	br	10fbc <_gp+0xffff173c>
   11110:	0027883a 	mov	r19,zero
   11114:	0011883a 	mov	r8,zero
   11118:	0039883a 	mov	fp,zero
   1111c:	0025883a 	mov	r18,zero
   11120:	90001f26 	beq	r18,zero,111a0 <__sfvwrite_r+0x29c>
   11124:	40005a26 	beq	r8,zero,11290 <__sfvwrite_r+0x38c>
   11128:	982d883a 	mov	r22,r19
   1112c:	94c0012e 	bgeu	r18,r19,11134 <__sfvwrite_r+0x230>
   11130:	902d883a 	mov	r22,r18
   11134:	81000017 	ldw	r4,0(r16)
   11138:	80800417 	ldw	r2,16(r16)
   1113c:	b02f883a 	mov	r23,r22
   11140:	81c00517 	ldw	r7,20(r16)
   11144:	1100032e 	bgeu	r2,r4,11154 <__sfvwrite_r+0x250>
   11148:	80c00217 	ldw	r3,8(r16)
   1114c:	38c7883a 	add	r3,r7,r3
   11150:	1d801816 	blt	r3,r22,111b4 <__sfvwrite_r+0x2b0>
   11154:	b1c03e16 	blt	r22,r7,11250 <__sfvwrite_r+0x34c>
   11158:	80800917 	ldw	r2,36(r16)
   1115c:	81400717 	ldw	r5,28(r16)
   11160:	e00d883a 	mov	r6,fp
   11164:	da000115 	stw	r8,4(sp)
   11168:	a809883a 	mov	r4,r21
   1116c:	103ee83a 	callr	r2
   11170:	102f883a 	mov	r23,r2
   11174:	da000117 	ldw	r8,4(sp)
   11178:	00bfe00e 	bge	zero,r2,110fc <_gp+0xffff187c>
   1117c:	9de7c83a 	sub	r19,r19,r23
   11180:	98001f26 	beq	r19,zero,11200 <__sfvwrite_r+0x2fc>
   11184:	a0800217 	ldw	r2,8(r20)
   11188:	e5f9883a 	add	fp,fp,r23
   1118c:	95e5c83a 	sub	r18,r18,r23
   11190:	15efc83a 	sub	r23,r2,r23
   11194:	a5c00215 	stw	r23,8(r20)
   11198:	b83f8726 	beq	r23,zero,10fb8 <_gp+0xffff1738>
   1119c:	903fe11e 	bne	r18,zero,11124 <_gp+0xffff18a4>
   111a0:	8f000017 	ldw	fp,0(r17)
   111a4:	8c800117 	ldw	r18,4(r17)
   111a8:	0011883a 	mov	r8,zero
   111ac:	8c400204 	addi	r17,r17,8
   111b0:	003fdb06 	br	11120 <_gp+0xffff18a0>
   111b4:	180d883a 	mov	r6,r3
   111b8:	e00b883a 	mov	r5,fp
   111bc:	da000115 	stw	r8,4(sp)
   111c0:	d8c00015 	stw	r3,0(sp)
   111c4:	0011f800 	call	11f80 <memmove>
   111c8:	d8c00017 	ldw	r3,0(sp)
   111cc:	80800017 	ldw	r2,0(r16)
   111d0:	800b883a 	mov	r5,r16
   111d4:	a809883a 	mov	r4,r21
   111d8:	10c5883a 	add	r2,r2,r3
   111dc:	80800015 	stw	r2,0(r16)
   111e0:	d8c00015 	stw	r3,0(sp)
   111e4:	0012e200 	call	12e20 <_fflush_r>
   111e8:	d8c00017 	ldw	r3,0(sp)
   111ec:	da000117 	ldw	r8,4(sp)
   111f0:	103fc21e 	bne	r2,zero,110fc <_gp+0xffff187c>
   111f4:	182f883a 	mov	r23,r3
   111f8:	9de7c83a 	sub	r19,r19,r23
   111fc:	983fe11e 	bne	r19,zero,11184 <_gp+0xffff1904>
   11200:	800b883a 	mov	r5,r16
   11204:	a809883a 	mov	r4,r21
   11208:	0012e200 	call	12e20 <_fflush_r>
   1120c:	103fbb1e 	bne	r2,zero,110fc <_gp+0xffff187c>
   11210:	0011883a 	mov	r8,zero
   11214:	003fdb06 	br	11184 <_gp+0xffff1904>
   11218:	94c0012e 	bgeu	r18,r19,11220 <__sfvwrite_r+0x31c>
   1121c:	9027883a 	mov	r19,r18
   11220:	980d883a 	mov	r6,r19
   11224:	e00b883a 	mov	r5,fp
   11228:	0011f800 	call	11f80 <memmove>
   1122c:	80800217 	ldw	r2,8(r16)
   11230:	80c00017 	ldw	r3,0(r16)
   11234:	14c5c83a 	sub	r2,r2,r19
   11238:	1cc7883a 	add	r3,r3,r19
   1123c:	80800215 	stw	r2,8(r16)
   11240:	80c00015 	stw	r3,0(r16)
   11244:	10004326 	beq	r2,zero,11354 <__sfvwrite_r+0x450>
   11248:	9805883a 	mov	r2,r19
   1124c:	003f8606 	br	11068 <_gp+0xffff17e8>
   11250:	b00d883a 	mov	r6,r22
   11254:	e00b883a 	mov	r5,fp
   11258:	da000115 	stw	r8,4(sp)
   1125c:	0011f800 	call	11f80 <memmove>
   11260:	80800217 	ldw	r2,8(r16)
   11264:	80c00017 	ldw	r3,0(r16)
   11268:	da000117 	ldw	r8,4(sp)
   1126c:	1585c83a 	sub	r2,r2,r22
   11270:	1dad883a 	add	r22,r3,r22
   11274:	80800215 	stw	r2,8(r16)
   11278:	85800015 	stw	r22,0(r16)
   1127c:	003fbf06 	br	1117c <_gp+0xffff18fc>
   11280:	81000017 	ldw	r4,0(r16)
   11284:	9027883a 	mov	r19,r18
   11288:	902f883a 	mov	r23,r18
   1128c:	003f6c06 	br	11040 <_gp+0xffff17c0>
   11290:	900d883a 	mov	r6,r18
   11294:	01400284 	movi	r5,10
   11298:	e009883a 	mov	r4,fp
   1129c:	0011d540 	call	11d54 <memchr>
   112a0:	10003e26 	beq	r2,zero,1139c <__sfvwrite_r+0x498>
   112a4:	10800044 	addi	r2,r2,1
   112a8:	1727c83a 	sub	r19,r2,fp
   112ac:	02000044 	movi	r8,1
   112b0:	003f9d06 	br	11128 <_gp+0xffff18a8>
   112b4:	80800517 	ldw	r2,20(r16)
   112b8:	81400417 	ldw	r5,16(r16)
   112bc:	81c00017 	ldw	r7,0(r16)
   112c0:	10a7883a 	add	r19,r2,r2
   112c4:	9885883a 	add	r2,r19,r2
   112c8:	1026d7fa 	srli	r19,r2,31
   112cc:	396dc83a 	sub	r22,r7,r5
   112d0:	b1000044 	addi	r4,r22,1
   112d4:	9885883a 	add	r2,r19,r2
   112d8:	1027d07a 	srai	r19,r2,1
   112dc:	2485883a 	add	r2,r4,r18
   112e0:	980d883a 	mov	r6,r19
   112e4:	9880022e 	bgeu	r19,r2,112f0 <__sfvwrite_r+0x3ec>
   112e8:	1027883a 	mov	r19,r2
   112ec:	100d883a 	mov	r6,r2
   112f0:	18c1000c 	andi	r3,r3,1024
   112f4:	18001c26 	beq	r3,zero,11368 <__sfvwrite_r+0x464>
   112f8:	300b883a 	mov	r5,r6
   112fc:	a809883a 	mov	r4,r21
   11300:	00115480 	call	11548 <_malloc_r>
   11304:	102f883a 	mov	r23,r2
   11308:	10002926 	beq	r2,zero,113b0 <__sfvwrite_r+0x4ac>
   1130c:	81400417 	ldw	r5,16(r16)
   11310:	b00d883a 	mov	r6,r22
   11314:	1009883a 	mov	r4,r2
   11318:	0011e380 	call	11e38 <memcpy>
   1131c:	8080030b 	ldhu	r2,12(r16)
   11320:	00fedfc4 	movi	r3,-1153
   11324:	10c4703a 	and	r2,r2,r3
   11328:	10802014 	ori	r2,r2,128
   1132c:	8080030d 	sth	r2,12(r16)
   11330:	bd89883a 	add	r4,r23,r22
   11334:	9d8fc83a 	sub	r7,r19,r22
   11338:	85c00415 	stw	r23,16(r16)
   1133c:	84c00515 	stw	r19,20(r16)
   11340:	81000015 	stw	r4,0(r16)
   11344:	9027883a 	mov	r19,r18
   11348:	81c00215 	stw	r7,8(r16)
   1134c:	902f883a 	mov	r23,r18
   11350:	003f3b06 	br	11040 <_gp+0xffff17c0>
   11354:	800b883a 	mov	r5,r16
   11358:	a809883a 	mov	r4,r21
   1135c:	0012e200 	call	12e20 <_fflush_r>
   11360:	103fb926 	beq	r2,zero,11248 <_gp+0xffff19c8>
   11364:	003f6506 	br	110fc <_gp+0xffff187c>
   11368:	a809883a 	mov	r4,r21
   1136c:	00122040 	call	12204 <_realloc_r>
   11370:	102f883a 	mov	r23,r2
   11374:	103fee1e 	bne	r2,zero,11330 <_gp+0xffff1ab0>
   11378:	81400417 	ldw	r5,16(r16)
   1137c:	a809883a 	mov	r4,r21
   11380:	0012fd00 	call	12fd0 <_free_r>
   11384:	8080030b 	ldhu	r2,12(r16)
   11388:	00ffdfc4 	movi	r3,-129
   1138c:	1884703a 	and	r2,r3,r2
   11390:	00c00304 	movi	r3,12
   11394:	a8c00015 	stw	r3,0(r21)
   11398:	003f5906 	br	11100 <_gp+0xffff1880>
   1139c:	94c00044 	addi	r19,r18,1
   113a0:	02000044 	movi	r8,1
   113a4:	003f6006 	br	11128 <_gp+0xffff18a8>
   113a8:	00bfffc4 	movi	r2,-1
   113ac:	003f0306 	br	10fbc <_gp+0xffff173c>
   113b0:	00800304 	movi	r2,12
   113b4:	a8800015 	stw	r2,0(r21)
   113b8:	8080030b 	ldhu	r2,12(r16)
   113bc:	003f5006 	br	11100 <_gp+0xffff1880>

000113c0 <_fwalk>:
   113c0:	defff704 	addi	sp,sp,-36
   113c4:	dd000415 	stw	r20,16(sp)
   113c8:	dfc00815 	stw	ra,32(sp)
   113cc:	ddc00715 	stw	r23,28(sp)
   113d0:	dd800615 	stw	r22,24(sp)
   113d4:	dd400515 	stw	r21,20(sp)
   113d8:	dcc00315 	stw	r19,12(sp)
   113dc:	dc800215 	stw	r18,8(sp)
   113e0:	dc400115 	stw	r17,4(sp)
   113e4:	dc000015 	stw	r16,0(sp)
   113e8:	2500b804 	addi	r20,r4,736
   113ec:	a0002326 	beq	r20,zero,1147c <_fwalk+0xbc>
   113f0:	282b883a 	mov	r21,r5
   113f4:	002f883a 	mov	r23,zero
   113f8:	05800044 	movi	r22,1
   113fc:	04ffffc4 	movi	r19,-1
   11400:	a4400117 	ldw	r17,4(r20)
   11404:	a4800217 	ldw	r18,8(r20)
   11408:	8c7fffc4 	addi	r17,r17,-1
   1140c:	88000d16 	blt	r17,zero,11444 <_fwalk+0x84>
   11410:	94000304 	addi	r16,r18,12
   11414:	94800384 	addi	r18,r18,14
   11418:	8080000b 	ldhu	r2,0(r16)
   1141c:	8c7fffc4 	addi	r17,r17,-1
   11420:	813ffd04 	addi	r4,r16,-12
   11424:	b080042e 	bgeu	r22,r2,11438 <_fwalk+0x78>
   11428:	9080000f 	ldh	r2,0(r18)
   1142c:	14c00226 	beq	r2,r19,11438 <_fwalk+0x78>
   11430:	a83ee83a 	callr	r21
   11434:	b8aeb03a 	or	r23,r23,r2
   11438:	84001a04 	addi	r16,r16,104
   1143c:	94801a04 	addi	r18,r18,104
   11440:	8cfff51e 	bne	r17,r19,11418 <_gp+0xffff1b98>
   11444:	a5000017 	ldw	r20,0(r20)
   11448:	a03fed1e 	bne	r20,zero,11400 <_gp+0xffff1b80>
   1144c:	b805883a 	mov	r2,r23
   11450:	dfc00817 	ldw	ra,32(sp)
   11454:	ddc00717 	ldw	r23,28(sp)
   11458:	dd800617 	ldw	r22,24(sp)
   1145c:	dd400517 	ldw	r21,20(sp)
   11460:	dd000417 	ldw	r20,16(sp)
   11464:	dcc00317 	ldw	r19,12(sp)
   11468:	dc800217 	ldw	r18,8(sp)
   1146c:	dc400117 	ldw	r17,4(sp)
   11470:	dc000017 	ldw	r16,0(sp)
   11474:	dec00904 	addi	sp,sp,36
   11478:	f800283a 	ret
   1147c:	002f883a 	mov	r23,zero
   11480:	003ff206 	br	1144c <_gp+0xffff1bcc>

00011484 <_fwalk_reent>:
   11484:	defff704 	addi	sp,sp,-36
   11488:	dd000415 	stw	r20,16(sp)
   1148c:	dfc00815 	stw	ra,32(sp)
   11490:	ddc00715 	stw	r23,28(sp)
   11494:	dd800615 	stw	r22,24(sp)
   11498:	dd400515 	stw	r21,20(sp)
   1149c:	dcc00315 	stw	r19,12(sp)
   114a0:	dc800215 	stw	r18,8(sp)
   114a4:	dc400115 	stw	r17,4(sp)
   114a8:	dc000015 	stw	r16,0(sp)
   114ac:	2500b804 	addi	r20,r4,736
   114b0:	a0002326 	beq	r20,zero,11540 <_fwalk_reent+0xbc>
   114b4:	282b883a 	mov	r21,r5
   114b8:	2027883a 	mov	r19,r4
   114bc:	002f883a 	mov	r23,zero
   114c0:	05800044 	movi	r22,1
   114c4:	04bfffc4 	movi	r18,-1
   114c8:	a4400117 	ldw	r17,4(r20)
   114cc:	a4000217 	ldw	r16,8(r20)
   114d0:	8c7fffc4 	addi	r17,r17,-1
   114d4:	88000c16 	blt	r17,zero,11508 <_fwalk_reent+0x84>
   114d8:	84000304 	addi	r16,r16,12
   114dc:	8080000b 	ldhu	r2,0(r16)
   114e0:	8c7fffc4 	addi	r17,r17,-1
   114e4:	817ffd04 	addi	r5,r16,-12
   114e8:	b080052e 	bgeu	r22,r2,11500 <_fwalk_reent+0x7c>
   114ec:	8080008f 	ldh	r2,2(r16)
   114f0:	9809883a 	mov	r4,r19
   114f4:	14800226 	beq	r2,r18,11500 <_fwalk_reent+0x7c>
   114f8:	a83ee83a 	callr	r21
   114fc:	b8aeb03a 	or	r23,r23,r2
   11500:	84001a04 	addi	r16,r16,104
   11504:	8cbff51e 	bne	r17,r18,114dc <_gp+0xffff1c5c>
   11508:	a5000017 	ldw	r20,0(r20)
   1150c:	a03fee1e 	bne	r20,zero,114c8 <_gp+0xffff1c48>
   11510:	b805883a 	mov	r2,r23
   11514:	dfc00817 	ldw	ra,32(sp)
   11518:	ddc00717 	ldw	r23,28(sp)
   1151c:	dd800617 	ldw	r22,24(sp)
   11520:	dd400517 	ldw	r21,20(sp)
   11524:	dd000417 	ldw	r20,16(sp)
   11528:	dcc00317 	ldw	r19,12(sp)
   1152c:	dc800217 	ldw	r18,8(sp)
   11530:	dc400117 	ldw	r17,4(sp)
   11534:	dc000017 	ldw	r16,0(sp)
   11538:	dec00904 	addi	sp,sp,36
   1153c:	f800283a 	ret
   11540:	002f883a 	mov	r23,zero
   11544:	003ff206 	br	11510 <_gp+0xffff1c90>

00011548 <_malloc_r>:
   11548:	defff504 	addi	sp,sp,-44
   1154c:	dc800315 	stw	r18,12(sp)
   11550:	dfc00a15 	stw	ra,40(sp)
   11554:	df000915 	stw	fp,36(sp)
   11558:	ddc00815 	stw	r23,32(sp)
   1155c:	dd800715 	stw	r22,28(sp)
   11560:	dd400615 	stw	r21,24(sp)
   11564:	dd000515 	stw	r20,20(sp)
   11568:	dcc00415 	stw	r19,16(sp)
   1156c:	dc400215 	stw	r17,8(sp)
   11570:	dc000115 	stw	r16,4(sp)
   11574:	288002c4 	addi	r2,r5,11
   11578:	00c00584 	movi	r3,22
   1157c:	2025883a 	mov	r18,r4
   11580:	18807f2e 	bgeu	r3,r2,11780 <_malloc_r+0x238>
   11584:	047ffe04 	movi	r17,-8
   11588:	1462703a 	and	r17,r2,r17
   1158c:	8800a316 	blt	r17,zero,1181c <_malloc_r+0x2d4>
   11590:	8940a236 	bltu	r17,r5,1181c <_malloc_r+0x2d4>
   11594:	0013e280 	call	13e28 <__malloc_lock>
   11598:	00807dc4 	movi	r2,503
   1159c:	1441e92e 	bgeu	r2,r17,11d44 <_malloc_r+0x7fc>
   115a0:	8804d27a 	srli	r2,r17,9
   115a4:	1000a126 	beq	r2,zero,1182c <_malloc_r+0x2e4>
   115a8:	00c00104 	movi	r3,4
   115ac:	18811e36 	bltu	r3,r2,11a28 <_malloc_r+0x4e0>
   115b0:	8804d1ba 	srli	r2,r17,6
   115b4:	12000e44 	addi	r8,r2,57
   115b8:	11c00e04 	addi	r7,r2,56
   115bc:	4209883a 	add	r4,r8,r8
   115c0:	04c00074 	movhi	r19,1
   115c4:	2109883a 	add	r4,r4,r4
   115c8:	9cd89c04 	addi	r19,r19,25200
   115cc:	2109883a 	add	r4,r4,r4
   115d0:	9909883a 	add	r4,r19,r4
   115d4:	24000117 	ldw	r16,4(r4)
   115d8:	213ffe04 	addi	r4,r4,-8
   115dc:	24009726 	beq	r4,r16,1183c <_malloc_r+0x2f4>
   115e0:	80800117 	ldw	r2,4(r16)
   115e4:	01bfff04 	movi	r6,-4
   115e8:	014003c4 	movi	r5,15
   115ec:	1184703a 	and	r2,r2,r6
   115f0:	1447c83a 	sub	r3,r2,r17
   115f4:	28c00716 	blt	r5,r3,11614 <_malloc_r+0xcc>
   115f8:	1800920e 	bge	r3,zero,11844 <_malloc_r+0x2fc>
   115fc:	84000317 	ldw	r16,12(r16)
   11600:	24008e26 	beq	r4,r16,1183c <_malloc_r+0x2f4>
   11604:	80800117 	ldw	r2,4(r16)
   11608:	1184703a 	and	r2,r2,r6
   1160c:	1447c83a 	sub	r3,r2,r17
   11610:	28fff90e 	bge	r5,r3,115f8 <_gp+0xffff1d78>
   11614:	3809883a 	mov	r4,r7
   11618:	01800074 	movhi	r6,1
   1161c:	9c000417 	ldw	r16,16(r19)
   11620:	31989c04 	addi	r6,r6,25200
   11624:	32000204 	addi	r8,r6,8
   11628:	82013426 	beq	r16,r8,11afc <_malloc_r+0x5b4>
   1162c:	80c00117 	ldw	r3,4(r16)
   11630:	00bfff04 	movi	r2,-4
   11634:	188e703a 	and	r7,r3,r2
   11638:	3c45c83a 	sub	r2,r7,r17
   1163c:	00c003c4 	movi	r3,15
   11640:	18811f16 	blt	r3,r2,11ac0 <_malloc_r+0x578>
   11644:	32000515 	stw	r8,20(r6)
   11648:	32000415 	stw	r8,16(r6)
   1164c:	10007f0e 	bge	r2,zero,1184c <_malloc_r+0x304>
   11650:	00807fc4 	movi	r2,511
   11654:	11c0fd36 	bltu	r2,r7,11a4c <_malloc_r+0x504>
   11658:	3806d0fa 	srli	r3,r7,3
   1165c:	01c00044 	movi	r7,1
   11660:	30800117 	ldw	r2,4(r6)
   11664:	19400044 	addi	r5,r3,1
   11668:	294b883a 	add	r5,r5,r5
   1166c:	1807d0ba 	srai	r3,r3,2
   11670:	294b883a 	add	r5,r5,r5
   11674:	294b883a 	add	r5,r5,r5
   11678:	298b883a 	add	r5,r5,r6
   1167c:	38c6983a 	sll	r3,r7,r3
   11680:	29c00017 	ldw	r7,0(r5)
   11684:	2a7ffe04 	addi	r9,r5,-8
   11688:	1886b03a 	or	r3,r3,r2
   1168c:	82400315 	stw	r9,12(r16)
   11690:	81c00215 	stw	r7,8(r16)
   11694:	30c00115 	stw	r3,4(r6)
   11698:	2c000015 	stw	r16,0(r5)
   1169c:	3c000315 	stw	r16,12(r7)
   116a0:	2005d0ba 	srai	r2,r4,2
   116a4:	01400044 	movi	r5,1
   116a8:	288a983a 	sll	r5,r5,r2
   116ac:	19406f36 	bltu	r3,r5,1186c <_malloc_r+0x324>
   116b0:	28c4703a 	and	r2,r5,r3
   116b4:	10000a1e 	bne	r2,zero,116e0 <_malloc_r+0x198>
   116b8:	00bfff04 	movi	r2,-4
   116bc:	294b883a 	add	r5,r5,r5
   116c0:	2088703a 	and	r4,r4,r2
   116c4:	28c4703a 	and	r2,r5,r3
   116c8:	21000104 	addi	r4,r4,4
   116cc:	1000041e 	bne	r2,zero,116e0 <_malloc_r+0x198>
   116d0:	294b883a 	add	r5,r5,r5
   116d4:	28c4703a 	and	r2,r5,r3
   116d8:	21000104 	addi	r4,r4,4
   116dc:	103ffc26 	beq	r2,zero,116d0 <_gp+0xffff1e50>
   116e0:	02bfff04 	movi	r10,-4
   116e4:	024003c4 	movi	r9,15
   116e8:	21800044 	addi	r6,r4,1
   116ec:	318d883a 	add	r6,r6,r6
   116f0:	318d883a 	add	r6,r6,r6
   116f4:	318d883a 	add	r6,r6,r6
   116f8:	998d883a 	add	r6,r19,r6
   116fc:	333ffe04 	addi	r12,r6,-8
   11700:	2017883a 	mov	r11,r4
   11704:	31800104 	addi	r6,r6,4
   11708:	34000017 	ldw	r16,0(r6)
   1170c:	31fffd04 	addi	r7,r6,-12
   11710:	81c0041e 	bne	r16,r7,11724 <_malloc_r+0x1dc>
   11714:	0000fb06 	br	11b04 <_malloc_r+0x5bc>
   11718:	1801030e 	bge	r3,zero,11b28 <_malloc_r+0x5e0>
   1171c:	84000317 	ldw	r16,12(r16)
   11720:	81c0f826 	beq	r16,r7,11b04 <_malloc_r+0x5bc>
   11724:	80800117 	ldw	r2,4(r16)
   11728:	1284703a 	and	r2,r2,r10
   1172c:	1447c83a 	sub	r3,r2,r17
   11730:	48fff90e 	bge	r9,r3,11718 <_gp+0xffff1e98>
   11734:	80800317 	ldw	r2,12(r16)
   11738:	81000217 	ldw	r4,8(r16)
   1173c:	89400054 	ori	r5,r17,1
   11740:	81400115 	stw	r5,4(r16)
   11744:	20800315 	stw	r2,12(r4)
   11748:	11000215 	stw	r4,8(r2)
   1174c:	8463883a 	add	r17,r16,r17
   11750:	9c400515 	stw	r17,20(r19)
   11754:	9c400415 	stw	r17,16(r19)
   11758:	18800054 	ori	r2,r3,1
   1175c:	88800115 	stw	r2,4(r17)
   11760:	8a000315 	stw	r8,12(r17)
   11764:	8a000215 	stw	r8,8(r17)
   11768:	88e3883a 	add	r17,r17,r3
   1176c:	88c00015 	stw	r3,0(r17)
   11770:	9009883a 	mov	r4,r18
   11774:	0013e4c0 	call	13e4c <__malloc_unlock>
   11778:	80800204 	addi	r2,r16,8
   1177c:	00001b06 	br	117ec <_malloc_r+0x2a4>
   11780:	04400404 	movi	r17,16
   11784:	89402536 	bltu	r17,r5,1181c <_malloc_r+0x2d4>
   11788:	0013e280 	call	13e28 <__malloc_lock>
   1178c:	00800184 	movi	r2,6
   11790:	01000084 	movi	r4,2
   11794:	04c00074 	movhi	r19,1
   11798:	1085883a 	add	r2,r2,r2
   1179c:	9cd89c04 	addi	r19,r19,25200
   117a0:	1085883a 	add	r2,r2,r2
   117a4:	9885883a 	add	r2,r19,r2
   117a8:	14000117 	ldw	r16,4(r2)
   117ac:	10fffe04 	addi	r3,r2,-8
   117b0:	80c0d926 	beq	r16,r3,11b18 <_malloc_r+0x5d0>
   117b4:	80c00117 	ldw	r3,4(r16)
   117b8:	81000317 	ldw	r4,12(r16)
   117bc:	00bfff04 	movi	r2,-4
   117c0:	1884703a 	and	r2,r3,r2
   117c4:	81400217 	ldw	r5,8(r16)
   117c8:	8085883a 	add	r2,r16,r2
   117cc:	10c00117 	ldw	r3,4(r2)
   117d0:	29000315 	stw	r4,12(r5)
   117d4:	21400215 	stw	r5,8(r4)
   117d8:	18c00054 	ori	r3,r3,1
   117dc:	10c00115 	stw	r3,4(r2)
   117e0:	9009883a 	mov	r4,r18
   117e4:	0013e4c0 	call	13e4c <__malloc_unlock>
   117e8:	80800204 	addi	r2,r16,8
   117ec:	dfc00a17 	ldw	ra,40(sp)
   117f0:	df000917 	ldw	fp,36(sp)
   117f4:	ddc00817 	ldw	r23,32(sp)
   117f8:	dd800717 	ldw	r22,28(sp)
   117fc:	dd400617 	ldw	r21,24(sp)
   11800:	dd000517 	ldw	r20,20(sp)
   11804:	dcc00417 	ldw	r19,16(sp)
   11808:	dc800317 	ldw	r18,12(sp)
   1180c:	dc400217 	ldw	r17,8(sp)
   11810:	dc000117 	ldw	r16,4(sp)
   11814:	dec00b04 	addi	sp,sp,44
   11818:	f800283a 	ret
   1181c:	00800304 	movi	r2,12
   11820:	90800015 	stw	r2,0(r18)
   11824:	0005883a 	mov	r2,zero
   11828:	003ff006 	br	117ec <_gp+0xffff1f6c>
   1182c:	01002004 	movi	r4,128
   11830:	02001004 	movi	r8,64
   11834:	01c00fc4 	movi	r7,63
   11838:	003f6106 	br	115c0 <_gp+0xffff1d40>
   1183c:	4009883a 	mov	r4,r8
   11840:	003f7506 	br	11618 <_gp+0xffff1d98>
   11844:	81000317 	ldw	r4,12(r16)
   11848:	003fde06 	br	117c4 <_gp+0xffff1f44>
   1184c:	81c5883a 	add	r2,r16,r7
   11850:	11400117 	ldw	r5,4(r2)
   11854:	9009883a 	mov	r4,r18
   11858:	29400054 	ori	r5,r5,1
   1185c:	11400115 	stw	r5,4(r2)
   11860:	0013e4c0 	call	13e4c <__malloc_unlock>
   11864:	80800204 	addi	r2,r16,8
   11868:	003fe006 	br	117ec <_gp+0xffff1f6c>
   1186c:	9c000217 	ldw	r16,8(r19)
   11870:	00bfff04 	movi	r2,-4
   11874:	85800117 	ldw	r22,4(r16)
   11878:	b0ac703a 	and	r22,r22,r2
   1187c:	b4400336 	bltu	r22,r17,1188c <_malloc_r+0x344>
   11880:	b445c83a 	sub	r2,r22,r17
   11884:	00c003c4 	movi	r3,15
   11888:	18805d16 	blt	r3,r2,11a00 <_malloc_r+0x4b8>
   1188c:	05c00074 	movhi	r23,1
   11890:	008000b4 	movhi	r2,2
   11894:	10a4d904 	addi	r2,r2,-27804
   11898:	bdde2304 	addi	r23,r23,30860
   1189c:	15400017 	ldw	r21,0(r2)
   118a0:	b8c00017 	ldw	r3,0(r23)
   118a4:	00bfffc4 	movi	r2,-1
   118a8:	858d883a 	add	r6,r16,r22
   118ac:	8d6b883a 	add	r21,r17,r21
   118b0:	1880ea26 	beq	r3,r2,11c5c <_malloc_r+0x714>
   118b4:	ad4403c4 	addi	r21,r21,4111
   118b8:	00bc0004 	movi	r2,-4096
   118bc:	a8aa703a 	and	r21,r21,r2
   118c0:	a80b883a 	mov	r5,r21
   118c4:	9009883a 	mov	r4,r18
   118c8:	d9800015 	stw	r6,0(sp)
   118cc:	00127680 	call	12768 <_sbrk_r>
   118d0:	1029883a 	mov	r20,r2
   118d4:	00bfffc4 	movi	r2,-1
   118d8:	d9800017 	ldw	r6,0(sp)
   118dc:	a080e826 	beq	r20,r2,11c80 <_malloc_r+0x738>
   118e0:	a180a636 	bltu	r20,r6,11b7c <_malloc_r+0x634>
   118e4:	070000b4 	movhi	fp,2
   118e8:	e724e204 	addi	fp,fp,-27768
   118ec:	e0800017 	ldw	r2,0(fp)
   118f0:	a887883a 	add	r3,r21,r2
   118f4:	e0c00015 	stw	r3,0(fp)
   118f8:	3500e626 	beq	r6,r20,11c94 <_malloc_r+0x74c>
   118fc:	b9000017 	ldw	r4,0(r23)
   11900:	00bfffc4 	movi	r2,-1
   11904:	2080ee26 	beq	r4,r2,11cc0 <_malloc_r+0x778>
   11908:	a185c83a 	sub	r2,r20,r6
   1190c:	10c5883a 	add	r2,r2,r3
   11910:	e0800015 	stw	r2,0(fp)
   11914:	a0c001cc 	andi	r3,r20,7
   11918:	1800bc26 	beq	r3,zero,11c0c <_malloc_r+0x6c4>
   1191c:	a0e9c83a 	sub	r20,r20,r3
   11920:	00840204 	movi	r2,4104
   11924:	a5000204 	addi	r20,r20,8
   11928:	10c7c83a 	sub	r3,r2,r3
   1192c:	a545883a 	add	r2,r20,r21
   11930:	1083ffcc 	andi	r2,r2,4095
   11934:	18abc83a 	sub	r21,r3,r2
   11938:	a80b883a 	mov	r5,r21
   1193c:	9009883a 	mov	r4,r18
   11940:	00127680 	call	12768 <_sbrk_r>
   11944:	00ffffc4 	movi	r3,-1
   11948:	10c0e126 	beq	r2,r3,11cd0 <_malloc_r+0x788>
   1194c:	1505c83a 	sub	r2,r2,r20
   11950:	1545883a 	add	r2,r2,r21
   11954:	10800054 	ori	r2,r2,1
   11958:	e0c00017 	ldw	r3,0(fp)
   1195c:	9d000215 	stw	r20,8(r19)
   11960:	a0800115 	stw	r2,4(r20)
   11964:	a8c7883a 	add	r3,r21,r3
   11968:	e0c00015 	stw	r3,0(fp)
   1196c:	84c00e26 	beq	r16,r19,119a8 <_malloc_r+0x460>
   11970:	018003c4 	movi	r6,15
   11974:	3580a72e 	bgeu	r6,r22,11c14 <_malloc_r+0x6cc>
   11978:	81400117 	ldw	r5,4(r16)
   1197c:	013ffe04 	movi	r4,-8
   11980:	b0bffd04 	addi	r2,r22,-12
   11984:	1104703a 	and	r2,r2,r4
   11988:	2900004c 	andi	r4,r5,1
   1198c:	2088b03a 	or	r4,r4,r2
   11990:	81000115 	stw	r4,4(r16)
   11994:	01400144 	movi	r5,5
   11998:	8089883a 	add	r4,r16,r2
   1199c:	21400115 	stw	r5,4(r4)
   119a0:	21400215 	stw	r5,8(r4)
   119a4:	3080cd36 	bltu	r6,r2,11cdc <_malloc_r+0x794>
   119a8:	008000b4 	movhi	r2,2
   119ac:	10a4d804 	addi	r2,r2,-27808
   119b0:	11000017 	ldw	r4,0(r2)
   119b4:	20c0012e 	bgeu	r4,r3,119bc <_malloc_r+0x474>
   119b8:	10c00015 	stw	r3,0(r2)
   119bc:	008000b4 	movhi	r2,2
   119c0:	10a4d704 	addi	r2,r2,-27812
   119c4:	11000017 	ldw	r4,0(r2)
   119c8:	9c000217 	ldw	r16,8(r19)
   119cc:	20c0012e 	bgeu	r4,r3,119d4 <_malloc_r+0x48c>
   119d0:	10c00015 	stw	r3,0(r2)
   119d4:	80c00117 	ldw	r3,4(r16)
   119d8:	00bfff04 	movi	r2,-4
   119dc:	1886703a 	and	r3,r3,r2
   119e0:	1c45c83a 	sub	r2,r3,r17
   119e4:	1c400236 	bltu	r3,r17,119f0 <_malloc_r+0x4a8>
   119e8:	00c003c4 	movi	r3,15
   119ec:	18800416 	blt	r3,r2,11a00 <_malloc_r+0x4b8>
   119f0:	9009883a 	mov	r4,r18
   119f4:	0013e4c0 	call	13e4c <__malloc_unlock>
   119f8:	0005883a 	mov	r2,zero
   119fc:	003f7b06 	br	117ec <_gp+0xffff1f6c>
   11a00:	88c00054 	ori	r3,r17,1
   11a04:	80c00115 	stw	r3,4(r16)
   11a08:	8463883a 	add	r17,r16,r17
   11a0c:	10800054 	ori	r2,r2,1
   11a10:	9c400215 	stw	r17,8(r19)
   11a14:	88800115 	stw	r2,4(r17)
   11a18:	9009883a 	mov	r4,r18
   11a1c:	0013e4c0 	call	13e4c <__malloc_unlock>
   11a20:	80800204 	addi	r2,r16,8
   11a24:	003f7106 	br	117ec <_gp+0xffff1f6c>
   11a28:	00c00504 	movi	r3,20
   11a2c:	18804a2e 	bgeu	r3,r2,11b58 <_malloc_r+0x610>
   11a30:	00c01504 	movi	r3,84
   11a34:	18806e36 	bltu	r3,r2,11bf0 <_malloc_r+0x6a8>
   11a38:	8804d33a 	srli	r2,r17,12
   11a3c:	12001bc4 	addi	r8,r2,111
   11a40:	11c01b84 	addi	r7,r2,110
   11a44:	4209883a 	add	r4,r8,r8
   11a48:	003edd06 	br	115c0 <_gp+0xffff1d40>
   11a4c:	3804d27a 	srli	r2,r7,9
   11a50:	00c00104 	movi	r3,4
   11a54:	1880442e 	bgeu	r3,r2,11b68 <_malloc_r+0x620>
   11a58:	00c00504 	movi	r3,20
   11a5c:	18808136 	bltu	r3,r2,11c64 <_malloc_r+0x71c>
   11a60:	11401704 	addi	r5,r2,92
   11a64:	10c016c4 	addi	r3,r2,91
   11a68:	294b883a 	add	r5,r5,r5
   11a6c:	294b883a 	add	r5,r5,r5
   11a70:	294b883a 	add	r5,r5,r5
   11a74:	994b883a 	add	r5,r19,r5
   11a78:	28800017 	ldw	r2,0(r5)
   11a7c:	01800074 	movhi	r6,1
   11a80:	297ffe04 	addi	r5,r5,-8
   11a84:	31989c04 	addi	r6,r6,25200
   11a88:	28806526 	beq	r5,r2,11c20 <_malloc_r+0x6d8>
   11a8c:	01bfff04 	movi	r6,-4
   11a90:	10c00117 	ldw	r3,4(r2)
   11a94:	1986703a 	and	r3,r3,r6
   11a98:	38c0022e 	bgeu	r7,r3,11aa4 <_malloc_r+0x55c>
   11a9c:	10800217 	ldw	r2,8(r2)
   11aa0:	28bffb1e 	bne	r5,r2,11a90 <_gp+0xffff2210>
   11aa4:	11400317 	ldw	r5,12(r2)
   11aa8:	98c00117 	ldw	r3,4(r19)
   11aac:	81400315 	stw	r5,12(r16)
   11ab0:	80800215 	stw	r2,8(r16)
   11ab4:	2c000215 	stw	r16,8(r5)
   11ab8:	14000315 	stw	r16,12(r2)
   11abc:	003ef806 	br	116a0 <_gp+0xffff1e20>
   11ac0:	88c00054 	ori	r3,r17,1
   11ac4:	80c00115 	stw	r3,4(r16)
   11ac8:	8463883a 	add	r17,r16,r17
   11acc:	34400515 	stw	r17,20(r6)
   11ad0:	34400415 	stw	r17,16(r6)
   11ad4:	10c00054 	ori	r3,r2,1
   11ad8:	8a000315 	stw	r8,12(r17)
   11adc:	8a000215 	stw	r8,8(r17)
   11ae0:	88c00115 	stw	r3,4(r17)
   11ae4:	88a3883a 	add	r17,r17,r2
   11ae8:	88800015 	stw	r2,0(r17)
   11aec:	9009883a 	mov	r4,r18
   11af0:	0013e4c0 	call	13e4c <__malloc_unlock>
   11af4:	80800204 	addi	r2,r16,8
   11af8:	003f3c06 	br	117ec <_gp+0xffff1f6c>
   11afc:	30c00117 	ldw	r3,4(r6)
   11b00:	003ee706 	br	116a0 <_gp+0xffff1e20>
   11b04:	5ac00044 	addi	r11,r11,1
   11b08:	588000cc 	andi	r2,r11,3
   11b0c:	31800204 	addi	r6,r6,8
   11b10:	103efd1e 	bne	r2,zero,11708 <_gp+0xffff1e88>
   11b14:	00002406 	br	11ba8 <_malloc_r+0x660>
   11b18:	14000317 	ldw	r16,12(r2)
   11b1c:	143f251e 	bne	r2,r16,117b4 <_gp+0xffff1f34>
   11b20:	21000084 	addi	r4,r4,2
   11b24:	003ebc06 	br	11618 <_gp+0xffff1d98>
   11b28:	8085883a 	add	r2,r16,r2
   11b2c:	10c00117 	ldw	r3,4(r2)
   11b30:	81000317 	ldw	r4,12(r16)
   11b34:	81400217 	ldw	r5,8(r16)
   11b38:	18c00054 	ori	r3,r3,1
   11b3c:	10c00115 	stw	r3,4(r2)
   11b40:	29000315 	stw	r4,12(r5)
   11b44:	21400215 	stw	r5,8(r4)
   11b48:	9009883a 	mov	r4,r18
   11b4c:	0013e4c0 	call	13e4c <__malloc_unlock>
   11b50:	80800204 	addi	r2,r16,8
   11b54:	003f2506 	br	117ec <_gp+0xffff1f6c>
   11b58:	12001704 	addi	r8,r2,92
   11b5c:	11c016c4 	addi	r7,r2,91
   11b60:	4209883a 	add	r4,r8,r8
   11b64:	003e9606 	br	115c0 <_gp+0xffff1d40>
   11b68:	3804d1ba 	srli	r2,r7,6
   11b6c:	11400e44 	addi	r5,r2,57
   11b70:	10c00e04 	addi	r3,r2,56
   11b74:	294b883a 	add	r5,r5,r5
   11b78:	003fbc06 	br	11a6c <_gp+0xffff21ec>
   11b7c:	84ff5926 	beq	r16,r19,118e4 <_gp+0xffff2064>
   11b80:	00800074 	movhi	r2,1
   11b84:	10989c04 	addi	r2,r2,25200
   11b88:	14000217 	ldw	r16,8(r2)
   11b8c:	00bfff04 	movi	r2,-4
   11b90:	80c00117 	ldw	r3,4(r16)
   11b94:	1886703a 	and	r3,r3,r2
   11b98:	003f9106 	br	119e0 <_gp+0xffff2160>
   11b9c:	60800217 	ldw	r2,8(r12)
   11ba0:	213fffc4 	addi	r4,r4,-1
   11ba4:	1300651e 	bne	r2,r12,11d3c <_malloc_r+0x7f4>
   11ba8:	208000cc 	andi	r2,r4,3
   11bac:	633ffe04 	addi	r12,r12,-8
   11bb0:	103ffa1e 	bne	r2,zero,11b9c <_gp+0xffff231c>
   11bb4:	98800117 	ldw	r2,4(r19)
   11bb8:	0146303a 	nor	r3,zero,r5
   11bbc:	1884703a 	and	r2,r3,r2
   11bc0:	98800115 	stw	r2,4(r19)
   11bc4:	294b883a 	add	r5,r5,r5
   11bc8:	117f2836 	bltu	r2,r5,1186c <_gp+0xffff1fec>
   11bcc:	283f2726 	beq	r5,zero,1186c <_gp+0xffff1fec>
   11bd0:	2886703a 	and	r3,r5,r2
   11bd4:	5809883a 	mov	r4,r11
   11bd8:	183ec31e 	bne	r3,zero,116e8 <_gp+0xffff1e68>
   11bdc:	294b883a 	add	r5,r5,r5
   11be0:	2886703a 	and	r3,r5,r2
   11be4:	21000104 	addi	r4,r4,4
   11be8:	183ffc26 	beq	r3,zero,11bdc <_gp+0xffff235c>
   11bec:	003ebe06 	br	116e8 <_gp+0xffff1e68>
   11bf0:	00c05504 	movi	r3,340
   11bf4:	18801236 	bltu	r3,r2,11c40 <_malloc_r+0x6f8>
   11bf8:	8804d3fa 	srli	r2,r17,15
   11bfc:	12001e04 	addi	r8,r2,120
   11c00:	11c01dc4 	addi	r7,r2,119
   11c04:	4209883a 	add	r4,r8,r8
   11c08:	003e6d06 	br	115c0 <_gp+0xffff1d40>
   11c0c:	00c40004 	movi	r3,4096
   11c10:	003f4606 	br	1192c <_gp+0xffff20ac>
   11c14:	00800044 	movi	r2,1
   11c18:	a0800115 	stw	r2,4(r20)
   11c1c:	003f7406 	br	119f0 <_gp+0xffff2170>
   11c20:	1805d0ba 	srai	r2,r3,2
   11c24:	01c00044 	movi	r7,1
   11c28:	30c00117 	ldw	r3,4(r6)
   11c2c:	388e983a 	sll	r7,r7,r2
   11c30:	2805883a 	mov	r2,r5
   11c34:	38c6b03a 	or	r3,r7,r3
   11c38:	30c00115 	stw	r3,4(r6)
   11c3c:	003f9b06 	br	11aac <_gp+0xffff222c>
   11c40:	00c15504 	movi	r3,1364
   11c44:	18801a36 	bltu	r3,r2,11cb0 <_malloc_r+0x768>
   11c48:	8804d4ba 	srli	r2,r17,18
   11c4c:	12001f44 	addi	r8,r2,125
   11c50:	11c01f04 	addi	r7,r2,124
   11c54:	4209883a 	add	r4,r8,r8
   11c58:	003e5906 	br	115c0 <_gp+0xffff1d40>
   11c5c:	ad400404 	addi	r21,r21,16
   11c60:	003f1706 	br	118c0 <_gp+0xffff2040>
   11c64:	00c01504 	movi	r3,84
   11c68:	18802336 	bltu	r3,r2,11cf8 <_malloc_r+0x7b0>
   11c6c:	3804d33a 	srli	r2,r7,12
   11c70:	11401bc4 	addi	r5,r2,111
   11c74:	10c01b84 	addi	r3,r2,110
   11c78:	294b883a 	add	r5,r5,r5
   11c7c:	003f7b06 	br	11a6c <_gp+0xffff21ec>
   11c80:	9c000217 	ldw	r16,8(r19)
   11c84:	00bfff04 	movi	r2,-4
   11c88:	80c00117 	ldw	r3,4(r16)
   11c8c:	1886703a 	and	r3,r3,r2
   11c90:	003f5306 	br	119e0 <_gp+0xffff2160>
   11c94:	3083ffcc 	andi	r2,r6,4095
   11c98:	103f181e 	bne	r2,zero,118fc <_gp+0xffff207c>
   11c9c:	99000217 	ldw	r4,8(r19)
   11ca0:	b545883a 	add	r2,r22,r21
   11ca4:	10800054 	ori	r2,r2,1
   11ca8:	20800115 	stw	r2,4(r4)
   11cac:	003f3e06 	br	119a8 <_gp+0xffff2128>
   11cb0:	01003f84 	movi	r4,254
   11cb4:	02001fc4 	movi	r8,127
   11cb8:	01c01f84 	movi	r7,126
   11cbc:	003e4006 	br	115c0 <_gp+0xffff1d40>
   11cc0:	00800074 	movhi	r2,1
   11cc4:	109e2304 	addi	r2,r2,30860
   11cc8:	15000015 	stw	r20,0(r2)
   11ccc:	003f1106 	br	11914 <_gp+0xffff2094>
   11cd0:	00800044 	movi	r2,1
   11cd4:	002b883a 	mov	r21,zero
   11cd8:	003f1f06 	br	11958 <_gp+0xffff20d8>
   11cdc:	81400204 	addi	r5,r16,8
   11ce0:	9009883a 	mov	r4,r18
   11ce4:	0012fd00 	call	12fd0 <_free_r>
   11ce8:	008000b4 	movhi	r2,2
   11cec:	10a4e204 	addi	r2,r2,-27768
   11cf0:	10c00017 	ldw	r3,0(r2)
   11cf4:	003f2c06 	br	119a8 <_gp+0xffff2128>
   11cf8:	00c05504 	movi	r3,340
   11cfc:	18800536 	bltu	r3,r2,11d14 <_malloc_r+0x7cc>
   11d00:	3804d3fa 	srli	r2,r7,15
   11d04:	11401e04 	addi	r5,r2,120
   11d08:	10c01dc4 	addi	r3,r2,119
   11d0c:	294b883a 	add	r5,r5,r5
   11d10:	003f5606 	br	11a6c <_gp+0xffff21ec>
   11d14:	00c15504 	movi	r3,1364
   11d18:	18800536 	bltu	r3,r2,11d30 <_malloc_r+0x7e8>
   11d1c:	3804d4ba 	srli	r2,r7,18
   11d20:	11401f44 	addi	r5,r2,125
   11d24:	10c01f04 	addi	r3,r2,124
   11d28:	294b883a 	add	r5,r5,r5
   11d2c:	003f4f06 	br	11a6c <_gp+0xffff21ec>
   11d30:	01403f84 	movi	r5,254
   11d34:	00c01f84 	movi	r3,126
   11d38:	003f4c06 	br	11a6c <_gp+0xffff21ec>
   11d3c:	98800117 	ldw	r2,4(r19)
   11d40:	003fa006 	br	11bc4 <_gp+0xffff2344>
   11d44:	8808d0fa 	srli	r4,r17,3
   11d48:	20800044 	addi	r2,r4,1
   11d4c:	1085883a 	add	r2,r2,r2
   11d50:	003e9006 	br	11794 <_gp+0xffff1f14>

00011d54 <memchr>:
   11d54:	208000cc 	andi	r2,r4,3
   11d58:	280f883a 	mov	r7,r5
   11d5c:	10003426 	beq	r2,zero,11e30 <memchr+0xdc>
   11d60:	30bfffc4 	addi	r2,r6,-1
   11d64:	30001a26 	beq	r6,zero,11dd0 <memchr+0x7c>
   11d68:	20c00003 	ldbu	r3,0(r4)
   11d6c:	29803fcc 	andi	r6,r5,255
   11d70:	30c0051e 	bne	r6,r3,11d88 <memchr+0x34>
   11d74:	00001806 	br	11dd8 <memchr+0x84>
   11d78:	10001526 	beq	r2,zero,11dd0 <memchr+0x7c>
   11d7c:	20c00003 	ldbu	r3,0(r4)
   11d80:	10bfffc4 	addi	r2,r2,-1
   11d84:	30c01426 	beq	r6,r3,11dd8 <memchr+0x84>
   11d88:	21000044 	addi	r4,r4,1
   11d8c:	20c000cc 	andi	r3,r4,3
   11d90:	183ff91e 	bne	r3,zero,11d78 <_gp+0xffff24f8>
   11d94:	020000c4 	movi	r8,3
   11d98:	40801136 	bltu	r8,r2,11de0 <memchr+0x8c>
   11d9c:	10000c26 	beq	r2,zero,11dd0 <memchr+0x7c>
   11da0:	20c00003 	ldbu	r3,0(r4)
   11da4:	29403fcc 	andi	r5,r5,255
   11da8:	28c00b26 	beq	r5,r3,11dd8 <memchr+0x84>
   11dac:	20c00044 	addi	r3,r4,1
   11db0:	39803fcc 	andi	r6,r7,255
   11db4:	2089883a 	add	r4,r4,r2
   11db8:	00000306 	br	11dc8 <memchr+0x74>
   11dbc:	18c00044 	addi	r3,r3,1
   11dc0:	197fffc3 	ldbu	r5,-1(r3)
   11dc4:	31400526 	beq	r6,r5,11ddc <memchr+0x88>
   11dc8:	1805883a 	mov	r2,r3
   11dcc:	20fffb1e 	bne	r4,r3,11dbc <_gp+0xffff253c>
   11dd0:	0005883a 	mov	r2,zero
   11dd4:	f800283a 	ret
   11dd8:	2005883a 	mov	r2,r4
   11ddc:	f800283a 	ret
   11de0:	28c03fcc 	andi	r3,r5,255
   11de4:	1812923a 	slli	r9,r3,8
   11de8:	02ffbff4 	movhi	r11,65279
   11dec:	02a02074 	movhi	r10,32897
   11df0:	48d2b03a 	or	r9,r9,r3
   11df4:	4806943a 	slli	r3,r9,16
   11df8:	5affbfc4 	addi	r11,r11,-257
   11dfc:	52a02004 	addi	r10,r10,-32640
   11e00:	48d2b03a 	or	r9,r9,r3
   11e04:	20c00017 	ldw	r3,0(r4)
   11e08:	48c6f03a 	xor	r3,r9,r3
   11e0c:	1acd883a 	add	r6,r3,r11
   11e10:	00c6303a 	nor	r3,zero,r3
   11e14:	30c6703a 	and	r3,r6,r3
   11e18:	1a86703a 	and	r3,r3,r10
   11e1c:	183fe01e 	bne	r3,zero,11da0 <_gp+0xffff2520>
   11e20:	10bfff04 	addi	r2,r2,-4
   11e24:	21000104 	addi	r4,r4,4
   11e28:	40bff636 	bltu	r8,r2,11e04 <_gp+0xffff2584>
   11e2c:	003fdb06 	br	11d9c <_gp+0xffff251c>
   11e30:	3005883a 	mov	r2,r6
   11e34:	003fd706 	br	11d94 <_gp+0xffff2514>

00011e38 <memcpy>:
   11e38:	defffd04 	addi	sp,sp,-12
   11e3c:	dfc00215 	stw	ra,8(sp)
   11e40:	dc400115 	stw	r17,4(sp)
   11e44:	dc000015 	stw	r16,0(sp)
   11e48:	00c003c4 	movi	r3,15
   11e4c:	2005883a 	mov	r2,r4
   11e50:	1980452e 	bgeu	r3,r6,11f68 <memcpy+0x130>
   11e54:	2906b03a 	or	r3,r5,r4
   11e58:	18c000cc 	andi	r3,r3,3
   11e5c:	1800441e 	bne	r3,zero,11f70 <memcpy+0x138>
   11e60:	347ffc04 	addi	r17,r6,-16
   11e64:	8822d13a 	srli	r17,r17,4
   11e68:	28c00104 	addi	r3,r5,4
   11e6c:	23400104 	addi	r13,r4,4
   11e70:	8820913a 	slli	r16,r17,4
   11e74:	2b000204 	addi	r12,r5,8
   11e78:	22c00204 	addi	r11,r4,8
   11e7c:	84000504 	addi	r16,r16,20
   11e80:	2a800304 	addi	r10,r5,12
   11e84:	22400304 	addi	r9,r4,12
   11e88:	2c21883a 	add	r16,r5,r16
   11e8c:	2811883a 	mov	r8,r5
   11e90:	200f883a 	mov	r7,r4
   11e94:	41000017 	ldw	r4,0(r8)
   11e98:	1fc00017 	ldw	ra,0(r3)
   11e9c:	63c00017 	ldw	r15,0(r12)
   11ea0:	39000015 	stw	r4,0(r7)
   11ea4:	53800017 	ldw	r14,0(r10)
   11ea8:	6fc00015 	stw	ra,0(r13)
   11eac:	5bc00015 	stw	r15,0(r11)
   11eb0:	4b800015 	stw	r14,0(r9)
   11eb4:	18c00404 	addi	r3,r3,16
   11eb8:	39c00404 	addi	r7,r7,16
   11ebc:	42000404 	addi	r8,r8,16
   11ec0:	6b400404 	addi	r13,r13,16
   11ec4:	63000404 	addi	r12,r12,16
   11ec8:	5ac00404 	addi	r11,r11,16
   11ecc:	52800404 	addi	r10,r10,16
   11ed0:	4a400404 	addi	r9,r9,16
   11ed4:	1c3fef1e 	bne	r3,r16,11e94 <_gp+0xffff2614>
   11ed8:	89c00044 	addi	r7,r17,1
   11edc:	380e913a 	slli	r7,r7,4
   11ee0:	310003cc 	andi	r4,r6,15
   11ee4:	02c000c4 	movi	r11,3
   11ee8:	11c7883a 	add	r3,r2,r7
   11eec:	29cb883a 	add	r5,r5,r7
   11ef0:	5900212e 	bgeu	r11,r4,11f78 <memcpy+0x140>
   11ef4:	1813883a 	mov	r9,r3
   11ef8:	2811883a 	mov	r8,r5
   11efc:	200f883a 	mov	r7,r4
   11f00:	42800017 	ldw	r10,0(r8)
   11f04:	4a400104 	addi	r9,r9,4
   11f08:	39ffff04 	addi	r7,r7,-4
   11f0c:	4abfff15 	stw	r10,-4(r9)
   11f10:	42000104 	addi	r8,r8,4
   11f14:	59fffa36 	bltu	r11,r7,11f00 <_gp+0xffff2680>
   11f18:	213fff04 	addi	r4,r4,-4
   11f1c:	2008d0ba 	srli	r4,r4,2
   11f20:	318000cc 	andi	r6,r6,3
   11f24:	21000044 	addi	r4,r4,1
   11f28:	2109883a 	add	r4,r4,r4
   11f2c:	2109883a 	add	r4,r4,r4
   11f30:	1907883a 	add	r3,r3,r4
   11f34:	290b883a 	add	r5,r5,r4
   11f38:	30000626 	beq	r6,zero,11f54 <memcpy+0x11c>
   11f3c:	198d883a 	add	r6,r3,r6
   11f40:	29c00003 	ldbu	r7,0(r5)
   11f44:	18c00044 	addi	r3,r3,1
   11f48:	29400044 	addi	r5,r5,1
   11f4c:	19ffffc5 	stb	r7,-1(r3)
   11f50:	19bffb1e 	bne	r3,r6,11f40 <_gp+0xffff26c0>
   11f54:	dfc00217 	ldw	ra,8(sp)
   11f58:	dc400117 	ldw	r17,4(sp)
   11f5c:	dc000017 	ldw	r16,0(sp)
   11f60:	dec00304 	addi	sp,sp,12
   11f64:	f800283a 	ret
   11f68:	2007883a 	mov	r3,r4
   11f6c:	003ff206 	br	11f38 <_gp+0xffff26b8>
   11f70:	2007883a 	mov	r3,r4
   11f74:	003ff106 	br	11f3c <_gp+0xffff26bc>
   11f78:	200d883a 	mov	r6,r4
   11f7c:	003fee06 	br	11f38 <_gp+0xffff26b8>

00011f80 <memmove>:
   11f80:	2005883a 	mov	r2,r4
   11f84:	29000b2e 	bgeu	r5,r4,11fb4 <memmove+0x34>
   11f88:	298f883a 	add	r7,r5,r6
   11f8c:	21c0092e 	bgeu	r4,r7,11fb4 <memmove+0x34>
   11f90:	2187883a 	add	r3,r4,r6
   11f94:	198bc83a 	sub	r5,r3,r6
   11f98:	30004826 	beq	r6,zero,120bc <memmove+0x13c>
   11f9c:	39ffffc4 	addi	r7,r7,-1
   11fa0:	39000003 	ldbu	r4,0(r7)
   11fa4:	18ffffc4 	addi	r3,r3,-1
   11fa8:	19000005 	stb	r4,0(r3)
   11fac:	28fffb1e 	bne	r5,r3,11f9c <_gp+0xffff271c>
   11fb0:	f800283a 	ret
   11fb4:	00c003c4 	movi	r3,15
   11fb8:	1980412e 	bgeu	r3,r6,120c0 <memmove+0x140>
   11fbc:	2886b03a 	or	r3,r5,r2
   11fc0:	18c000cc 	andi	r3,r3,3
   11fc4:	1800401e 	bne	r3,zero,120c8 <memmove+0x148>
   11fc8:	33fffc04 	addi	r15,r6,-16
   11fcc:	781ed13a 	srli	r15,r15,4
   11fd0:	28c00104 	addi	r3,r5,4
   11fd4:	13400104 	addi	r13,r2,4
   11fd8:	781c913a 	slli	r14,r15,4
   11fdc:	2b000204 	addi	r12,r5,8
   11fe0:	12c00204 	addi	r11,r2,8
   11fe4:	73800504 	addi	r14,r14,20
   11fe8:	2a800304 	addi	r10,r5,12
   11fec:	12400304 	addi	r9,r2,12
   11ff0:	2b9d883a 	add	r14,r5,r14
   11ff4:	2811883a 	mov	r8,r5
   11ff8:	100f883a 	mov	r7,r2
   11ffc:	41000017 	ldw	r4,0(r8)
   12000:	39c00404 	addi	r7,r7,16
   12004:	18c00404 	addi	r3,r3,16
   12008:	393ffc15 	stw	r4,-16(r7)
   1200c:	193ffc17 	ldw	r4,-16(r3)
   12010:	6b400404 	addi	r13,r13,16
   12014:	5ac00404 	addi	r11,r11,16
   12018:	693ffc15 	stw	r4,-16(r13)
   1201c:	61000017 	ldw	r4,0(r12)
   12020:	4a400404 	addi	r9,r9,16
   12024:	42000404 	addi	r8,r8,16
   12028:	593ffc15 	stw	r4,-16(r11)
   1202c:	51000017 	ldw	r4,0(r10)
   12030:	63000404 	addi	r12,r12,16
   12034:	52800404 	addi	r10,r10,16
   12038:	493ffc15 	stw	r4,-16(r9)
   1203c:	1bbfef1e 	bne	r3,r14,11ffc <_gp+0xffff277c>
   12040:	79000044 	addi	r4,r15,1
   12044:	2008913a 	slli	r4,r4,4
   12048:	328003cc 	andi	r10,r6,15
   1204c:	02c000c4 	movi	r11,3
   12050:	1107883a 	add	r3,r2,r4
   12054:	290b883a 	add	r5,r5,r4
   12058:	5a801e2e 	bgeu	r11,r10,120d4 <memmove+0x154>
   1205c:	1813883a 	mov	r9,r3
   12060:	2811883a 	mov	r8,r5
   12064:	500f883a 	mov	r7,r10
   12068:	41000017 	ldw	r4,0(r8)
   1206c:	4a400104 	addi	r9,r9,4
   12070:	39ffff04 	addi	r7,r7,-4
   12074:	493fff15 	stw	r4,-4(r9)
   12078:	42000104 	addi	r8,r8,4
   1207c:	59fffa36 	bltu	r11,r7,12068 <_gp+0xffff27e8>
   12080:	513fff04 	addi	r4,r10,-4
   12084:	2008d0ba 	srli	r4,r4,2
   12088:	318000cc 	andi	r6,r6,3
   1208c:	21000044 	addi	r4,r4,1
   12090:	2109883a 	add	r4,r4,r4
   12094:	2109883a 	add	r4,r4,r4
   12098:	1907883a 	add	r3,r3,r4
   1209c:	290b883a 	add	r5,r5,r4
   120a0:	30000b26 	beq	r6,zero,120d0 <memmove+0x150>
   120a4:	198d883a 	add	r6,r3,r6
   120a8:	29c00003 	ldbu	r7,0(r5)
   120ac:	18c00044 	addi	r3,r3,1
   120b0:	29400044 	addi	r5,r5,1
   120b4:	19ffffc5 	stb	r7,-1(r3)
   120b8:	19bffb1e 	bne	r3,r6,120a8 <_gp+0xffff2828>
   120bc:	f800283a 	ret
   120c0:	1007883a 	mov	r3,r2
   120c4:	003ff606 	br	120a0 <_gp+0xffff2820>
   120c8:	1007883a 	mov	r3,r2
   120cc:	003ff506 	br	120a4 <_gp+0xffff2824>
   120d0:	f800283a 	ret
   120d4:	500d883a 	mov	r6,r10
   120d8:	003ff106 	br	120a0 <_gp+0xffff2820>

000120dc <memset>:
   120dc:	20c000cc 	andi	r3,r4,3
   120e0:	2005883a 	mov	r2,r4
   120e4:	18004426 	beq	r3,zero,121f8 <memset+0x11c>
   120e8:	31ffffc4 	addi	r7,r6,-1
   120ec:	30004026 	beq	r6,zero,121f0 <memset+0x114>
   120f0:	2813883a 	mov	r9,r5
   120f4:	200d883a 	mov	r6,r4
   120f8:	2007883a 	mov	r3,r4
   120fc:	00000406 	br	12110 <memset+0x34>
   12100:	3a3fffc4 	addi	r8,r7,-1
   12104:	31800044 	addi	r6,r6,1
   12108:	38003926 	beq	r7,zero,121f0 <memset+0x114>
   1210c:	400f883a 	mov	r7,r8
   12110:	18c00044 	addi	r3,r3,1
   12114:	32400005 	stb	r9,0(r6)
   12118:	1a0000cc 	andi	r8,r3,3
   1211c:	403ff81e 	bne	r8,zero,12100 <_gp+0xffff2880>
   12120:	010000c4 	movi	r4,3
   12124:	21c02d2e 	bgeu	r4,r7,121dc <memset+0x100>
   12128:	29003fcc 	andi	r4,r5,255
   1212c:	200c923a 	slli	r6,r4,8
   12130:	3108b03a 	or	r4,r6,r4
   12134:	200c943a 	slli	r6,r4,16
   12138:	218cb03a 	or	r6,r4,r6
   1213c:	010003c4 	movi	r4,15
   12140:	21c0182e 	bgeu	r4,r7,121a4 <memset+0xc8>
   12144:	3b3ffc04 	addi	r12,r7,-16
   12148:	6018d13a 	srli	r12,r12,4
   1214c:	1a000104 	addi	r8,r3,4
   12150:	1ac00204 	addi	r11,r3,8
   12154:	6008913a 	slli	r4,r12,4
   12158:	1a800304 	addi	r10,r3,12
   1215c:	1813883a 	mov	r9,r3
   12160:	21000504 	addi	r4,r4,20
   12164:	1909883a 	add	r4,r3,r4
   12168:	49800015 	stw	r6,0(r9)
   1216c:	41800015 	stw	r6,0(r8)
   12170:	59800015 	stw	r6,0(r11)
   12174:	51800015 	stw	r6,0(r10)
   12178:	42000404 	addi	r8,r8,16
   1217c:	4a400404 	addi	r9,r9,16
   12180:	5ac00404 	addi	r11,r11,16
   12184:	52800404 	addi	r10,r10,16
   12188:	413ff71e 	bne	r8,r4,12168 <_gp+0xffff28e8>
   1218c:	63000044 	addi	r12,r12,1
   12190:	6018913a 	slli	r12,r12,4
   12194:	39c003cc 	andi	r7,r7,15
   12198:	010000c4 	movi	r4,3
   1219c:	1b07883a 	add	r3,r3,r12
   121a0:	21c00e2e 	bgeu	r4,r7,121dc <memset+0x100>
   121a4:	1813883a 	mov	r9,r3
   121a8:	3811883a 	mov	r8,r7
   121ac:	010000c4 	movi	r4,3
   121b0:	49800015 	stw	r6,0(r9)
   121b4:	423fff04 	addi	r8,r8,-4
   121b8:	4a400104 	addi	r9,r9,4
   121bc:	223ffc36 	bltu	r4,r8,121b0 <_gp+0xffff2930>
   121c0:	393fff04 	addi	r4,r7,-4
   121c4:	2008d0ba 	srli	r4,r4,2
   121c8:	39c000cc 	andi	r7,r7,3
   121cc:	21000044 	addi	r4,r4,1
   121d0:	2109883a 	add	r4,r4,r4
   121d4:	2109883a 	add	r4,r4,r4
   121d8:	1907883a 	add	r3,r3,r4
   121dc:	38000526 	beq	r7,zero,121f4 <memset+0x118>
   121e0:	19cf883a 	add	r7,r3,r7
   121e4:	19400005 	stb	r5,0(r3)
   121e8:	18c00044 	addi	r3,r3,1
   121ec:	38fffd1e 	bne	r7,r3,121e4 <_gp+0xffff2964>
   121f0:	f800283a 	ret
   121f4:	f800283a 	ret
   121f8:	2007883a 	mov	r3,r4
   121fc:	300f883a 	mov	r7,r6
   12200:	003fc706 	br	12120 <_gp+0xffff28a0>

00012204 <_realloc_r>:
   12204:	defff604 	addi	sp,sp,-40
   12208:	dc800215 	stw	r18,8(sp)
   1220c:	dfc00915 	stw	ra,36(sp)
   12210:	df000815 	stw	fp,32(sp)
   12214:	ddc00715 	stw	r23,28(sp)
   12218:	dd800615 	stw	r22,24(sp)
   1221c:	dd400515 	stw	r21,20(sp)
   12220:	dd000415 	stw	r20,16(sp)
   12224:	dcc00315 	stw	r19,12(sp)
   12228:	dc400115 	stw	r17,4(sp)
   1222c:	dc000015 	stw	r16,0(sp)
   12230:	3025883a 	mov	r18,r6
   12234:	2800b726 	beq	r5,zero,12514 <_realloc_r+0x310>
   12238:	282b883a 	mov	r21,r5
   1223c:	2029883a 	mov	r20,r4
   12240:	0013e280 	call	13e28 <__malloc_lock>
   12244:	a8bfff17 	ldw	r2,-4(r21)
   12248:	043fff04 	movi	r16,-4
   1224c:	90c002c4 	addi	r3,r18,11
   12250:	01000584 	movi	r4,22
   12254:	acfffe04 	addi	r19,r21,-8
   12258:	1420703a 	and	r16,r2,r16
   1225c:	20c0332e 	bgeu	r4,r3,1232c <_realloc_r+0x128>
   12260:	047ffe04 	movi	r17,-8
   12264:	1c62703a 	and	r17,r3,r17
   12268:	8807883a 	mov	r3,r17
   1226c:	88005816 	blt	r17,zero,123d0 <_realloc_r+0x1cc>
   12270:	8c805736 	bltu	r17,r18,123d0 <_realloc_r+0x1cc>
   12274:	80c0300e 	bge	r16,r3,12338 <_realloc_r+0x134>
   12278:	07000074 	movhi	fp,1
   1227c:	e7189c04 	addi	fp,fp,25200
   12280:	e1c00217 	ldw	r7,8(fp)
   12284:	9c09883a 	add	r4,r19,r16
   12288:	22000117 	ldw	r8,4(r4)
   1228c:	21c06326 	beq	r4,r7,1241c <_realloc_r+0x218>
   12290:	017fff84 	movi	r5,-2
   12294:	414a703a 	and	r5,r8,r5
   12298:	214b883a 	add	r5,r4,r5
   1229c:	29800117 	ldw	r6,4(r5)
   122a0:	3180004c 	andi	r6,r6,1
   122a4:	30003f26 	beq	r6,zero,123a4 <_realloc_r+0x1a0>
   122a8:	1080004c 	andi	r2,r2,1
   122ac:	10008326 	beq	r2,zero,124bc <_realloc_r+0x2b8>
   122b0:	900b883a 	mov	r5,r18
   122b4:	a009883a 	mov	r4,r20
   122b8:	00115480 	call	11548 <_malloc_r>
   122bc:	1025883a 	mov	r18,r2
   122c0:	10011e26 	beq	r2,zero,1273c <_realloc_r+0x538>
   122c4:	a93fff17 	ldw	r4,-4(r21)
   122c8:	10fffe04 	addi	r3,r2,-8
   122cc:	00bfff84 	movi	r2,-2
   122d0:	2084703a 	and	r2,r4,r2
   122d4:	9885883a 	add	r2,r19,r2
   122d8:	1880ee26 	beq	r3,r2,12694 <_realloc_r+0x490>
   122dc:	81bfff04 	addi	r6,r16,-4
   122e0:	00800904 	movi	r2,36
   122e4:	1180b836 	bltu	r2,r6,125c8 <_realloc_r+0x3c4>
   122e8:	00c004c4 	movi	r3,19
   122ec:	19809636 	bltu	r3,r6,12548 <_realloc_r+0x344>
   122f0:	9005883a 	mov	r2,r18
   122f4:	a807883a 	mov	r3,r21
   122f8:	19000017 	ldw	r4,0(r3)
   122fc:	11000015 	stw	r4,0(r2)
   12300:	19000117 	ldw	r4,4(r3)
   12304:	11000115 	stw	r4,4(r2)
   12308:	18c00217 	ldw	r3,8(r3)
   1230c:	10c00215 	stw	r3,8(r2)
   12310:	a80b883a 	mov	r5,r21
   12314:	a009883a 	mov	r4,r20
   12318:	0012fd00 	call	12fd0 <_free_r>
   1231c:	a009883a 	mov	r4,r20
   12320:	0013e4c0 	call	13e4c <__malloc_unlock>
   12324:	9005883a 	mov	r2,r18
   12328:	00001206 	br	12374 <_realloc_r+0x170>
   1232c:	00c00404 	movi	r3,16
   12330:	1823883a 	mov	r17,r3
   12334:	003fce06 	br	12270 <_gp+0xffff29f0>
   12338:	a825883a 	mov	r18,r21
   1233c:	8445c83a 	sub	r2,r16,r17
   12340:	00c003c4 	movi	r3,15
   12344:	18802636 	bltu	r3,r2,123e0 <_realloc_r+0x1dc>
   12348:	99800117 	ldw	r6,4(r19)
   1234c:	9c07883a 	add	r3,r19,r16
   12350:	3180004c 	andi	r6,r6,1
   12354:	3420b03a 	or	r16,r6,r16
   12358:	9c000115 	stw	r16,4(r19)
   1235c:	18800117 	ldw	r2,4(r3)
   12360:	10800054 	ori	r2,r2,1
   12364:	18800115 	stw	r2,4(r3)
   12368:	a009883a 	mov	r4,r20
   1236c:	0013e4c0 	call	13e4c <__malloc_unlock>
   12370:	9005883a 	mov	r2,r18
   12374:	dfc00917 	ldw	ra,36(sp)
   12378:	df000817 	ldw	fp,32(sp)
   1237c:	ddc00717 	ldw	r23,28(sp)
   12380:	dd800617 	ldw	r22,24(sp)
   12384:	dd400517 	ldw	r21,20(sp)
   12388:	dd000417 	ldw	r20,16(sp)
   1238c:	dcc00317 	ldw	r19,12(sp)
   12390:	dc800217 	ldw	r18,8(sp)
   12394:	dc400117 	ldw	r17,4(sp)
   12398:	dc000017 	ldw	r16,0(sp)
   1239c:	dec00a04 	addi	sp,sp,40
   123a0:	f800283a 	ret
   123a4:	017fff04 	movi	r5,-4
   123a8:	414a703a 	and	r5,r8,r5
   123ac:	814d883a 	add	r6,r16,r5
   123b0:	30c01f16 	blt	r6,r3,12430 <_realloc_r+0x22c>
   123b4:	20800317 	ldw	r2,12(r4)
   123b8:	20c00217 	ldw	r3,8(r4)
   123bc:	a825883a 	mov	r18,r21
   123c0:	3021883a 	mov	r16,r6
   123c4:	18800315 	stw	r2,12(r3)
   123c8:	10c00215 	stw	r3,8(r2)
   123cc:	003fdb06 	br	1233c <_gp+0xffff2abc>
   123d0:	00800304 	movi	r2,12
   123d4:	a0800015 	stw	r2,0(r20)
   123d8:	0005883a 	mov	r2,zero
   123dc:	003fe506 	br	12374 <_gp+0xffff2af4>
   123e0:	98c00117 	ldw	r3,4(r19)
   123e4:	9c4b883a 	add	r5,r19,r17
   123e8:	11000054 	ori	r4,r2,1
   123ec:	18c0004c 	andi	r3,r3,1
   123f0:	1c62b03a 	or	r17,r3,r17
   123f4:	9c400115 	stw	r17,4(r19)
   123f8:	29000115 	stw	r4,4(r5)
   123fc:	2885883a 	add	r2,r5,r2
   12400:	10c00117 	ldw	r3,4(r2)
   12404:	29400204 	addi	r5,r5,8
   12408:	a009883a 	mov	r4,r20
   1240c:	18c00054 	ori	r3,r3,1
   12410:	10c00115 	stw	r3,4(r2)
   12414:	0012fd00 	call	12fd0 <_free_r>
   12418:	003fd306 	br	12368 <_gp+0xffff2ae8>
   1241c:	017fff04 	movi	r5,-4
   12420:	414a703a 	and	r5,r8,r5
   12424:	89800404 	addi	r6,r17,16
   12428:	8151883a 	add	r8,r16,r5
   1242c:	4180590e 	bge	r8,r6,12594 <_realloc_r+0x390>
   12430:	1080004c 	andi	r2,r2,1
   12434:	103f9e1e 	bne	r2,zero,122b0 <_gp+0xffff2a30>
   12438:	adbffe17 	ldw	r22,-8(r21)
   1243c:	00bfff04 	movi	r2,-4
   12440:	9dadc83a 	sub	r22,r19,r22
   12444:	b1800117 	ldw	r6,4(r22)
   12448:	3084703a 	and	r2,r6,r2
   1244c:	20002026 	beq	r4,zero,124d0 <_realloc_r+0x2cc>
   12450:	80af883a 	add	r23,r16,r2
   12454:	b96f883a 	add	r23,r23,r5
   12458:	21c05f26 	beq	r4,r7,125d8 <_realloc_r+0x3d4>
   1245c:	b8c01c16 	blt	r23,r3,124d0 <_realloc_r+0x2cc>
   12460:	20800317 	ldw	r2,12(r4)
   12464:	20c00217 	ldw	r3,8(r4)
   12468:	81bfff04 	addi	r6,r16,-4
   1246c:	01000904 	movi	r4,36
   12470:	18800315 	stw	r2,12(r3)
   12474:	10c00215 	stw	r3,8(r2)
   12478:	b0c00217 	ldw	r3,8(r22)
   1247c:	b0800317 	ldw	r2,12(r22)
   12480:	b4800204 	addi	r18,r22,8
   12484:	18800315 	stw	r2,12(r3)
   12488:	10c00215 	stw	r3,8(r2)
   1248c:	21801b36 	bltu	r4,r6,124fc <_realloc_r+0x2f8>
   12490:	008004c4 	movi	r2,19
   12494:	1180352e 	bgeu	r2,r6,1256c <_realloc_r+0x368>
   12498:	a8800017 	ldw	r2,0(r21)
   1249c:	b0800215 	stw	r2,8(r22)
   124a0:	a8800117 	ldw	r2,4(r21)
   124a4:	b0800315 	stw	r2,12(r22)
   124a8:	008006c4 	movi	r2,27
   124ac:	11807f36 	bltu	r2,r6,126ac <_realloc_r+0x4a8>
   124b0:	b0800404 	addi	r2,r22,16
   124b4:	ad400204 	addi	r21,r21,8
   124b8:	00002d06 	br	12570 <_realloc_r+0x36c>
   124bc:	adbffe17 	ldw	r22,-8(r21)
   124c0:	00bfff04 	movi	r2,-4
   124c4:	9dadc83a 	sub	r22,r19,r22
   124c8:	b1000117 	ldw	r4,4(r22)
   124cc:	2084703a 	and	r2,r4,r2
   124d0:	b03f7726 	beq	r22,zero,122b0 <_gp+0xffff2a30>
   124d4:	80af883a 	add	r23,r16,r2
   124d8:	b8ff7516 	blt	r23,r3,122b0 <_gp+0xffff2a30>
   124dc:	b0800317 	ldw	r2,12(r22)
   124e0:	b0c00217 	ldw	r3,8(r22)
   124e4:	81bfff04 	addi	r6,r16,-4
   124e8:	01000904 	movi	r4,36
   124ec:	18800315 	stw	r2,12(r3)
   124f0:	10c00215 	stw	r3,8(r2)
   124f4:	b4800204 	addi	r18,r22,8
   124f8:	21bfe52e 	bgeu	r4,r6,12490 <_gp+0xffff2c10>
   124fc:	a80b883a 	mov	r5,r21
   12500:	9009883a 	mov	r4,r18
   12504:	0011f800 	call	11f80 <memmove>
   12508:	b821883a 	mov	r16,r23
   1250c:	b027883a 	mov	r19,r22
   12510:	003f8a06 	br	1233c <_gp+0xffff2abc>
   12514:	300b883a 	mov	r5,r6
   12518:	dfc00917 	ldw	ra,36(sp)
   1251c:	df000817 	ldw	fp,32(sp)
   12520:	ddc00717 	ldw	r23,28(sp)
   12524:	dd800617 	ldw	r22,24(sp)
   12528:	dd400517 	ldw	r21,20(sp)
   1252c:	dd000417 	ldw	r20,16(sp)
   12530:	dcc00317 	ldw	r19,12(sp)
   12534:	dc800217 	ldw	r18,8(sp)
   12538:	dc400117 	ldw	r17,4(sp)
   1253c:	dc000017 	ldw	r16,0(sp)
   12540:	dec00a04 	addi	sp,sp,40
   12544:	00115481 	jmpi	11548 <_malloc_r>
   12548:	a8c00017 	ldw	r3,0(r21)
   1254c:	90c00015 	stw	r3,0(r18)
   12550:	a8c00117 	ldw	r3,4(r21)
   12554:	90c00115 	stw	r3,4(r18)
   12558:	00c006c4 	movi	r3,27
   1255c:	19804536 	bltu	r3,r6,12674 <_realloc_r+0x470>
   12560:	90800204 	addi	r2,r18,8
   12564:	a8c00204 	addi	r3,r21,8
   12568:	003f6306 	br	122f8 <_gp+0xffff2a78>
   1256c:	9005883a 	mov	r2,r18
   12570:	a8c00017 	ldw	r3,0(r21)
   12574:	b821883a 	mov	r16,r23
   12578:	b027883a 	mov	r19,r22
   1257c:	10c00015 	stw	r3,0(r2)
   12580:	a8c00117 	ldw	r3,4(r21)
   12584:	10c00115 	stw	r3,4(r2)
   12588:	a8c00217 	ldw	r3,8(r21)
   1258c:	10c00215 	stw	r3,8(r2)
   12590:	003f6a06 	br	1233c <_gp+0xffff2abc>
   12594:	9c67883a 	add	r19,r19,r17
   12598:	4445c83a 	sub	r2,r8,r17
   1259c:	e4c00215 	stw	r19,8(fp)
   125a0:	10800054 	ori	r2,r2,1
   125a4:	98800115 	stw	r2,4(r19)
   125a8:	a8bfff17 	ldw	r2,-4(r21)
   125ac:	a009883a 	mov	r4,r20
   125b0:	1080004c 	andi	r2,r2,1
   125b4:	1462b03a 	or	r17,r2,r17
   125b8:	ac7fff15 	stw	r17,-4(r21)
   125bc:	0013e4c0 	call	13e4c <__malloc_unlock>
   125c0:	a805883a 	mov	r2,r21
   125c4:	003f6b06 	br	12374 <_gp+0xffff2af4>
   125c8:	a80b883a 	mov	r5,r21
   125cc:	9009883a 	mov	r4,r18
   125d0:	0011f800 	call	11f80 <memmove>
   125d4:	003f4e06 	br	12310 <_gp+0xffff2a90>
   125d8:	89000404 	addi	r4,r17,16
   125dc:	b93fbc16 	blt	r23,r4,124d0 <_gp+0xffff2c50>
   125e0:	b0800317 	ldw	r2,12(r22)
   125e4:	b0c00217 	ldw	r3,8(r22)
   125e8:	81bfff04 	addi	r6,r16,-4
   125ec:	01000904 	movi	r4,36
   125f0:	18800315 	stw	r2,12(r3)
   125f4:	10c00215 	stw	r3,8(r2)
   125f8:	b4800204 	addi	r18,r22,8
   125fc:	21804336 	bltu	r4,r6,1270c <_realloc_r+0x508>
   12600:	008004c4 	movi	r2,19
   12604:	11803f2e 	bgeu	r2,r6,12704 <_realloc_r+0x500>
   12608:	a8800017 	ldw	r2,0(r21)
   1260c:	b0800215 	stw	r2,8(r22)
   12610:	a8800117 	ldw	r2,4(r21)
   12614:	b0800315 	stw	r2,12(r22)
   12618:	008006c4 	movi	r2,27
   1261c:	11803f36 	bltu	r2,r6,1271c <_realloc_r+0x518>
   12620:	b0800404 	addi	r2,r22,16
   12624:	ad400204 	addi	r21,r21,8
   12628:	a8c00017 	ldw	r3,0(r21)
   1262c:	10c00015 	stw	r3,0(r2)
   12630:	a8c00117 	ldw	r3,4(r21)
   12634:	10c00115 	stw	r3,4(r2)
   12638:	a8c00217 	ldw	r3,8(r21)
   1263c:	10c00215 	stw	r3,8(r2)
   12640:	b447883a 	add	r3,r22,r17
   12644:	bc45c83a 	sub	r2,r23,r17
   12648:	e0c00215 	stw	r3,8(fp)
   1264c:	10800054 	ori	r2,r2,1
   12650:	18800115 	stw	r2,4(r3)
   12654:	b0800117 	ldw	r2,4(r22)
   12658:	a009883a 	mov	r4,r20
   1265c:	1080004c 	andi	r2,r2,1
   12660:	1462b03a 	or	r17,r2,r17
   12664:	b4400115 	stw	r17,4(r22)
   12668:	0013e4c0 	call	13e4c <__malloc_unlock>
   1266c:	9005883a 	mov	r2,r18
   12670:	003f4006 	br	12374 <_gp+0xffff2af4>
   12674:	a8c00217 	ldw	r3,8(r21)
   12678:	90c00215 	stw	r3,8(r18)
   1267c:	a8c00317 	ldw	r3,12(r21)
   12680:	90c00315 	stw	r3,12(r18)
   12684:	30801126 	beq	r6,r2,126cc <_realloc_r+0x4c8>
   12688:	90800404 	addi	r2,r18,16
   1268c:	a8c00404 	addi	r3,r21,16
   12690:	003f1906 	br	122f8 <_gp+0xffff2a78>
   12694:	90ffff17 	ldw	r3,-4(r18)
   12698:	00bfff04 	movi	r2,-4
   1269c:	a825883a 	mov	r18,r21
   126a0:	1884703a 	and	r2,r3,r2
   126a4:	80a1883a 	add	r16,r16,r2
   126a8:	003f2406 	br	1233c <_gp+0xffff2abc>
   126ac:	a8800217 	ldw	r2,8(r21)
   126b0:	b0800415 	stw	r2,16(r22)
   126b4:	a8800317 	ldw	r2,12(r21)
   126b8:	b0800515 	stw	r2,20(r22)
   126bc:	31000a26 	beq	r6,r4,126e8 <_realloc_r+0x4e4>
   126c0:	b0800604 	addi	r2,r22,24
   126c4:	ad400404 	addi	r21,r21,16
   126c8:	003fa906 	br	12570 <_gp+0xffff2cf0>
   126cc:	a9000417 	ldw	r4,16(r21)
   126d0:	90800604 	addi	r2,r18,24
   126d4:	a8c00604 	addi	r3,r21,24
   126d8:	91000415 	stw	r4,16(r18)
   126dc:	a9000517 	ldw	r4,20(r21)
   126e0:	91000515 	stw	r4,20(r18)
   126e4:	003f0406 	br	122f8 <_gp+0xffff2a78>
   126e8:	a8c00417 	ldw	r3,16(r21)
   126ec:	ad400604 	addi	r21,r21,24
   126f0:	b0800804 	addi	r2,r22,32
   126f4:	b0c00615 	stw	r3,24(r22)
   126f8:	a8ffff17 	ldw	r3,-4(r21)
   126fc:	b0c00715 	stw	r3,28(r22)
   12700:	003f9b06 	br	12570 <_gp+0xffff2cf0>
   12704:	9005883a 	mov	r2,r18
   12708:	003fc706 	br	12628 <_gp+0xffff2da8>
   1270c:	a80b883a 	mov	r5,r21
   12710:	9009883a 	mov	r4,r18
   12714:	0011f800 	call	11f80 <memmove>
   12718:	003fc906 	br	12640 <_gp+0xffff2dc0>
   1271c:	a8800217 	ldw	r2,8(r21)
   12720:	b0800415 	stw	r2,16(r22)
   12724:	a8800317 	ldw	r2,12(r21)
   12728:	b0800515 	stw	r2,20(r22)
   1272c:	31000726 	beq	r6,r4,1274c <_realloc_r+0x548>
   12730:	b0800604 	addi	r2,r22,24
   12734:	ad400404 	addi	r21,r21,16
   12738:	003fbb06 	br	12628 <_gp+0xffff2da8>
   1273c:	a009883a 	mov	r4,r20
   12740:	0013e4c0 	call	13e4c <__malloc_unlock>
   12744:	0005883a 	mov	r2,zero
   12748:	003f0a06 	br	12374 <_gp+0xffff2af4>
   1274c:	a8c00417 	ldw	r3,16(r21)
   12750:	ad400604 	addi	r21,r21,24
   12754:	b0800804 	addi	r2,r22,32
   12758:	b0c00615 	stw	r3,24(r22)
   1275c:	a8ffff17 	ldw	r3,-4(r21)
   12760:	b0c00715 	stw	r3,28(r22)
   12764:	003fb006 	br	12628 <_gp+0xffff2da8>

00012768 <_sbrk_r>:
   12768:	defffd04 	addi	sp,sp,-12
   1276c:	dc000015 	stw	r16,0(sp)
   12770:	040000b4 	movhi	r16,2
   12774:	dc400115 	stw	r17,4(sp)
   12778:	8424da04 	addi	r16,r16,-27800
   1277c:	2023883a 	mov	r17,r4
   12780:	2809883a 	mov	r4,r5
   12784:	dfc00215 	stw	ra,8(sp)
   12788:	80000015 	stw	zero,0(r16)
   1278c:	001400c0 	call	1400c <sbrk>
   12790:	00ffffc4 	movi	r3,-1
   12794:	10c00526 	beq	r2,r3,127ac <_sbrk_r+0x44>
   12798:	dfc00217 	ldw	ra,8(sp)
   1279c:	dc400117 	ldw	r17,4(sp)
   127a0:	dc000017 	ldw	r16,0(sp)
   127a4:	dec00304 	addi	sp,sp,12
   127a8:	f800283a 	ret
   127ac:	80c00017 	ldw	r3,0(r16)
   127b0:	183ff926 	beq	r3,zero,12798 <_gp+0xffff2f18>
   127b4:	88c00015 	stw	r3,0(r17)
   127b8:	003ff706 	br	12798 <_gp+0xffff2f18>

000127bc <__sread>:
   127bc:	defffe04 	addi	sp,sp,-8
   127c0:	dc000015 	stw	r16,0(sp)
   127c4:	2821883a 	mov	r16,r5
   127c8:	2940038f 	ldh	r5,14(r5)
   127cc:	dfc00115 	stw	ra,4(sp)
   127d0:	00134fc0 	call	134fc <_read_r>
   127d4:	10000716 	blt	r2,zero,127f4 <__sread+0x38>
   127d8:	80c01417 	ldw	r3,80(r16)
   127dc:	1887883a 	add	r3,r3,r2
   127e0:	80c01415 	stw	r3,80(r16)
   127e4:	dfc00117 	ldw	ra,4(sp)
   127e8:	dc000017 	ldw	r16,0(sp)
   127ec:	dec00204 	addi	sp,sp,8
   127f0:	f800283a 	ret
   127f4:	80c0030b 	ldhu	r3,12(r16)
   127f8:	18fbffcc 	andi	r3,r3,61439
   127fc:	80c0030d 	sth	r3,12(r16)
   12800:	dfc00117 	ldw	ra,4(sp)
   12804:	dc000017 	ldw	r16,0(sp)
   12808:	dec00204 	addi	sp,sp,8
   1280c:	f800283a 	ret

00012810 <__seofread>:
   12810:	0005883a 	mov	r2,zero
   12814:	f800283a 	ret

00012818 <__swrite>:
   12818:	2880030b 	ldhu	r2,12(r5)
   1281c:	defffb04 	addi	sp,sp,-20
   12820:	dcc00315 	stw	r19,12(sp)
   12824:	dc800215 	stw	r18,8(sp)
   12828:	dc400115 	stw	r17,4(sp)
   1282c:	dc000015 	stw	r16,0(sp)
   12830:	dfc00415 	stw	ra,16(sp)
   12834:	10c0400c 	andi	r3,r2,256
   12838:	2821883a 	mov	r16,r5
   1283c:	2023883a 	mov	r17,r4
   12840:	3025883a 	mov	r18,r6
   12844:	3827883a 	mov	r19,r7
   12848:	18000526 	beq	r3,zero,12860 <__swrite+0x48>
   1284c:	2940038f 	ldh	r5,14(r5)
   12850:	01c00084 	movi	r7,2
   12854:	000d883a 	mov	r6,zero
   12858:	00132e00 	call	132e0 <_lseek_r>
   1285c:	8080030b 	ldhu	r2,12(r16)
   12860:	8140038f 	ldh	r5,14(r16)
   12864:	10bbffcc 	andi	r2,r2,61439
   12868:	980f883a 	mov	r7,r19
   1286c:	900d883a 	mov	r6,r18
   12870:	8809883a 	mov	r4,r17
   12874:	8080030d 	sth	r2,12(r16)
   12878:	dfc00417 	ldw	ra,16(sp)
   1287c:	dcc00317 	ldw	r19,12(sp)
   12880:	dc800217 	ldw	r18,8(sp)
   12884:	dc400117 	ldw	r17,4(sp)
   12888:	dc000017 	ldw	r16,0(sp)
   1288c:	dec00504 	addi	sp,sp,20
   12890:	00128f81 	jmpi	128f8 <_write_r>

00012894 <__sseek>:
   12894:	defffe04 	addi	sp,sp,-8
   12898:	dc000015 	stw	r16,0(sp)
   1289c:	2821883a 	mov	r16,r5
   128a0:	2940038f 	ldh	r5,14(r5)
   128a4:	dfc00115 	stw	ra,4(sp)
   128a8:	00132e00 	call	132e0 <_lseek_r>
   128ac:	00ffffc4 	movi	r3,-1
   128b0:	10c00826 	beq	r2,r3,128d4 <__sseek+0x40>
   128b4:	80c0030b 	ldhu	r3,12(r16)
   128b8:	80801415 	stw	r2,80(r16)
   128bc:	18c40014 	ori	r3,r3,4096
   128c0:	80c0030d 	sth	r3,12(r16)
   128c4:	dfc00117 	ldw	ra,4(sp)
   128c8:	dc000017 	ldw	r16,0(sp)
   128cc:	dec00204 	addi	sp,sp,8
   128d0:	f800283a 	ret
   128d4:	80c0030b 	ldhu	r3,12(r16)
   128d8:	18fbffcc 	andi	r3,r3,61439
   128dc:	80c0030d 	sth	r3,12(r16)
   128e0:	dfc00117 	ldw	ra,4(sp)
   128e4:	dc000017 	ldw	r16,0(sp)
   128e8:	dec00204 	addi	sp,sp,8
   128ec:	f800283a 	ret

000128f0 <__sclose>:
   128f0:	2940038f 	ldh	r5,14(r5)
   128f4:	0012aac1 	jmpi	12aac <_close_r>

000128f8 <_write_r>:
   128f8:	defffd04 	addi	sp,sp,-12
   128fc:	2805883a 	mov	r2,r5
   12900:	dc000015 	stw	r16,0(sp)
   12904:	040000b4 	movhi	r16,2
   12908:	dc400115 	stw	r17,4(sp)
   1290c:	300b883a 	mov	r5,r6
   12910:	8424da04 	addi	r16,r16,-27800
   12914:	2023883a 	mov	r17,r4
   12918:	380d883a 	mov	r6,r7
   1291c:	1009883a 	mov	r4,r2
   12920:	dfc00215 	stw	ra,8(sp)
   12924:	80000015 	stw	zero,0(r16)
   12928:	00140f80 	call	140f8 <write>
   1292c:	00ffffc4 	movi	r3,-1
   12930:	10c00526 	beq	r2,r3,12948 <_write_r+0x50>
   12934:	dfc00217 	ldw	ra,8(sp)
   12938:	dc400117 	ldw	r17,4(sp)
   1293c:	dc000017 	ldw	r16,0(sp)
   12940:	dec00304 	addi	sp,sp,12
   12944:	f800283a 	ret
   12948:	80c00017 	ldw	r3,0(r16)
   1294c:	183ff926 	beq	r3,zero,12934 <_gp+0xffff30b4>
   12950:	88c00015 	stw	r3,0(r17)
   12954:	003ff706 	br	12934 <_gp+0xffff30b4>

00012958 <__swsetup_r>:
   12958:	00800074 	movhi	r2,1
   1295c:	defffd04 	addi	sp,sp,-12
   12960:	109e2204 	addi	r2,r2,30856
   12964:	dc400115 	stw	r17,4(sp)
   12968:	2023883a 	mov	r17,r4
   1296c:	11000017 	ldw	r4,0(r2)
   12970:	dc000015 	stw	r16,0(sp)
   12974:	dfc00215 	stw	ra,8(sp)
   12978:	2821883a 	mov	r16,r5
   1297c:	20000226 	beq	r4,zero,12988 <__swsetup_r+0x30>
   12980:	20800e17 	ldw	r2,56(r4)
   12984:	10003126 	beq	r2,zero,12a4c <__swsetup_r+0xf4>
   12988:	8080030b 	ldhu	r2,12(r16)
   1298c:	10c0020c 	andi	r3,r2,8
   12990:	1009883a 	mov	r4,r2
   12994:	18000f26 	beq	r3,zero,129d4 <__swsetup_r+0x7c>
   12998:	80c00417 	ldw	r3,16(r16)
   1299c:	18001526 	beq	r3,zero,129f4 <__swsetup_r+0x9c>
   129a0:	1100004c 	andi	r4,r2,1
   129a4:	20001c1e 	bne	r4,zero,12a18 <__swsetup_r+0xc0>
   129a8:	1080008c 	andi	r2,r2,2
   129ac:	1000291e 	bne	r2,zero,12a54 <__swsetup_r+0xfc>
   129b0:	80800517 	ldw	r2,20(r16)
   129b4:	80800215 	stw	r2,8(r16)
   129b8:	18001c26 	beq	r3,zero,12a2c <__swsetup_r+0xd4>
   129bc:	0005883a 	mov	r2,zero
   129c0:	dfc00217 	ldw	ra,8(sp)
   129c4:	dc400117 	ldw	r17,4(sp)
   129c8:	dc000017 	ldw	r16,0(sp)
   129cc:	dec00304 	addi	sp,sp,12
   129d0:	f800283a 	ret
   129d4:	2080040c 	andi	r2,r4,16
   129d8:	10002e26 	beq	r2,zero,12a94 <__swsetup_r+0x13c>
   129dc:	2080010c 	andi	r2,r4,4
   129e0:	10001e1e 	bne	r2,zero,12a5c <__swsetup_r+0x104>
   129e4:	80c00417 	ldw	r3,16(r16)
   129e8:	20800214 	ori	r2,r4,8
   129ec:	8080030d 	sth	r2,12(r16)
   129f0:	183feb1e 	bne	r3,zero,129a0 <_gp+0xffff3120>
   129f4:	1100a00c 	andi	r4,r2,640
   129f8:	01408004 	movi	r5,512
   129fc:	217fe826 	beq	r4,r5,129a0 <_gp+0xffff3120>
   12a00:	800b883a 	mov	r5,r16
   12a04:	8809883a 	mov	r4,r17
   12a08:	00133400 	call	13340 <__smakebuf_r>
   12a0c:	8080030b 	ldhu	r2,12(r16)
   12a10:	80c00417 	ldw	r3,16(r16)
   12a14:	003fe206 	br	129a0 <_gp+0xffff3120>
   12a18:	80800517 	ldw	r2,20(r16)
   12a1c:	80000215 	stw	zero,8(r16)
   12a20:	0085c83a 	sub	r2,zero,r2
   12a24:	80800615 	stw	r2,24(r16)
   12a28:	183fe41e 	bne	r3,zero,129bc <_gp+0xffff313c>
   12a2c:	80c0030b 	ldhu	r3,12(r16)
   12a30:	0005883a 	mov	r2,zero
   12a34:	1900200c 	andi	r4,r3,128
   12a38:	203fe126 	beq	r4,zero,129c0 <_gp+0xffff3140>
   12a3c:	18c01014 	ori	r3,r3,64
   12a40:	80c0030d 	sth	r3,12(r16)
   12a44:	00bfffc4 	movi	r2,-1
   12a48:	003fdd06 	br	129c0 <_gp+0xffff3140>
   12a4c:	0010eb40 	call	10eb4 <__sinit>
   12a50:	003fcd06 	br	12988 <_gp+0xffff3108>
   12a54:	0005883a 	mov	r2,zero
   12a58:	003fd606 	br	129b4 <_gp+0xffff3134>
   12a5c:	81400c17 	ldw	r5,48(r16)
   12a60:	28000626 	beq	r5,zero,12a7c <__swsetup_r+0x124>
   12a64:	80801004 	addi	r2,r16,64
   12a68:	28800326 	beq	r5,r2,12a78 <__swsetup_r+0x120>
   12a6c:	8809883a 	mov	r4,r17
   12a70:	0012fd00 	call	12fd0 <_free_r>
   12a74:	8100030b 	ldhu	r4,12(r16)
   12a78:	80000c15 	stw	zero,48(r16)
   12a7c:	80c00417 	ldw	r3,16(r16)
   12a80:	00bff6c4 	movi	r2,-37
   12a84:	1108703a 	and	r4,r2,r4
   12a88:	80000115 	stw	zero,4(r16)
   12a8c:	80c00015 	stw	r3,0(r16)
   12a90:	003fd506 	br	129e8 <_gp+0xffff3168>
   12a94:	00800244 	movi	r2,9
   12a98:	88800015 	stw	r2,0(r17)
   12a9c:	20801014 	ori	r2,r4,64
   12aa0:	8080030d 	sth	r2,12(r16)
   12aa4:	00bfffc4 	movi	r2,-1
   12aa8:	003fc506 	br	129c0 <_gp+0xffff3140>

00012aac <_close_r>:
   12aac:	defffd04 	addi	sp,sp,-12
   12ab0:	dc000015 	stw	r16,0(sp)
   12ab4:	040000b4 	movhi	r16,2
   12ab8:	dc400115 	stw	r17,4(sp)
   12abc:	8424da04 	addi	r16,r16,-27800
   12ac0:	2023883a 	mov	r17,r4
   12ac4:	2809883a 	mov	r4,r5
   12ac8:	dfc00215 	stw	ra,8(sp)
   12acc:	80000015 	stw	zero,0(r16)
   12ad0:	00136480 	call	13648 <close>
   12ad4:	00ffffc4 	movi	r3,-1
   12ad8:	10c00526 	beq	r2,r3,12af0 <_close_r+0x44>
   12adc:	dfc00217 	ldw	ra,8(sp)
   12ae0:	dc400117 	ldw	r17,4(sp)
   12ae4:	dc000017 	ldw	r16,0(sp)
   12ae8:	dec00304 	addi	sp,sp,12
   12aec:	f800283a 	ret
   12af0:	80c00017 	ldw	r3,0(r16)
   12af4:	183ff926 	beq	r3,zero,12adc <_gp+0xffff325c>
   12af8:	88c00015 	stw	r3,0(r17)
   12afc:	003ff706 	br	12adc <_gp+0xffff325c>

00012b00 <_fclose_r>:
   12b00:	28003926 	beq	r5,zero,12be8 <_fclose_r+0xe8>
   12b04:	defffc04 	addi	sp,sp,-16
   12b08:	dc400115 	stw	r17,4(sp)
   12b0c:	dc000015 	stw	r16,0(sp)
   12b10:	dfc00315 	stw	ra,12(sp)
   12b14:	dc800215 	stw	r18,8(sp)
   12b18:	2023883a 	mov	r17,r4
   12b1c:	2821883a 	mov	r16,r5
   12b20:	20000226 	beq	r4,zero,12b2c <_fclose_r+0x2c>
   12b24:	20800e17 	ldw	r2,56(r4)
   12b28:	10002726 	beq	r2,zero,12bc8 <_fclose_r+0xc8>
   12b2c:	8080030f 	ldh	r2,12(r16)
   12b30:	1000071e 	bne	r2,zero,12b50 <_fclose_r+0x50>
   12b34:	0005883a 	mov	r2,zero
   12b38:	dfc00317 	ldw	ra,12(sp)
   12b3c:	dc800217 	ldw	r18,8(sp)
   12b40:	dc400117 	ldw	r17,4(sp)
   12b44:	dc000017 	ldw	r16,0(sp)
   12b48:	dec00404 	addi	sp,sp,16
   12b4c:	f800283a 	ret
   12b50:	800b883a 	mov	r5,r16
   12b54:	8809883a 	mov	r4,r17
   12b58:	0012c040 	call	12c04 <__sflush_r>
   12b5c:	1025883a 	mov	r18,r2
   12b60:	80800b17 	ldw	r2,44(r16)
   12b64:	10000426 	beq	r2,zero,12b78 <_fclose_r+0x78>
   12b68:	81400717 	ldw	r5,28(r16)
   12b6c:	8809883a 	mov	r4,r17
   12b70:	103ee83a 	callr	r2
   12b74:	10001616 	blt	r2,zero,12bd0 <_fclose_r+0xd0>
   12b78:	8080030b 	ldhu	r2,12(r16)
   12b7c:	1080200c 	andi	r2,r2,128
   12b80:	1000151e 	bne	r2,zero,12bd8 <_fclose_r+0xd8>
   12b84:	81400c17 	ldw	r5,48(r16)
   12b88:	28000526 	beq	r5,zero,12ba0 <_fclose_r+0xa0>
   12b8c:	80801004 	addi	r2,r16,64
   12b90:	28800226 	beq	r5,r2,12b9c <_fclose_r+0x9c>
   12b94:	8809883a 	mov	r4,r17
   12b98:	0012fd00 	call	12fd0 <_free_r>
   12b9c:	80000c15 	stw	zero,48(r16)
   12ba0:	81401117 	ldw	r5,68(r16)
   12ba4:	28000326 	beq	r5,zero,12bb4 <_fclose_r+0xb4>
   12ba8:	8809883a 	mov	r4,r17
   12bac:	0012fd00 	call	12fd0 <_free_r>
   12bb0:	80001115 	stw	zero,68(r16)
   12bb4:	0010ec40 	call	10ec4 <__sfp_lock_acquire>
   12bb8:	8000030d 	sth	zero,12(r16)
   12bbc:	0010ec80 	call	10ec8 <__sfp_lock_release>
   12bc0:	9005883a 	mov	r2,r18
   12bc4:	003fdc06 	br	12b38 <_gp+0xffff32b8>
   12bc8:	0010eb40 	call	10eb4 <__sinit>
   12bcc:	003fd706 	br	12b2c <_gp+0xffff32ac>
   12bd0:	04bfffc4 	movi	r18,-1
   12bd4:	003fe806 	br	12b78 <_gp+0xffff32f8>
   12bd8:	81400417 	ldw	r5,16(r16)
   12bdc:	8809883a 	mov	r4,r17
   12be0:	0012fd00 	call	12fd0 <_free_r>
   12be4:	003fe706 	br	12b84 <_gp+0xffff3304>
   12be8:	0005883a 	mov	r2,zero
   12bec:	f800283a 	ret

00012bf0 <fclose>:
   12bf0:	00800074 	movhi	r2,1
   12bf4:	109e2204 	addi	r2,r2,30856
   12bf8:	200b883a 	mov	r5,r4
   12bfc:	11000017 	ldw	r4,0(r2)
   12c00:	0012b001 	jmpi	12b00 <_fclose_r>

00012c04 <__sflush_r>:
   12c04:	2880030b 	ldhu	r2,12(r5)
   12c08:	defffb04 	addi	sp,sp,-20
   12c0c:	dcc00315 	stw	r19,12(sp)
   12c10:	dc400115 	stw	r17,4(sp)
   12c14:	dfc00415 	stw	ra,16(sp)
   12c18:	dc800215 	stw	r18,8(sp)
   12c1c:	dc000015 	stw	r16,0(sp)
   12c20:	10c0020c 	andi	r3,r2,8
   12c24:	2823883a 	mov	r17,r5
   12c28:	2027883a 	mov	r19,r4
   12c2c:	1800311e 	bne	r3,zero,12cf4 <__sflush_r+0xf0>
   12c30:	28c00117 	ldw	r3,4(r5)
   12c34:	10820014 	ori	r2,r2,2048
   12c38:	2880030d 	sth	r2,12(r5)
   12c3c:	00c04b0e 	bge	zero,r3,12d6c <__sflush_r+0x168>
   12c40:	8a000a17 	ldw	r8,40(r17)
   12c44:	40002326 	beq	r8,zero,12cd4 <__sflush_r+0xd0>
   12c48:	9c000017 	ldw	r16,0(r19)
   12c4c:	10c4000c 	andi	r3,r2,4096
   12c50:	98000015 	stw	zero,0(r19)
   12c54:	18004826 	beq	r3,zero,12d78 <__sflush_r+0x174>
   12c58:	89801417 	ldw	r6,80(r17)
   12c5c:	10c0010c 	andi	r3,r2,4
   12c60:	18000626 	beq	r3,zero,12c7c <__sflush_r+0x78>
   12c64:	88c00117 	ldw	r3,4(r17)
   12c68:	88800c17 	ldw	r2,48(r17)
   12c6c:	30cdc83a 	sub	r6,r6,r3
   12c70:	10000226 	beq	r2,zero,12c7c <__sflush_r+0x78>
   12c74:	88800f17 	ldw	r2,60(r17)
   12c78:	308dc83a 	sub	r6,r6,r2
   12c7c:	89400717 	ldw	r5,28(r17)
   12c80:	000f883a 	mov	r7,zero
   12c84:	9809883a 	mov	r4,r19
   12c88:	403ee83a 	callr	r8
   12c8c:	00ffffc4 	movi	r3,-1
   12c90:	10c04426 	beq	r2,r3,12da4 <__sflush_r+0x1a0>
   12c94:	88c0030b 	ldhu	r3,12(r17)
   12c98:	89000417 	ldw	r4,16(r17)
   12c9c:	88000115 	stw	zero,4(r17)
   12ca0:	197dffcc 	andi	r5,r3,63487
   12ca4:	8940030d 	sth	r5,12(r17)
   12ca8:	89000015 	stw	r4,0(r17)
   12cac:	18c4000c 	andi	r3,r3,4096
   12cb0:	18002c1e 	bne	r3,zero,12d64 <__sflush_r+0x160>
   12cb4:	89400c17 	ldw	r5,48(r17)
   12cb8:	9c000015 	stw	r16,0(r19)
   12cbc:	28000526 	beq	r5,zero,12cd4 <__sflush_r+0xd0>
   12cc0:	88801004 	addi	r2,r17,64
   12cc4:	28800226 	beq	r5,r2,12cd0 <__sflush_r+0xcc>
   12cc8:	9809883a 	mov	r4,r19
   12ccc:	0012fd00 	call	12fd0 <_free_r>
   12cd0:	88000c15 	stw	zero,48(r17)
   12cd4:	0005883a 	mov	r2,zero
   12cd8:	dfc00417 	ldw	ra,16(sp)
   12cdc:	dcc00317 	ldw	r19,12(sp)
   12ce0:	dc800217 	ldw	r18,8(sp)
   12ce4:	dc400117 	ldw	r17,4(sp)
   12ce8:	dc000017 	ldw	r16,0(sp)
   12cec:	dec00504 	addi	sp,sp,20
   12cf0:	f800283a 	ret
   12cf4:	2c800417 	ldw	r18,16(r5)
   12cf8:	903ff626 	beq	r18,zero,12cd4 <_gp+0xffff3454>
   12cfc:	2c000017 	ldw	r16,0(r5)
   12d00:	108000cc 	andi	r2,r2,3
   12d04:	2c800015 	stw	r18,0(r5)
   12d08:	84a1c83a 	sub	r16,r16,r18
   12d0c:	1000131e 	bne	r2,zero,12d5c <__sflush_r+0x158>
   12d10:	28800517 	ldw	r2,20(r5)
   12d14:	88800215 	stw	r2,8(r17)
   12d18:	04000316 	blt	zero,r16,12d28 <__sflush_r+0x124>
   12d1c:	003fed06 	br	12cd4 <_gp+0xffff3454>
   12d20:	90a5883a 	add	r18,r18,r2
   12d24:	043feb0e 	bge	zero,r16,12cd4 <_gp+0xffff3454>
   12d28:	88800917 	ldw	r2,36(r17)
   12d2c:	89400717 	ldw	r5,28(r17)
   12d30:	800f883a 	mov	r7,r16
   12d34:	900d883a 	mov	r6,r18
   12d38:	9809883a 	mov	r4,r19
   12d3c:	103ee83a 	callr	r2
   12d40:	80a1c83a 	sub	r16,r16,r2
   12d44:	00bff616 	blt	zero,r2,12d20 <_gp+0xffff34a0>
   12d48:	88c0030b 	ldhu	r3,12(r17)
   12d4c:	00bfffc4 	movi	r2,-1
   12d50:	18c01014 	ori	r3,r3,64
   12d54:	88c0030d 	sth	r3,12(r17)
   12d58:	003fdf06 	br	12cd8 <_gp+0xffff3458>
   12d5c:	0005883a 	mov	r2,zero
   12d60:	003fec06 	br	12d14 <_gp+0xffff3494>
   12d64:	88801415 	stw	r2,80(r17)
   12d68:	003fd206 	br	12cb4 <_gp+0xffff3434>
   12d6c:	28c00f17 	ldw	r3,60(r5)
   12d70:	00ffb316 	blt	zero,r3,12c40 <_gp+0xffff33c0>
   12d74:	003fd706 	br	12cd4 <_gp+0xffff3454>
   12d78:	89400717 	ldw	r5,28(r17)
   12d7c:	000d883a 	mov	r6,zero
   12d80:	01c00044 	movi	r7,1
   12d84:	9809883a 	mov	r4,r19
   12d88:	403ee83a 	callr	r8
   12d8c:	100d883a 	mov	r6,r2
   12d90:	00bfffc4 	movi	r2,-1
   12d94:	30801426 	beq	r6,r2,12de8 <__sflush_r+0x1e4>
   12d98:	8880030b 	ldhu	r2,12(r17)
   12d9c:	8a000a17 	ldw	r8,40(r17)
   12da0:	003fae06 	br	12c5c <_gp+0xffff33dc>
   12da4:	98c00017 	ldw	r3,0(r19)
   12da8:	183fba26 	beq	r3,zero,12c94 <_gp+0xffff3414>
   12dac:	01000744 	movi	r4,29
   12db0:	19000626 	beq	r3,r4,12dcc <__sflush_r+0x1c8>
   12db4:	01000584 	movi	r4,22
   12db8:	19000426 	beq	r3,r4,12dcc <__sflush_r+0x1c8>
   12dbc:	88c0030b 	ldhu	r3,12(r17)
   12dc0:	18c01014 	ori	r3,r3,64
   12dc4:	88c0030d 	sth	r3,12(r17)
   12dc8:	003fc306 	br	12cd8 <_gp+0xffff3458>
   12dcc:	8880030b 	ldhu	r2,12(r17)
   12dd0:	88c00417 	ldw	r3,16(r17)
   12dd4:	88000115 	stw	zero,4(r17)
   12dd8:	10bdffcc 	andi	r2,r2,63487
   12ddc:	8880030d 	sth	r2,12(r17)
   12de0:	88c00015 	stw	r3,0(r17)
   12de4:	003fb306 	br	12cb4 <_gp+0xffff3434>
   12de8:	98800017 	ldw	r2,0(r19)
   12dec:	103fea26 	beq	r2,zero,12d98 <_gp+0xffff3518>
   12df0:	00c00744 	movi	r3,29
   12df4:	10c00226 	beq	r2,r3,12e00 <__sflush_r+0x1fc>
   12df8:	00c00584 	movi	r3,22
   12dfc:	10c0031e 	bne	r2,r3,12e0c <__sflush_r+0x208>
   12e00:	9c000015 	stw	r16,0(r19)
   12e04:	0005883a 	mov	r2,zero
   12e08:	003fb306 	br	12cd8 <_gp+0xffff3458>
   12e0c:	88c0030b 	ldhu	r3,12(r17)
   12e10:	3005883a 	mov	r2,r6
   12e14:	18c01014 	ori	r3,r3,64
   12e18:	88c0030d 	sth	r3,12(r17)
   12e1c:	003fae06 	br	12cd8 <_gp+0xffff3458>

00012e20 <_fflush_r>:
   12e20:	defffd04 	addi	sp,sp,-12
   12e24:	dc000115 	stw	r16,4(sp)
   12e28:	dfc00215 	stw	ra,8(sp)
   12e2c:	2021883a 	mov	r16,r4
   12e30:	20000226 	beq	r4,zero,12e3c <_fflush_r+0x1c>
   12e34:	20800e17 	ldw	r2,56(r4)
   12e38:	10000c26 	beq	r2,zero,12e6c <_fflush_r+0x4c>
   12e3c:	2880030f 	ldh	r2,12(r5)
   12e40:	1000051e 	bne	r2,zero,12e58 <_fflush_r+0x38>
   12e44:	0005883a 	mov	r2,zero
   12e48:	dfc00217 	ldw	ra,8(sp)
   12e4c:	dc000117 	ldw	r16,4(sp)
   12e50:	dec00304 	addi	sp,sp,12
   12e54:	f800283a 	ret
   12e58:	8009883a 	mov	r4,r16
   12e5c:	dfc00217 	ldw	ra,8(sp)
   12e60:	dc000117 	ldw	r16,4(sp)
   12e64:	dec00304 	addi	sp,sp,12
   12e68:	0012c041 	jmpi	12c04 <__sflush_r>
   12e6c:	d9400015 	stw	r5,0(sp)
   12e70:	0010eb40 	call	10eb4 <__sinit>
   12e74:	d9400017 	ldw	r5,0(sp)
   12e78:	003ff006 	br	12e3c <_gp+0xffff35bc>

00012e7c <fflush>:
   12e7c:	20000526 	beq	r4,zero,12e94 <fflush+0x18>
   12e80:	00800074 	movhi	r2,1
   12e84:	109e2204 	addi	r2,r2,30856
   12e88:	200b883a 	mov	r5,r4
   12e8c:	11000017 	ldw	r4,0(r2)
   12e90:	0012e201 	jmpi	12e20 <_fflush_r>
   12e94:	00800074 	movhi	r2,1
   12e98:	109e2104 	addi	r2,r2,30852
   12e9c:	11000017 	ldw	r4,0(r2)
   12ea0:	01400074 	movhi	r5,1
   12ea4:	294b8804 	addi	r5,r5,11808
   12ea8:	00114841 	jmpi	11484 <_fwalk_reent>

00012eac <_malloc_trim_r>:
   12eac:	defffb04 	addi	sp,sp,-20
   12eb0:	dcc00315 	stw	r19,12(sp)
   12eb4:	04c00074 	movhi	r19,1
   12eb8:	dc800215 	stw	r18,8(sp)
   12ebc:	dc400115 	stw	r17,4(sp)
   12ec0:	dc000015 	stw	r16,0(sp)
   12ec4:	dfc00415 	stw	ra,16(sp)
   12ec8:	2821883a 	mov	r16,r5
   12ecc:	9cd89c04 	addi	r19,r19,25200
   12ed0:	2025883a 	mov	r18,r4
   12ed4:	0013e280 	call	13e28 <__malloc_lock>
   12ed8:	98800217 	ldw	r2,8(r19)
   12edc:	14400117 	ldw	r17,4(r2)
   12ee0:	00bfff04 	movi	r2,-4
   12ee4:	88a2703a 	and	r17,r17,r2
   12ee8:	8c21c83a 	sub	r16,r17,r16
   12eec:	8403fbc4 	addi	r16,r16,4079
   12ef0:	8020d33a 	srli	r16,r16,12
   12ef4:	0083ffc4 	movi	r2,4095
   12ef8:	843fffc4 	addi	r16,r16,-1
   12efc:	8020933a 	slli	r16,r16,12
   12f00:	1400060e 	bge	r2,r16,12f1c <_malloc_trim_r+0x70>
   12f04:	000b883a 	mov	r5,zero
   12f08:	9009883a 	mov	r4,r18
   12f0c:	00127680 	call	12768 <_sbrk_r>
   12f10:	98c00217 	ldw	r3,8(r19)
   12f14:	1c47883a 	add	r3,r3,r17
   12f18:	10c00a26 	beq	r2,r3,12f44 <_malloc_trim_r+0x98>
   12f1c:	9009883a 	mov	r4,r18
   12f20:	0013e4c0 	call	13e4c <__malloc_unlock>
   12f24:	0005883a 	mov	r2,zero
   12f28:	dfc00417 	ldw	ra,16(sp)
   12f2c:	dcc00317 	ldw	r19,12(sp)
   12f30:	dc800217 	ldw	r18,8(sp)
   12f34:	dc400117 	ldw	r17,4(sp)
   12f38:	dc000017 	ldw	r16,0(sp)
   12f3c:	dec00504 	addi	sp,sp,20
   12f40:	f800283a 	ret
   12f44:	040bc83a 	sub	r5,zero,r16
   12f48:	9009883a 	mov	r4,r18
   12f4c:	00127680 	call	12768 <_sbrk_r>
   12f50:	00ffffc4 	movi	r3,-1
   12f54:	10c00d26 	beq	r2,r3,12f8c <_malloc_trim_r+0xe0>
   12f58:	00c000b4 	movhi	r3,2
   12f5c:	18e4e204 	addi	r3,r3,-27768
   12f60:	18800017 	ldw	r2,0(r3)
   12f64:	99000217 	ldw	r4,8(r19)
   12f68:	8c23c83a 	sub	r17,r17,r16
   12f6c:	8c400054 	ori	r17,r17,1
   12f70:	1421c83a 	sub	r16,r2,r16
   12f74:	24400115 	stw	r17,4(r4)
   12f78:	9009883a 	mov	r4,r18
   12f7c:	1c000015 	stw	r16,0(r3)
   12f80:	0013e4c0 	call	13e4c <__malloc_unlock>
   12f84:	00800044 	movi	r2,1
   12f88:	003fe706 	br	12f28 <_gp+0xffff36a8>
   12f8c:	000b883a 	mov	r5,zero
   12f90:	9009883a 	mov	r4,r18
   12f94:	00127680 	call	12768 <_sbrk_r>
   12f98:	99000217 	ldw	r4,8(r19)
   12f9c:	014003c4 	movi	r5,15
   12fa0:	1107c83a 	sub	r3,r2,r4
   12fa4:	28ffdd0e 	bge	r5,r3,12f1c <_gp+0xffff369c>
   12fa8:	01400074 	movhi	r5,1
   12fac:	295e2304 	addi	r5,r5,30860
   12fb0:	29400017 	ldw	r5,0(r5)
   12fb4:	18c00054 	ori	r3,r3,1
   12fb8:	20c00115 	stw	r3,4(r4)
   12fbc:	00c000b4 	movhi	r3,2
   12fc0:	1145c83a 	sub	r2,r2,r5
   12fc4:	18e4e204 	addi	r3,r3,-27768
   12fc8:	18800015 	stw	r2,0(r3)
   12fcc:	003fd306 	br	12f1c <_gp+0xffff369c>

00012fd0 <_free_r>:
   12fd0:	28004126 	beq	r5,zero,130d8 <_free_r+0x108>
   12fd4:	defffd04 	addi	sp,sp,-12
   12fd8:	dc400115 	stw	r17,4(sp)
   12fdc:	dc000015 	stw	r16,0(sp)
   12fe0:	2023883a 	mov	r17,r4
   12fe4:	2821883a 	mov	r16,r5
   12fe8:	dfc00215 	stw	ra,8(sp)
   12fec:	0013e280 	call	13e28 <__malloc_lock>
   12ff0:	81ffff17 	ldw	r7,-4(r16)
   12ff4:	00bfff84 	movi	r2,-2
   12ff8:	01000074 	movhi	r4,1
   12ffc:	81bffe04 	addi	r6,r16,-8
   13000:	3884703a 	and	r2,r7,r2
   13004:	21189c04 	addi	r4,r4,25200
   13008:	308b883a 	add	r5,r6,r2
   1300c:	2a400117 	ldw	r9,4(r5)
   13010:	22000217 	ldw	r8,8(r4)
   13014:	00ffff04 	movi	r3,-4
   13018:	48c6703a 	and	r3,r9,r3
   1301c:	2a005726 	beq	r5,r8,1317c <_free_r+0x1ac>
   13020:	28c00115 	stw	r3,4(r5)
   13024:	39c0004c 	andi	r7,r7,1
   13028:	3800091e 	bne	r7,zero,13050 <_free_r+0x80>
   1302c:	823ffe17 	ldw	r8,-8(r16)
   13030:	22400204 	addi	r9,r4,8
   13034:	320dc83a 	sub	r6,r6,r8
   13038:	31c00217 	ldw	r7,8(r6)
   1303c:	1205883a 	add	r2,r2,r8
   13040:	3a406526 	beq	r7,r9,131d8 <_free_r+0x208>
   13044:	32000317 	ldw	r8,12(r6)
   13048:	3a000315 	stw	r8,12(r7)
   1304c:	41c00215 	stw	r7,8(r8)
   13050:	28cf883a 	add	r7,r5,r3
   13054:	39c00117 	ldw	r7,4(r7)
   13058:	39c0004c 	andi	r7,r7,1
   1305c:	38003a26 	beq	r7,zero,13148 <_free_r+0x178>
   13060:	10c00054 	ori	r3,r2,1
   13064:	30c00115 	stw	r3,4(r6)
   13068:	3087883a 	add	r3,r6,r2
   1306c:	18800015 	stw	r2,0(r3)
   13070:	00c07fc4 	movi	r3,511
   13074:	18801936 	bltu	r3,r2,130dc <_free_r+0x10c>
   13078:	1004d0fa 	srli	r2,r2,3
   1307c:	01c00044 	movi	r7,1
   13080:	21400117 	ldw	r5,4(r4)
   13084:	10c00044 	addi	r3,r2,1
   13088:	18c7883a 	add	r3,r3,r3
   1308c:	1005d0ba 	srai	r2,r2,2
   13090:	18c7883a 	add	r3,r3,r3
   13094:	18c7883a 	add	r3,r3,r3
   13098:	1907883a 	add	r3,r3,r4
   1309c:	3884983a 	sll	r2,r7,r2
   130a0:	19c00017 	ldw	r7,0(r3)
   130a4:	1a3ffe04 	addi	r8,r3,-8
   130a8:	1144b03a 	or	r2,r2,r5
   130ac:	32000315 	stw	r8,12(r6)
   130b0:	31c00215 	stw	r7,8(r6)
   130b4:	20800115 	stw	r2,4(r4)
   130b8:	19800015 	stw	r6,0(r3)
   130bc:	39800315 	stw	r6,12(r7)
   130c0:	8809883a 	mov	r4,r17
   130c4:	dfc00217 	ldw	ra,8(sp)
   130c8:	dc400117 	ldw	r17,4(sp)
   130cc:	dc000017 	ldw	r16,0(sp)
   130d0:	dec00304 	addi	sp,sp,12
   130d4:	0013e4c1 	jmpi	13e4c <__malloc_unlock>
   130d8:	f800283a 	ret
   130dc:	100ad27a 	srli	r5,r2,9
   130e0:	00c00104 	movi	r3,4
   130e4:	19404a36 	bltu	r3,r5,13210 <_free_r+0x240>
   130e8:	100ad1ba 	srli	r5,r2,6
   130ec:	28c00e44 	addi	r3,r5,57
   130f0:	18c7883a 	add	r3,r3,r3
   130f4:	29400e04 	addi	r5,r5,56
   130f8:	18c7883a 	add	r3,r3,r3
   130fc:	18c7883a 	add	r3,r3,r3
   13100:	1909883a 	add	r4,r3,r4
   13104:	20c00017 	ldw	r3,0(r4)
   13108:	01c00074 	movhi	r7,1
   1310c:	213ffe04 	addi	r4,r4,-8
   13110:	39d89c04 	addi	r7,r7,25200
   13114:	20c04426 	beq	r4,r3,13228 <_free_r+0x258>
   13118:	01ffff04 	movi	r7,-4
   1311c:	19400117 	ldw	r5,4(r3)
   13120:	29ca703a 	and	r5,r5,r7
   13124:	1140022e 	bgeu	r2,r5,13130 <_free_r+0x160>
   13128:	18c00217 	ldw	r3,8(r3)
   1312c:	20fffb1e 	bne	r4,r3,1311c <_gp+0xffff389c>
   13130:	19000317 	ldw	r4,12(r3)
   13134:	31000315 	stw	r4,12(r6)
   13138:	30c00215 	stw	r3,8(r6)
   1313c:	21800215 	stw	r6,8(r4)
   13140:	19800315 	stw	r6,12(r3)
   13144:	003fde06 	br	130c0 <_gp+0xffff3840>
   13148:	29c00217 	ldw	r7,8(r5)
   1314c:	10c5883a 	add	r2,r2,r3
   13150:	00c00074 	movhi	r3,1
   13154:	18d89e04 	addi	r3,r3,25208
   13158:	38c03b26 	beq	r7,r3,13248 <_free_r+0x278>
   1315c:	2a000317 	ldw	r8,12(r5)
   13160:	11400054 	ori	r5,r2,1
   13164:	3087883a 	add	r3,r6,r2
   13168:	3a000315 	stw	r8,12(r7)
   1316c:	41c00215 	stw	r7,8(r8)
   13170:	31400115 	stw	r5,4(r6)
   13174:	18800015 	stw	r2,0(r3)
   13178:	003fbd06 	br	13070 <_gp+0xffff37f0>
   1317c:	39c0004c 	andi	r7,r7,1
   13180:	10c5883a 	add	r2,r2,r3
   13184:	3800071e 	bne	r7,zero,131a4 <_free_r+0x1d4>
   13188:	81fffe17 	ldw	r7,-8(r16)
   1318c:	31cdc83a 	sub	r6,r6,r7
   13190:	30c00317 	ldw	r3,12(r6)
   13194:	31400217 	ldw	r5,8(r6)
   13198:	11c5883a 	add	r2,r2,r7
   1319c:	28c00315 	stw	r3,12(r5)
   131a0:	19400215 	stw	r5,8(r3)
   131a4:	10c00054 	ori	r3,r2,1
   131a8:	30c00115 	stw	r3,4(r6)
   131ac:	00c00074 	movhi	r3,1
   131b0:	18de2404 	addi	r3,r3,30864
   131b4:	18c00017 	ldw	r3,0(r3)
   131b8:	21800215 	stw	r6,8(r4)
   131bc:	10ffc036 	bltu	r2,r3,130c0 <_gp+0xffff3840>
   131c0:	008000b4 	movhi	r2,2
   131c4:	10a4d904 	addi	r2,r2,-27804
   131c8:	11400017 	ldw	r5,0(r2)
   131cc:	8809883a 	mov	r4,r17
   131d0:	0012eac0 	call	12eac <_malloc_trim_r>
   131d4:	003fba06 	br	130c0 <_gp+0xffff3840>
   131d8:	28c9883a 	add	r4,r5,r3
   131dc:	21000117 	ldw	r4,4(r4)
   131e0:	2100004c 	andi	r4,r4,1
   131e4:	2000391e 	bne	r4,zero,132cc <_free_r+0x2fc>
   131e8:	29c00217 	ldw	r7,8(r5)
   131ec:	29000317 	ldw	r4,12(r5)
   131f0:	1885883a 	add	r2,r3,r2
   131f4:	10c00054 	ori	r3,r2,1
   131f8:	39000315 	stw	r4,12(r7)
   131fc:	21c00215 	stw	r7,8(r4)
   13200:	30c00115 	stw	r3,4(r6)
   13204:	308d883a 	add	r6,r6,r2
   13208:	30800015 	stw	r2,0(r6)
   1320c:	003fac06 	br	130c0 <_gp+0xffff3840>
   13210:	00c00504 	movi	r3,20
   13214:	19401536 	bltu	r3,r5,1326c <_free_r+0x29c>
   13218:	28c01704 	addi	r3,r5,92
   1321c:	18c7883a 	add	r3,r3,r3
   13220:	294016c4 	addi	r5,r5,91
   13224:	003fb406 	br	130f8 <_gp+0xffff3878>
   13228:	280bd0ba 	srai	r5,r5,2
   1322c:	00c00044 	movi	r3,1
   13230:	38800117 	ldw	r2,4(r7)
   13234:	194a983a 	sll	r5,r3,r5
   13238:	2007883a 	mov	r3,r4
   1323c:	2884b03a 	or	r2,r5,r2
   13240:	38800115 	stw	r2,4(r7)
   13244:	003fbb06 	br	13134 <_gp+0xffff38b4>
   13248:	21800515 	stw	r6,20(r4)
   1324c:	21800415 	stw	r6,16(r4)
   13250:	10c00054 	ori	r3,r2,1
   13254:	31c00315 	stw	r7,12(r6)
   13258:	31c00215 	stw	r7,8(r6)
   1325c:	30c00115 	stw	r3,4(r6)
   13260:	308d883a 	add	r6,r6,r2
   13264:	30800015 	stw	r2,0(r6)
   13268:	003f9506 	br	130c0 <_gp+0xffff3840>
   1326c:	00c01504 	movi	r3,84
   13270:	19400536 	bltu	r3,r5,13288 <_free_r+0x2b8>
   13274:	100ad33a 	srli	r5,r2,12
   13278:	28c01bc4 	addi	r3,r5,111
   1327c:	18c7883a 	add	r3,r3,r3
   13280:	29401b84 	addi	r5,r5,110
   13284:	003f9c06 	br	130f8 <_gp+0xffff3878>
   13288:	00c05504 	movi	r3,340
   1328c:	19400536 	bltu	r3,r5,132a4 <_free_r+0x2d4>
   13290:	100ad3fa 	srli	r5,r2,15
   13294:	28c01e04 	addi	r3,r5,120
   13298:	18c7883a 	add	r3,r3,r3
   1329c:	29401dc4 	addi	r5,r5,119
   132a0:	003f9506 	br	130f8 <_gp+0xffff3878>
   132a4:	00c15504 	movi	r3,1364
   132a8:	19400536 	bltu	r3,r5,132c0 <_free_r+0x2f0>
   132ac:	100ad4ba 	srli	r5,r2,18
   132b0:	28c01f44 	addi	r3,r5,125
   132b4:	18c7883a 	add	r3,r3,r3
   132b8:	29401f04 	addi	r5,r5,124
   132bc:	003f8e06 	br	130f8 <_gp+0xffff3878>
   132c0:	00c03f84 	movi	r3,254
   132c4:	01401f84 	movi	r5,126
   132c8:	003f8b06 	br	130f8 <_gp+0xffff3878>
   132cc:	10c00054 	ori	r3,r2,1
   132d0:	30c00115 	stw	r3,4(r6)
   132d4:	308d883a 	add	r6,r6,r2
   132d8:	30800015 	stw	r2,0(r6)
   132dc:	003f7806 	br	130c0 <_gp+0xffff3840>

000132e0 <_lseek_r>:
   132e0:	defffd04 	addi	sp,sp,-12
   132e4:	2805883a 	mov	r2,r5
   132e8:	dc000015 	stw	r16,0(sp)
   132ec:	040000b4 	movhi	r16,2
   132f0:	dc400115 	stw	r17,4(sp)
   132f4:	300b883a 	mov	r5,r6
   132f8:	8424da04 	addi	r16,r16,-27800
   132fc:	2023883a 	mov	r17,r4
   13300:	380d883a 	mov	r6,r7
   13304:	1009883a 	mov	r4,r2
   13308:	dfc00215 	stw	ra,8(sp)
   1330c:	80000015 	stw	zero,0(r16)
   13310:	0013cd80 	call	13cd8 <lseek>
   13314:	00ffffc4 	movi	r3,-1
   13318:	10c00526 	beq	r2,r3,13330 <_lseek_r+0x50>
   1331c:	dfc00217 	ldw	ra,8(sp)
   13320:	dc400117 	ldw	r17,4(sp)
   13324:	dc000017 	ldw	r16,0(sp)
   13328:	dec00304 	addi	sp,sp,12
   1332c:	f800283a 	ret
   13330:	80c00017 	ldw	r3,0(r16)
   13334:	183ff926 	beq	r3,zero,1331c <_gp+0xffff3a9c>
   13338:	88c00015 	stw	r3,0(r17)
   1333c:	003ff706 	br	1331c <_gp+0xffff3a9c>

00013340 <__smakebuf_r>:
   13340:	2880030b 	ldhu	r2,12(r5)
   13344:	10c0008c 	andi	r3,r2,2
   13348:	1800411e 	bne	r3,zero,13450 <__smakebuf_r+0x110>
   1334c:	deffec04 	addi	sp,sp,-80
   13350:	dc000f15 	stw	r16,60(sp)
   13354:	2821883a 	mov	r16,r5
   13358:	2940038f 	ldh	r5,14(r5)
   1335c:	dc401015 	stw	r17,64(sp)
   13360:	dfc01315 	stw	ra,76(sp)
   13364:	dcc01215 	stw	r19,72(sp)
   13368:	dc801115 	stw	r18,68(sp)
   1336c:	2023883a 	mov	r17,r4
   13370:	28001c16 	blt	r5,zero,133e4 <__smakebuf_r+0xa4>
   13374:	d80d883a 	mov	r6,sp
   13378:	001355c0 	call	1355c <_fstat_r>
   1337c:	10001816 	blt	r2,zero,133e0 <__smakebuf_r+0xa0>
   13380:	d8800117 	ldw	r2,4(sp)
   13384:	00e00014 	movui	r3,32768
   13388:	10bc000c 	andi	r2,r2,61440
   1338c:	14c80020 	cmpeqi	r19,r2,8192
   13390:	10c03726 	beq	r2,r3,13470 <__smakebuf_r+0x130>
   13394:	80c0030b 	ldhu	r3,12(r16)
   13398:	18c20014 	ori	r3,r3,2048
   1339c:	80c0030d 	sth	r3,12(r16)
   133a0:	00c80004 	movi	r3,8192
   133a4:	10c0521e 	bne	r2,r3,134f0 <__smakebuf_r+0x1b0>
   133a8:	8140038f 	ldh	r5,14(r16)
   133ac:	8809883a 	mov	r4,r17
   133b0:	00135b80 	call	135b8 <_isatty_r>
   133b4:	10004c26 	beq	r2,zero,134e8 <__smakebuf_r+0x1a8>
   133b8:	8080030b 	ldhu	r2,12(r16)
   133bc:	80c010c4 	addi	r3,r16,67
   133c0:	80c00015 	stw	r3,0(r16)
   133c4:	10800054 	ori	r2,r2,1
   133c8:	8080030d 	sth	r2,12(r16)
   133cc:	00800044 	movi	r2,1
   133d0:	80c00415 	stw	r3,16(r16)
   133d4:	80800515 	stw	r2,20(r16)
   133d8:	04810004 	movi	r18,1024
   133dc:	00000706 	br	133fc <__smakebuf_r+0xbc>
   133e0:	8080030b 	ldhu	r2,12(r16)
   133e4:	10c0200c 	andi	r3,r2,128
   133e8:	18001f1e 	bne	r3,zero,13468 <__smakebuf_r+0x128>
   133ec:	04810004 	movi	r18,1024
   133f0:	10820014 	ori	r2,r2,2048
   133f4:	8080030d 	sth	r2,12(r16)
   133f8:	0027883a 	mov	r19,zero
   133fc:	900b883a 	mov	r5,r18
   13400:	8809883a 	mov	r4,r17
   13404:	00115480 	call	11548 <_malloc_r>
   13408:	10002c26 	beq	r2,zero,134bc <__smakebuf_r+0x17c>
   1340c:	80c0030b 	ldhu	r3,12(r16)
   13410:	01000074 	movhi	r4,1
   13414:	2102db04 	addi	r4,r4,2924
   13418:	89000f15 	stw	r4,60(r17)
   1341c:	18c02014 	ori	r3,r3,128
   13420:	80c0030d 	sth	r3,12(r16)
   13424:	80800015 	stw	r2,0(r16)
   13428:	80800415 	stw	r2,16(r16)
   1342c:	84800515 	stw	r18,20(r16)
   13430:	98001a1e 	bne	r19,zero,1349c <__smakebuf_r+0x15c>
   13434:	dfc01317 	ldw	ra,76(sp)
   13438:	dcc01217 	ldw	r19,72(sp)
   1343c:	dc801117 	ldw	r18,68(sp)
   13440:	dc401017 	ldw	r17,64(sp)
   13444:	dc000f17 	ldw	r16,60(sp)
   13448:	dec01404 	addi	sp,sp,80
   1344c:	f800283a 	ret
   13450:	288010c4 	addi	r2,r5,67
   13454:	28800015 	stw	r2,0(r5)
   13458:	28800415 	stw	r2,16(r5)
   1345c:	00800044 	movi	r2,1
   13460:	28800515 	stw	r2,20(r5)
   13464:	f800283a 	ret
   13468:	04801004 	movi	r18,64
   1346c:	003fe006 	br	133f0 <_gp+0xffff3b70>
   13470:	81000a17 	ldw	r4,40(r16)
   13474:	00c00074 	movhi	r3,1
   13478:	18ca2504 	addi	r3,r3,10388
   1347c:	20ffc51e 	bne	r4,r3,13394 <_gp+0xffff3b14>
   13480:	8080030b 	ldhu	r2,12(r16)
   13484:	04810004 	movi	r18,1024
   13488:	84801315 	stw	r18,76(r16)
   1348c:	1484b03a 	or	r2,r2,r18
   13490:	8080030d 	sth	r2,12(r16)
   13494:	0027883a 	mov	r19,zero
   13498:	003fd806 	br	133fc <_gp+0xffff3b7c>
   1349c:	8140038f 	ldh	r5,14(r16)
   134a0:	8809883a 	mov	r4,r17
   134a4:	00135b80 	call	135b8 <_isatty_r>
   134a8:	103fe226 	beq	r2,zero,13434 <_gp+0xffff3bb4>
   134ac:	8080030b 	ldhu	r2,12(r16)
   134b0:	10800054 	ori	r2,r2,1
   134b4:	8080030d 	sth	r2,12(r16)
   134b8:	003fde06 	br	13434 <_gp+0xffff3bb4>
   134bc:	8080030b 	ldhu	r2,12(r16)
   134c0:	10c0800c 	andi	r3,r2,512
   134c4:	183fdb1e 	bne	r3,zero,13434 <_gp+0xffff3bb4>
   134c8:	10800094 	ori	r2,r2,2
   134cc:	80c010c4 	addi	r3,r16,67
   134d0:	8080030d 	sth	r2,12(r16)
   134d4:	00800044 	movi	r2,1
   134d8:	80c00015 	stw	r3,0(r16)
   134dc:	80c00415 	stw	r3,16(r16)
   134e0:	80800515 	stw	r2,20(r16)
   134e4:	003fd306 	br	13434 <_gp+0xffff3bb4>
   134e8:	04810004 	movi	r18,1024
   134ec:	003fc306 	br	133fc <_gp+0xffff3b7c>
   134f0:	0027883a 	mov	r19,zero
   134f4:	04810004 	movi	r18,1024
   134f8:	003fc006 	br	133fc <_gp+0xffff3b7c>

000134fc <_read_r>:
   134fc:	defffd04 	addi	sp,sp,-12
   13500:	2805883a 	mov	r2,r5
   13504:	dc000015 	stw	r16,0(sp)
   13508:	040000b4 	movhi	r16,2
   1350c:	dc400115 	stw	r17,4(sp)
   13510:	300b883a 	mov	r5,r6
   13514:	8424da04 	addi	r16,r16,-27800
   13518:	2023883a 	mov	r17,r4
   1351c:	380d883a 	mov	r6,r7
   13520:	1009883a 	mov	r4,r2
   13524:	dfc00215 	stw	ra,8(sp)
   13528:	80000015 	stw	zero,0(r16)
   1352c:	0013eac0 	call	13eac <read>
   13530:	00ffffc4 	movi	r3,-1
   13534:	10c00526 	beq	r2,r3,1354c <_read_r+0x50>
   13538:	dfc00217 	ldw	ra,8(sp)
   1353c:	dc400117 	ldw	r17,4(sp)
   13540:	dc000017 	ldw	r16,0(sp)
   13544:	dec00304 	addi	sp,sp,12
   13548:	f800283a 	ret
   1354c:	80c00017 	ldw	r3,0(r16)
   13550:	183ff926 	beq	r3,zero,13538 <_gp+0xffff3cb8>
   13554:	88c00015 	stw	r3,0(r17)
   13558:	003ff706 	br	13538 <_gp+0xffff3cb8>

0001355c <_fstat_r>:
   1355c:	defffd04 	addi	sp,sp,-12
   13560:	2805883a 	mov	r2,r5
   13564:	dc000015 	stw	r16,0(sp)
   13568:	040000b4 	movhi	r16,2
   1356c:	dc400115 	stw	r17,4(sp)
   13570:	8424da04 	addi	r16,r16,-27800
   13574:	2023883a 	mov	r17,r4
   13578:	300b883a 	mov	r5,r6
   1357c:	1009883a 	mov	r4,r2
   13580:	dfc00215 	stw	ra,8(sp)
   13584:	80000015 	stw	zero,0(r16)
   13588:	00137800 	call	13780 <fstat>
   1358c:	00ffffc4 	movi	r3,-1
   13590:	10c00526 	beq	r2,r3,135a8 <_fstat_r+0x4c>
   13594:	dfc00217 	ldw	ra,8(sp)
   13598:	dc400117 	ldw	r17,4(sp)
   1359c:	dc000017 	ldw	r16,0(sp)
   135a0:	dec00304 	addi	sp,sp,12
   135a4:	f800283a 	ret
   135a8:	80c00017 	ldw	r3,0(r16)
   135ac:	183ff926 	beq	r3,zero,13594 <_gp+0xffff3d14>
   135b0:	88c00015 	stw	r3,0(r17)
   135b4:	003ff706 	br	13594 <_gp+0xffff3d14>

000135b8 <_isatty_r>:
   135b8:	defffd04 	addi	sp,sp,-12
   135bc:	dc000015 	stw	r16,0(sp)
   135c0:	040000b4 	movhi	r16,2
   135c4:	dc400115 	stw	r17,4(sp)
   135c8:	8424da04 	addi	r16,r16,-27800
   135cc:	2023883a 	mov	r17,r4
   135d0:	2809883a 	mov	r4,r5
   135d4:	dfc00215 	stw	ra,8(sp)
   135d8:	80000015 	stw	zero,0(r16)
   135dc:	0013b0c0 	call	13b0c <isatty>
   135e0:	00ffffc4 	movi	r3,-1
   135e4:	10c00526 	beq	r2,r3,135fc <_isatty_r+0x44>
   135e8:	dfc00217 	ldw	ra,8(sp)
   135ec:	dc400117 	ldw	r17,4(sp)
   135f0:	dc000017 	ldw	r16,0(sp)
   135f4:	dec00304 	addi	sp,sp,12
   135f8:	f800283a 	ret
   135fc:	80c00017 	ldw	r3,0(r16)
   13600:	183ff926 	beq	r3,zero,135e8 <_gp+0xffff3d68>
   13604:	88c00015 	stw	r3,0(r17)
   13608:	003ff706 	br	135e8 <_gp+0xffff3d68>

0001360c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1360c:	defffe04 	addi	sp,sp,-8
   13610:	dfc00115 	stw	ra,4(sp)
   13614:	df000015 	stw	fp,0(sp)
   13618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1361c:	d0a00a17 	ldw	r2,-32728(gp)
   13620:	10000326 	beq	r2,zero,13630 <alt_get_errno+0x24>
   13624:	d0a00a17 	ldw	r2,-32728(gp)
   13628:	103ee83a 	callr	r2
   1362c:	00000106 	br	13634 <alt_get_errno+0x28>
   13630:	d0a6ba04 	addi	r2,gp,-25880
}
   13634:	e037883a 	mov	sp,fp
   13638:	dfc00117 	ldw	ra,4(sp)
   1363c:	df000017 	ldw	fp,0(sp)
   13640:	dec00204 	addi	sp,sp,8
   13644:	f800283a 	ret

00013648 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   13648:	defffb04 	addi	sp,sp,-20
   1364c:	dfc00415 	stw	ra,16(sp)
   13650:	df000315 	stw	fp,12(sp)
   13654:	df000304 	addi	fp,sp,12
   13658:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1365c:	e0bfff17 	ldw	r2,-4(fp)
   13660:	10000616 	blt	r2,zero,1367c <close+0x34>
   13664:	e0bfff17 	ldw	r2,-4(fp)
   13668:	10c00324 	muli	r3,r2,12
   1366c:	00800074 	movhi	r2,1
   13670:	1099a804 	addi	r2,r2,26272
   13674:	1885883a 	add	r2,r3,r2
   13678:	00000106 	br	13680 <close+0x38>
   1367c:	0005883a 	mov	r2,zero
   13680:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13684:	e0bffd17 	ldw	r2,-12(fp)
   13688:	10001926 	beq	r2,zero,136f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1368c:	e0bffd17 	ldw	r2,-12(fp)
   13690:	10800017 	ldw	r2,0(r2)
   13694:	10800417 	ldw	r2,16(r2)
   13698:	10000626 	beq	r2,zero,136b4 <close+0x6c>
   1369c:	e0bffd17 	ldw	r2,-12(fp)
   136a0:	10800017 	ldw	r2,0(r2)
   136a4:	10800417 	ldw	r2,16(r2)
   136a8:	e13ffd17 	ldw	r4,-12(fp)
   136ac:	103ee83a 	callr	r2
   136b0:	00000106 	br	136b8 <close+0x70>
   136b4:	0005883a 	mov	r2,zero
   136b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   136bc:	e13fff17 	ldw	r4,-4(fp)
   136c0:	0013fa80 	call	13fa8 <alt_release_fd>
    if (rval < 0)
   136c4:	e0bffe17 	ldw	r2,-8(fp)
   136c8:	1000070e 	bge	r2,zero,136e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   136cc:	001360c0 	call	1360c <alt_get_errno>
   136d0:	1007883a 	mov	r3,r2
   136d4:	e0bffe17 	ldw	r2,-8(fp)
   136d8:	0085c83a 	sub	r2,zero,r2
   136dc:	18800015 	stw	r2,0(r3)
      return -1;
   136e0:	00bfffc4 	movi	r2,-1
   136e4:	00000706 	br	13704 <close+0xbc>
    }
    return 0;
   136e8:	0005883a 	mov	r2,zero
   136ec:	00000506 	br	13704 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   136f0:	001360c0 	call	1360c <alt_get_errno>
   136f4:	1007883a 	mov	r3,r2
   136f8:	00801444 	movi	r2,81
   136fc:	18800015 	stw	r2,0(r3)
    return -1;
   13700:	00bfffc4 	movi	r2,-1
  }
}
   13704:	e037883a 	mov	sp,fp
   13708:	dfc00117 	ldw	ra,4(sp)
   1370c:	df000017 	ldw	fp,0(sp)
   13710:	dec00204 	addi	sp,sp,8
   13714:	f800283a 	ret

00013718 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   13718:	defffc04 	addi	sp,sp,-16
   1371c:	df000315 	stw	fp,12(sp)
   13720:	df000304 	addi	fp,sp,12
   13724:	e13ffd15 	stw	r4,-12(fp)
   13728:	e17ffe15 	stw	r5,-8(fp)
   1372c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   13730:	e0bfff17 	ldw	r2,-4(fp)
}
   13734:	e037883a 	mov	sp,fp
   13738:	df000017 	ldw	fp,0(sp)
   1373c:	dec00104 	addi	sp,sp,4
   13740:	f800283a 	ret

00013744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13744:	defffe04 	addi	sp,sp,-8
   13748:	dfc00115 	stw	ra,4(sp)
   1374c:	df000015 	stw	fp,0(sp)
   13750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13754:	d0a00a17 	ldw	r2,-32728(gp)
   13758:	10000326 	beq	r2,zero,13768 <alt_get_errno+0x24>
   1375c:	d0a00a17 	ldw	r2,-32728(gp)
   13760:	103ee83a 	callr	r2
   13764:	00000106 	br	1376c <alt_get_errno+0x28>
   13768:	d0a6ba04 	addi	r2,gp,-25880
}
   1376c:	e037883a 	mov	sp,fp
   13770:	dfc00117 	ldw	ra,4(sp)
   13774:	df000017 	ldw	fp,0(sp)
   13778:	dec00204 	addi	sp,sp,8
   1377c:	f800283a 	ret

00013780 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13780:	defffb04 	addi	sp,sp,-20
   13784:	dfc00415 	stw	ra,16(sp)
   13788:	df000315 	stw	fp,12(sp)
   1378c:	df000304 	addi	fp,sp,12
   13790:	e13ffe15 	stw	r4,-8(fp)
   13794:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13798:	e0bffe17 	ldw	r2,-8(fp)
   1379c:	10000616 	blt	r2,zero,137b8 <fstat+0x38>
   137a0:	e0bffe17 	ldw	r2,-8(fp)
   137a4:	10c00324 	muli	r3,r2,12
   137a8:	00800074 	movhi	r2,1
   137ac:	1099a804 	addi	r2,r2,26272
   137b0:	1885883a 	add	r2,r3,r2
   137b4:	00000106 	br	137bc <fstat+0x3c>
   137b8:	0005883a 	mov	r2,zero
   137bc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   137c0:	e0bffd17 	ldw	r2,-12(fp)
   137c4:	10001026 	beq	r2,zero,13808 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   137c8:	e0bffd17 	ldw	r2,-12(fp)
   137cc:	10800017 	ldw	r2,0(r2)
   137d0:	10800817 	ldw	r2,32(r2)
   137d4:	10000726 	beq	r2,zero,137f4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   137d8:	e0bffd17 	ldw	r2,-12(fp)
   137dc:	10800017 	ldw	r2,0(r2)
   137e0:	10800817 	ldw	r2,32(r2)
   137e4:	e17fff17 	ldw	r5,-4(fp)
   137e8:	e13ffd17 	ldw	r4,-12(fp)
   137ec:	103ee83a 	callr	r2
   137f0:	00000a06 	br	1381c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   137f4:	e0bfff17 	ldw	r2,-4(fp)
   137f8:	00c80004 	movi	r3,8192
   137fc:	10c00115 	stw	r3,4(r2)
      return 0;
   13800:	0005883a 	mov	r2,zero
   13804:	00000506 	br	1381c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13808:	00137440 	call	13744 <alt_get_errno>
   1380c:	1007883a 	mov	r3,r2
   13810:	00801444 	movi	r2,81
   13814:	18800015 	stw	r2,0(r3)
    return -1;
   13818:	00bfffc4 	movi	r2,-1
  }
}
   1381c:	e037883a 	mov	sp,fp
   13820:	dfc00117 	ldw	ra,4(sp)
   13824:	df000017 	ldw	fp,0(sp)
   13828:	dec00204 	addi	sp,sp,8
   1382c:	f800283a 	ret

00013830 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13830:	defff904 	addi	sp,sp,-28
   13834:	dfc00615 	stw	ra,24(sp)
   13838:	df000515 	stw	fp,20(sp)
   1383c:	df000504 	addi	fp,sp,20
   13840:	e13ffc15 	stw	r4,-16(fp)
   13844:	e17ffd15 	stw	r5,-12(fp)
   13848:	e1bffe15 	stw	r6,-8(fp)
   1384c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13850:	e0800217 	ldw	r2,8(fp)
   13854:	d8800015 	stw	r2,0(sp)
   13858:	e1ffff17 	ldw	r7,-4(fp)
   1385c:	e1bffe17 	ldw	r6,-8(fp)
   13860:	e17ffd17 	ldw	r5,-12(fp)
   13864:	e13ffc17 	ldw	r4,-16(fp)
   13868:	00139e00 	call	139e0 <alt_iic_isr_register>
}  
   1386c:	e037883a 	mov	sp,fp
   13870:	dfc00117 	ldw	ra,4(sp)
   13874:	df000017 	ldw	fp,0(sp)
   13878:	dec00204 	addi	sp,sp,8
   1387c:	f800283a 	ret

00013880 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13880:	defff904 	addi	sp,sp,-28
   13884:	df000615 	stw	fp,24(sp)
   13888:	df000604 	addi	fp,sp,24
   1388c:	e13ffe15 	stw	r4,-8(fp)
   13890:	e17fff15 	stw	r5,-4(fp)
   13894:	e0bfff17 	ldw	r2,-4(fp)
   13898:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1389c:	0005303a 	rdctl	r2,status
   138a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138a4:	e0fffb17 	ldw	r3,-20(fp)
   138a8:	00bfff84 	movi	r2,-2
   138ac:	1884703a 	and	r2,r3,r2
   138b0:	1001703a 	wrctl	status,r2
  
  return context;
   138b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   138b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   138bc:	00c00044 	movi	r3,1
   138c0:	e0bffa17 	ldw	r2,-24(fp)
   138c4:	1884983a 	sll	r2,r3,r2
   138c8:	1007883a 	mov	r3,r2
   138cc:	d0a6bb17 	ldw	r2,-25876(gp)
   138d0:	1884b03a 	or	r2,r3,r2
   138d4:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   138d8:	d0a6bb17 	ldw	r2,-25876(gp)
   138dc:	100170fa 	wrctl	ienable,r2
   138e0:	e0bffc17 	ldw	r2,-16(fp)
   138e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138e8:	e0bffd17 	ldw	r2,-12(fp)
   138ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   138f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   138f4:	0001883a 	nop
}
   138f8:	e037883a 	mov	sp,fp
   138fc:	df000017 	ldw	fp,0(sp)
   13900:	dec00104 	addi	sp,sp,4
   13904:	f800283a 	ret

00013908 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13908:	defff904 	addi	sp,sp,-28
   1390c:	df000615 	stw	fp,24(sp)
   13910:	df000604 	addi	fp,sp,24
   13914:	e13ffe15 	stw	r4,-8(fp)
   13918:	e17fff15 	stw	r5,-4(fp)
   1391c:	e0bfff17 	ldw	r2,-4(fp)
   13920:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13924:	0005303a 	rdctl	r2,status
   13928:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1392c:	e0fffb17 	ldw	r3,-20(fp)
   13930:	00bfff84 	movi	r2,-2
   13934:	1884703a 	and	r2,r3,r2
   13938:	1001703a 	wrctl	status,r2
  
  return context;
   1393c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13940:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   13944:	00c00044 	movi	r3,1
   13948:	e0bffa17 	ldw	r2,-24(fp)
   1394c:	1884983a 	sll	r2,r3,r2
   13950:	0084303a 	nor	r2,zero,r2
   13954:	1007883a 	mov	r3,r2
   13958:	d0a6bb17 	ldw	r2,-25876(gp)
   1395c:	1884703a 	and	r2,r3,r2
   13960:	d0a6bb15 	stw	r2,-25876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13964:	d0a6bb17 	ldw	r2,-25876(gp)
   13968:	100170fa 	wrctl	ienable,r2
   1396c:	e0bffc17 	ldw	r2,-16(fp)
   13970:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13974:	e0bffd17 	ldw	r2,-12(fp)
   13978:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1397c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   13980:	0001883a 	nop
}
   13984:	e037883a 	mov	sp,fp
   13988:	df000017 	ldw	fp,0(sp)
   1398c:	dec00104 	addi	sp,sp,4
   13990:	f800283a 	ret

00013994 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13994:	defffc04 	addi	sp,sp,-16
   13998:	df000315 	stw	fp,12(sp)
   1399c:	df000304 	addi	fp,sp,12
   139a0:	e13ffe15 	stw	r4,-8(fp)
   139a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   139a8:	000530fa 	rdctl	r2,ienable
   139ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   139b0:	00c00044 	movi	r3,1
   139b4:	e0bfff17 	ldw	r2,-4(fp)
   139b8:	1884983a 	sll	r2,r3,r2
   139bc:	1007883a 	mov	r3,r2
   139c0:	e0bffd17 	ldw	r2,-12(fp)
   139c4:	1884703a 	and	r2,r3,r2
   139c8:	1004c03a 	cmpne	r2,r2,zero
   139cc:	10803fcc 	andi	r2,r2,255
}
   139d0:	e037883a 	mov	sp,fp
   139d4:	df000017 	ldw	fp,0(sp)
   139d8:	dec00104 	addi	sp,sp,4
   139dc:	f800283a 	ret

000139e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   139e0:	defff504 	addi	sp,sp,-44
   139e4:	dfc00a15 	stw	ra,40(sp)
   139e8:	df000915 	stw	fp,36(sp)
   139ec:	df000904 	addi	fp,sp,36
   139f0:	e13ffc15 	stw	r4,-16(fp)
   139f4:	e17ffd15 	stw	r5,-12(fp)
   139f8:	e1bffe15 	stw	r6,-8(fp)
   139fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   13a00:	00bffa84 	movi	r2,-22
   13a04:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13a08:	e0bffd17 	ldw	r2,-12(fp)
   13a0c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13a10:	e0bff817 	ldw	r2,-32(fp)
   13a14:	10800808 	cmpgei	r2,r2,32
   13a18:	1000271e 	bne	r2,zero,13ab8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a1c:	0005303a 	rdctl	r2,status
   13a20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a24:	e0fffb17 	ldw	r3,-20(fp)
   13a28:	00bfff84 	movi	r2,-2
   13a2c:	1884703a 	and	r2,r3,r2
   13a30:	1001703a 	wrctl	status,r2
  
  return context;
   13a34:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   13a38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   13a3c:	008000b4 	movhi	r2,2
   13a40:	10a4f204 	addi	r2,r2,-27704
   13a44:	e0fff817 	ldw	r3,-32(fp)
   13a48:	180690fa 	slli	r3,r3,3
   13a4c:	10c5883a 	add	r2,r2,r3
   13a50:	e0fffe17 	ldw	r3,-8(fp)
   13a54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   13a58:	008000b4 	movhi	r2,2
   13a5c:	10a4f204 	addi	r2,r2,-27704
   13a60:	e0fff817 	ldw	r3,-32(fp)
   13a64:	180690fa 	slli	r3,r3,3
   13a68:	10c5883a 	add	r2,r2,r3
   13a6c:	10800104 	addi	r2,r2,4
   13a70:	e0ffff17 	ldw	r3,-4(fp)
   13a74:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   13a78:	e0bffe17 	ldw	r2,-8(fp)
   13a7c:	10000526 	beq	r2,zero,13a94 <alt_iic_isr_register+0xb4>
   13a80:	e0bff817 	ldw	r2,-32(fp)
   13a84:	100b883a 	mov	r5,r2
   13a88:	e13ffc17 	ldw	r4,-16(fp)
   13a8c:	00138800 	call	13880 <alt_ic_irq_enable>
   13a90:	00000406 	br	13aa4 <alt_iic_isr_register+0xc4>
   13a94:	e0bff817 	ldw	r2,-32(fp)
   13a98:	100b883a 	mov	r5,r2
   13a9c:	e13ffc17 	ldw	r4,-16(fp)
   13aa0:	00139080 	call	13908 <alt_ic_irq_disable>
   13aa4:	e0bff715 	stw	r2,-36(fp)
   13aa8:	e0bffa17 	ldw	r2,-24(fp)
   13aac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ab0:	e0bff917 	ldw	r2,-28(fp)
   13ab4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13ab8:	e0bff717 	ldw	r2,-36(fp)
}
   13abc:	e037883a 	mov	sp,fp
   13ac0:	dfc00117 	ldw	ra,4(sp)
   13ac4:	df000017 	ldw	fp,0(sp)
   13ac8:	dec00204 	addi	sp,sp,8
   13acc:	f800283a 	ret

00013ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13ad0:	defffe04 	addi	sp,sp,-8
   13ad4:	dfc00115 	stw	ra,4(sp)
   13ad8:	df000015 	stw	fp,0(sp)
   13adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13ae0:	d0a00a17 	ldw	r2,-32728(gp)
   13ae4:	10000326 	beq	r2,zero,13af4 <alt_get_errno+0x24>
   13ae8:	d0a00a17 	ldw	r2,-32728(gp)
   13aec:	103ee83a 	callr	r2
   13af0:	00000106 	br	13af8 <alt_get_errno+0x28>
   13af4:	d0a6ba04 	addi	r2,gp,-25880
}
   13af8:	e037883a 	mov	sp,fp
   13afc:	dfc00117 	ldw	ra,4(sp)
   13b00:	df000017 	ldw	fp,0(sp)
   13b04:	dec00204 	addi	sp,sp,8
   13b08:	f800283a 	ret

00013b0c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13b0c:	deffed04 	addi	sp,sp,-76
   13b10:	dfc01215 	stw	ra,72(sp)
   13b14:	df001115 	stw	fp,68(sp)
   13b18:	df001104 	addi	fp,sp,68
   13b1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13b20:	e0bfff17 	ldw	r2,-4(fp)
   13b24:	10000616 	blt	r2,zero,13b40 <isatty+0x34>
   13b28:	e0bfff17 	ldw	r2,-4(fp)
   13b2c:	10c00324 	muli	r3,r2,12
   13b30:	00800074 	movhi	r2,1
   13b34:	1099a804 	addi	r2,r2,26272
   13b38:	1885883a 	add	r2,r3,r2
   13b3c:	00000106 	br	13b44 <isatty+0x38>
   13b40:	0005883a 	mov	r2,zero
   13b44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13b48:	e0bfef17 	ldw	r2,-68(fp)
   13b4c:	10000e26 	beq	r2,zero,13b88 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13b50:	e0bfef17 	ldw	r2,-68(fp)
   13b54:	10800017 	ldw	r2,0(r2)
   13b58:	10800817 	ldw	r2,32(r2)
   13b5c:	1000021e 	bne	r2,zero,13b68 <isatty+0x5c>
    {
      return 1;
   13b60:	00800044 	movi	r2,1
   13b64:	00000d06 	br	13b9c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13b68:	e0bff004 	addi	r2,fp,-64
   13b6c:	100b883a 	mov	r5,r2
   13b70:	e13fff17 	ldw	r4,-4(fp)
   13b74:	00137800 	call	13780 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13b78:	e0bff117 	ldw	r2,-60(fp)
   13b7c:	10880020 	cmpeqi	r2,r2,8192
   13b80:	10803fcc 	andi	r2,r2,255
   13b84:	00000506 	br	13b9c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13b88:	0013ad00 	call	13ad0 <alt_get_errno>
   13b8c:	1007883a 	mov	r3,r2
   13b90:	00801444 	movi	r2,81
   13b94:	18800015 	stw	r2,0(r3)
    return 0;
   13b98:	0005883a 	mov	r2,zero
  }
}
   13b9c:	e037883a 	mov	sp,fp
   13ba0:	dfc00117 	ldw	ra,4(sp)
   13ba4:	df000017 	ldw	fp,0(sp)
   13ba8:	dec00204 	addi	sp,sp,8
   13bac:	f800283a 	ret

00013bb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   13bb0:	defffc04 	addi	sp,sp,-16
   13bb4:	df000315 	stw	fp,12(sp)
   13bb8:	df000304 	addi	fp,sp,12
   13bbc:	e13ffd15 	stw	r4,-12(fp)
   13bc0:	e17ffe15 	stw	r5,-8(fp)
   13bc4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   13bc8:	e0fffe17 	ldw	r3,-8(fp)
   13bcc:	e0bffd17 	ldw	r2,-12(fp)
   13bd0:	18800c26 	beq	r3,r2,13c04 <alt_load_section+0x54>
  {
    while( to != end )
   13bd4:	00000806 	br	13bf8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   13bd8:	e0bffe17 	ldw	r2,-8(fp)
   13bdc:	10c00104 	addi	r3,r2,4
   13be0:	e0fffe15 	stw	r3,-8(fp)
   13be4:	e0fffd17 	ldw	r3,-12(fp)
   13be8:	19000104 	addi	r4,r3,4
   13bec:	e13ffd15 	stw	r4,-12(fp)
   13bf0:	18c00017 	ldw	r3,0(r3)
   13bf4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   13bf8:	e0fffe17 	ldw	r3,-8(fp)
   13bfc:	e0bfff17 	ldw	r2,-4(fp)
   13c00:	18bff51e 	bne	r3,r2,13bd8 <_gp+0xffff4358>
    {
      *to++ = *from++;
    }
  }
}
   13c04:	0001883a 	nop
   13c08:	e037883a 	mov	sp,fp
   13c0c:	df000017 	ldw	fp,0(sp)
   13c10:	dec00104 	addi	sp,sp,4
   13c14:	f800283a 	ret

00013c18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   13c18:	defffe04 	addi	sp,sp,-8
   13c1c:	dfc00115 	stw	ra,4(sp)
   13c20:	df000015 	stw	fp,0(sp)
   13c24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   13c28:	01800074 	movhi	r6,1
   13c2c:	319e2f04 	addi	r6,r6,30908
   13c30:	01400074 	movhi	r5,1
   13c34:	29578704 	addi	r5,r5,24092
   13c38:	01000074 	movhi	r4,1
   13c3c:	211e2f04 	addi	r4,r4,30908
   13c40:	0013bb00 	call	13bb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13c44:	01800074 	movhi	r6,1
   13c48:	31809104 	addi	r6,r6,580
   13c4c:	01400074 	movhi	r5,1
   13c50:	29400804 	addi	r5,r5,32
   13c54:	01000074 	movhi	r4,1
   13c58:	21000804 	addi	r4,r4,32
   13c5c:	0013bb00 	call	13bb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13c60:	01800074 	movhi	r6,1
   13c64:	31978704 	addi	r6,r6,24092
   13c68:	01400074 	movhi	r5,1
   13c6c:	29576504 	addi	r5,r5,23956
   13c70:	01000074 	movhi	r4,1
   13c74:	21176504 	addi	r4,r4,23956
   13c78:	0013bb00 	call	13bb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13c7c:	0014f480 	call	14f48 <alt_dcache_flush_all>
  alt_icache_flush_all();
   13c80:	00151080 	call	15108 <alt_icache_flush_all>
}
   13c84:	0001883a 	nop
   13c88:	e037883a 	mov	sp,fp
   13c8c:	dfc00117 	ldw	ra,4(sp)
   13c90:	df000017 	ldw	fp,0(sp)
   13c94:	dec00204 	addi	sp,sp,8
   13c98:	f800283a 	ret

00013c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13c9c:	defffe04 	addi	sp,sp,-8
   13ca0:	dfc00115 	stw	ra,4(sp)
   13ca4:	df000015 	stw	fp,0(sp)
   13ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13cac:	d0a00a17 	ldw	r2,-32728(gp)
   13cb0:	10000326 	beq	r2,zero,13cc0 <alt_get_errno+0x24>
   13cb4:	d0a00a17 	ldw	r2,-32728(gp)
   13cb8:	103ee83a 	callr	r2
   13cbc:	00000106 	br	13cc4 <alt_get_errno+0x28>
   13cc0:	d0a6ba04 	addi	r2,gp,-25880
}
   13cc4:	e037883a 	mov	sp,fp
   13cc8:	dfc00117 	ldw	ra,4(sp)
   13ccc:	df000017 	ldw	fp,0(sp)
   13cd0:	dec00204 	addi	sp,sp,8
   13cd4:	f800283a 	ret

00013cd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   13cd8:	defff904 	addi	sp,sp,-28
   13cdc:	dfc00615 	stw	ra,24(sp)
   13ce0:	df000515 	stw	fp,20(sp)
   13ce4:	df000504 	addi	fp,sp,20
   13ce8:	e13ffd15 	stw	r4,-12(fp)
   13cec:	e17ffe15 	stw	r5,-8(fp)
   13cf0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13cf4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10000616 	blt	r2,zero,13d18 <lseek+0x40>
   13d00:	e0bffd17 	ldw	r2,-12(fp)
   13d04:	10c00324 	muli	r3,r2,12
   13d08:	00800074 	movhi	r2,1
   13d0c:	1099a804 	addi	r2,r2,26272
   13d10:	1885883a 	add	r2,r3,r2
   13d14:	00000106 	br	13d1c <lseek+0x44>
   13d18:	0005883a 	mov	r2,zero
   13d1c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13d20:	e0bffc17 	ldw	r2,-16(fp)
   13d24:	10001026 	beq	r2,zero,13d68 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13d28:	e0bffc17 	ldw	r2,-16(fp)
   13d2c:	10800017 	ldw	r2,0(r2)
   13d30:	10800717 	ldw	r2,28(r2)
   13d34:	10000926 	beq	r2,zero,13d5c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13d38:	e0bffc17 	ldw	r2,-16(fp)
   13d3c:	10800017 	ldw	r2,0(r2)
   13d40:	10800717 	ldw	r2,28(r2)
   13d44:	e1bfff17 	ldw	r6,-4(fp)
   13d48:	e17ffe17 	ldw	r5,-8(fp)
   13d4c:	e13ffc17 	ldw	r4,-16(fp)
   13d50:	103ee83a 	callr	r2
   13d54:	e0bffb15 	stw	r2,-20(fp)
   13d58:	00000506 	br	13d70 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13d5c:	00bfde84 	movi	r2,-134
   13d60:	e0bffb15 	stw	r2,-20(fp)
   13d64:	00000206 	br	13d70 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   13d68:	00bfebc4 	movi	r2,-81
   13d6c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	1000070e 	bge	r2,zero,13d94 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   13d78:	0013c9c0 	call	13c9c <alt_get_errno>
   13d7c:	1007883a 	mov	r3,r2
   13d80:	e0bffb17 	ldw	r2,-20(fp)
   13d84:	0085c83a 	sub	r2,zero,r2
   13d88:	18800015 	stw	r2,0(r3)
    rc = -1;
   13d8c:	00bfffc4 	movi	r2,-1
   13d90:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   13d94:	e0bffb17 	ldw	r2,-20(fp)
}
   13d98:	e037883a 	mov	sp,fp
   13d9c:	dfc00117 	ldw	ra,4(sp)
   13da0:	df000017 	ldw	fp,0(sp)
   13da4:	dec00204 	addi	sp,sp,8
   13da8:	f800283a 	ret

00013dac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13dac:	defffd04 	addi	sp,sp,-12
   13db0:	dfc00215 	stw	ra,8(sp)
   13db4:	df000115 	stw	fp,4(sp)
   13db8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13dbc:	0009883a 	mov	r4,zero
   13dc0:	00142240 	call	14224 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13dc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   13dc8:	001425c0 	call	1425c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13dcc:	01800074 	movhi	r6,1
   13dd0:	31977d04 	addi	r6,r6,24052
   13dd4:	01400074 	movhi	r5,1
   13dd8:	29577d04 	addi	r5,r5,24052
   13ddc:	01000074 	movhi	r4,1
   13de0:	21177d04 	addi	r4,r4,24052
   13de4:	001529c0 	call	1529c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13de8:	00150480 	call	15048 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13dec:	01000074 	movhi	r4,1
   13df0:	21142a04 	addi	r4,r4,20648
   13df4:	0015a000 	call	15a00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13df8:	d0a6bc17 	ldw	r2,-25872(gp)
   13dfc:	d0e6bd17 	ldw	r3,-25868(gp)
   13e00:	d126be17 	ldw	r4,-25864(gp)
   13e04:	200d883a 	mov	r6,r4
   13e08:	180b883a 	mov	r5,r3
   13e0c:	1009883a 	mov	r4,r2
   13e10:	001057c0 	call	1057c <main>
   13e14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13e18:	01000044 	movi	r4,1
   13e1c:	00136480 	call	13648 <close>
  exit (result);
   13e20:	e13fff17 	ldw	r4,-4(fp)
   13e24:	0015a140 	call	15a14 <exit>

00013e28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13e28:	defffe04 	addi	sp,sp,-8
   13e2c:	df000115 	stw	fp,4(sp)
   13e30:	df000104 	addi	fp,sp,4
   13e34:	e13fff15 	stw	r4,-4(fp)
}
   13e38:	0001883a 	nop
   13e3c:	e037883a 	mov	sp,fp
   13e40:	df000017 	ldw	fp,0(sp)
   13e44:	dec00104 	addi	sp,sp,4
   13e48:	f800283a 	ret

00013e4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13e4c:	defffe04 	addi	sp,sp,-8
   13e50:	df000115 	stw	fp,4(sp)
   13e54:	df000104 	addi	fp,sp,4
   13e58:	e13fff15 	stw	r4,-4(fp)
}
   13e5c:	0001883a 	nop
   13e60:	e037883a 	mov	sp,fp
   13e64:	df000017 	ldw	fp,0(sp)
   13e68:	dec00104 	addi	sp,sp,4
   13e6c:	f800283a 	ret

00013e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13e70:	defffe04 	addi	sp,sp,-8
   13e74:	dfc00115 	stw	ra,4(sp)
   13e78:	df000015 	stw	fp,0(sp)
   13e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13e80:	d0a00a17 	ldw	r2,-32728(gp)
   13e84:	10000326 	beq	r2,zero,13e94 <alt_get_errno+0x24>
   13e88:	d0a00a17 	ldw	r2,-32728(gp)
   13e8c:	103ee83a 	callr	r2
   13e90:	00000106 	br	13e98 <alt_get_errno+0x28>
   13e94:	d0a6ba04 	addi	r2,gp,-25880
}
   13e98:	e037883a 	mov	sp,fp
   13e9c:	dfc00117 	ldw	ra,4(sp)
   13ea0:	df000017 	ldw	fp,0(sp)
   13ea4:	dec00204 	addi	sp,sp,8
   13ea8:	f800283a 	ret

00013eac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   13eac:	defff904 	addi	sp,sp,-28
   13eb0:	dfc00615 	stw	ra,24(sp)
   13eb4:	df000515 	stw	fp,20(sp)
   13eb8:	df000504 	addi	fp,sp,20
   13ebc:	e13ffd15 	stw	r4,-12(fp)
   13ec0:	e17ffe15 	stw	r5,-8(fp)
   13ec4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13ec8:	e0bffd17 	ldw	r2,-12(fp)
   13ecc:	10000616 	blt	r2,zero,13ee8 <read+0x3c>
   13ed0:	e0bffd17 	ldw	r2,-12(fp)
   13ed4:	10c00324 	muli	r3,r2,12
   13ed8:	00800074 	movhi	r2,1
   13edc:	1099a804 	addi	r2,r2,26272
   13ee0:	1885883a 	add	r2,r3,r2
   13ee4:	00000106 	br	13eec <read+0x40>
   13ee8:	0005883a 	mov	r2,zero
   13eec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13ef0:	e0bffb17 	ldw	r2,-20(fp)
   13ef4:	10002226 	beq	r2,zero,13f80 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13ef8:	e0bffb17 	ldw	r2,-20(fp)
   13efc:	10800217 	ldw	r2,8(r2)
   13f00:	108000cc 	andi	r2,r2,3
   13f04:	10800060 	cmpeqi	r2,r2,1
   13f08:	1000181e 	bne	r2,zero,13f6c <read+0xc0>
        (fd->dev->read))
   13f0c:	e0bffb17 	ldw	r2,-20(fp)
   13f10:	10800017 	ldw	r2,0(r2)
   13f14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13f18:	10001426 	beq	r2,zero,13f6c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13f1c:	e0bffb17 	ldw	r2,-20(fp)
   13f20:	10800017 	ldw	r2,0(r2)
   13f24:	10800517 	ldw	r2,20(r2)
   13f28:	e0ffff17 	ldw	r3,-4(fp)
   13f2c:	180d883a 	mov	r6,r3
   13f30:	e17ffe17 	ldw	r5,-8(fp)
   13f34:	e13ffb17 	ldw	r4,-20(fp)
   13f38:	103ee83a 	callr	r2
   13f3c:	e0bffc15 	stw	r2,-16(fp)
   13f40:	e0bffc17 	ldw	r2,-16(fp)
   13f44:	1000070e 	bge	r2,zero,13f64 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13f48:	0013e700 	call	13e70 <alt_get_errno>
   13f4c:	1007883a 	mov	r3,r2
   13f50:	e0bffc17 	ldw	r2,-16(fp)
   13f54:	0085c83a 	sub	r2,zero,r2
   13f58:	18800015 	stw	r2,0(r3)
          return -1;
   13f5c:	00bfffc4 	movi	r2,-1
   13f60:	00000c06 	br	13f94 <read+0xe8>
        }
        return rval;
   13f64:	e0bffc17 	ldw	r2,-16(fp)
   13f68:	00000a06 	br	13f94 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13f6c:	0013e700 	call	13e70 <alt_get_errno>
   13f70:	1007883a 	mov	r3,r2
   13f74:	00800344 	movi	r2,13
   13f78:	18800015 	stw	r2,0(r3)
   13f7c:	00000406 	br	13f90 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13f80:	0013e700 	call	13e70 <alt_get_errno>
   13f84:	1007883a 	mov	r3,r2
   13f88:	00801444 	movi	r2,81
   13f8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13f90:	00bfffc4 	movi	r2,-1
}
   13f94:	e037883a 	mov	sp,fp
   13f98:	dfc00117 	ldw	ra,4(sp)
   13f9c:	df000017 	ldw	fp,0(sp)
   13fa0:	dec00204 	addi	sp,sp,8
   13fa4:	f800283a 	ret

00013fa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13fa8:	defffe04 	addi	sp,sp,-8
   13fac:	df000115 	stw	fp,4(sp)
   13fb0:	df000104 	addi	fp,sp,4
   13fb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13fb8:	e0bfff17 	ldw	r2,-4(fp)
   13fbc:	108000d0 	cmplti	r2,r2,3
   13fc0:	10000d1e 	bne	r2,zero,13ff8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   13fc4:	00800074 	movhi	r2,1
   13fc8:	1099a804 	addi	r2,r2,26272
   13fcc:	e0ffff17 	ldw	r3,-4(fp)
   13fd0:	18c00324 	muli	r3,r3,12
   13fd4:	10c5883a 	add	r2,r2,r3
   13fd8:	10800204 	addi	r2,r2,8
   13fdc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13fe0:	00800074 	movhi	r2,1
   13fe4:	1099a804 	addi	r2,r2,26272
   13fe8:	e0ffff17 	ldw	r3,-4(fp)
   13fec:	18c00324 	muli	r3,r3,12
   13ff0:	10c5883a 	add	r2,r2,r3
   13ff4:	10000015 	stw	zero,0(r2)
  }
}
   13ff8:	0001883a 	nop
   13ffc:	e037883a 	mov	sp,fp
   14000:	df000017 	ldw	fp,0(sp)
   14004:	dec00104 	addi	sp,sp,4
   14008:	f800283a 	ret

0001400c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1400c:	defff904 	addi	sp,sp,-28
   14010:	df000615 	stw	fp,24(sp)
   14014:	df000604 	addi	fp,sp,24
   14018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1401c:	0005303a 	rdctl	r2,status
   14020:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14024:	e0fffe17 	ldw	r3,-8(fp)
   14028:	00bfff84 	movi	r2,-2
   1402c:	1884703a 	and	r2,r3,r2
   14030:	1001703a 	wrctl	status,r2
  
  return context;
   14034:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14038:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1403c:	d0a00c17 	ldw	r2,-32720(gp)
   14040:	10c000c4 	addi	r3,r2,3
   14044:	00bfff04 	movi	r2,-4
   14048:	1884703a 	and	r2,r3,r2
   1404c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14050:	d0e00c17 	ldw	r3,-32720(gp)
   14054:	e0bfff17 	ldw	r2,-4(fp)
   14058:	1887883a 	add	r3,r3,r2
   1405c:	008000b4 	movhi	r2,2
   14060:	10a80004 	addi	r2,r2,-24576
   14064:	10c0062e 	bgeu	r2,r3,14080 <sbrk+0x74>
   14068:	e0bffb17 	ldw	r2,-20(fp)
   1406c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14070:	e0bffa17 	ldw	r2,-24(fp)
   14074:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14078:	00bfffc4 	movi	r2,-1
   1407c:	00000b06 	br	140ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   14080:	d0a00c17 	ldw	r2,-32720(gp)
   14084:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   14088:	d0e00c17 	ldw	r3,-32720(gp)
   1408c:	e0bfff17 	ldw	r2,-4(fp)
   14090:	1885883a 	add	r2,r3,r2
   14094:	d0a00c15 	stw	r2,-32720(gp)
   14098:	e0bffb17 	ldw	r2,-20(fp)
   1409c:	e0bffc15 	stw	r2,-16(fp)
   140a0:	e0bffc17 	ldw	r2,-16(fp)
   140a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   140a8:	e0bffd17 	ldw	r2,-12(fp)
} 
   140ac:	e037883a 	mov	sp,fp
   140b0:	df000017 	ldw	fp,0(sp)
   140b4:	dec00104 	addi	sp,sp,4
   140b8:	f800283a 	ret

000140bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   140bc:	defffe04 	addi	sp,sp,-8
   140c0:	dfc00115 	stw	ra,4(sp)
   140c4:	df000015 	stw	fp,0(sp)
   140c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   140cc:	d0a00a17 	ldw	r2,-32728(gp)
   140d0:	10000326 	beq	r2,zero,140e0 <alt_get_errno+0x24>
   140d4:	d0a00a17 	ldw	r2,-32728(gp)
   140d8:	103ee83a 	callr	r2
   140dc:	00000106 	br	140e4 <alt_get_errno+0x28>
   140e0:	d0a6ba04 	addi	r2,gp,-25880
}
   140e4:	e037883a 	mov	sp,fp
   140e8:	dfc00117 	ldw	ra,4(sp)
   140ec:	df000017 	ldw	fp,0(sp)
   140f0:	dec00204 	addi	sp,sp,8
   140f4:	f800283a 	ret

000140f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   140f8:	defff904 	addi	sp,sp,-28
   140fc:	dfc00615 	stw	ra,24(sp)
   14100:	df000515 	stw	fp,20(sp)
   14104:	df000504 	addi	fp,sp,20
   14108:	e13ffd15 	stw	r4,-12(fp)
   1410c:	e17ffe15 	stw	r5,-8(fp)
   14110:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14114:	e0bffd17 	ldw	r2,-12(fp)
   14118:	10000616 	blt	r2,zero,14134 <write+0x3c>
   1411c:	e0bffd17 	ldw	r2,-12(fp)
   14120:	10c00324 	muli	r3,r2,12
   14124:	00800074 	movhi	r2,1
   14128:	1099a804 	addi	r2,r2,26272
   1412c:	1885883a 	add	r2,r3,r2
   14130:	00000106 	br	14138 <write+0x40>
   14134:	0005883a 	mov	r2,zero
   14138:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1413c:	e0bffb17 	ldw	r2,-20(fp)
   14140:	10002126 	beq	r2,zero,141c8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14144:	e0bffb17 	ldw	r2,-20(fp)
   14148:	10800217 	ldw	r2,8(r2)
   1414c:	108000cc 	andi	r2,r2,3
   14150:	10001826 	beq	r2,zero,141b4 <write+0xbc>
   14154:	e0bffb17 	ldw	r2,-20(fp)
   14158:	10800017 	ldw	r2,0(r2)
   1415c:	10800617 	ldw	r2,24(r2)
   14160:	10001426 	beq	r2,zero,141b4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14164:	e0bffb17 	ldw	r2,-20(fp)
   14168:	10800017 	ldw	r2,0(r2)
   1416c:	10800617 	ldw	r2,24(r2)
   14170:	e0ffff17 	ldw	r3,-4(fp)
   14174:	180d883a 	mov	r6,r3
   14178:	e17ffe17 	ldw	r5,-8(fp)
   1417c:	e13ffb17 	ldw	r4,-20(fp)
   14180:	103ee83a 	callr	r2
   14184:	e0bffc15 	stw	r2,-16(fp)
   14188:	e0bffc17 	ldw	r2,-16(fp)
   1418c:	1000070e 	bge	r2,zero,141ac <write+0xb4>
      {
        ALT_ERRNO = -rval;
   14190:	00140bc0 	call	140bc <alt_get_errno>
   14194:	1007883a 	mov	r3,r2
   14198:	e0bffc17 	ldw	r2,-16(fp)
   1419c:	0085c83a 	sub	r2,zero,r2
   141a0:	18800015 	stw	r2,0(r3)
        return -1;
   141a4:	00bfffc4 	movi	r2,-1
   141a8:	00000c06 	br	141dc <write+0xe4>
      }
      return rval;
   141ac:	e0bffc17 	ldw	r2,-16(fp)
   141b0:	00000a06 	br	141dc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   141b4:	00140bc0 	call	140bc <alt_get_errno>
   141b8:	1007883a 	mov	r3,r2
   141bc:	00800344 	movi	r2,13
   141c0:	18800015 	stw	r2,0(r3)
   141c4:	00000406 	br	141d8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   141c8:	00140bc0 	call	140bc <alt_get_errno>
   141cc:	1007883a 	mov	r3,r2
   141d0:	00801444 	movi	r2,81
   141d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   141d8:	00bfffc4 	movi	r2,-1
}
   141dc:	e037883a 	mov	sp,fp
   141e0:	dfc00117 	ldw	ra,4(sp)
   141e4:	df000017 	ldw	fp,0(sp)
   141e8:	dec00204 	addi	sp,sp,8
   141ec:	f800283a 	ret

000141f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   141f0:	defffd04 	addi	sp,sp,-12
   141f4:	dfc00215 	stw	ra,8(sp)
   141f8:	df000115 	stw	fp,4(sp)
   141fc:	df000104 	addi	fp,sp,4
   14200:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14204:	d1600704 	addi	r5,gp,-32740
   14208:	e13fff17 	ldw	r4,-4(fp)
   1420c:	0014fa40 	call	14fa4 <alt_dev_llist_insert>
}
   14210:	e037883a 	mov	sp,fp
   14214:	dfc00117 	ldw	ra,4(sp)
   14218:	df000017 	ldw	fp,0(sp)
   1421c:	dec00204 	addi	sp,sp,8
   14220:	f800283a 	ret

00014224 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14224:	defffd04 	addi	sp,sp,-12
   14228:	dfc00215 	stw	ra,8(sp)
   1422c:	df000115 	stw	fp,4(sp)
   14230:	df000104 	addi	fp,sp,4
   14234:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII_CPU, NiosII_CPU);
   14238:	00157100 	call	15710 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1423c:	00800044 	movi	r2,1
   14240:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   14244:	0001883a 	nop
   14248:	e037883a 	mov	sp,fp
   1424c:	dfc00117 	ldw	ra,4(sp)
   14250:	df000017 	ldw	fp,0(sp)
   14254:	dec00204 	addi	sp,sp,8
   14258:	f800283a 	ret

0001425c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1425c:	defffe04 	addi	sp,sp,-8
   14260:	dfc00115 	stw	ra,4(sp)
   14264:	df000015 	stw	fp,0(sp)
   14268:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, SYS_CLK_timer);
   1426c:	01c0fa04 	movi	r7,1000
   14270:	000d883a 	mov	r6,zero
   14274:	000b883a 	mov	r5,zero
   14278:	010000b4 	movhi	r4,2
   1427c:	21040004 	addi	r4,r4,4096
   14280:	0014da00 	call	14da0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( UPDATE_SECOND, update_second);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   14284:	01800404 	movi	r6,16
   14288:	000b883a 	mov	r5,zero
   1428c:	01000074 	movhi	r4,1
   14290:	211a1204 	addi	r4,r4,26696
   14294:	00144240 	call	14424 <altera_avalon_jtag_uart_init>
   14298:	01000074 	movhi	r4,1
   1429c:	211a0804 	addi	r4,r4,26656
   142a0:	00141f00 	call	141f0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   142a4:	0001883a 	nop
}
   142a8:	0001883a 	nop
   142ac:	e037883a 	mov	sp,fp
   142b0:	dfc00117 	ldw	ra,4(sp)
   142b4:	df000017 	ldw	fp,0(sp)
   142b8:	dec00204 	addi	sp,sp,8
   142bc:	f800283a 	ret

000142c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   142c0:	defffa04 	addi	sp,sp,-24
   142c4:	dfc00515 	stw	ra,20(sp)
   142c8:	df000415 	stw	fp,16(sp)
   142cc:	df000404 	addi	fp,sp,16
   142d0:	e13ffd15 	stw	r4,-12(fp)
   142d4:	e17ffe15 	stw	r5,-8(fp)
   142d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   142dc:	e0bffd17 	ldw	r2,-12(fp)
   142e0:	10800017 	ldw	r2,0(r2)
   142e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   142e8:	e0bffc17 	ldw	r2,-16(fp)
   142ec:	10c00a04 	addi	r3,r2,40
   142f0:	e0bffd17 	ldw	r2,-12(fp)
   142f4:	10800217 	ldw	r2,8(r2)
   142f8:	100f883a 	mov	r7,r2
   142fc:	e1bfff17 	ldw	r6,-4(fp)
   14300:	e17ffe17 	ldw	r5,-8(fp)
   14304:	1809883a 	mov	r4,r3
   14308:	00148e80 	call	148e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1430c:	e037883a 	mov	sp,fp
   14310:	dfc00117 	ldw	ra,4(sp)
   14314:	df000017 	ldw	fp,0(sp)
   14318:	dec00204 	addi	sp,sp,8
   1431c:	f800283a 	ret

00014320 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14320:	defffa04 	addi	sp,sp,-24
   14324:	dfc00515 	stw	ra,20(sp)
   14328:	df000415 	stw	fp,16(sp)
   1432c:	df000404 	addi	fp,sp,16
   14330:	e13ffd15 	stw	r4,-12(fp)
   14334:	e17ffe15 	stw	r5,-8(fp)
   14338:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1433c:	e0bffd17 	ldw	r2,-12(fp)
   14340:	10800017 	ldw	r2,0(r2)
   14344:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14348:	e0bffc17 	ldw	r2,-16(fp)
   1434c:	10c00a04 	addi	r3,r2,40
   14350:	e0bffd17 	ldw	r2,-12(fp)
   14354:	10800217 	ldw	r2,8(r2)
   14358:	100f883a 	mov	r7,r2
   1435c:	e1bfff17 	ldw	r6,-4(fp)
   14360:	e17ffe17 	ldw	r5,-8(fp)
   14364:	1809883a 	mov	r4,r3
   14368:	0014b040 	call	14b04 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1436c:	e037883a 	mov	sp,fp
   14370:	dfc00117 	ldw	ra,4(sp)
   14374:	df000017 	ldw	fp,0(sp)
   14378:	dec00204 	addi	sp,sp,8
   1437c:	f800283a 	ret

00014380 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14380:	defffc04 	addi	sp,sp,-16
   14384:	dfc00315 	stw	ra,12(sp)
   14388:	df000215 	stw	fp,8(sp)
   1438c:	df000204 	addi	fp,sp,8
   14390:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14394:	e0bfff17 	ldw	r2,-4(fp)
   14398:	10800017 	ldw	r2,0(r2)
   1439c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   143a0:	e0bffe17 	ldw	r2,-8(fp)
   143a4:	10c00a04 	addi	r3,r2,40
   143a8:	e0bfff17 	ldw	r2,-4(fp)
   143ac:	10800217 	ldw	r2,8(r2)
   143b0:	100b883a 	mov	r5,r2
   143b4:	1809883a 	mov	r4,r3
   143b8:	00147900 	call	14790 <altera_avalon_jtag_uart_close>
}
   143bc:	e037883a 	mov	sp,fp
   143c0:	dfc00117 	ldw	ra,4(sp)
   143c4:	df000017 	ldw	fp,0(sp)
   143c8:	dec00204 	addi	sp,sp,8
   143cc:	f800283a 	ret

000143d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   143d0:	defffa04 	addi	sp,sp,-24
   143d4:	dfc00515 	stw	ra,20(sp)
   143d8:	df000415 	stw	fp,16(sp)
   143dc:	df000404 	addi	fp,sp,16
   143e0:	e13ffd15 	stw	r4,-12(fp)
   143e4:	e17ffe15 	stw	r5,-8(fp)
   143e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   143ec:	e0bffd17 	ldw	r2,-12(fp)
   143f0:	10800017 	ldw	r2,0(r2)
   143f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   143f8:	e0bffc17 	ldw	r2,-16(fp)
   143fc:	10800a04 	addi	r2,r2,40
   14400:	e1bfff17 	ldw	r6,-4(fp)
   14404:	e17ffe17 	ldw	r5,-8(fp)
   14408:	1009883a 	mov	r4,r2
   1440c:	00147f80 	call	147f8 <altera_avalon_jtag_uart_ioctl>
}
   14410:	e037883a 	mov	sp,fp
   14414:	dfc00117 	ldw	ra,4(sp)
   14418:	df000017 	ldw	fp,0(sp)
   1441c:	dec00204 	addi	sp,sp,8
   14420:	f800283a 	ret

00014424 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14424:	defffa04 	addi	sp,sp,-24
   14428:	dfc00515 	stw	ra,20(sp)
   1442c:	df000415 	stw	fp,16(sp)
   14430:	df000404 	addi	fp,sp,16
   14434:	e13ffd15 	stw	r4,-12(fp)
   14438:	e17ffe15 	stw	r5,-8(fp)
   1443c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14440:	e0bffd17 	ldw	r2,-12(fp)
   14444:	00c00044 	movi	r3,1
   14448:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1444c:	e0bffd17 	ldw	r2,-12(fp)
   14450:	10800017 	ldw	r2,0(r2)
   14454:	10800104 	addi	r2,r2,4
   14458:	1007883a 	mov	r3,r2
   1445c:	e0bffd17 	ldw	r2,-12(fp)
   14460:	10800817 	ldw	r2,32(r2)
   14464:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14468:	e0bffe17 	ldw	r2,-8(fp)
   1446c:	e0ffff17 	ldw	r3,-4(fp)
   14470:	d8000015 	stw	zero,0(sp)
   14474:	e1fffd17 	ldw	r7,-12(fp)
   14478:	01800074 	movhi	r6,1
   1447c:	31913904 	addi	r6,r6,17636
   14480:	180b883a 	mov	r5,r3
   14484:	1009883a 	mov	r4,r2
   14488:	00138300 	call	13830 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1448c:	e0bffd17 	ldw	r2,-12(fp)
   14490:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14494:	e0bffd17 	ldw	r2,-12(fp)
   14498:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1449c:	d0e6c017 	ldw	r3,-25856(gp)
   144a0:	e1fffd17 	ldw	r7,-12(fp)
   144a4:	01800074 	movhi	r6,1
   144a8:	3191bc04 	addi	r6,r6,18160
   144ac:	180b883a 	mov	r5,r3
   144b0:	1009883a 	mov	r4,r2
   144b4:	0014e1c0 	call	14e1c <alt_alarm_start>
   144b8:	1000040e 	bge	r2,zero,144cc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   144bc:	e0fffd17 	ldw	r3,-12(fp)
   144c0:	00a00034 	movhi	r2,32768
   144c4:	10bfffc4 	addi	r2,r2,-1
   144c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   144cc:	0001883a 	nop
   144d0:	e037883a 	mov	sp,fp
   144d4:	dfc00117 	ldw	ra,4(sp)
   144d8:	df000017 	ldw	fp,0(sp)
   144dc:	dec00204 	addi	sp,sp,8
   144e0:	f800283a 	ret

000144e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   144e4:	defff804 	addi	sp,sp,-32
   144e8:	df000715 	stw	fp,28(sp)
   144ec:	df000704 	addi	fp,sp,28
   144f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   144f4:	e0bfff17 	ldw	r2,-4(fp)
   144f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   144fc:	e0bffb17 	ldw	r2,-20(fp)
   14500:	10800017 	ldw	r2,0(r2)
   14504:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14508:	e0bffc17 	ldw	r2,-16(fp)
   1450c:	10800104 	addi	r2,r2,4
   14510:	10800037 	ldwio	r2,0(r2)
   14514:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14518:	e0bffd17 	ldw	r2,-12(fp)
   1451c:	1080c00c 	andi	r2,r2,768
   14520:	10006d26 	beq	r2,zero,146d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14524:	e0bffd17 	ldw	r2,-12(fp)
   14528:	1080400c 	andi	r2,r2,256
   1452c:	10003526 	beq	r2,zero,14604 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14530:	00800074 	movhi	r2,1
   14534:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14538:	e0bffb17 	ldw	r2,-20(fp)
   1453c:	10800a17 	ldw	r2,40(r2)
   14540:	10800044 	addi	r2,r2,1
   14544:	1081ffcc 	andi	r2,r2,2047
   14548:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1454c:	e0bffb17 	ldw	r2,-20(fp)
   14550:	10c00b17 	ldw	r3,44(r2)
   14554:	e0bffe17 	ldw	r2,-8(fp)
   14558:	18801526 	beq	r3,r2,145b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1455c:	e0bffc17 	ldw	r2,-16(fp)
   14560:	10800037 	ldwio	r2,0(r2)
   14564:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14568:	e0bff917 	ldw	r2,-28(fp)
   1456c:	10a0000c 	andi	r2,r2,32768
   14570:	10001126 	beq	r2,zero,145b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14574:	e0bffb17 	ldw	r2,-20(fp)
   14578:	10800a17 	ldw	r2,40(r2)
   1457c:	e0fff917 	ldw	r3,-28(fp)
   14580:	1809883a 	mov	r4,r3
   14584:	e0fffb17 	ldw	r3,-20(fp)
   14588:	1885883a 	add	r2,r3,r2
   1458c:	10800e04 	addi	r2,r2,56
   14590:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14594:	e0bffb17 	ldw	r2,-20(fp)
   14598:	10800a17 	ldw	r2,40(r2)
   1459c:	10800044 	addi	r2,r2,1
   145a0:	10c1ffcc 	andi	r3,r2,2047
   145a4:	e0bffb17 	ldw	r2,-20(fp)
   145a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   145ac:	003fe206 	br	14538 <_gp+0xffff4cb8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   145b0:	0001883a 	nop
   145b4:	00000106 	br	145bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   145b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   145bc:	e0bff917 	ldw	r2,-28(fp)
   145c0:	10bfffec 	andhi	r2,r2,65535
   145c4:	10000f26 	beq	r2,zero,14604 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   145c8:	e0bffb17 	ldw	r2,-20(fp)
   145cc:	10c00817 	ldw	r3,32(r2)
   145d0:	00bfff84 	movi	r2,-2
   145d4:	1886703a 	and	r3,r3,r2
   145d8:	e0bffb17 	ldw	r2,-20(fp)
   145dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   145e0:	e0bffc17 	ldw	r2,-16(fp)
   145e4:	10800104 	addi	r2,r2,4
   145e8:	1007883a 	mov	r3,r2
   145ec:	e0bffb17 	ldw	r2,-20(fp)
   145f0:	10800817 	ldw	r2,32(r2)
   145f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	10800104 	addi	r2,r2,4
   14600:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14604:	e0bffd17 	ldw	r2,-12(fp)
   14608:	1080800c 	andi	r2,r2,512
   1460c:	103fbe26 	beq	r2,zero,14508 <_gp+0xffff4c88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14610:	e0bffd17 	ldw	r2,-12(fp)
   14614:	1004d43a 	srli	r2,r2,16
   14618:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1461c:	00001406 	br	14670 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14620:	e0bffc17 	ldw	r2,-16(fp)
   14624:	e0fffb17 	ldw	r3,-20(fp)
   14628:	18c00d17 	ldw	r3,52(r3)
   1462c:	e13ffb17 	ldw	r4,-20(fp)
   14630:	20c7883a 	add	r3,r4,r3
   14634:	18c20e04 	addi	r3,r3,2104
   14638:	18c00003 	ldbu	r3,0(r3)
   1463c:	18c03fcc 	andi	r3,r3,255
   14640:	18c0201c 	xori	r3,r3,128
   14644:	18ffe004 	addi	r3,r3,-128
   14648:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1464c:	e0bffb17 	ldw	r2,-20(fp)
   14650:	10800d17 	ldw	r2,52(r2)
   14654:	10800044 	addi	r2,r2,1
   14658:	10c1ffcc 	andi	r3,r2,2047
   1465c:	e0bffb17 	ldw	r2,-20(fp)
   14660:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   14664:	e0bffa17 	ldw	r2,-24(fp)
   14668:	10bfffc4 	addi	r2,r2,-1
   1466c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14670:	e0bffa17 	ldw	r2,-24(fp)
   14674:	10000526 	beq	r2,zero,1468c <altera_avalon_jtag_uart_irq+0x1a8>
   14678:	e0bffb17 	ldw	r2,-20(fp)
   1467c:	10c00d17 	ldw	r3,52(r2)
   14680:	e0bffb17 	ldw	r2,-20(fp)
   14684:	10800c17 	ldw	r2,48(r2)
   14688:	18bfe51e 	bne	r3,r2,14620 <_gp+0xffff4da0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1468c:	e0bffa17 	ldw	r2,-24(fp)
   14690:	103f9d26 	beq	r2,zero,14508 <_gp+0xffff4c88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14694:	e0bffb17 	ldw	r2,-20(fp)
   14698:	10c00817 	ldw	r3,32(r2)
   1469c:	00bfff44 	movi	r2,-3
   146a0:	1886703a 	and	r3,r3,r2
   146a4:	e0bffb17 	ldw	r2,-20(fp)
   146a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   146ac:	e0bffb17 	ldw	r2,-20(fp)
   146b0:	10800017 	ldw	r2,0(r2)
   146b4:	10800104 	addi	r2,r2,4
   146b8:	1007883a 	mov	r3,r2
   146bc:	e0bffb17 	ldw	r2,-20(fp)
   146c0:	10800817 	ldw	r2,32(r2)
   146c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   146c8:	e0bffc17 	ldw	r2,-16(fp)
   146cc:	10800104 	addi	r2,r2,4
   146d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   146d4:	003f8c06 	br	14508 <_gp+0xffff4c88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   146d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   146dc:	0001883a 	nop
   146e0:	e037883a 	mov	sp,fp
   146e4:	df000017 	ldw	fp,0(sp)
   146e8:	dec00104 	addi	sp,sp,4
   146ec:	f800283a 	ret

000146f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   146f0:	defff804 	addi	sp,sp,-32
   146f4:	df000715 	stw	fp,28(sp)
   146f8:	df000704 	addi	fp,sp,28
   146fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14700:	e0bffb17 	ldw	r2,-20(fp)
   14704:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14708:	e0bff917 	ldw	r2,-28(fp)
   1470c:	10800017 	ldw	r2,0(r2)
   14710:	10800104 	addi	r2,r2,4
   14714:	10800037 	ldwio	r2,0(r2)
   14718:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1471c:	e0bffa17 	ldw	r2,-24(fp)
   14720:	1081000c 	andi	r2,r2,1024
   14724:	10000b26 	beq	r2,zero,14754 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14728:	e0bff917 	ldw	r2,-28(fp)
   1472c:	10800017 	ldw	r2,0(r2)
   14730:	10800104 	addi	r2,r2,4
   14734:	1007883a 	mov	r3,r2
   14738:	e0bff917 	ldw	r2,-28(fp)
   1473c:	10800817 	ldw	r2,32(r2)
   14740:	10810014 	ori	r2,r2,1024
   14744:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14748:	e0bff917 	ldw	r2,-28(fp)
   1474c:	10000915 	stw	zero,36(r2)
   14750:	00000a06 	br	1477c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14754:	e0bff917 	ldw	r2,-28(fp)
   14758:	10c00917 	ldw	r3,36(r2)
   1475c:	00a00034 	movhi	r2,32768
   14760:	10bfff04 	addi	r2,r2,-4
   14764:	10c00536 	bltu	r2,r3,1477c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   14768:	e0bff917 	ldw	r2,-28(fp)
   1476c:	10800917 	ldw	r2,36(r2)
   14770:	10c00044 	addi	r3,r2,1
   14774:	e0bff917 	ldw	r2,-28(fp)
   14778:	10c00915 	stw	r3,36(r2)
   1477c:	d0a6c017 	ldw	r2,-25856(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14780:	e037883a 	mov	sp,fp
   14784:	df000017 	ldw	fp,0(sp)
   14788:	dec00104 	addi	sp,sp,4
   1478c:	f800283a 	ret

00014790 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14790:	defffd04 	addi	sp,sp,-12
   14794:	df000215 	stw	fp,8(sp)
   14798:	df000204 	addi	fp,sp,8
   1479c:	e13ffe15 	stw	r4,-8(fp)
   147a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   147a4:	00000506 	br	147bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   147a8:	e0bfff17 	ldw	r2,-4(fp)
   147ac:	1090000c 	andi	r2,r2,16384
   147b0:	10000226 	beq	r2,zero,147bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   147b4:	00bffd44 	movi	r2,-11
   147b8:	00000b06 	br	147e8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   147bc:	e0bffe17 	ldw	r2,-8(fp)
   147c0:	10c00d17 	ldw	r3,52(r2)
   147c4:	e0bffe17 	ldw	r2,-8(fp)
   147c8:	10800c17 	ldw	r2,48(r2)
   147cc:	18800526 	beq	r3,r2,147e4 <altera_avalon_jtag_uart_close+0x54>
   147d0:	e0bffe17 	ldw	r2,-8(fp)
   147d4:	10c00917 	ldw	r3,36(r2)
   147d8:	e0bffe17 	ldw	r2,-8(fp)
   147dc:	10800117 	ldw	r2,4(r2)
   147e0:	18bff136 	bltu	r3,r2,147a8 <_gp+0xffff4f28>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   147e4:	0005883a 	mov	r2,zero
}
   147e8:	e037883a 	mov	sp,fp
   147ec:	df000017 	ldw	fp,0(sp)
   147f0:	dec00104 	addi	sp,sp,4
   147f4:	f800283a 	ret

000147f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   147f8:	defffa04 	addi	sp,sp,-24
   147fc:	df000515 	stw	fp,20(sp)
   14800:	df000504 	addi	fp,sp,20
   14804:	e13ffd15 	stw	r4,-12(fp)
   14808:	e17ffe15 	stw	r5,-8(fp)
   1480c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14810:	00bff9c4 	movi	r2,-25
   14814:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14818:	e0bffe17 	ldw	r2,-8(fp)
   1481c:	10da8060 	cmpeqi	r3,r2,27137
   14820:	1800031e 	bne	r3,zero,14830 <altera_avalon_jtag_uart_ioctl+0x38>
   14824:	109a80a0 	cmpeqi	r2,r2,27138
   14828:	1000181e 	bne	r2,zero,1488c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1482c:	00002906 	br	148d4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14830:	e0bffd17 	ldw	r2,-12(fp)
   14834:	10c00117 	ldw	r3,4(r2)
   14838:	00a00034 	movhi	r2,32768
   1483c:	10bfffc4 	addi	r2,r2,-1
   14840:	18802126 	beq	r3,r2,148c8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   14844:	e0bfff17 	ldw	r2,-4(fp)
   14848:	10800017 	ldw	r2,0(r2)
   1484c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14850:	e0bffc17 	ldw	r2,-16(fp)
   14854:	10800090 	cmplti	r2,r2,2
   14858:	1000061e 	bne	r2,zero,14874 <altera_avalon_jtag_uart_ioctl+0x7c>
   1485c:	e0fffc17 	ldw	r3,-16(fp)
   14860:	00a00034 	movhi	r2,32768
   14864:	10bfffc4 	addi	r2,r2,-1
   14868:	18800226 	beq	r3,r2,14874 <altera_avalon_jtag_uart_ioctl+0x7c>
   1486c:	e0bffc17 	ldw	r2,-16(fp)
   14870:	00000206 	br	1487c <altera_avalon_jtag_uart_ioctl+0x84>
   14874:	00a00034 	movhi	r2,32768
   14878:	10bfff84 	addi	r2,r2,-2
   1487c:	e0fffd17 	ldw	r3,-12(fp)
   14880:	18800115 	stw	r2,4(r3)
      rc = 0;
   14884:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14888:	00000f06 	br	148c8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1488c:	e0bffd17 	ldw	r2,-12(fp)
   14890:	10c00117 	ldw	r3,4(r2)
   14894:	00a00034 	movhi	r2,32768
   14898:	10bfffc4 	addi	r2,r2,-1
   1489c:	18800c26 	beq	r3,r2,148d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   148a0:	e0bffd17 	ldw	r2,-12(fp)
   148a4:	10c00917 	ldw	r3,36(r2)
   148a8:	e0bffd17 	ldw	r2,-12(fp)
   148ac:	10800117 	ldw	r2,4(r2)
   148b0:	1885803a 	cmpltu	r2,r3,r2
   148b4:	10c03fcc 	andi	r3,r2,255
   148b8:	e0bfff17 	ldw	r2,-4(fp)
   148bc:	10c00015 	stw	r3,0(r2)
      rc = 0;
   148c0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   148c4:	00000206 	br	148d0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   148c8:	0001883a 	nop
   148cc:	00000106 	br	148d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   148d0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   148d4:	e0bffb17 	ldw	r2,-20(fp)
}
   148d8:	e037883a 	mov	sp,fp
   148dc:	df000017 	ldw	fp,0(sp)
   148e0:	dec00104 	addi	sp,sp,4
   148e4:	f800283a 	ret

000148e8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   148e8:	defff304 	addi	sp,sp,-52
   148ec:	dfc00c15 	stw	ra,48(sp)
   148f0:	df000b15 	stw	fp,44(sp)
   148f4:	df000b04 	addi	fp,sp,44
   148f8:	e13ffc15 	stw	r4,-16(fp)
   148fc:	e17ffd15 	stw	r5,-12(fp)
   14900:	e1bffe15 	stw	r6,-8(fp)
   14904:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14908:	e0bffd17 	ldw	r2,-12(fp)
   1490c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14910:	00004706 	br	14a30 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14914:	e0bffc17 	ldw	r2,-16(fp)
   14918:	10800a17 	ldw	r2,40(r2)
   1491c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14920:	e0bffc17 	ldw	r2,-16(fp)
   14924:	10800b17 	ldw	r2,44(r2)
   14928:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1492c:	e0fff717 	ldw	r3,-36(fp)
   14930:	e0bff817 	ldw	r2,-32(fp)
   14934:	18800536 	bltu	r3,r2,1494c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14938:	e0fff717 	ldw	r3,-36(fp)
   1493c:	e0bff817 	ldw	r2,-32(fp)
   14940:	1885c83a 	sub	r2,r3,r2
   14944:	e0bff615 	stw	r2,-40(fp)
   14948:	00000406 	br	1495c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1494c:	00c20004 	movi	r3,2048
   14950:	e0bff817 	ldw	r2,-32(fp)
   14954:	1885c83a 	sub	r2,r3,r2
   14958:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1495c:	e0bff617 	ldw	r2,-40(fp)
   14960:	10001e26 	beq	r2,zero,149dc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14964:	e0fffe17 	ldw	r3,-8(fp)
   14968:	e0bff617 	ldw	r2,-40(fp)
   1496c:	1880022e 	bgeu	r3,r2,14978 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14970:	e0bffe17 	ldw	r2,-8(fp)
   14974:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   14978:	e0bffc17 	ldw	r2,-16(fp)
   1497c:	10c00e04 	addi	r3,r2,56
   14980:	e0bff817 	ldw	r2,-32(fp)
   14984:	1885883a 	add	r2,r3,r2
   14988:	e1bff617 	ldw	r6,-40(fp)
   1498c:	100b883a 	mov	r5,r2
   14990:	e13ff517 	ldw	r4,-44(fp)
   14994:	0011e380 	call	11e38 <memcpy>
      ptr   += n;
   14998:	e0fff517 	ldw	r3,-44(fp)
   1499c:	e0bff617 	ldw	r2,-40(fp)
   149a0:	1885883a 	add	r2,r3,r2
   149a4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   149a8:	e0fffe17 	ldw	r3,-8(fp)
   149ac:	e0bff617 	ldw	r2,-40(fp)
   149b0:	1885c83a 	sub	r2,r3,r2
   149b4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   149b8:	e0fff817 	ldw	r3,-32(fp)
   149bc:	e0bff617 	ldw	r2,-40(fp)
   149c0:	1885883a 	add	r2,r3,r2
   149c4:	10c1ffcc 	andi	r3,r2,2047
   149c8:	e0bffc17 	ldw	r2,-16(fp)
   149cc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   149d0:	e0bffe17 	ldw	r2,-8(fp)
   149d4:	00bfcf16 	blt	zero,r2,14914 <_gp+0xffff5094>
   149d8:	00000106 	br	149e0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   149dc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   149e0:	e0fff517 	ldw	r3,-44(fp)
   149e4:	e0bffd17 	ldw	r2,-12(fp)
   149e8:	1880141e 	bne	r3,r2,14a3c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   149ec:	e0bfff17 	ldw	r2,-4(fp)
   149f0:	1090000c 	andi	r2,r2,16384
   149f4:	1000131e 	bne	r2,zero,14a44 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   149f8:	0001883a 	nop
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	10c00a17 	ldw	r3,40(r2)
   14a04:	e0bff717 	ldw	r2,-36(fp)
   14a08:	1880051e 	bne	r3,r2,14a20 <altera_avalon_jtag_uart_read+0x138>
   14a0c:	e0bffc17 	ldw	r2,-16(fp)
   14a10:	10c00917 	ldw	r3,36(r2)
   14a14:	e0bffc17 	ldw	r2,-16(fp)
   14a18:	10800117 	ldw	r2,4(r2)
   14a1c:	18bff736 	bltu	r3,r2,149fc <_gp+0xffff517c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14a20:	e0bffc17 	ldw	r2,-16(fp)
   14a24:	10c00a17 	ldw	r3,40(r2)
   14a28:	e0bff717 	ldw	r2,-36(fp)
   14a2c:	18800726 	beq	r3,r2,14a4c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14a30:	e0bffe17 	ldw	r2,-8(fp)
   14a34:	00bfb716 	blt	zero,r2,14914 <_gp+0xffff5094>
   14a38:	00000506 	br	14a50 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   14a3c:	0001883a 	nop
   14a40:	00000306 	br	14a50 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   14a44:	0001883a 	nop
   14a48:	00000106 	br	14a50 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   14a4c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14a50:	e0fff517 	ldw	r3,-44(fp)
   14a54:	e0bffd17 	ldw	r2,-12(fp)
   14a58:	18801826 	beq	r3,r2,14abc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a5c:	0005303a 	rdctl	r2,status
   14a60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a64:	e0fffb17 	ldw	r3,-20(fp)
   14a68:	00bfff84 	movi	r2,-2
   14a6c:	1884703a 	and	r2,r3,r2
   14a70:	1001703a 	wrctl	status,r2
  
  return context;
   14a74:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   14a78:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14a7c:	e0bffc17 	ldw	r2,-16(fp)
   14a80:	10800817 	ldw	r2,32(r2)
   14a84:	10c00054 	ori	r3,r2,1
   14a88:	e0bffc17 	ldw	r2,-16(fp)
   14a8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14a90:	e0bffc17 	ldw	r2,-16(fp)
   14a94:	10800017 	ldw	r2,0(r2)
   14a98:	10800104 	addi	r2,r2,4
   14a9c:	1007883a 	mov	r3,r2
   14aa0:	e0bffc17 	ldw	r2,-16(fp)
   14aa4:	10800817 	ldw	r2,32(r2)
   14aa8:	18800035 	stwio	r2,0(r3)
   14aac:	e0bffa17 	ldw	r2,-24(fp)
   14ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ab4:	e0bff917 	ldw	r2,-28(fp)
   14ab8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14abc:	e0fff517 	ldw	r3,-44(fp)
   14ac0:	e0bffd17 	ldw	r2,-12(fp)
   14ac4:	18800426 	beq	r3,r2,14ad8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14ac8:	e0fff517 	ldw	r3,-44(fp)
   14acc:	e0bffd17 	ldw	r2,-12(fp)
   14ad0:	1885c83a 	sub	r2,r3,r2
   14ad4:	00000606 	br	14af0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14ad8:	e0bfff17 	ldw	r2,-4(fp)
   14adc:	1090000c 	andi	r2,r2,16384
   14ae0:	10000226 	beq	r2,zero,14aec <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14ae4:	00bffd44 	movi	r2,-11
   14ae8:	00000106 	br	14af0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   14aec:	00bffec4 	movi	r2,-5
}
   14af0:	e037883a 	mov	sp,fp
   14af4:	dfc00117 	ldw	ra,4(sp)
   14af8:	df000017 	ldw	fp,0(sp)
   14afc:	dec00204 	addi	sp,sp,8
   14b00:	f800283a 	ret

00014b04 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14b04:	defff304 	addi	sp,sp,-52
   14b08:	dfc00c15 	stw	ra,48(sp)
   14b0c:	df000b15 	stw	fp,44(sp)
   14b10:	df000b04 	addi	fp,sp,44
   14b14:	e13ffc15 	stw	r4,-16(fp)
   14b18:	e17ffd15 	stw	r5,-12(fp)
   14b1c:	e1bffe15 	stw	r6,-8(fp)
   14b20:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14b24:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14b28:	e0bffd17 	ldw	r2,-12(fp)
   14b2c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14b30:	00003706 	br	14c10 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14b34:	e0bffc17 	ldw	r2,-16(fp)
   14b38:	10800c17 	ldw	r2,48(r2)
   14b3c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   14b40:	e0bffc17 	ldw	r2,-16(fp)
   14b44:	10800d17 	ldw	r2,52(r2)
   14b48:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   14b4c:	e0fff917 	ldw	r3,-28(fp)
   14b50:	e0bff517 	ldw	r2,-44(fp)
   14b54:	1880062e 	bgeu	r3,r2,14b70 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14b58:	e0fff517 	ldw	r3,-44(fp)
   14b5c:	e0bff917 	ldw	r2,-28(fp)
   14b60:	1885c83a 	sub	r2,r3,r2
   14b64:	10bfffc4 	addi	r2,r2,-1
   14b68:	e0bff615 	stw	r2,-40(fp)
   14b6c:	00000b06 	br	14b9c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14b70:	e0bff517 	ldw	r2,-44(fp)
   14b74:	10000526 	beq	r2,zero,14b8c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14b78:	00c20004 	movi	r3,2048
   14b7c:	e0bff917 	ldw	r2,-28(fp)
   14b80:	1885c83a 	sub	r2,r3,r2
   14b84:	e0bff615 	stw	r2,-40(fp)
   14b88:	00000406 	br	14b9c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14b8c:	00c1ffc4 	movi	r3,2047
   14b90:	e0bff917 	ldw	r2,-28(fp)
   14b94:	1885c83a 	sub	r2,r3,r2
   14b98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   14b9c:	e0bff617 	ldw	r2,-40(fp)
   14ba0:	10001e26 	beq	r2,zero,14c1c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14ba4:	e0fffe17 	ldw	r3,-8(fp)
   14ba8:	e0bff617 	ldw	r2,-40(fp)
   14bac:	1880022e 	bgeu	r3,r2,14bb8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14bb0:	e0bffe17 	ldw	r2,-8(fp)
   14bb4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14bb8:	e0bffc17 	ldw	r2,-16(fp)
   14bbc:	10c20e04 	addi	r3,r2,2104
   14bc0:	e0bff917 	ldw	r2,-28(fp)
   14bc4:	1885883a 	add	r2,r3,r2
   14bc8:	e1bff617 	ldw	r6,-40(fp)
   14bcc:	e17ffd17 	ldw	r5,-12(fp)
   14bd0:	1009883a 	mov	r4,r2
   14bd4:	0011e380 	call	11e38 <memcpy>
      ptr   += n;
   14bd8:	e0fffd17 	ldw	r3,-12(fp)
   14bdc:	e0bff617 	ldw	r2,-40(fp)
   14be0:	1885883a 	add	r2,r3,r2
   14be4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14be8:	e0fffe17 	ldw	r3,-8(fp)
   14bec:	e0bff617 	ldw	r2,-40(fp)
   14bf0:	1885c83a 	sub	r2,r3,r2
   14bf4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14bf8:	e0fff917 	ldw	r3,-28(fp)
   14bfc:	e0bff617 	ldw	r2,-40(fp)
   14c00:	1885883a 	add	r2,r3,r2
   14c04:	10c1ffcc 	andi	r3,r2,2047
   14c08:	e0bffc17 	ldw	r2,-16(fp)
   14c0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14c10:	e0bffe17 	ldw	r2,-8(fp)
   14c14:	00bfc716 	blt	zero,r2,14b34 <_gp+0xffff52b4>
   14c18:	00000106 	br	14c20 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   14c1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c20:	0005303a 	rdctl	r2,status
   14c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c28:	e0fffb17 	ldw	r3,-20(fp)
   14c2c:	00bfff84 	movi	r2,-2
   14c30:	1884703a 	and	r2,r3,r2
   14c34:	1001703a 	wrctl	status,r2
  
  return context;
   14c38:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14c3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14c40:	e0bffc17 	ldw	r2,-16(fp)
   14c44:	10800817 	ldw	r2,32(r2)
   14c48:	10c00094 	ori	r3,r2,2
   14c4c:	e0bffc17 	ldw	r2,-16(fp)
   14c50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14c54:	e0bffc17 	ldw	r2,-16(fp)
   14c58:	10800017 	ldw	r2,0(r2)
   14c5c:	10800104 	addi	r2,r2,4
   14c60:	1007883a 	mov	r3,r2
   14c64:	e0bffc17 	ldw	r2,-16(fp)
   14c68:	10800817 	ldw	r2,32(r2)
   14c6c:	18800035 	stwio	r2,0(r3)
   14c70:	e0bffa17 	ldw	r2,-24(fp)
   14c74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c78:	e0bff817 	ldw	r2,-32(fp)
   14c7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   14c80:	e0bffe17 	ldw	r2,-8(fp)
   14c84:	0080100e 	bge	zero,r2,14cc8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   14c88:	e0bfff17 	ldw	r2,-4(fp)
   14c8c:	1090000c 	andi	r2,r2,16384
   14c90:	1000101e 	bne	r2,zero,14cd4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14c94:	0001883a 	nop
   14c98:	e0bffc17 	ldw	r2,-16(fp)
   14c9c:	10c00d17 	ldw	r3,52(r2)
   14ca0:	e0bff517 	ldw	r2,-44(fp)
   14ca4:	1880051e 	bne	r3,r2,14cbc <altera_avalon_jtag_uart_write+0x1b8>
   14ca8:	e0bffc17 	ldw	r2,-16(fp)
   14cac:	10c00917 	ldw	r3,36(r2)
   14cb0:	e0bffc17 	ldw	r2,-16(fp)
   14cb4:	10800117 	ldw	r2,4(r2)
   14cb8:	18bff736 	bltu	r3,r2,14c98 <_gp+0xffff5418>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14cbc:	e0bffc17 	ldw	r2,-16(fp)
   14cc0:	10800917 	ldw	r2,36(r2)
   14cc4:	1000051e 	bne	r2,zero,14cdc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14cc8:	e0bffe17 	ldw	r2,-8(fp)
   14ccc:	00bfd016 	blt	zero,r2,14c10 <_gp+0xffff5390>
   14cd0:	00000306 	br	14ce0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14cd4:	0001883a 	nop
   14cd8:	00000106 	br	14ce0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   14cdc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14ce0:	e0fffd17 	ldw	r3,-12(fp)
   14ce4:	e0bff717 	ldw	r2,-36(fp)
   14ce8:	18800426 	beq	r3,r2,14cfc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   14cec:	e0fffd17 	ldw	r3,-12(fp)
   14cf0:	e0bff717 	ldw	r2,-36(fp)
   14cf4:	1885c83a 	sub	r2,r3,r2
   14cf8:	00000606 	br	14d14 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   14cfc:	e0bfff17 	ldw	r2,-4(fp)
   14d00:	1090000c 	andi	r2,r2,16384
   14d04:	10000226 	beq	r2,zero,14d10 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14d08:	00bffd44 	movi	r2,-11
   14d0c:	00000106 	br	14d14 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14d10:	00bffec4 	movi	r2,-5
}
   14d14:	e037883a 	mov	sp,fp
   14d18:	dfc00117 	ldw	ra,4(sp)
   14d1c:	df000017 	ldw	fp,0(sp)
   14d20:	dec00204 	addi	sp,sp,8
   14d24:	f800283a 	ret

00014d28 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   14d28:	defffa04 	addi	sp,sp,-24
   14d2c:	dfc00515 	stw	ra,20(sp)
   14d30:	df000415 	stw	fp,16(sp)
   14d34:	df000404 	addi	fp,sp,16
   14d38:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   14d3c:	0007883a 	mov	r3,zero
   14d40:	e0bfff17 	ldw	r2,-4(fp)
   14d44:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   14d48:	e0bfff17 	ldw	r2,-4(fp)
   14d4c:	10800104 	addi	r2,r2,4
   14d50:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d54:	0005303a 	rdctl	r2,status
   14d58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d5c:	e0fffd17 	ldw	r3,-12(fp)
   14d60:	00bfff84 	movi	r2,-2
   14d64:	1884703a 	and	r2,r3,r2
   14d68:	1001703a 	wrctl	status,r2
  
  return context;
   14d6c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   14d70:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   14d74:	00156080 	call	15608 <alt_tick>
   14d78:	e0bffc17 	ldw	r2,-16(fp)
   14d7c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d80:	e0bffe17 	ldw	r2,-8(fp)
   14d84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   14d88:	0001883a 	nop
   14d8c:	e037883a 	mov	sp,fp
   14d90:	dfc00117 	ldw	ra,4(sp)
   14d94:	df000017 	ldw	fp,0(sp)
   14d98:	dec00204 	addi	sp,sp,8
   14d9c:	f800283a 	ret

00014da0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   14da0:	defff804 	addi	sp,sp,-32
   14da4:	dfc00715 	stw	ra,28(sp)
   14da8:	df000615 	stw	fp,24(sp)
   14dac:	df000604 	addi	fp,sp,24
   14db0:	e13ffc15 	stw	r4,-16(fp)
   14db4:	e17ffd15 	stw	r5,-12(fp)
   14db8:	e1bffe15 	stw	r6,-8(fp)
   14dbc:	e1ffff15 	stw	r7,-4(fp)
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   14dc8:	d0a6c017 	ldw	r2,-25856(gp)
   14dcc:	1000021e 	bne	r2,zero,14dd8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   14dd0:	e0bffb17 	ldw	r2,-20(fp)
   14dd4:	d0a6c015 	stw	r2,-25856(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   14dd8:	e0bffc17 	ldw	r2,-16(fp)
   14ddc:	10800104 	addi	r2,r2,4
   14de0:	00c001c4 	movi	r3,7
   14de4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   14de8:	d8000015 	stw	zero,0(sp)
   14dec:	e1fffc17 	ldw	r7,-16(fp)
   14df0:	01800074 	movhi	r6,1
   14df4:	31934a04 	addi	r6,r6,19752
   14df8:	e17ffe17 	ldw	r5,-8(fp)
   14dfc:	e13ffd17 	ldw	r4,-12(fp)
   14e00:	00138300 	call	13830 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   14e04:	0001883a 	nop
   14e08:	e037883a 	mov	sp,fp
   14e0c:	dfc00117 	ldw	ra,4(sp)
   14e10:	df000017 	ldw	fp,0(sp)
   14e14:	dec00204 	addi	sp,sp,8
   14e18:	f800283a 	ret

00014e1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14e1c:	defff504 	addi	sp,sp,-44
   14e20:	df000a15 	stw	fp,40(sp)
   14e24:	df000a04 	addi	fp,sp,40
   14e28:	e13ffc15 	stw	r4,-16(fp)
   14e2c:	e17ffd15 	stw	r5,-12(fp)
   14e30:	e1bffe15 	stw	r6,-8(fp)
   14e34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   14e38:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14e3c:	d0a6c017 	ldw	r2,-25856(gp)
  
  if (alt_ticks_per_second ())
   14e40:	10003c26 	beq	r2,zero,14f34 <alt_alarm_start+0x118>
  {
    if (alarm)
   14e44:	e0bffc17 	ldw	r2,-16(fp)
   14e48:	10003826 	beq	r2,zero,14f2c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   14e4c:	e0bffc17 	ldw	r2,-16(fp)
   14e50:	e0fffe17 	ldw	r3,-8(fp)
   14e54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   14e58:	e0bffc17 	ldw	r2,-16(fp)
   14e5c:	e0ffff17 	ldw	r3,-4(fp)
   14e60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e64:	0005303a 	rdctl	r2,status
   14e68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e6c:	e0fff917 	ldw	r3,-28(fp)
   14e70:	00bfff84 	movi	r2,-2
   14e74:	1884703a 	and	r2,r3,r2
   14e78:	1001703a 	wrctl	status,r2
  
  return context;
   14e7c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   14e80:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14e84:	d0a6c117 	ldw	r2,-25852(gp)
      
      current_nticks = alt_nticks();
   14e88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   14e8c:	e0fffd17 	ldw	r3,-12(fp)
   14e90:	e0bff617 	ldw	r2,-40(fp)
   14e94:	1885883a 	add	r2,r3,r2
   14e98:	10c00044 	addi	r3,r2,1
   14e9c:	e0bffc17 	ldw	r2,-16(fp)
   14ea0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14ea4:	e0bffc17 	ldw	r2,-16(fp)
   14ea8:	10c00217 	ldw	r3,8(r2)
   14eac:	e0bff617 	ldw	r2,-40(fp)
   14eb0:	1880042e 	bgeu	r3,r2,14ec4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14eb4:	e0bffc17 	ldw	r2,-16(fp)
   14eb8:	00c00044 	movi	r3,1
   14ebc:	10c00405 	stb	r3,16(r2)
   14ec0:	00000206 	br	14ecc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14ec4:	e0bffc17 	ldw	r2,-16(fp)
   14ec8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14ecc:	e0bffc17 	ldw	r2,-16(fp)
   14ed0:	d0e00d04 	addi	r3,gp,-32716
   14ed4:	e0fffa15 	stw	r3,-24(fp)
   14ed8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14edc:	e0bffb17 	ldw	r2,-20(fp)
   14ee0:	e0fffa17 	ldw	r3,-24(fp)
   14ee4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14ee8:	e0bffa17 	ldw	r2,-24(fp)
   14eec:	10c00017 	ldw	r3,0(r2)
   14ef0:	e0bffb17 	ldw	r2,-20(fp)
   14ef4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14ef8:	e0bffa17 	ldw	r2,-24(fp)
   14efc:	10800017 	ldw	r2,0(r2)
   14f00:	e0fffb17 	ldw	r3,-20(fp)
   14f04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14f08:	e0bffa17 	ldw	r2,-24(fp)
   14f0c:	e0fffb17 	ldw	r3,-20(fp)
   14f10:	10c00015 	stw	r3,0(r2)
   14f14:	e0bff817 	ldw	r2,-32(fp)
   14f18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f1c:	e0bff717 	ldw	r2,-36(fp)
   14f20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14f24:	0005883a 	mov	r2,zero
   14f28:	00000306 	br	14f38 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14f2c:	00bffa84 	movi	r2,-22
   14f30:	00000106 	br	14f38 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   14f34:	00bfde84 	movi	r2,-134
  }
}
   14f38:	e037883a 	mov	sp,fp
   14f3c:	df000017 	ldw	fp,0(sp)
   14f40:	dec00104 	addi	sp,sp,4
   14f44:	f800283a 	ret

00014f48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14f48:	deffff04 	addi	sp,sp,-4
   14f4c:	df000015 	stw	fp,0(sp)
   14f50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14f54:	0001883a 	nop
   14f58:	e037883a 	mov	sp,fp
   14f5c:	df000017 	ldw	fp,0(sp)
   14f60:	dec00104 	addi	sp,sp,4
   14f64:	f800283a 	ret

00014f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14f68:	defffe04 	addi	sp,sp,-8
   14f6c:	dfc00115 	stw	ra,4(sp)
   14f70:	df000015 	stw	fp,0(sp)
   14f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14f78:	d0a00a17 	ldw	r2,-32728(gp)
   14f7c:	10000326 	beq	r2,zero,14f8c <alt_get_errno+0x24>
   14f80:	d0a00a17 	ldw	r2,-32728(gp)
   14f84:	103ee83a 	callr	r2
   14f88:	00000106 	br	14f90 <alt_get_errno+0x28>
   14f8c:	d0a6ba04 	addi	r2,gp,-25880
}
   14f90:	e037883a 	mov	sp,fp
   14f94:	dfc00117 	ldw	ra,4(sp)
   14f98:	df000017 	ldw	fp,0(sp)
   14f9c:	dec00204 	addi	sp,sp,8
   14fa0:	f800283a 	ret

00014fa4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14fa4:	defffa04 	addi	sp,sp,-24
   14fa8:	dfc00515 	stw	ra,20(sp)
   14fac:	df000415 	stw	fp,16(sp)
   14fb0:	df000404 	addi	fp,sp,16
   14fb4:	e13ffe15 	stw	r4,-8(fp)
   14fb8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14fbc:	e0bffe17 	ldw	r2,-8(fp)
   14fc0:	10000326 	beq	r2,zero,14fd0 <alt_dev_llist_insert+0x2c>
   14fc4:	e0bffe17 	ldw	r2,-8(fp)
   14fc8:	10800217 	ldw	r2,8(r2)
   14fcc:	1000061e 	bne	r2,zero,14fe8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14fd0:	0014f680 	call	14f68 <alt_get_errno>
   14fd4:	1007883a 	mov	r3,r2
   14fd8:	00800584 	movi	r2,22
   14fdc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14fe0:	00bffa84 	movi	r2,-22
   14fe4:	00001306 	br	15034 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   14fe8:	e0bffe17 	ldw	r2,-8(fp)
   14fec:	e0ffff17 	ldw	r3,-4(fp)
   14ff0:	e0fffc15 	stw	r3,-16(fp)
   14ff4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	e0fffc17 	ldw	r3,-16(fp)
   15000:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15004:	e0bffc17 	ldw	r2,-16(fp)
   15008:	10c00017 	ldw	r3,0(r2)
   1500c:	e0bffd17 	ldw	r2,-12(fp)
   15010:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15014:	e0bffc17 	ldw	r2,-16(fp)
   15018:	10800017 	ldw	r2,0(r2)
   1501c:	e0fffd17 	ldw	r3,-12(fp)
   15020:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15024:	e0bffc17 	ldw	r2,-16(fp)
   15028:	e0fffd17 	ldw	r3,-12(fp)
   1502c:	10c00015 	stw	r3,0(r2)

  return 0;  
   15030:	0005883a 	mov	r2,zero
}
   15034:	e037883a 	mov	sp,fp
   15038:	dfc00117 	ldw	ra,4(sp)
   1503c:	df000017 	ldw	fp,0(sp)
   15040:	dec00204 	addi	sp,sp,8
   15044:	f800283a 	ret

00015048 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15048:	defffd04 	addi	sp,sp,-12
   1504c:	dfc00215 	stw	ra,8(sp)
   15050:	df000115 	stw	fp,4(sp)
   15054:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15058:	00800074 	movhi	r2,1
   1505c:	10976404 	addi	r2,r2,23952
   15060:	e0bfff15 	stw	r2,-4(fp)
   15064:	00000606 	br	15080 <_do_ctors+0x38>
        (*ctor) (); 
   15068:	e0bfff17 	ldw	r2,-4(fp)
   1506c:	10800017 	ldw	r2,0(r2)
   15070:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15074:	e0bfff17 	ldw	r2,-4(fp)
   15078:	10bfff04 	addi	r2,r2,-4
   1507c:	e0bfff15 	stw	r2,-4(fp)
   15080:	e0ffff17 	ldw	r3,-4(fp)
   15084:	00800074 	movhi	r2,1
   15088:	10976504 	addi	r2,r2,23956
   1508c:	18bff62e 	bgeu	r3,r2,15068 <_gp+0xffff57e8>
        (*ctor) (); 
}
   15090:	0001883a 	nop
   15094:	e037883a 	mov	sp,fp
   15098:	dfc00117 	ldw	ra,4(sp)
   1509c:	df000017 	ldw	fp,0(sp)
   150a0:	dec00204 	addi	sp,sp,8
   150a4:	f800283a 	ret

000150a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   150a8:	defffd04 	addi	sp,sp,-12
   150ac:	dfc00215 	stw	ra,8(sp)
   150b0:	df000115 	stw	fp,4(sp)
   150b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   150b8:	00800074 	movhi	r2,1
   150bc:	10976404 	addi	r2,r2,23952
   150c0:	e0bfff15 	stw	r2,-4(fp)
   150c4:	00000606 	br	150e0 <_do_dtors+0x38>
        (*dtor) (); 
   150c8:	e0bfff17 	ldw	r2,-4(fp)
   150cc:	10800017 	ldw	r2,0(r2)
   150d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   150d4:	e0bfff17 	ldw	r2,-4(fp)
   150d8:	10bfff04 	addi	r2,r2,-4
   150dc:	e0bfff15 	stw	r2,-4(fp)
   150e0:	e0ffff17 	ldw	r3,-4(fp)
   150e4:	00800074 	movhi	r2,1
   150e8:	10976504 	addi	r2,r2,23956
   150ec:	18bff62e 	bgeu	r3,r2,150c8 <_gp+0xffff5848>
        (*dtor) (); 
}
   150f0:	0001883a 	nop
   150f4:	e037883a 	mov	sp,fp
   150f8:	dfc00117 	ldw	ra,4(sp)
   150fc:	df000017 	ldw	fp,0(sp)
   15100:	dec00204 	addi	sp,sp,8
   15104:	f800283a 	ret

00015108 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15108:	defffe04 	addi	sp,sp,-8
   1510c:	dfc00115 	stw	ra,4(sp)
   15110:	df000015 	stw	fp,0(sp)
   15114:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   15118:	01420004 	movi	r5,2048
   1511c:	0009883a 	mov	r4,zero
   15120:	00159700 	call	15970 <alt_icache_flush>
#endif
}
   15124:	0001883a 	nop
   15128:	e037883a 	mov	sp,fp
   1512c:	dfc00117 	ldw	ra,4(sp)
   15130:	df000017 	ldw	fp,0(sp)
   15134:	dec00204 	addi	sp,sp,8
   15138:	f800283a 	ret

0001513c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1513c:	defffe04 	addi	sp,sp,-8
   15140:	df000115 	stw	fp,4(sp)
   15144:	df000104 	addi	fp,sp,4
   15148:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1514c:	e0bfff17 	ldw	r2,-4(fp)
   15150:	10bffe84 	addi	r2,r2,-6
   15154:	10c00428 	cmpgeui	r3,r2,16
   15158:	18001a1e 	bne	r3,zero,151c4 <alt_exception_cause_generated_bad_addr+0x88>
   1515c:	100690ba 	slli	r3,r2,2
   15160:	00800074 	movhi	r2,1
   15164:	10945d04 	addi	r2,r2,20852
   15168:	1885883a 	add	r2,r3,r2
   1516c:	10800017 	ldw	r2,0(r2)
   15170:	1000683a 	jmp	r2
   15174:	000151b4 	movhi	zero,1350
   15178:	000151b4 	movhi	zero,1350
   1517c:	000151c4 	movi	zero,1351
   15180:	000151c4 	movi	zero,1351
   15184:	000151c4 	movi	zero,1351
   15188:	000151b4 	movhi	zero,1350
   1518c:	000151bc 	xorhi	zero,zero,1350
   15190:	000151c4 	movi	zero,1351
   15194:	000151b4 	movhi	zero,1350
   15198:	000151b4 	movhi	zero,1350
   1519c:	000151c4 	movi	zero,1351
   151a0:	000151b4 	movhi	zero,1350
   151a4:	000151bc 	xorhi	zero,zero,1350
   151a8:	000151c4 	movi	zero,1351
   151ac:	000151c4 	movi	zero,1351
   151b0:	000151b4 	movhi	zero,1350
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   151b4:	00800044 	movi	r2,1
   151b8:	00000306 	br	151c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   151bc:	0005883a 	mov	r2,zero
   151c0:	00000106 	br	151c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   151c4:	0005883a 	mov	r2,zero
  }
}
   151c8:	e037883a 	mov	sp,fp
   151cc:	df000017 	ldw	fp,0(sp)
   151d0:	dec00104 	addi	sp,sp,4
   151d4:	f800283a 	ret

000151d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   151d8:	defff904 	addi	sp,sp,-28
   151dc:	dfc00615 	stw	ra,24(sp)
   151e0:	df000515 	stw	fp,20(sp)
   151e4:	df000504 	addi	fp,sp,20
   151e8:	e13ffc15 	stw	r4,-16(fp)
   151ec:	e17ffd15 	stw	r5,-12(fp)
   151f0:	e1bffe15 	stw	r6,-8(fp)
   151f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   151f8:	e1bfff17 	ldw	r6,-4(fp)
   151fc:	e17ffe17 	ldw	r5,-8(fp)
   15200:	e13ffd17 	ldw	r4,-12(fp)
   15204:	00154180 	call	15418 <open>
   15208:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1520c:	e0bffb17 	ldw	r2,-20(fp)
   15210:	10001c16 	blt	r2,zero,15284 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   15214:	00800074 	movhi	r2,1
   15218:	1099a804 	addi	r2,r2,26272
   1521c:	e0fffb17 	ldw	r3,-20(fp)
   15220:	18c00324 	muli	r3,r3,12
   15224:	10c5883a 	add	r2,r2,r3
   15228:	10c00017 	ldw	r3,0(r2)
   1522c:	e0bffc17 	ldw	r2,-16(fp)
   15230:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15234:	00800074 	movhi	r2,1
   15238:	1099a804 	addi	r2,r2,26272
   1523c:	e0fffb17 	ldw	r3,-20(fp)
   15240:	18c00324 	muli	r3,r3,12
   15244:	10c5883a 	add	r2,r2,r3
   15248:	10800104 	addi	r2,r2,4
   1524c:	10c00017 	ldw	r3,0(r2)
   15250:	e0bffc17 	ldw	r2,-16(fp)
   15254:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15258:	00800074 	movhi	r2,1
   1525c:	1099a804 	addi	r2,r2,26272
   15260:	e0fffb17 	ldw	r3,-20(fp)
   15264:	18c00324 	muli	r3,r3,12
   15268:	10c5883a 	add	r2,r2,r3
   1526c:	10800204 	addi	r2,r2,8
   15270:	10c00017 	ldw	r3,0(r2)
   15274:	e0bffc17 	ldw	r2,-16(fp)
   15278:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1527c:	e13ffb17 	ldw	r4,-20(fp)
   15280:	0013fa80 	call	13fa8 <alt_release_fd>
  }
} 
   15284:	0001883a 	nop
   15288:	e037883a 	mov	sp,fp
   1528c:	dfc00117 	ldw	ra,4(sp)
   15290:	df000017 	ldw	fp,0(sp)
   15294:	dec00204 	addi	sp,sp,8
   15298:	f800283a 	ret

0001529c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1529c:	defffb04 	addi	sp,sp,-20
   152a0:	dfc00415 	stw	ra,16(sp)
   152a4:	df000315 	stw	fp,12(sp)
   152a8:	df000304 	addi	fp,sp,12
   152ac:	e13ffd15 	stw	r4,-12(fp)
   152b0:	e17ffe15 	stw	r5,-8(fp)
   152b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   152b8:	01c07fc4 	movi	r7,511
   152bc:	01800044 	movi	r6,1
   152c0:	e17ffd17 	ldw	r5,-12(fp)
   152c4:	01000074 	movhi	r4,1
   152c8:	2119ab04 	addi	r4,r4,26284
   152cc:	00151d80 	call	151d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   152d0:	01c07fc4 	movi	r7,511
   152d4:	000d883a 	mov	r6,zero
   152d8:	e17ffe17 	ldw	r5,-8(fp)
   152dc:	01000074 	movhi	r4,1
   152e0:	2119a804 	addi	r4,r4,26272
   152e4:	00151d80 	call	151d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   152e8:	01c07fc4 	movi	r7,511
   152ec:	01800044 	movi	r6,1
   152f0:	e17fff17 	ldw	r5,-4(fp)
   152f4:	01000074 	movhi	r4,1
   152f8:	2119ae04 	addi	r4,r4,26296
   152fc:	00151d80 	call	151d8 <alt_open_fd>
}  
   15300:	0001883a 	nop
   15304:	e037883a 	mov	sp,fp
   15308:	dfc00117 	ldw	ra,4(sp)
   1530c:	df000017 	ldw	fp,0(sp)
   15310:	dec00204 	addi	sp,sp,8
   15314:	f800283a 	ret

00015318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15318:	defffe04 	addi	sp,sp,-8
   1531c:	dfc00115 	stw	ra,4(sp)
   15320:	df000015 	stw	fp,0(sp)
   15324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15328:	d0a00a17 	ldw	r2,-32728(gp)
   1532c:	10000326 	beq	r2,zero,1533c <alt_get_errno+0x24>
   15330:	d0a00a17 	ldw	r2,-32728(gp)
   15334:	103ee83a 	callr	r2
   15338:	00000106 	br	15340 <alt_get_errno+0x28>
   1533c:	d0a6ba04 	addi	r2,gp,-25880
}
   15340:	e037883a 	mov	sp,fp
   15344:	dfc00117 	ldw	ra,4(sp)
   15348:	df000017 	ldw	fp,0(sp)
   1534c:	dec00204 	addi	sp,sp,8
   15350:	f800283a 	ret

00015354 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15354:	defffd04 	addi	sp,sp,-12
   15358:	df000215 	stw	fp,8(sp)
   1535c:	df000204 	addi	fp,sp,8
   15360:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15364:	e0bfff17 	ldw	r2,-4(fp)
   15368:	10800217 	ldw	r2,8(r2)
   1536c:	10d00034 	orhi	r3,r2,16384
   15370:	e0bfff17 	ldw	r2,-4(fp)
   15374:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15378:	e03ffe15 	stw	zero,-8(fp)
   1537c:	00001d06 	br	153f4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15380:	00800074 	movhi	r2,1
   15384:	1099a804 	addi	r2,r2,26272
   15388:	e0fffe17 	ldw	r3,-8(fp)
   1538c:	18c00324 	muli	r3,r3,12
   15390:	10c5883a 	add	r2,r2,r3
   15394:	10c00017 	ldw	r3,0(r2)
   15398:	e0bfff17 	ldw	r2,-4(fp)
   1539c:	10800017 	ldw	r2,0(r2)
   153a0:	1880111e 	bne	r3,r2,153e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   153a4:	00800074 	movhi	r2,1
   153a8:	1099a804 	addi	r2,r2,26272
   153ac:	e0fffe17 	ldw	r3,-8(fp)
   153b0:	18c00324 	muli	r3,r3,12
   153b4:	10c5883a 	add	r2,r2,r3
   153b8:	10800204 	addi	r2,r2,8
   153bc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   153c0:	1000090e 	bge	r2,zero,153e8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   153c4:	e0bffe17 	ldw	r2,-8(fp)
   153c8:	10c00324 	muli	r3,r2,12
   153cc:	00800074 	movhi	r2,1
   153d0:	1099a804 	addi	r2,r2,26272
   153d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   153d8:	e0bfff17 	ldw	r2,-4(fp)
   153dc:	18800226 	beq	r3,r2,153e8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   153e0:	00bffcc4 	movi	r2,-13
   153e4:	00000806 	br	15408 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   153e8:	e0bffe17 	ldw	r2,-8(fp)
   153ec:	10800044 	addi	r2,r2,1
   153f0:	e0bffe15 	stw	r2,-8(fp)
   153f4:	d0a00917 	ldw	r2,-32732(gp)
   153f8:	1007883a 	mov	r3,r2
   153fc:	e0bffe17 	ldw	r2,-8(fp)
   15400:	18bfdf2e 	bgeu	r3,r2,15380 <_gp+0xffff5b00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15404:	0005883a 	mov	r2,zero
}
   15408:	e037883a 	mov	sp,fp
   1540c:	df000017 	ldw	fp,0(sp)
   15410:	dec00104 	addi	sp,sp,4
   15414:	f800283a 	ret

00015418 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15418:	defff604 	addi	sp,sp,-40
   1541c:	dfc00915 	stw	ra,36(sp)
   15420:	df000815 	stw	fp,32(sp)
   15424:	df000804 	addi	fp,sp,32
   15428:	e13ffd15 	stw	r4,-12(fp)
   1542c:	e17ffe15 	stw	r5,-8(fp)
   15430:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15434:	00bfffc4 	movi	r2,-1
   15438:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1543c:	00bffb44 	movi	r2,-19
   15440:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15444:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15448:	d1600704 	addi	r5,gp,-32740
   1544c:	e13ffd17 	ldw	r4,-12(fp)
   15450:	00157340 	call	15734 <alt_find_dev>
   15454:	e0bff815 	stw	r2,-32(fp)
   15458:	e0bff817 	ldw	r2,-32(fp)
   1545c:	1000051e 	bne	r2,zero,15474 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15460:	e13ffd17 	ldw	r4,-12(fp)
   15464:	00157c40 	call	157c4 <alt_find_file>
   15468:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1546c:	00800044 	movi	r2,1
   15470:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15474:	e0bff817 	ldw	r2,-32(fp)
   15478:	10002926 	beq	r2,zero,15520 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1547c:	e13ff817 	ldw	r4,-32(fp)
   15480:	00158cc0 	call	158cc <alt_get_fd>
   15484:	e0bff915 	stw	r2,-28(fp)
   15488:	e0bff917 	ldw	r2,-28(fp)
   1548c:	1000030e 	bge	r2,zero,1549c <open+0x84>
    {
      status = index;
   15490:	e0bff917 	ldw	r2,-28(fp)
   15494:	e0bffa15 	stw	r2,-24(fp)
   15498:	00002306 	br	15528 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1549c:	e0bff917 	ldw	r2,-28(fp)
   154a0:	10c00324 	muli	r3,r2,12
   154a4:	00800074 	movhi	r2,1
   154a8:	1099a804 	addi	r2,r2,26272
   154ac:	1885883a 	add	r2,r3,r2
   154b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   154b4:	e0fffe17 	ldw	r3,-8(fp)
   154b8:	00900034 	movhi	r2,16384
   154bc:	10bfffc4 	addi	r2,r2,-1
   154c0:	1886703a 	and	r3,r3,r2
   154c4:	e0bffc17 	ldw	r2,-16(fp)
   154c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   154cc:	e0bffb17 	ldw	r2,-20(fp)
   154d0:	1000051e 	bne	r2,zero,154e8 <open+0xd0>
   154d4:	e13ffc17 	ldw	r4,-16(fp)
   154d8:	00153540 	call	15354 <alt_file_locked>
   154dc:	e0bffa15 	stw	r2,-24(fp)
   154e0:	e0bffa17 	ldw	r2,-24(fp)
   154e4:	10001016 	blt	r2,zero,15528 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   154e8:	e0bff817 	ldw	r2,-32(fp)
   154ec:	10800317 	ldw	r2,12(r2)
   154f0:	10000826 	beq	r2,zero,15514 <open+0xfc>
   154f4:	e0bff817 	ldw	r2,-32(fp)
   154f8:	10800317 	ldw	r2,12(r2)
   154fc:	e1ffff17 	ldw	r7,-4(fp)
   15500:	e1bffe17 	ldw	r6,-8(fp)
   15504:	e17ffd17 	ldw	r5,-12(fp)
   15508:	e13ffc17 	ldw	r4,-16(fp)
   1550c:	103ee83a 	callr	r2
   15510:	00000106 	br	15518 <open+0x100>
   15514:	0005883a 	mov	r2,zero
   15518:	e0bffa15 	stw	r2,-24(fp)
   1551c:	00000206 	br	15528 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15520:	00bffb44 	movi	r2,-19
   15524:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15528:	e0bffa17 	ldw	r2,-24(fp)
   1552c:	1000090e 	bge	r2,zero,15554 <open+0x13c>
  {
    alt_release_fd (index);  
   15530:	e13ff917 	ldw	r4,-28(fp)
   15534:	0013fa80 	call	13fa8 <alt_release_fd>
    ALT_ERRNO = -status;
   15538:	00153180 	call	15318 <alt_get_errno>
   1553c:	1007883a 	mov	r3,r2
   15540:	e0bffa17 	ldw	r2,-24(fp)
   15544:	0085c83a 	sub	r2,zero,r2
   15548:	18800015 	stw	r2,0(r3)
    return -1;
   1554c:	00bfffc4 	movi	r2,-1
   15550:	00000106 	br	15558 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   15554:	e0bff917 	ldw	r2,-28(fp)
}
   15558:	e037883a 	mov	sp,fp
   1555c:	dfc00117 	ldw	ra,4(sp)
   15560:	df000017 	ldw	fp,0(sp)
   15564:	dec00204 	addi	sp,sp,8
   15568:	f800283a 	ret

0001556c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1556c:	defffa04 	addi	sp,sp,-24
   15570:	df000515 	stw	fp,20(sp)
   15574:	df000504 	addi	fp,sp,20
   15578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1557c:	0005303a 	rdctl	r2,status
   15580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15584:	e0fffc17 	ldw	r3,-16(fp)
   15588:	00bfff84 	movi	r2,-2
   1558c:	1884703a 	and	r2,r3,r2
   15590:	1001703a 	wrctl	status,r2
  
  return context;
   15594:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15598:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1559c:	e0bfff17 	ldw	r2,-4(fp)
   155a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   155a4:	e0bffd17 	ldw	r2,-12(fp)
   155a8:	10800017 	ldw	r2,0(r2)
   155ac:	e0fffd17 	ldw	r3,-12(fp)
   155b0:	18c00117 	ldw	r3,4(r3)
   155b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   155b8:	e0bffd17 	ldw	r2,-12(fp)
   155bc:	10800117 	ldw	r2,4(r2)
   155c0:	e0fffd17 	ldw	r3,-12(fp)
   155c4:	18c00017 	ldw	r3,0(r3)
   155c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   155cc:	e0bffd17 	ldw	r2,-12(fp)
   155d0:	e0fffd17 	ldw	r3,-12(fp)
   155d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   155d8:	e0bffd17 	ldw	r2,-12(fp)
   155dc:	e0fffd17 	ldw	r3,-12(fp)
   155e0:	10c00015 	stw	r3,0(r2)
   155e4:	e0bffb17 	ldw	r2,-20(fp)
   155e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155ec:	e0bffe17 	ldw	r2,-8(fp)
   155f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   155f4:	0001883a 	nop
   155f8:	e037883a 	mov	sp,fp
   155fc:	df000017 	ldw	fp,0(sp)
   15600:	dec00104 	addi	sp,sp,4
   15604:	f800283a 	ret

00015608 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15608:	defffb04 	addi	sp,sp,-20
   1560c:	dfc00415 	stw	ra,16(sp)
   15610:	df000315 	stw	fp,12(sp)
   15614:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15618:	d0a00d17 	ldw	r2,-32716(gp)
   1561c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15620:	d0a6c117 	ldw	r2,-25852(gp)
   15624:	10800044 	addi	r2,r2,1
   15628:	d0a6c115 	stw	r2,-25852(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1562c:	00002e06 	br	156e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15630:	e0bffd17 	ldw	r2,-12(fp)
   15634:	10800017 	ldw	r2,0(r2)
   15638:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1563c:	e0bffd17 	ldw	r2,-12(fp)
   15640:	10800403 	ldbu	r2,16(r2)
   15644:	10803fcc 	andi	r2,r2,255
   15648:	10000426 	beq	r2,zero,1565c <alt_tick+0x54>
   1564c:	d0a6c117 	ldw	r2,-25852(gp)
   15650:	1000021e 	bne	r2,zero,1565c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15654:	e0bffd17 	ldw	r2,-12(fp)
   15658:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1565c:	e0bffd17 	ldw	r2,-12(fp)
   15660:	10800217 	ldw	r2,8(r2)
   15664:	d0e6c117 	ldw	r3,-25852(gp)
   15668:	18801d36 	bltu	r3,r2,156e0 <alt_tick+0xd8>
   1566c:	e0bffd17 	ldw	r2,-12(fp)
   15670:	10800403 	ldbu	r2,16(r2)
   15674:	10803fcc 	andi	r2,r2,255
   15678:	1000191e 	bne	r2,zero,156e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1567c:	e0bffd17 	ldw	r2,-12(fp)
   15680:	10800317 	ldw	r2,12(r2)
   15684:	e0fffd17 	ldw	r3,-12(fp)
   15688:	18c00517 	ldw	r3,20(r3)
   1568c:	1809883a 	mov	r4,r3
   15690:	103ee83a 	callr	r2
   15694:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15698:	e0bfff17 	ldw	r2,-4(fp)
   1569c:	1000031e 	bne	r2,zero,156ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   156a0:	e13ffd17 	ldw	r4,-12(fp)
   156a4:	001556c0 	call	1556c <alt_alarm_stop>
   156a8:	00000d06 	br	156e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   156ac:	e0bffd17 	ldw	r2,-12(fp)
   156b0:	10c00217 	ldw	r3,8(r2)
   156b4:	e0bfff17 	ldw	r2,-4(fp)
   156b8:	1887883a 	add	r3,r3,r2
   156bc:	e0bffd17 	ldw	r2,-12(fp)
   156c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   156c4:	e0bffd17 	ldw	r2,-12(fp)
   156c8:	10c00217 	ldw	r3,8(r2)
   156cc:	d0a6c117 	ldw	r2,-25852(gp)
   156d0:	1880032e 	bgeu	r3,r2,156e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   156d4:	e0bffd17 	ldw	r2,-12(fp)
   156d8:	00c00044 	movi	r3,1
   156dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   156e0:	e0bffe17 	ldw	r2,-8(fp)
   156e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   156e8:	e0fffd17 	ldw	r3,-12(fp)
   156ec:	d0a00d04 	addi	r2,gp,-32716
   156f0:	18bfcf1e 	bne	r3,r2,15630 <_gp+0xffff5db0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   156f4:	0001883a 	nop
}
   156f8:	0001883a 	nop
   156fc:	e037883a 	mov	sp,fp
   15700:	dfc00117 	ldw	ra,4(sp)
   15704:	df000017 	ldw	fp,0(sp)
   15708:	dec00204 	addi	sp,sp,8
   1570c:	f800283a 	ret

00015710 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15710:	deffff04 	addi	sp,sp,-4
   15714:	df000015 	stw	fp,0(sp)
   15718:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1571c:	000170fa 	wrctl	ienable,zero
}
   15720:	0001883a 	nop
   15724:	e037883a 	mov	sp,fp
   15728:	df000017 	ldw	fp,0(sp)
   1572c:	dec00104 	addi	sp,sp,4
   15730:	f800283a 	ret

00015734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15734:	defffa04 	addi	sp,sp,-24
   15738:	dfc00515 	stw	ra,20(sp)
   1573c:	df000415 	stw	fp,16(sp)
   15740:	df000404 	addi	fp,sp,16
   15744:	e13ffe15 	stw	r4,-8(fp)
   15748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1574c:	e0bfff17 	ldw	r2,-4(fp)
   15750:	10800017 	ldw	r2,0(r2)
   15754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15758:	e13ffe17 	ldw	r4,-8(fp)
   1575c:	0010acc0 	call	10acc <strlen>
   15760:	10800044 	addi	r2,r2,1
   15764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15768:	00000d06 	br	157a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1576c:	e0bffc17 	ldw	r2,-16(fp)
   15770:	10800217 	ldw	r2,8(r2)
   15774:	e0fffd17 	ldw	r3,-12(fp)
   15778:	180d883a 	mov	r6,r3
   1577c:	e17ffe17 	ldw	r5,-8(fp)
   15780:	1009883a 	mov	r4,r2
   15784:	0015a4c0 	call	15a4c <memcmp>
   15788:	1000021e 	bne	r2,zero,15794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1578c:	e0bffc17 	ldw	r2,-16(fp)
   15790:	00000706 	br	157b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15794:	e0bffc17 	ldw	r2,-16(fp)
   15798:	10800017 	ldw	r2,0(r2)
   1579c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   157a0:	e0fffc17 	ldw	r3,-16(fp)
   157a4:	e0bfff17 	ldw	r2,-4(fp)
   157a8:	18bff01e 	bne	r3,r2,1576c <_gp+0xffff5eec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   157ac:	0005883a 	mov	r2,zero
}
   157b0:	e037883a 	mov	sp,fp
   157b4:	dfc00117 	ldw	ra,4(sp)
   157b8:	df000017 	ldw	fp,0(sp)
   157bc:	dec00204 	addi	sp,sp,8
   157c0:	f800283a 	ret

000157c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   157c4:	defffb04 	addi	sp,sp,-20
   157c8:	dfc00415 	stw	ra,16(sp)
   157cc:	df000315 	stw	fp,12(sp)
   157d0:	df000304 	addi	fp,sp,12
   157d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   157d8:	d0a00517 	ldw	r2,-32748(gp)
   157dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   157e0:	00003106 	br	158a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   157e4:	e0bffd17 	ldw	r2,-12(fp)
   157e8:	10800217 	ldw	r2,8(r2)
   157ec:	1009883a 	mov	r4,r2
   157f0:	0010acc0 	call	10acc <strlen>
   157f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   157f8:	e0bffd17 	ldw	r2,-12(fp)
   157fc:	10c00217 	ldw	r3,8(r2)
   15800:	e0bffe17 	ldw	r2,-8(fp)
   15804:	10bfffc4 	addi	r2,r2,-1
   15808:	1885883a 	add	r2,r3,r2
   1580c:	10800003 	ldbu	r2,0(r2)
   15810:	10803fcc 	andi	r2,r2,255
   15814:	1080201c 	xori	r2,r2,128
   15818:	10bfe004 	addi	r2,r2,-128
   1581c:	10800bd8 	cmpnei	r2,r2,47
   15820:	1000031e 	bne	r2,zero,15830 <alt_find_file+0x6c>
    {
      len -= 1;
   15824:	e0bffe17 	ldw	r2,-8(fp)
   15828:	10bfffc4 	addi	r2,r2,-1
   1582c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15830:	e0bffe17 	ldw	r2,-8(fp)
   15834:	e0ffff17 	ldw	r3,-4(fp)
   15838:	1885883a 	add	r2,r3,r2
   1583c:	10800003 	ldbu	r2,0(r2)
   15840:	10803fcc 	andi	r2,r2,255
   15844:	1080201c 	xori	r2,r2,128
   15848:	10bfe004 	addi	r2,r2,-128
   1584c:	10800be0 	cmpeqi	r2,r2,47
   15850:	1000081e 	bne	r2,zero,15874 <alt_find_file+0xb0>
   15854:	e0bffe17 	ldw	r2,-8(fp)
   15858:	e0ffff17 	ldw	r3,-4(fp)
   1585c:	1885883a 	add	r2,r3,r2
   15860:	10800003 	ldbu	r2,0(r2)
   15864:	10803fcc 	andi	r2,r2,255
   15868:	1080201c 	xori	r2,r2,128
   1586c:	10bfe004 	addi	r2,r2,-128
   15870:	10000a1e 	bne	r2,zero,1589c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15874:	e0bffd17 	ldw	r2,-12(fp)
   15878:	10800217 	ldw	r2,8(r2)
   1587c:	e0fffe17 	ldw	r3,-8(fp)
   15880:	180d883a 	mov	r6,r3
   15884:	e17fff17 	ldw	r5,-4(fp)
   15888:	1009883a 	mov	r4,r2
   1588c:	0015a4c0 	call	15a4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15890:	1000021e 	bne	r2,zero,1589c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15894:	e0bffd17 	ldw	r2,-12(fp)
   15898:	00000706 	br	158b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1589c:	e0bffd17 	ldw	r2,-12(fp)
   158a0:	10800017 	ldw	r2,0(r2)
   158a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   158a8:	e0fffd17 	ldw	r3,-12(fp)
   158ac:	d0a00504 	addi	r2,gp,-32748
   158b0:	18bfcc1e 	bne	r3,r2,157e4 <_gp+0xffff5f64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   158b4:	0005883a 	mov	r2,zero
}
   158b8:	e037883a 	mov	sp,fp
   158bc:	dfc00117 	ldw	ra,4(sp)
   158c0:	df000017 	ldw	fp,0(sp)
   158c4:	dec00204 	addi	sp,sp,8
   158c8:	f800283a 	ret

000158cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   158cc:	defffc04 	addi	sp,sp,-16
   158d0:	df000315 	stw	fp,12(sp)
   158d4:	df000304 	addi	fp,sp,12
   158d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   158dc:	00bffa04 	movi	r2,-24
   158e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   158e4:	e03ffd15 	stw	zero,-12(fp)
   158e8:	00001906 	br	15950 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   158ec:	00800074 	movhi	r2,1
   158f0:	1099a804 	addi	r2,r2,26272
   158f4:	e0fffd17 	ldw	r3,-12(fp)
   158f8:	18c00324 	muli	r3,r3,12
   158fc:	10c5883a 	add	r2,r2,r3
   15900:	10800017 	ldw	r2,0(r2)
   15904:	10000f1e 	bne	r2,zero,15944 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   15908:	00800074 	movhi	r2,1
   1590c:	1099a804 	addi	r2,r2,26272
   15910:	e0fffd17 	ldw	r3,-12(fp)
   15914:	18c00324 	muli	r3,r3,12
   15918:	10c5883a 	add	r2,r2,r3
   1591c:	e0ffff17 	ldw	r3,-4(fp)
   15920:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15924:	d0e00917 	ldw	r3,-32732(gp)
   15928:	e0bffd17 	ldw	r2,-12(fp)
   1592c:	1880020e 	bge	r3,r2,15938 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   15930:	e0bffd17 	ldw	r2,-12(fp)
   15934:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
   15938:	e0bffd17 	ldw	r2,-12(fp)
   1593c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15940:	00000606 	br	1595c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15944:	e0bffd17 	ldw	r2,-12(fp)
   15948:	10800044 	addi	r2,r2,1
   1594c:	e0bffd15 	stw	r2,-12(fp)
   15950:	e0bffd17 	ldw	r2,-12(fp)
   15954:	10800810 	cmplti	r2,r2,32
   15958:	103fe41e 	bne	r2,zero,158ec <_gp+0xffff606c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1595c:	e0bffe17 	ldw	r2,-8(fp)
}
   15960:	e037883a 	mov	sp,fp
   15964:	df000017 	ldw	fp,0(sp)
   15968:	dec00104 	addi	sp,sp,4
   1596c:	f800283a 	ret

00015970 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   15970:	defffb04 	addi	sp,sp,-20
   15974:	df000415 	stw	fp,16(sp)
   15978:	df000404 	addi	fp,sp,16
   1597c:	e13ffe15 	stw	r4,-8(fp)
   15980:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   15984:	e0bfff17 	ldw	r2,-4(fp)
   15988:	10820070 	cmpltui	r2,r2,2049
   1598c:	1000021e 	bne	r2,zero,15998 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   15990:	00820004 	movi	r2,2048
   15994:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   15998:	e0fffe17 	ldw	r3,-8(fp)
   1599c:	e0bfff17 	ldw	r2,-4(fp)
   159a0:	1885883a 	add	r2,r3,r2
   159a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   159a8:	e0bffe17 	ldw	r2,-8(fp)
   159ac:	e0bffc15 	stw	r2,-16(fp)
   159b0:	00000506 	br	159c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   159b4:	e0bffc17 	ldw	r2,-16(fp)
   159b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   159bc:	e0bffc17 	ldw	r2,-16(fp)
   159c0:	10800804 	addi	r2,r2,32
   159c4:	e0bffc15 	stw	r2,-16(fp)
   159c8:	e0fffc17 	ldw	r3,-16(fp)
   159cc:	e0bffd17 	ldw	r2,-12(fp)
   159d0:	18bff836 	bltu	r3,r2,159b4 <_gp+0xffff6134>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   159d4:	e0bffe17 	ldw	r2,-8(fp)
   159d8:	108007cc 	andi	r2,r2,31
   159dc:	10000226 	beq	r2,zero,159e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   159e0:	e0bffc17 	ldw	r2,-16(fp)
   159e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   159e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   159ec:	0001883a 	nop
   159f0:	e037883a 	mov	sp,fp
   159f4:	df000017 	ldw	fp,0(sp)
   159f8:	dec00104 	addi	sp,sp,4
   159fc:	f800283a 	ret

00015a00 <atexit>:
   15a00:	200b883a 	mov	r5,r4
   15a04:	000f883a 	mov	r7,zero
   15a08:	000d883a 	mov	r6,zero
   15a0c:	0009883a 	mov	r4,zero
   15a10:	0015ac81 	jmpi	15ac8 <__register_exitproc>

00015a14 <exit>:
   15a14:	defffe04 	addi	sp,sp,-8
   15a18:	000b883a 	mov	r5,zero
   15a1c:	dc000015 	stw	r16,0(sp)
   15a20:	dfc00115 	stw	ra,4(sp)
   15a24:	2021883a 	mov	r16,r4
   15a28:	0015be00 	call	15be0 <__call_exitprocs>
   15a2c:	00800074 	movhi	r2,1
   15a30:	109e2104 	addi	r2,r2,30852
   15a34:	11000017 	ldw	r4,0(r2)
   15a38:	20800f17 	ldw	r2,60(r4)
   15a3c:	10000126 	beq	r2,zero,15a44 <exit+0x30>
   15a40:	103ee83a 	callr	r2
   15a44:	8009883a 	mov	r4,r16
   15a48:	0015d600 	call	15d60 <_exit>

00015a4c <memcmp>:
   15a4c:	01c000c4 	movi	r7,3
   15a50:	3980192e 	bgeu	r7,r6,15ab8 <memcmp+0x6c>
   15a54:	2144b03a 	or	r2,r4,r5
   15a58:	11c4703a 	and	r2,r2,r7
   15a5c:	10000f26 	beq	r2,zero,15a9c <memcmp+0x50>
   15a60:	20800003 	ldbu	r2,0(r4)
   15a64:	28c00003 	ldbu	r3,0(r5)
   15a68:	10c0151e 	bne	r2,r3,15ac0 <memcmp+0x74>
   15a6c:	31bfff84 	addi	r6,r6,-2
   15a70:	01ffffc4 	movi	r7,-1
   15a74:	00000406 	br	15a88 <memcmp+0x3c>
   15a78:	20800003 	ldbu	r2,0(r4)
   15a7c:	28c00003 	ldbu	r3,0(r5)
   15a80:	31bfffc4 	addi	r6,r6,-1
   15a84:	10c00e1e 	bne	r2,r3,15ac0 <memcmp+0x74>
   15a88:	21000044 	addi	r4,r4,1
   15a8c:	29400044 	addi	r5,r5,1
   15a90:	31fff91e 	bne	r6,r7,15a78 <_gp+0xffff61f8>
   15a94:	0005883a 	mov	r2,zero
   15a98:	f800283a 	ret
   15a9c:	20c00017 	ldw	r3,0(r4)
   15aa0:	28800017 	ldw	r2,0(r5)
   15aa4:	18bfee1e 	bne	r3,r2,15a60 <_gp+0xffff61e0>
   15aa8:	31bfff04 	addi	r6,r6,-4
   15aac:	21000104 	addi	r4,r4,4
   15ab0:	29400104 	addi	r5,r5,4
   15ab4:	39bff936 	bltu	r7,r6,15a9c <_gp+0xffff621c>
   15ab8:	303fe91e 	bne	r6,zero,15a60 <_gp+0xffff61e0>
   15abc:	003ff506 	br	15a94 <_gp+0xffff6214>
   15ac0:	10c5c83a 	sub	r2,r2,r3
   15ac4:	f800283a 	ret

00015ac8 <__register_exitproc>:
   15ac8:	defffa04 	addi	sp,sp,-24
   15acc:	dc000315 	stw	r16,12(sp)
   15ad0:	04000074 	movhi	r16,1
   15ad4:	841e2104 	addi	r16,r16,30852
   15ad8:	80c00017 	ldw	r3,0(r16)
   15adc:	dc400415 	stw	r17,16(sp)
   15ae0:	dfc00515 	stw	ra,20(sp)
   15ae4:	18805217 	ldw	r2,328(r3)
   15ae8:	2023883a 	mov	r17,r4
   15aec:	10003726 	beq	r2,zero,15bcc <__register_exitproc+0x104>
   15af0:	10c00117 	ldw	r3,4(r2)
   15af4:	010007c4 	movi	r4,31
   15af8:	20c00e16 	blt	r4,r3,15b34 <__register_exitproc+0x6c>
   15afc:	1a000044 	addi	r8,r3,1
   15b00:	8800221e 	bne	r17,zero,15b8c <__register_exitproc+0xc4>
   15b04:	18c00084 	addi	r3,r3,2
   15b08:	18c7883a 	add	r3,r3,r3
   15b0c:	18c7883a 	add	r3,r3,r3
   15b10:	12000115 	stw	r8,4(r2)
   15b14:	10c7883a 	add	r3,r2,r3
   15b18:	19400015 	stw	r5,0(r3)
   15b1c:	0005883a 	mov	r2,zero
   15b20:	dfc00517 	ldw	ra,20(sp)
   15b24:	dc400417 	ldw	r17,16(sp)
   15b28:	dc000317 	ldw	r16,12(sp)
   15b2c:	dec00604 	addi	sp,sp,24
   15b30:	f800283a 	ret
   15b34:	00800034 	movhi	r2,0
   15b38:	10800004 	addi	r2,r2,0
   15b3c:	10002626 	beq	r2,zero,15bd8 <__register_exitproc+0x110>
   15b40:	01006404 	movi	r4,400
   15b44:	d9400015 	stw	r5,0(sp)
   15b48:	d9800115 	stw	r6,4(sp)
   15b4c:	d9c00215 	stw	r7,8(sp)
   15b50:	00000000 	call	0 <__reset-0x10000>
   15b54:	d9400017 	ldw	r5,0(sp)
   15b58:	d9800117 	ldw	r6,4(sp)
   15b5c:	d9c00217 	ldw	r7,8(sp)
   15b60:	10001d26 	beq	r2,zero,15bd8 <__register_exitproc+0x110>
   15b64:	81000017 	ldw	r4,0(r16)
   15b68:	10000115 	stw	zero,4(r2)
   15b6c:	02000044 	movi	r8,1
   15b70:	22405217 	ldw	r9,328(r4)
   15b74:	0007883a 	mov	r3,zero
   15b78:	12400015 	stw	r9,0(r2)
   15b7c:	20805215 	stw	r2,328(r4)
   15b80:	10006215 	stw	zero,392(r2)
   15b84:	10006315 	stw	zero,396(r2)
   15b88:	883fde26 	beq	r17,zero,15b04 <_gp+0xffff6284>
   15b8c:	18c9883a 	add	r4,r3,r3
   15b90:	2109883a 	add	r4,r4,r4
   15b94:	1109883a 	add	r4,r2,r4
   15b98:	21802215 	stw	r6,136(r4)
   15b9c:	01800044 	movi	r6,1
   15ba0:	12406217 	ldw	r9,392(r2)
   15ba4:	30cc983a 	sll	r6,r6,r3
   15ba8:	4992b03a 	or	r9,r9,r6
   15bac:	12406215 	stw	r9,392(r2)
   15bb0:	21c04215 	stw	r7,264(r4)
   15bb4:	01000084 	movi	r4,2
   15bb8:	893fd21e 	bne	r17,r4,15b04 <_gp+0xffff6284>
   15bbc:	11006317 	ldw	r4,396(r2)
   15bc0:	218cb03a 	or	r6,r4,r6
   15bc4:	11806315 	stw	r6,396(r2)
   15bc8:	003fce06 	br	15b04 <_gp+0xffff6284>
   15bcc:	18805304 	addi	r2,r3,332
   15bd0:	18805215 	stw	r2,328(r3)
   15bd4:	003fc606 	br	15af0 <_gp+0xffff6270>
   15bd8:	00bfffc4 	movi	r2,-1
   15bdc:	003fd006 	br	15b20 <_gp+0xffff62a0>

00015be0 <__call_exitprocs>:
   15be0:	defff504 	addi	sp,sp,-44
   15be4:	df000915 	stw	fp,36(sp)
   15be8:	dd400615 	stw	r21,24(sp)
   15bec:	dc800315 	stw	r18,12(sp)
   15bf0:	dfc00a15 	stw	ra,40(sp)
   15bf4:	ddc00815 	stw	r23,32(sp)
   15bf8:	dd800715 	stw	r22,28(sp)
   15bfc:	dd000515 	stw	r20,20(sp)
   15c00:	dcc00415 	stw	r19,16(sp)
   15c04:	dc400215 	stw	r17,8(sp)
   15c08:	dc000115 	stw	r16,4(sp)
   15c0c:	d9000015 	stw	r4,0(sp)
   15c10:	2839883a 	mov	fp,r5
   15c14:	04800044 	movi	r18,1
   15c18:	057fffc4 	movi	r21,-1
   15c1c:	00800074 	movhi	r2,1
   15c20:	109e2104 	addi	r2,r2,30852
   15c24:	12000017 	ldw	r8,0(r2)
   15c28:	45005217 	ldw	r20,328(r8)
   15c2c:	44c05204 	addi	r19,r8,328
   15c30:	a0001c26 	beq	r20,zero,15ca4 <__call_exitprocs+0xc4>
   15c34:	a0800117 	ldw	r2,4(r20)
   15c38:	15ffffc4 	addi	r23,r2,-1
   15c3c:	b8000d16 	blt	r23,zero,15c74 <__call_exitprocs+0x94>
   15c40:	14000044 	addi	r16,r2,1
   15c44:	8421883a 	add	r16,r16,r16
   15c48:	8421883a 	add	r16,r16,r16
   15c4c:	84402004 	addi	r17,r16,128
   15c50:	a463883a 	add	r17,r20,r17
   15c54:	a421883a 	add	r16,r20,r16
   15c58:	e0001e26 	beq	fp,zero,15cd4 <__call_exitprocs+0xf4>
   15c5c:	80804017 	ldw	r2,256(r16)
   15c60:	e0801c26 	beq	fp,r2,15cd4 <__call_exitprocs+0xf4>
   15c64:	bdffffc4 	addi	r23,r23,-1
   15c68:	843fff04 	addi	r16,r16,-4
   15c6c:	8c7fff04 	addi	r17,r17,-4
   15c70:	bd7ff91e 	bne	r23,r21,15c58 <_gp+0xffff63d8>
   15c74:	00800034 	movhi	r2,0
   15c78:	10800004 	addi	r2,r2,0
   15c7c:	10000926 	beq	r2,zero,15ca4 <__call_exitprocs+0xc4>
   15c80:	a0800117 	ldw	r2,4(r20)
   15c84:	1000301e 	bne	r2,zero,15d48 <__call_exitprocs+0x168>
   15c88:	a0800017 	ldw	r2,0(r20)
   15c8c:	10003226 	beq	r2,zero,15d58 <__call_exitprocs+0x178>
   15c90:	a009883a 	mov	r4,r20
   15c94:	98800015 	stw	r2,0(r19)
   15c98:	00000000 	call	0 <__reset-0x10000>
   15c9c:	9d000017 	ldw	r20,0(r19)
   15ca0:	a03fe41e 	bne	r20,zero,15c34 <_gp+0xffff63b4>
   15ca4:	dfc00a17 	ldw	ra,40(sp)
   15ca8:	df000917 	ldw	fp,36(sp)
   15cac:	ddc00817 	ldw	r23,32(sp)
   15cb0:	dd800717 	ldw	r22,28(sp)
   15cb4:	dd400617 	ldw	r21,24(sp)
   15cb8:	dd000517 	ldw	r20,20(sp)
   15cbc:	dcc00417 	ldw	r19,16(sp)
   15cc0:	dc800317 	ldw	r18,12(sp)
   15cc4:	dc400217 	ldw	r17,8(sp)
   15cc8:	dc000117 	ldw	r16,4(sp)
   15ccc:	dec00b04 	addi	sp,sp,44
   15cd0:	f800283a 	ret
   15cd4:	a0800117 	ldw	r2,4(r20)
   15cd8:	80c00017 	ldw	r3,0(r16)
   15cdc:	10bfffc4 	addi	r2,r2,-1
   15ce0:	15c01426 	beq	r2,r23,15d34 <__call_exitprocs+0x154>
   15ce4:	80000015 	stw	zero,0(r16)
   15ce8:	183fde26 	beq	r3,zero,15c64 <_gp+0xffff63e4>
   15cec:	95c8983a 	sll	r4,r18,r23
   15cf0:	a0806217 	ldw	r2,392(r20)
   15cf4:	a5800117 	ldw	r22,4(r20)
   15cf8:	2084703a 	and	r2,r4,r2
   15cfc:	10000b26 	beq	r2,zero,15d2c <__call_exitprocs+0x14c>
   15d00:	a0806317 	ldw	r2,396(r20)
   15d04:	2088703a 	and	r4,r4,r2
   15d08:	20000c1e 	bne	r4,zero,15d3c <__call_exitprocs+0x15c>
   15d0c:	89400017 	ldw	r5,0(r17)
   15d10:	d9000017 	ldw	r4,0(sp)
   15d14:	183ee83a 	callr	r3
   15d18:	a0800117 	ldw	r2,4(r20)
   15d1c:	15bfbf1e 	bne	r2,r22,15c1c <_gp+0xffff639c>
   15d20:	98800017 	ldw	r2,0(r19)
   15d24:	153fcf26 	beq	r2,r20,15c64 <_gp+0xffff63e4>
   15d28:	003fbc06 	br	15c1c <_gp+0xffff639c>
   15d2c:	183ee83a 	callr	r3
   15d30:	003ff906 	br	15d18 <_gp+0xffff6498>
   15d34:	a5c00115 	stw	r23,4(r20)
   15d38:	003feb06 	br	15ce8 <_gp+0xffff6468>
   15d3c:	89000017 	ldw	r4,0(r17)
   15d40:	183ee83a 	callr	r3
   15d44:	003ff406 	br	15d18 <_gp+0xffff6498>
   15d48:	a0800017 	ldw	r2,0(r20)
   15d4c:	a027883a 	mov	r19,r20
   15d50:	1029883a 	mov	r20,r2
   15d54:	003fb606 	br	15c30 <_gp+0xffff63b0>
   15d58:	0005883a 	mov	r2,zero
   15d5c:	003ffb06 	br	15d4c <_gp+0xffff64cc>

00015d60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15d60:	defffd04 	addi	sp,sp,-12
   15d64:	df000215 	stw	fp,8(sp)
   15d68:	df000204 	addi	fp,sp,8
   15d6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15d70:	0001883a 	nop
   15d74:	e0bfff17 	ldw	r2,-4(fp)
   15d78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   15d7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15d80:	10000226 	beq	r2,zero,15d8c <_exit+0x2c>
    ALT_SIM_FAIL();
   15d84:	002af070 	cmpltui	zero,zero,43969
   15d88:	00000106 	br	15d90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   15d8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15d90:	003fff06 	br	15d90 <_gp+0xffff6510>
